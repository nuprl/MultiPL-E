language: swift
name: Swift
results:
- exit_code: 0
  program: "\n/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0)\
    \ == 1)\nassert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x:\
    \ 7, y: 5) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659991052
- exit_code: 1
  program: "\n/// Add two numbers x and y\n/// >>> add(2, 3)\n/// 5\n/// >>> add(5,\
    \ 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x +\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(x: 0, y: 1) == 1)\nassert(add(x: 1, y: 0) == 1)\n\
    assert(add(x: 2, y: 3) == 5)\nassert(add(x: 5, y: 7) == 12)\nassert(add(x: 7,\
    \ y: 5) == 12)"
  status: SyntaxError
  stderr: '/tmp/tmpeo6uuiuw.swift:9:1: error: expected expression after operator

    }

    ^

    '
  stdout: ''
  timestamp: 1659991052
