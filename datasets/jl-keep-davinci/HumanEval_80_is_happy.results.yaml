name: HumanEval_80_is_happy
language: julia
results:
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    n = length(s)\n    if n < 3\n        return\
    \ false\n    end\n    for i in 1:n-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    n = length(s)\n    if n < 3\n        return\
    \ false\n    end\n    for i in 1:n-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    n = length(s)\n    if n < 3\n        return\
    \ false\n    end\n    for i in 1:n-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i = 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    n = length(s)\n    if n < 3\n        return\
    \ false\n    end\n    for i in 1:n-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    return length(s) >= 3 && all(s[i] != s[i+1]\
    \ && s[i] != s[i+2] && s[i+1] != s[i+2] for i in 1:length(s)-2)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\
    \t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t\
    @test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"\
    xyy\") == false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"\
    iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    n = length(s)\n    if n < 3\n        return\
    \ false\n    end\n    for i in 1:n-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    return length(s) >= 3 && all(s[i] != s[i+1]\
    \ && s[i] != s[i+2] && s[i+1] != s[i+2] for i in 1:length(s)-2)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\
    \t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t\
    @test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"\
    xyy\") == false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"\
    iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    # Your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpt3ytum4t.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a\") == false\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Bool\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Ptr) where T<:Integer at pointer.jl:23\\n    ...\\\
    n  Stacktrace:\\n   [1] is_happy(::String) at /tmp/tmpt3ytum4t.jl:14\\n   [2]\
    \ top-level scope at /tmp/tmpt3ytum4t.jl:20\\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpt3ytum4t.jl:19\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpt3ytum4t.jl:21\\n  Test threw exception\\n  Expression: candidate(\"\
    aa\") == false\\n  MethodError: Cannot `convert` an object of type Nothing to\
    \ an object of type Bool\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\\n    ...\\n  Stacktrace:\\n   [1] is_happy(::String)\
    \ at /tmp/tmpt3ytum4t.jl:14\\n   [2] top-level scope at /tmp/tmpt3ytum4t.jl:21\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpt3ytum4t.jl:19\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpt3ytum4t.jl:22\\n  Test threw exception\\n  Expression: candidate(\"\
    abcd\") == true\\n  MethodError: Cannot `convert` an object of type Nothing to\
    \ an object of type Bool\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\\n    ...\\n  Stacktrace:\\n   [1] is_happy(::String)\
    \ at /tmp/tmpt3ytum4t.jl:14\\n   [2] top-level scope at /tmp/tmpt3ytum4t.jl:22\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpt3ytum4t.jl:19\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpt3ytum4t.jl:23\\n  Test threw exception\\n  Expression: candidate(\"\
    aabb\") == false\\n  MethodError: Cannot `convert` an object of type Nothing to\
    \ an object of type Bool\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\\n    ...\\n  Stacktrace:\\n   [1] is_happy(::String)\
    \ at /tmp/tmpt3ytum4t.jl:14\\n   [2] top-level scope at /tmp/tmpt3ytum4t.jl:23\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpt3ytum4t.jl:19\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpt3ytum4t.jl:24\\n  Test threw exception\\n  Expression: candidate(\"\
    adb\") == true\\n  MethodError: Cannot `convert` an object of type Nothing to\
    \ an object of type Bool\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\\n    ...\\n  Stacktrace:\\n   [1] is_happy(::String)\
    \ at /tmp/tmpt3ytum4t.jl:14\\n   [2] top-level scope at /tmp/tmpt3ytum4t.jl:24\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpt3ytum4t.jl:19\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpt3ytum4t.jl:25\\n  Test threw exception\\n  Expression: candidate(\"\
    xyy\") == false\\n  MethodError: Cannot `convert` an object of type Nothing to\
    \ an object of type Bool\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\\n    ...\\n  Stacktrace:\\n   [1] is_happy(::String)\
    \ at /tmp/tmpt3ytum4t.jl:14\\n   [2] top-level scope at /tmp/tmpt3ytum4t.jl:25\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpt3ytum4t.jl:19\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpt3ytum4t.jl:26\\n  Test threw exception\\n  Expression: candidate(\"\
    iopaxpoi\") == true\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Bool\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\\n    ...\\n  Stacktrace:\\n   [1] is_happy(::String)\
    \ at /tmp/tmpt3ytum4t.jl:14\\n   [2] top-level scope at /tmp/tmpt3ytum4t.jl:26\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpt3ytum4t.jl:19\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpt3ytum4t.jl:27\\n  Test threw exception\\n  Expression: candidate(\"\
    iopaxioi\") == false\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Bool\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\\n    ...\\n  Stacktrace:\\n   [1] is_happy(::String)\
    \ at /tmp/tmpt3ytum4t.jl:14\\n   [2] top-level scope at /tmp/tmpt3ytum4t.jl:27\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpt3ytum4t.jl:19\\n  \\nTest Summary: | Error\
    \  Total\\ntest set      |     8      8\\n'"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    n = length(s)\n    if n < 3\n        return\
    \ false\n    end\n    for i in 1:n-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    n = length(s)\n    if n < 3\n        return\
    \ false\n    end\n    for i in 1:n-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    n = length(s)\n    if n < 3\n        return\
    \ false\n    end\n    for i in 1:n-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    n = length(s)\n    if n < 3\n        return\
    \ false\n    end\n    for i in 1:n-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    n = length(s)\n    if n < 3\n        return\
    \ false\n    end\n    for i in 1:n-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    for i in 1:length(s)-2\n        if s[i] == s[i+1]\
    \ || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpnnwel5ho.jl:25\\n  Expression: candidate(\"\
    a\") == false\\n   Evaluated: true == false\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpnnwel5ho.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpnnwel5ho.jl:24\\ntest set: Test Failed at /tmp/tmpnnwel5ho.jl:26\\\
    n  Expression: candidate(\"aa\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpnnwel5ho.jl:26\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpnnwel5ho.jl:24\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    6     2      8\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    n = length(s)\n    if n < 3\n        return\
    \ false\n    end\n    for i in 1:n-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is happy or not.\n    A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n\
    \    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) =>\
    \ False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\nfunction\
    \ is_happy(s::String)::Bool \n    if length(s) < 3\n        return false\n   \
    \ end\n    for i in 1:length(s)-2\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\t@test(candidate(\"\
    a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"abcd\"\
    ) == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"adb\")\
    \ == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
