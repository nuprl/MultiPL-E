name: HumanEval_17_parse_music
language: julia
results:
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\n    # you can use split function to split string into a vector of substrings\n\
    \    # you can use parse_note function to parse each substring into a number of\
    \ beats\n    # you can use append! function to add elements to a vector\n    #\
    \ you can use length function to get the length of a vector\n    # you can use\
    \ push! function to add an element to the end of a vector\n    # you can use pop!\
    \ function to remove the last element of a vector\n    # you can use getindex\
    \ function to get an element of a vector\n    # you can use setindex! function\
    \ to set an element of a vector\n    # you can use isempty function to check if\
    \ a vector is empty\n    # you can use isequal function to check if two vectors\
    \ are equal\n    # you can use sort function to sort a vector\n    # you can use\
    \ sort! function to sort a vector in-place\n    # you can use == operator to check\
    \ if two vectors are equal\n    # you can use != operator to check if two vectors\
    \ are not equal\n    # you can use < operator to check if one vector is less than\
    \ another\n    # you can use <= operator to check if one vector is less than or\
    \ equal to another\n    # you can use > operator to check if one vector is greater\
    \ than another\n    # you can use >= operator to check if one vector is greater\
    \ than or equal to another\n    # you can use + operator to concatenate two vectors\n\
    \    # you can use * operator to repeat a vector\n    # you can use in operator\
    \ to check if an element is in a vector\n    # you can use findfirst function\
    \ to find the first index of an element in a vector\n    # you can use findnext\
    \ function to find the next index of an element in a vector\n    # you can use\
    \ findlast function to find the last index of an element in a vector\n    # you\
    \ can use findprev function to find the previous index of an element in a vector\n\
    \    # you can use eachindex function to iterate over all indices of a vector\n\
    \    # you can use eachindex function to iterate over all elements of a vector\n\
    \    # you can use eachindex function to iterate over all pairs of indices and\
    \ elements of a vector\n    # you can use map function to apply a function to\
    \ all elements of a vector\n    # you can use\nusing Test\n\n@testset begin\n\n\
    candidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphy_5prhv.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmphy_5prhv.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmphy_5prhv.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\n    notes = split(music_string, \" \")\n    beats = []\n    for note in\
    \ notes\n        if note == \"o\"\n            push!(beats, 4)\n        elseif\
    \ note == \"o|\"\n            push!(beats, 2)\n        elseif note == \".|\"\n\
    \            push!(beats, 1)\n        end\n    end\n    return beats\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ goes here\n    notes = split(music_string, \" \")\n    beats = []\n    for note\
    \ in notes\n        if note == \"o\"\n            push!(beats, 4)\n        elseif\
    \ note == \"o|\"\n            push!(beats, 2)\n        elseif note == \".|\"\n\
    \            push!(beats, 1)\n        end\n    end\n    return beats\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for i in music_string\n        if i == 'o'\n            push!(beats,\
    \ 4)\n        elseif i == 'o|'\n            push!(beats, 2)\n        elseif i\
    \ == '.|'\n            push!(beats, 1)\n        end\n    end\n    return beats\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid character literal\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmprcdub61o.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprcdub61o.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\n    return []\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjbsejqyt.jl:23\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n   Evaluated: Int64[] == [4, 4, 4, 4]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjbsejqyt.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjbsejqyt.jl:21\ntest set: Test Failed at /tmp/tmpjbsejqyt.jl:24\n\
    \  Expression: candidate(\".| .| .| .|\") == [1, 1, 1, 1]\n   Evaluated: Int64[]\
    \ == [1, 1, 1, 1]\nStacktrace:\n [1] top-level scope at /tmp/tmpjbsejqyt.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjbsejqyt.jl:21\ntest set: Test Failed at /tmp/tmpjbsejqyt.jl:25\n\
    \  Expression: candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n\
    \   Evaluated: Int64[] == [2, 2, 1, 1, 4, 4, 4, 4]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpjbsejqyt.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjbsejqyt.jl:21\ntest set: Test Failed at /tmp/tmpjbsejqyt.jl:26\n\
    \  Expression: candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n\
    \   Evaluated: Int64[] == [2, 1, 2, 1, 4, 2, 4, 2]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpjbsejqyt.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjbsejqyt.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjbsejqyt.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string, \" \")\n        if note == \"o\"\n \
    \           push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsxf2ve8h.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpsxf2ve8h.jl:15\n\
    \   [2] top-level scope at /tmp/tmpsxf2ve8h.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpsxf2ve8h.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpsxf2ve8h.jl:22\n  Test threw exception\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{Int64,1}\n  Closest candidates are:\n   \
    \ convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpsxf2ve8h.jl:15\n\
    \   [2] top-level scope at /tmp/tmpsxf2ve8h.jl:22\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpsxf2ve8h.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpsxf2ve8h.jl:23\n  Test threw exception\n  Expression: candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{Int64,1}\n  Closest candidates are:\n   \
    \ convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpsxf2ve8h.jl:15\n\
    \   [2] top-level scope at /tmp/tmpsxf2ve8h.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpsxf2ve8h.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpsxf2ve8h.jl:24\n  Test threw exception\n  Expression: candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpsxf2ve8h.jl:15\n\
    \   [2] top-level scope at /tmp/tmpsxf2ve8h.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpsxf2ve8h.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpsxf2ve8h.jl:25\n  Test threw exception\n  Expression: candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpsxf2ve8h.jl:15\n\
    \   [2] top-level scope at /tmp/tmpsxf2ve8h.jl:25\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpsxf2ve8h.jl:20\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsxf2ve8h.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\n    return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy777e11a.jl:22\n  Expression: candidate(\"\
    \") == Vector{Int64}([])\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpy777e11a.jl:22\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy777e11a.jl:21\ntest set: Test Failed at /tmp/tmpy777e11a.jl:23\n\
    \  Expression: candidate(\"o o o o\") == [4, 4, 4, 4]\n   Evaluated: [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4] == [4, 4, 4, 4]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpy777e11a.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy777e11a.jl:21\ntest set: Test Failed at /tmp/tmpy777e11a.jl:24\n\
    \  Expression: candidate(\".| .| .| .|\") == [1, 1, 1, 1]\n   Evaluated: [4, 2,\
    \ 1, 2, 2, 1, 1, 1, 1, 4, 4] == [1, 1, 1, 1]\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpy777e11a.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy777e11a.jl:21\ntest set: Test Failed at /tmp/tmpy777e11a.jl:25\n\
    \  Expression: candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n\
    \   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [2, 2, 1, 1, 4, 4, 4, 4]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpy777e11a.jl:25\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy777e11a.jl:21\ntest set: Test Failed at /tmp/tmpy777e11a.jl:26\n\
    \  Expression: candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n\
    \   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [2, 1, 2, 1, 4, 2, 4, 2]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpy777e11a.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy777e11a.jl:21\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy777e11a.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = split(music_string, \" \")\n    beats = []\n    for i in music_string\n  \
    \      if i == \"o\"\n            push!(beats, 4)\n        elseif i == \"o|\"\n\
    \            push!(beats, 2)\n        elseif i == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\n    return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq8x_wocy.jl:22\n  Expression: candidate(\"\
    \") == Vector{Int64}([])\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpq8x_wocy.jl:22\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq8x_wocy.jl:21\ntest set: Test Failed at /tmp/tmpq8x_wocy.jl:23\n\
    \  Expression: candidate(\"o o o o\") == [4, 4, 4, 4]\n   Evaluated: [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4] == [4, 4, 4, 4]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpq8x_wocy.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq8x_wocy.jl:21\ntest set: Test Failed at /tmp/tmpq8x_wocy.jl:24\n\
    \  Expression: candidate(\".| .| .| .|\") == [1, 1, 1, 1]\n   Evaluated: [4, 2,\
    \ 1, 2, 2, 1, 1, 1, 1, 4, 4] == [1, 1, 1, 1]\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpq8x_wocy.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq8x_wocy.jl:21\ntest set: Test Failed at /tmp/tmpq8x_wocy.jl:25\n\
    \  Expression: candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n\
    \   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [2, 2, 1, 1, 4, 4, 4, 4]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpq8x_wocy.jl:25\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq8x_wocy.jl:21\ntest set: Test Failed at /tmp/tmpq8x_wocy.jl:26\n\
    \  Expression: candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n\
    \   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [2, 1, 2, 1, 4, 2, 4, 2]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpq8x_wocy.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq8x_wocy.jl:21\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq8x_wocy.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string, \" \")\n        if note == \"o\"\n \
    \           push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\n    beats = []\n    for note in music_string\n        if note == 'o'\n\
    \            push!(beats, 4)\n        elseif note == 'o'\n            push!(beats,\
    \ 2)\n        elseif note == '.'\n            push!(beats, 1)\n        end\n \
    \   end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpljoqj_f5.jl:35\n  Expression: candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: [4, 4, 1, 1,\
    \ 4, 4, 4, 4] == [2, 2, 1, 1, 4, 4, 4, 4]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpljoqj_f5.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpljoqj_f5.jl:31\ntest set: Test Failed at /tmp/tmpljoqj_f5.jl:36\n\
    \  Expression: candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n\
    \   Evaluated: [4, 1, 4, 1, 4, 4, 4, 4] == [2, 1, 2, 1, 4, 2, 4, 2]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpljoqj_f5.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpljoqj_f5.jl:31\nTest Summary: | Pass  Fail  Total\n\
    test set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpljoqj_f5.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ goes here\n    return []\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpsg0fs91f.jl:23\\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\\n   Evaluated: Int64[] == [4, 4, 4, 4]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpsg0fs91f.jl:23\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpsg0fs91f.jl:21\\ntest set: Test Failed at /tmp/tmpsg0fs91f.jl:24\\\
    n  Expression: candidate(\".| .| .| .|\") == [1, 1, 1, 1]\\n   Evaluated: Int64[]\
    \ == [1, 1, 1, 1]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpsg0fs91f.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpsg0fs91f.jl:21\\ntest set: Test Failed at /tmp/tmpsg0fs91f.jl:25\\\
    n  Expression: candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\\\
    n   Evaluated: Int64[] == [2, 2, 1, 1, 4, 4, 4, 4]\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmpsg0fs91f.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpsg0fs91f.jl:21\\ntest set: Test Failed at /tmp/tmpsg0fs91f.jl:26\\\
    n  Expression: candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\\\
    n   Evaluated: Int64[] == [2, 1, 2, 1, 4, 2, 4, 2]\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmpsg0fs91f.jl:26\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpsg0fs91f.jl:21\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = replace(music_string, \"o\", \"4\")\n    music_string = replace(music_string,\
    \ \"o|\", \"2\")\n    music_string = replace(music_string, \".|\", \"1\")\n  \
    \  music_string = replace(music_string, \" \", \"\")\n    music_string = replace(music_string,\
    \ \"|\", \"\")\n    music_string = replace(music_string, \".\", \"\")\n    return\
    \ parse.(Int64, music_string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpjmyjzo2u.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == Vector{Int64}([])\\n  MethodError:\
    \ no method matching replace(::String, ::String, ::String)\\n  Closest candidates\
    \ are:\\n    replace(::String, !Matched::Pair{#s67,B} where B where #s67<:AbstractChar;\
    \ count) at strings/util.jl:421\\n    replace(::String, !Matched::Pair{#s64,B}\
    \ where B where #s64<:Union{Tuple{Vararg{AbstractChar,N} where N}, Set{#s61} where\
    \ #s61<:AbstractChar, AbstractArray{#s62,1} where #s62<:AbstractChar}; count)\
    \ at strings/util.jl:426\\n    replace(::String, !Matched::Pair; count) at strings/util.jl:433\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(::String) at /tmp/tmpjmyjzo2u.jl:14\\\
    n   [2] top-level scope at /tmp/tmpjmyjzo2u.jl:27\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpjmyjzo2u.jl:26\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpjmyjzo2u.jl:28\\n  Test threw exception\\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\\n  MethodError: no method matching replace(::String,\
    \ ::String, ::String)\\n  Closest candidates are:\\n    replace(::String, !Matched::Pair{#s67,B}\
    \ where B where #s67<:AbstractChar; count) at strings/util.jl:421\\n    replace(::String,\
    \ !Matched::Pair{#s64,B} where B where #s64<:Union{Tuple{Vararg{AbstractChar,N}\
    \ where N}, Set{#s61} where #s61<:AbstractChar, AbstractArray{#s62,1} where #s62<:AbstractChar};\
    \ count) at strings/util.jl:426\\n    replace(::String, !Matched::Pair; count)\
    \ at strings/util.jl:433\\n    ...\\n  Stacktrace:\\n   [1] parse_music(::String)\
    \ at /tmp/tmpjmyjzo2u.jl:14\\n   [2] top-level scope at /tmp/tmpjmyjzo2u.jl:28\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpjmyjzo2u.jl:26\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpjmyjzo2u.jl:29\\n  Test threw exception\\n  Expression: candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1]\\n  MethodError: no method matching replace(::String,\
    \ ::String, ::String)\\n  Closest candidates are:\\n    replace(::String, !Matched::Pair{#s67,B}\
    \ where B where #s67<:AbstractChar; count) at strings/util.jl:421\\n    replace(::String,\
    \ !Matched::Pair{#s64,B} where B where #s64<:Union{Tuple{Vararg{AbstractChar,N}\
    \ where N}, Set{#s61} where #s61<:AbstractChar, AbstractArray{#s62,1} where #s62<:AbstractChar};\
    \ count) at strings/util.jl:426\\n    replace(::String, !Matched::Pair; count)\
    \ at strings/util.jl:433\\n    ...\\n  Stacktrace:\\n   [1] parse_music(::String)\
    \ at /tmp/tmpjmyjzo2u.jl:14\\n   [2] top-level scope at /tmp/tmpjmyjzo2u.jl:29\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpjmyjzo2u.jl:26\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpjmyjzo2u.jl:30\\n  Test threw exception\\n  Expression: candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\\n  MethodError: no method\
    \ matching replace(::String, ::String, ::String)\\n  Closest candidates are:\\\
    n    replace(::String, !Matched::Pair{#s67,B} where B where #s67<:AbstractChar;\
    \ count) at strings/util.jl:421\\n    replace(::String, !Matched::Pair{#s64,B}\
    \ where B where #s64<:Union{Tuple{Vararg{AbstractChar,N} where N}, Set{#s61} where\
    \ #s61<:AbstractChar, AbstractArray{#s62,1} where #s62<:AbstractChar}; count)\
    \ at strings/util.jl:426\\n    replace(::String, !Matched::Pair; count) at strings/util.jl:433\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(::String) at /tmp/tmpjmyjzo2u.jl:14\\\
    n   [2] top-level scope at /tmp/tmpjmyjzo2u.jl:30\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpjmyjzo2u.jl:26\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpjmyjzo2u.jl:31\\n  Test threw exception\\n  Expression: candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\\n  MethodError: no method\
    \ matching replace(::String, ::String, ::String)\\n  Closest candidates are:\\\
    n    replace(::String, !Matched::Pair{#s67,B} where B where #s67<:AbstractChar;\
    \ count) at strings/util.jl:421\\n    replace(::String, !Matched::Pair{#s64,B}\
    \ where B where #s64<:Union{Tuple{Vararg{AbstractChar,N} where N}, Set{#s61} where\
    \ #s61<:AbstractChar, AbstractArray{#s62,1} where #s62<:AbstractChar}; count)\
    \ at strings/util.jl:426\\n    replace(::String, !Matched::Pair; count) at strings/util.jl:433\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(::String) at /tmp/tmpjmyjzo2u.jl:14\\\
    n   [2] top-level scope at /tmp/tmpjmyjzo2u.jl:31\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpjmyjzo2u.jl:26\\n  \\nTest Summary: | Error\
    \  Total\\ntest set      |     5  '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = replace(music_string, \"o|\", \"o\")\n    music_string = replace(music_string,\
    \ \".|\", \".\")\n    music_string = replace(music_string, \"o\", \"4\")\n   \
    \ music_string = replace(music_string, \".\", \"1\")\n    music_string = split(music_string,\
    \ \" \")\n    music_string = parse.(Int64, music_string)\n    return music_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwoz8_t3j.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  MethodError: no method\
    \ matching replace(::String, ::String, ::String)\n  Closest candidates are:\n\
    \    replace(::String, !Matched::Pair{#s67,B} where B where #s67<:AbstractChar;\
    \ count) at strings/util.jl:421\n    replace(::String, !Matched::Pair{#s64,B}\
    \ where B where #s64<:Union{Tuple{Vararg{AbstractChar,N} where N}, Set{#s61} where\
    \ #s61<:AbstractChar, AbstractArray{#s62,1} where #s62<:AbstractChar}; count)\
    \ at strings/util.jl:426\n    replace(::String, !Matched::Pair; count) at strings/util.jl:433\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpwoz8_t3j.jl:14\n\
    \   [2] top-level scope at /tmp/tmpwoz8_t3j.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpwoz8_t3j.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmpwoz8_t3j.jl:28\n  Test threw exception\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n  MethodError: no method matching replace(::String,\
    \ ::String, ::String)\n  Closest candidates are:\n    replace(::String, !Matched::Pair{#s67,B}\
    \ where B where #s67<:AbstractChar; count) at strings/util.jl:421\n    replace(::String,\
    \ !Matched::Pair{#s64,B} where B where #s64<:Union{Tuple{Vararg{AbstractChar,N}\
    \ where N}, Set{#s61} where #s61<:AbstractChar, AbstractArray{#s62,1} where #s62<:AbstractChar};\
    \ count) at strings/util.jl:426\n    replace(::String, !Matched::Pair; count)\
    \ at strings/util.jl:433\n    ...\n  Stacktrace:\n   [1] parse_music(::String)\
    \ at /tmp/tmpwoz8_t3j.jl:14\n   [2] top-level scope at /tmp/tmpwoz8_t3j.jl:28\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpwoz8_t3j.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmpwoz8_t3j.jl:29\n  Test threw exception\n  Expression: candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1]\n  MethodError: no method matching replace(::String,\
    \ ::String, ::String)\n  Closest candidates are:\n    replace(::String, !Matched::Pair{#s67,B}\
    \ where B where #s67<:AbstractChar; count) at strings/util.jl:421\n    replace(::String,\
    \ !Matched::Pair{#s64,B} where B where #s64<:Union{Tuple{Vararg{AbstractChar,N}\
    \ where N}, Set{#s61} where #s61<:AbstractChar, AbstractArray{#s62,1} where #s62<:AbstractChar};\
    \ count) at strings/util.jl:426\n    replace(::String, !Matched::Pair; count)\
    \ at strings/util.jl:433\n    ...\n  Stacktrace:\n   [1] parse_music(::String)\
    \ at /tmp/tmpwoz8_t3j.jl:14\n   [2] top-level scope at /tmp/tmpwoz8_t3j.jl:29\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpwoz8_t3j.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmpwoz8_t3j.jl:30\n  Test threw exception\n  Expression: candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n  MethodError: no method matching\
    \ replace(::String, ::String, ::String)\n  Closest candidates are:\n    replace(::String,\
    \ !Matched::Pair{#s67,B} where B where #s67<:AbstractChar; count) at strings/util.jl:421\n\
    \    replace(::String, !Matched::Pair{#s64,B} where B where #s64<:Union{Tuple{Vararg{AbstractChar,N}\
    \ where N}, Set{#s61} where #s61<:AbstractChar, AbstractArray{#s62,1} where #s62<:AbstractChar};\
    \ count) at strings/util.jl:426\n    replace(::String, !Matched::Pair; count)\
    \ at strings/util.jl:433\n    ...\n  Stacktrace:\n   [1] parse_music(::String)\
    \ at /tmp/tmpwoz8_t3j.jl:14\n   [2] top-level scope at /tmp/tmpwoz8_t3j.jl:30\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpwoz8_t3j.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmpwoz8_t3j.jl:31\n  Test threw exception\n  Expression: candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n  MethodError: no method\
    \ matching replace(::String, ::String, ::String)\n  Closest candidates are:\n\
    \    replace(::String, !Matched::Pair{#s67,B} where B where #s67<:AbstractChar;\
    \ count) at strings/util.jl:421\n    replace(::String, !Matched::Pair{#s64,B}\
    \ where B where #s64<:Union{Tuple{Vararg{AbstractChar,N} where N}, Set{#s61} where\
    \ #s61<:AbstractChar, AbstractArray{#s62,1} where #s62<:AbstractChar}; count)\
    \ at strings/util.jl:426\n    replace(::String, !Matched::Pair; count) at strings/util.jl:433\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpwoz8_t3j.jl:14\n\
    \   [2] top-level scope at /tmp/tmpwoz8_t3j.jl:31\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpwoz8_t3j.jl:26\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwoz8_t3j.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # YOUR CODE\
    \ HERE\n    # You can use the following function to convert a character to a number:\n\
    \    # parse(Int64, '1')\n    # parse(Int64, '2')\n    # ...\n    # parse(Int64,\
    \ '9')\n    # parse(Int64, '0')\n    #\n    # You can use the following function\
    \ to convert a number to a character:\n    # char(49)\n    # char(50)\n    # ...\n\
    \    # char(57)\n    # char(48)\n    #\n    # You can use the following function\
    \ to convert a character to an integer:\n    # int('1')\n    # int('2')\n    #\
    \ ...\n    # int('9')\n    # int('0')\n    #\n    # You can use the following\
    \ function to convert an integer to a character:\n    # chr(49)\n    # chr(50)\n\
    \    # ...\n    # chr(57)\n    # chr(48)\n    #\n    # You can use the following\
    \ function to convert a string to a list of characters:\n    # collect('123')\n\
    \    # collect('abc')\n    #\n    # You can use the following function to convert\
    \ a list of characters to a string:\n    # join(['1', '2', '3'])\n    # join(['a',\
    \ 'b', 'c'])\n    #\n    # You can use the following function to convert a string\
    \ to a list of integers:\n    # parse.(Int64, collect('123'))\n    # parse.(Int64,\
    \ collect('abc'))\n    #\n    # You can use the following function to convert\
    \ a list of integers to a string:\n    # join(map(char, [1, 2, 3]))\n    # join(map(char,\
    \ [97, 98, 99]))\n    #\n    # You can use the following function to convert a\
    \ list of integers to a list of characters:\n    # map(char, [1, 2, 3])\n    #\
    \ map(char, [97, 98, 99])\n    #\n    # You can use the following function to\
    \ convert a list of characters to a list of integers:\n    # map(int, ['1', '2',\n\
    using Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_lsjaklo.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp_lsjaklo.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp_lsjaklo.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string, \" \")\n        if note == \"o\"\n \
    \           push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # Your code\
    \ here\n    return []\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpphcyjp4h.jl:23\\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\\n   Evaluated: Int64[] == [4, 4, 4, 4]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpphcyjp4h.jl:23\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpphcyjp4h.jl:21\\ntest set: Test Failed at /tmp/tmpphcyjp4h.jl:24\\\
    n  Expression: candidate(\".| .| .| .|\") == [1, 1, 1, 1]\\n   Evaluated: Int64[]\
    \ == [1, 1, 1, 1]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpphcyjp4h.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpphcyjp4h.jl:21\\ntest set: Test Failed at /tmp/tmpphcyjp4h.jl:25\\\
    n  Expression: candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\\\
    n   Evaluated: Int64[] == [2, 2, 1, 1, 4, 4, 4, 4]\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmpphcyjp4h.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpphcyjp4h.jl:21\\ntest set: Test Failed at /tmp/tmpphcyjp4h.jl:26\\\
    n  Expression: candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\\\
    n   Evaluated: Int64[] == [2, 1, 2, 1, 4, 2, 4, 2]\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmpphcyjp4h.jl:26\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpphcyjp4h.jl:21\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string, \" \")\n        if note == \"o\"\n \
    \           push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string, \" \")\n        if note == \"o\"\n \
    \           push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string, \" \")\n        if note == \"o\"\n \
    \           push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\n    return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpj5eu2t4l.jl:22\\n  Expression: candidate(\"\
    \") == Vector{Int64}([])\\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] ==\
    \ Int64[]\\nStacktrace:'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\n    return []\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwcwbdvvn.jl:23\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n   Evaluated: Int64[] == [4, 4, 4, 4]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwcwbdvvn.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwcwbdvvn.jl:21\ntest set: Test Failed at /tmp/tmpwcwbdvvn.jl:24\n\
    \  Expression: candidate(\".| .| .| .|\") == [1, 1, 1, 1]\n   Evaluated: Int64[]\
    \ == [1, 1, 1, 1]\nStacktrace:\n [1] top-level scope at /tmp/tmpwcwbdvvn.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwcwbdvvn.jl:21\ntest set: Test Failed at /tmp/tmpwcwbdvvn.jl:25\n\
    \  Expression: candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n\
    \   Evaluated: Int64[] == [2, 2, 1, 1, 4, 4, 4, 4]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpwcwbdvvn.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwcwbdvvn.jl:21\ntest set: Test Failed at /tmp/tmpwcwbdvvn.jl:26\n\
    \  Expression: candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n\
    \   Evaluated: Int64[] == [2, 1, 2, 1, 4, 2, 4, 2]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpwcwbdvvn.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwcwbdvvn.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwcwbdvvn.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1iuzl9s2.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmp1iuzl9s2.jl:15\n\
    \   [2] top-level scope at /tmp/tmp1iuzl9s2.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp1iuzl9s2.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmp1iuzl9s2.jl:22\n  Test threw exception\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{Int64,1}\n  Closest candidates are:\n   \
    \ convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmp1iuzl9s2.jl:15\n\
    \   [2] top-level scope at /tmp/tmp1iuzl9s2.jl:22\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp1iuzl9s2.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmp1iuzl9s2.jl:23\n  Test threw exception\n  Expression: candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{Int64,1}\n  Closest candidates are:\n   \
    \ convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmp1iuzl9s2.jl:15\n\
    \   [2] top-level scope at /tmp/tmp1iuzl9s2.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp1iuzl9s2.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmp1iuzl9s2.jl:24\n  Test threw exception\n  Expression: candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmp1iuzl9s2.jl:15\n\
    \   [2] top-level scope at /tmp/tmp1iuzl9s2.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp1iuzl9s2.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmp1iuzl9s2.jl:25\n  Test threw exception\n  Expression: candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmp1iuzl9s2.jl:15\n\
    \   [2] top-level scope at /tmp/tmp1iuzl9s2.jl:25\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp1iuzl9s2.jl:20\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1iuzl9s2.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\n    # hint: you can use split(music_string, ' ') to get a list of notes\n\
    \    # hint: you can use findfirst(x -> x == 'o', note) to find the position of\
    \ 'o' in a note\n    # hint: you can use findfirst(x -> x == '|', note) to find\
    \ the position of '|' in a note\n    # hint: you can use findfirst(x -> x == '.',\
    \ note) to find the position of '.' in a note\n    # hint: you can use findfirst(x\
    \ -> x == 'o', note) == nothing to check if a note contains 'o'\n    # hint: you\
    \ can use findfirst(x -> x == '|', note) == nothing to check if a note contains\
    \ '|'\n    # hint: you can use findfirst(x -> x == '.', note) == nothing to check\
    \ if a note contains '.'\n    # hint: you can use push!(result, 4) to add 4 to\
    \ the result\n    # hint: you can use push!(result, 2) to add 2 to the result\n\
    \    # hint: you can use push!(result, 1) to add 1 to the result\n    # hint:\
    \ you can use return result to return the result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpei5sxnng.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpei5sxnng.jl:26\n\
    \   [2] top-level scope at /tmp/tmpei5sxnng.jl:32\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpei5sxnng.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmpei5sxnng.jl:33\n  Test threw exception\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{Int64,1}\n  Closest candidates are:\n   \
    \ convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpei5sxnng.jl:26\n\
    \   [2] top-level scope at /tmp/tmpei5sxnng.jl:33\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpei5sxnng.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmpei5sxnng.jl:34\n  Test threw exception\n  Expression: candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{Int64,1}\n  Closest candidates are:\n   \
    \ convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpei5sxnng.jl:26\n\
    \   [2] top-level scope at /tmp/tmpei5sxnng.jl:34\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpei5sxnng.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmpei5sxnng.jl:35\n  Test threw exception\n  Expression: candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpei5sxnng.jl:26\n\
    \   [2] top-level scope at /tmp/tmpei5sxnng.jl:35\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpei5sxnng.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmpei5sxnng.jl:36\n  Test threw exception\n  Expression: candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpei5sxnng.jl:26\n\
    \   [2] top-level scope at /tmp/tmpei5sxnng.jl:36\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpei5sxnng.jl:31\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpei5sxnng.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\n    # Hint: use split() function to split the string into a list of notes\n\
    \    # Hint: use Dict to map note to its duration\n    # Hint: use parse() function\
    \ to convert string to integer\n    # Hint: use push!() function to add element\
    \ to the end of a list\n    # Hint: use append!() function to add element to the\
    \ end of a list\n    # Hint: use isempty() function to check if a list is empty\n\
    \    # Hint: use length() function to get the length of a list\n    # Hint: use\
    \ popfirst!() function to remove the first element of a list\n    # Hint: use\
    \ poplast!() function to remove the last element of a list\n    # Hint: use pushfirst!()\
    \ function to add element to the beginning of a list\n    # Hint: use pushlast!()\
    \ function to add element to the end of a list\n    # Hint: use reverse!() function\
    \ to reverse a list\n    # Hint: use shift!() function to remove the first element\
    \ of a list\n    # Hint: use unshift!() function to add element to the beginning\
    \ of a list\n    # Hint: use sort!() function to sort a list\n    # Hint: use\
    \ sort() function to sort a list\n    # Hint: use sortperm() function to sort\
    \ a list\n    # Hint: use sortperm!() function to sort a list\n    # Hint: use\
    \ splice!() function to remove elements from a list\n    # Hint: use split() function\
    \ to split a list\n    # Hint: use splitat() function to split a list\n    # Hint:\
    \ use splitat!() function to split a list\n    # Hint: use splice!() function\
    \ to remove elements from a list\n    # Hint: use splice!() function to remove\
    \ elements from a list\n    # Hint: use splice!() function to remove elements\
    \ from a list\n    # Hint: use splice!() function to remove elements from a list\n\
    \    # Hint: use splice!() function to remove elements from a list\n    # Hint:\
    \ use splice!() function to remove elements from a list\n    # Hint: use splice!()\
    \ function to remove\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnmq3l9jm.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpnmq3l9jm.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpnmq3l9jm.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, ' ')\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ goes here\n    notes = split(music_string, \" \")\n    beats = []\n    for note\
    \ in notes\n        if note == \"o\"\n            push!(beats, 4)\n        elseif\
    \ note == \"o|\"\n            push!(beats, 2)\n        elseif note == \".|\"\n\
    \            push!(beats, 1)\n        end\n    end\n    return beats\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string)\n        if note == \"o\"\n        \
    \    push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\n    beats = []\n    for i in music_string\n        if i == 'o'\n     \
    \       push!(beats, 4)\n        elseif i == 'o|'\n            push!(beats, 2)\n\
    \        elseif i == '.|'\n            push!(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid character literal\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpvbn_j8t7.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvbn_j8t7.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # Your code\
    \ here\n    notes = split(music_string, \" \")\n    beats = []\n    for note in\
    \ notes\n        if note == \"o\"\n            push!(beats, 4)\n        elseif\
    \ note == \"o|\"\n            push!(beats, 2)\n        elseif note == \".|\"\n\
    \            push!(beats, 1)\n        end\n    end\n    return beats\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # YOUR CODE\
    \ HERE\n    return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0bmib0md.jl:22\n  Expression: candidate(\"\
    \") == Vector{Int64}([])\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp0bmib0md.jl:22\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0bmib0md.jl:21\ntest set: Test Failed at /tmp/tmp0bmib0md.jl:23\n\
    \  Expression: candidate(\"o o o o\") == [4, 4, 4, 4]\n   Evaluated: [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4] == [4, 4, 4, 4]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp0bmib0md.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0bmib0md.jl:21\ntest set: Test Failed at /tmp/tmp0bmib0md.jl:24\n\
    \  Expression: candidate(\".| .| .| .|\") == [1, 1, 1, 1]\n   Evaluated: [4, 2,\
    \ 1, 2, 2, 1, 1, 1, 1, 4, 4] == [1, 1, 1, 1]\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp0bmib0md.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0bmib0md.jl:21\ntest set: Test Failed at /tmp/tmp0bmib0md.jl:25\n\
    \  Expression: candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n\
    \   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [2, 2, 1, 1, 4, 4, 4, 4]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp0bmib0md.jl:25\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0bmib0md.jl:21\ntest set: Test Failed at /tmp/tmp0bmib0md.jl:26\n\
    \  Expression: candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n\
    \   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [2, 1, 2, 1, 4, 2, 4, 2]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp0bmib0md.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0bmib0md.jl:21\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0bmib0md.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\n    return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpra3zn9r1.jl:22\\n  Expression: candidate(\"\
    \") == Vector{Int64}([])\\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] ==\
    \ Int64[]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpra3zn9r1.jl:22\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpra3zn9r1.jl:21\\ntest set: Test Failed at /tmp/tmpra3zn9r1.jl:23\\\
    n  Expression: candidate(\"o o o o\") == [4, 4, 4, 4]\\n   Evaluated: [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4] == [4, 4, 4, 4]\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpra3zn9r1.jl:23\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpra3zn9r1.jl:21\\ntest set: Test Failed at /tmp/tmpra3zn9r1.jl:24\\\
    n  Expression: candidate(\".| .| .| .|\") == [1, 1, 1, 1]\\n   Evaluated: [4,\
    \ 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [1, 1, 1, 1]\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmpra3zn9r1.jl:24\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpra3zn9r1.jl:21\\ntest set: Test Failed at /tmp/tmpra3zn9r1.jl:25\\\
    n  Expression: candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\\\
    n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [2, 2, 1, 1, 4, 4, 4, 4]\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpra3zn9r1.jl:25\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpra3zn9r1.jl:21\\ntest set: Test Failed at /tmp/tmpra3zn9r1.jl:26\\\
    n  Expression: candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\\\
    n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [2, 1, 2, 1, 4, 2, 4, 2]\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpra3zn9r1.jl:26\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpra3zn9r1.jl:21\\nTest Summary: | Fail  Total\\\
    ntest set      |    5      5\\n'"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppe0zevf7.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmppe0zevf7.jl:15\n\
    \   [2] top-level scope at /tmp/tmppe0zevf7.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmppe0zevf7.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmppe0zevf7.jl:22\n  Test threw exception\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{Int64,1}\n  Closest candidates are:\n   \
    \ convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmppe0zevf7.jl:15\n\
    \   [2] top-level scope at /tmp/tmppe0zevf7.jl:22\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmppe0zevf7.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmppe0zevf7.jl:23\n  Test threw exception\n  Expression: candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{Int64,1}\n  Closest candidates are:\n   \
    \ convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmppe0zevf7.jl:15\n\
    \   [2] top-level scope at /tmp/tmppe0zevf7.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmppe0zevf7.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmppe0zevf7.jl:24\n  Test threw exception\n  Expression: candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmppe0zevf7.jl:15\n\
    \   [2] top-level scope at /tmp/tmppe0zevf7.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmppe0zevf7.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmppe0zevf7.jl:25\n  Test threw exception\n  Expression: candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmppe0zevf7.jl:15\n\
    \   [2] top-level scope at /tmp/tmppe0zevf7.jl:25\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmppe0zevf7.jl:20\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppe0zevf7.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvsrj_jmb.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpvsrj_jmb.jl:15\n\
    \   [2] top-level scope at /tmp/tmpvsrj_jmb.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpvsrj_jmb.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpvsrj_jmb.jl:22\n  Test threw exception\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{Int64,1}\n  Closest candidates are:\n   \
    \ convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpvsrj_jmb.jl:15\n\
    \   [2] top-level scope at /tmp/tmpvsrj_jmb.jl:22\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpvsrj_jmb.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpvsrj_jmb.jl:23\n  Test threw exception\n  Expression: candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{Int64,1}\n  Closest candidates are:\n   \
    \ convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpvsrj_jmb.jl:15\n\
    \   [2] top-level scope at /tmp/tmpvsrj_jmb.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpvsrj_jmb.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpvsrj_jmb.jl:24\n  Test threw exception\n  Expression: candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpvsrj_jmb.jl:15\n\
    \   [2] top-level scope at /tmp/tmpvsrj_jmb.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpvsrj_jmb.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpvsrj_jmb.jl:25\n  Test threw exception\n  Expression: candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpvsrj_jmb.jl:15\n\
    \   [2] top-level scope at /tmp/tmpvsrj_jmb.jl:25\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpvsrj_jmb.jl:20\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvsrj_jmb.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in music_string\n        if note == 'o'\n            push!(beats,\
    \ 4)\n        elseif note == 'o|'\n            push!(beats, 2)\n        elseif\
    \ note == '.|'\n            push!(beats, 1)\n        end\n    end\n    return\
    \ beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid character literal\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmps6kpamha.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmps6kpamha.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzv98trlj.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpzv98trlj.jl:15\n\
    \   [2] top-level scope at /tmp/tmpzv98trlj.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpzv98trlj.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpzv98trlj.jl:22\n  Test threw exception\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{Int64,1}\n  Closest candidates are:\n   \
    \ convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpzv98trlj.jl:15\n\
    \   [2] top-level scope at /tmp/tmpzv98trlj.jl:22\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpzv98trlj.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpzv98trlj.jl:23\n  Test threw exception\n  Expression: candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{Int64,1}\n  Closest candidates are:\n   \
    \ convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpzv98trlj.jl:15\n\
    \   [2] top-level scope at /tmp/tmpzv98trlj.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpzv98trlj.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpzv98trlj.jl:24\n  Test threw exception\n  Expression: candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpzv98trlj.jl:15\n\
    \   [2] top-level scope at /tmp/tmpzv98trlj.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpzv98trlj.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpzv98trlj.jl:25\n  Test threw exception\n  Expression: candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpzv98trlj.jl:15\n\
    \   [2] top-level scope at /tmp/tmpzv98trlj.jl:25\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpzv98trlj.jl:20\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzv98trlj.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ goes here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpj7deor10.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == Vector{Int64}([])\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Array{Int64,1}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:533\\n    convert(::Type{T}, !Matched::T) where T<:AbstractArray\
    \ at abstractarray.jl:14\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(::String) at /tmp/tmpj7deor10.jl:15\\\
    n   [2] top-level scope at /tmp/tmpj7deor10.jl:21\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpj7deor10.jl:20\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpj7deor10.jl:22\\n  Test threw exception\\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{Int64,1}\\n  Closest candidates are:\\n \
    \   convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(::String) at /tmp/tmpj7deor10.jl:15\\\
    n   [2] top-level scope at /tmp/tmpj7deor10.jl:22\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpj7deor10.jl:20\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpj7deor10.jl:23\\n  Test threw exception\\n  Expression: candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1]\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Array{Int64,1}\\n  Closest candidates are:\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(::String) at /tmp/tmpj7deor10.jl:15\\\
    n   [2] top-level scope at /tmp/tmpj7deor10.jl:23\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpj7deor10.jl:20\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpj7deor10.jl:24\\n  Test threw exception\\n  Expression: candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(::String) at /tmp/tmpj7deor10.jl:15\\\
    n   [2] top-level scope at /tmp/tmpj7deor10.jl:24\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpj7deor10.jl:20\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpj7deor10.jl:25\\n  Test threw exception\\n  Expression: candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(::String) at /tmp/tmpj7deor10.jl:15\\\
    n   [2] top-level scope at /tmp/tmpj7deor10.jl:25\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpj7deor10.jl:20\\n  \\nTest Summary: | Error\
    \  Total\\ntest set      |     5      5\\n'"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string, \" \")\n        if note == \"o\"\n \
    \           push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpi9ox2z6m.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpi9ox2z6m.jl:15\n\
    \   [2] top-level scope at /tmp/tmpi9ox2z6m.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpi9ox2z6m.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpi9ox2z6m.jl:22\n  Test threw exception\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{Int64,1}\n  Closest candidates are:\n   \
    \ convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpi9ox2z6m.jl:15\n\
    \   [2] top-level scope at /tmp/tmpi9ox2z6m.jl:22\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpi9ox2z6m.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpi9ox2z6m.jl:23\n  Test threw exception\n  Expression: candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{Int64,1}\n  Closest candidates are:\n   \
    \ convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpi9ox2z6m.jl:15\n\
    \   [2] top-level scope at /tmp/tmpi9ox2z6m.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpi9ox2z6m.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpi9ox2z6m.jl:24\n  Test threw exception\n  Expression: candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpi9ox2z6m.jl:15\n\
    \   [2] top-level scope at /tmp/tmpi9ox2z6m.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpi9ox2z6m.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpi9ox2z6m.jl:25\n  Test threw exception\n  Expression: candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpi9ox2z6m.jl:15\n\
    \   [2] top-level scope at /tmp/tmpi9ox2z6m.jl:25\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpi9ox2z6m.jl:20\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi9ox2z6m.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string, \" \")\n        if note == \"o\"\n \
    \           push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ goes here\n    notes = split(music_string)\n    beats = []\n    for note in\
    \ notes\n        if note == \"o\"\n            push!(beats, 4)\n        elseif\
    \ note == \"o|\"\n            push!(beats, 2)\n        elseif note == \".|\"\n\
    \            push!(beats, 1)\n        end\n    end\n    return beats\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for i in music_string\n        if i == 'o'\n            push!(beats,\
    \ 4)\n        elseif i == 'o|'\n            push!(beats, 2)\n        elseif i\
    \ == '.|'\n            push!(beats, 1)\n        end\n    end\n    return beats\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid character literal\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpkemkebrx.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkemkebrx.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string, \" \")\n        if note == \"o\"\n \
    \           push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # Your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkcbgwvic.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpkcbgwvic.jl:15\n\
    \   [2] top-level scope at /tmp/tmpkcbgwvic.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpkcbgwvic.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpkcbgwvic.jl:22\n  Test threw exception\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{Int64,1}\n  Closest candidates are:\n   \
    \ convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpkcbgwvic.jl:15\n\
    \   [2] top-level scope at /tmp/tmpkcbgwvic.jl:22\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpkcbgwvic.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpkcbgwvic.jl:23\n  Test threw exception\n  Expression: candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{Int64,1}\n  Closest candidates are:\n   \
    \ convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpkcbgwvic.jl:15\n\
    \   [2] top-level scope at /tmp/tmpkcbgwvic.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpkcbgwvic.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpkcbgwvic.jl:24\n  Test threw exception\n  Expression: candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpkcbgwvic.jl:15\n\
    \   [2] top-level scope at /tmp/tmpkcbgwvic.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpkcbgwvic.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpkcbgwvic.jl:25\n  Test threw exception\n  Expression: candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpkcbgwvic.jl:15\n\
    \   [2] top-level scope at /tmp/tmpkcbgwvic.jl:25\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpkcbgwvic.jl:20\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkcbgwvic.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # Your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpps37oml2.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpps37oml2.jl:15\n\
    \   [2] top-level scope at /tmp/tmpps37oml2.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpps37oml2.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpps37oml2.jl:22\n  Test threw exception\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{Int64,1}\n  Closest candidates are:\n   \
    \ convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpps37oml2.jl:15\n\
    \   [2] top-level scope at /tmp/tmpps37oml2.jl:22\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpps37oml2.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpps37oml2.jl:23\n  Test threw exception\n  Expression: candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{Int64,1}\n  Closest candidates are:\n   \
    \ convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpps37oml2.jl:15\n\
    \   [2] top-level scope at /tmp/tmpps37oml2.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpps37oml2.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpps37oml2.jl:24\n  Test threw exception\n  Expression: candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpps37oml2.jl:15\n\
    \   [2] top-level scope at /tmp/tmpps37oml2.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpps37oml2.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpps37oml2.jl:25\n  Test threw exception\n  Expression: candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpps37oml2.jl:15\n\
    \   [2] top-level scope at /tmp/tmpps37oml2.jl:25\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpps37oml2.jl:20\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpps37oml2.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # Your code\
    \ here\n    # You can use the following code to split the string into a vector\
    \ of characters\n    # chars = split(music_string, \"\")\n    # You can use the\
    \ following code to convert a character to an integer\n    # int(chars[1])\nend\n\
    using Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpb5xts_d5.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpb5xts_d5.jl:19\n\
    \   [2] top-level scope at /tmp/tmpb5xts_d5.jl:25\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpb5xts_d5.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpb5xts_d5.jl:26\n  Test threw exception\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{Int64,1}\n  Closest candidates are:\n   \
    \ convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpb5xts_d5.jl:19\n\
    \   [2] top-level scope at /tmp/tmpb5xts_d5.jl:26\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpb5xts_d5.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpb5xts_d5.jl:27\n  Test threw exception\n  Expression: candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{Int64,1}\n  Closest candidates are:\n   \
    \ convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpb5xts_d5.jl:19\n\
    \   [2] top-level scope at /tmp/tmpb5xts_d5.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpb5xts_d5.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpb5xts_d5.jl:28\n  Test threw exception\n  Expression: candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpb5xts_d5.jl:19\n\
    \   [2] top-level scope at /tmp/tmpb5xts_d5.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpb5xts_d5.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpb5xts_d5.jl:29\n  Test threw exception\n  Expression: candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpb5xts_d5.jl:19\n\
    \   [2] top-level scope at /tmp/tmpb5xts_d5.jl:29\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpb5xts_d5.jl:24\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb5xts_d5.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string, ' ')\n        if note == 'o'\n     \
    \       push!(beats, 4)\n        elseif note == 'o|'\n            push!(beats,\
    \ 2)\n        elseif note == '.|'\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid character literal\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpk90wru2n.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpk90wru2n.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\n    # hint: you can use split(music_string, \" \") to get a list of notes\n\
    \    # and then use a dictionary to map from note to number of beats\n    # you\
    \ can also use a dictionary to map from note to a tuple of number of beats and\
    \ note name\n    # and then use the note name to print out the notes in a nice\
    \ format\n    # you can also use a dictionary to map from note to a tuple of number\
    \ of beats and note name\n    # and then use the note name to print out the notes\
    \ in a nice format\n    # you can also use a dictionary to map from note to a\
    \ tuple of number of beats and note name\n    # and then use the note name to\
    \ print out the notes in a nice format\n    # you can also use a dictionary to\
    \ map from note to a tuple of number of beats and note name\n    # and then use\
    \ the note name to print out the notes in a nice format\n    # you can also use\
    \ a dictionary to map from note to a tuple of number of beats and note name\n\
    \    # and then use the note name to print out the notes in a nice format\n  \
    \  # you can also use a dictionary to map from note to a tuple of number of beats\
    \ and note name\n    # and then use the note name to print out the notes in a\
    \ nice format\n    # you can also use a dictionary to map from note to a tuple\
    \ of number of beats and note name\n    # and then use the note name to print\
    \ out the notes in a nice format\n    # you can also use a dictionary to map from\
    \ note to a tuple of number of beats and note name\n    # and then use the note\
    \ name to print out the notes in a nice format\n    # you can also use a dictionary\
    \ to map from note to a tuple of number of beats and note name\n    # and then\
    \ use the note name to print out the notes in a nice format\n    # you can also\
    \ use a dictionary to map from note to a tuple of number of beats and note name\n\
    \    # and then use the note name to print out the notes in a nice format\n  \
    \  # you can also use a dictionary to map from note to a tuple of number of beats\
    \ and note name\n    # and then use the note name to print out the notes in a\
    \ nice format\n    # you can also use a dictionary to map from note to a tuple\n\
    using Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvhb65_vd.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpvhb65_vd.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpvhb65_vd.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string, \" \")\n        if note == \"o\"\n \
    \           push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\n    return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr_piuhhg.jl:22\n  Expression: candidate(\"\
    \") == Vector{Int64}([])\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpr_piuhhg.jl:22\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr_piuhhg.jl:21\ntest set: Test Failed at /tmp/tmpr_piuhhg.jl:23\n\
    \  Expression: candidate(\"o o o o\") == [4, 4, 4, 4]\n   Evaluated: [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4] == [4, 4, 4, 4]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpr_piuhhg.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr_piuhhg.jl:21\ntest set: Test Failed at /tmp/tmpr_piuhhg.jl:24\n\
    \  Expression: candidate(\".| .| .| .|\") == [1, 1, 1, 1]\n   Evaluated: [4, 2,\
    \ 1, 2, 2, 1, 1, 1, 1, 4, 4] == [1, 1, 1, 1]\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpr_piuhhg.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr_piuhhg.jl:21\ntest set: Test Failed at /tmp/tmpr_piuhhg.jl:25\n\
    \  Expression: candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n\
    \   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [2, 2, 1, 1, 4, 4, 4, 4]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpr_piuhhg.jl:25\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr_piuhhg.jl:21\ntest set: Test Failed at /tmp/tmpr_piuhhg.jl:26\n\
    \  Expression: candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n\
    \   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [2, 1, 2, 1, 4, 2, 4, 2]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpr_piuhhg.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr_piuhhg.jl:21\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr_piuhhg.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # YOUR CODE\
    \ HERE\n    # You can use split(music_string, ' ') to split the string into a\
    \ vector of notes\n    # You can use the length function to get the length of\
    \ the vector\n    # You can use the getindex function to get the value of a vector\
    \ at a particular index\n    # You can use the push! function to append to a vector\n\
    \    # You can use the parse function to convert a string to an integer\n    #\
    \ You can use the parse function to convert a string to a float\n    # You can\
    \ use the round function to round a float to the nearest integer\n    # You can\
    \ use the string function to convert an integer to a string\n    # You can use\
    \ the * operator to multiply a number by a vector\n    # You can use the + operator\
    \ to add two vectors\n    # You can use the append! function to append two vectors\n\
    \    # You can use the string function to convert an integer to a string\n   \
    \ # You can use the * operator to multiply a number by a vector\n    # You can\
    \ use the + operator to add two vectors\n    # You can use the append! function\
    \ to append two vectors\n    # You can use the string function to convert an integer\
    \ to a string\n    # You can use the * operator to multiply a number by a vector\n\
    \    # You can use the + operator to add two vectors\n    # You can use the append!\
    \ function to append two vectors\n    # You can use the string function to convert\
    \ an integer to a string\n    # You can use the * operator to multiply a number\
    \ by a vector\n    # You can use the + operator to add two vectors\n    # You\
    \ can use the append! function to append two vectors\n    # You can use the string\
    \ function to convert an integer to a string\n    # You can use the * operator\
    \ to multiply a number by a vector\n    # You can use the + operator to add two\
    \ vectors\n    # You can use the append! function to append two vectors\n    #\
    \ You can use the string function to convert an integer to a string\n    # You\
    \ can use the * operator to multiply a number by a vector\n    # You can use the\
    \ + operator to add two vectors\n    # You can use the append! function to append\
    \ two vectors\n    # You can use the string function to convert an integer to\
    \ a string\n    # You can use the * operator to multiply\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvzopm7za.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpvzopm7za.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpvzopm7za.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxdyfnrpe.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpxdyfnrpe.jl:15\n\
    \   [2] top-level scope at /tmp/tmpxdyfnrpe.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpxdyfnrpe.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpxdyfnrpe.jl:22\n  Test threw exception\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{Int64,1}\n  Closest candidates are:\n   \
    \ convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpxdyfnrpe.jl:15\n\
    \   [2] top-level scope at /tmp/tmpxdyfnrpe.jl:22\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpxdyfnrpe.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpxdyfnrpe.jl:23\n  Test threw exception\n  Expression: candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{Int64,1}\n  Closest candidates are:\n   \
    \ convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpxdyfnrpe.jl:15\n\
    \   [2] top-level scope at /tmp/tmpxdyfnrpe.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpxdyfnrpe.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpxdyfnrpe.jl:24\n  Test threw exception\n  Expression: candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpxdyfnrpe.jl:15\n\
    \   [2] top-level scope at /tmp/tmpxdyfnrpe.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpxdyfnrpe.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpxdyfnrpe.jl:25\n  Test threw exception\n  Expression: candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpxdyfnrpe.jl:15\n\
    \   [2] top-level scope at /tmp/tmpxdyfnrpe.jl:25\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpxdyfnrpe.jl:20\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxdyfnrpe.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # Your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpppv3cn22.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == Vector{Int64}([])\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Array{Int64,1}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:533\\n    convert(::Type{T}, !Matched::T) where T<:AbstractArray\
    \ at abstractarray.jl:14\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(::String) at /tmp/tmpppv3cn22.jl:15\\\
    n   [2] top-level scope at /tmp/tmpppv3cn22.jl:21\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpppv3cn22.jl:20\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpppv3cn22.jl:22\\n  Test threw exception\\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{Int64,1}\\n  Closest candidates are:\\n \
    \   convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(::String) at /tmp/tmpppv3cn22.jl:15\\\
    n   [2] top-level scope at /tmp/tmpppv3cn22.jl:22\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpppv3cn22.jl:20\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpppv3cn22.jl:23\\n  Test threw exception\\n  Expression: candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1]\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Array{Int64,1}\\n  Closest candidates are:\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(::String) at /tmp/tmpppv3cn22.jl:15\\\
    n   [2] top-level scope at /tmp/tmpppv3cn22.jl:23\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpppv3cn22.jl:20\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpppv3cn22.jl:24\\n  Test threw exception\\n  Expression: candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(::String) at /tmp/tmpppv3cn22.jl:15\\\
    n   [2] top-level scope at /tmp/tmpppv3cn22.jl:24\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpppv3cn22.jl:20\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpppv3cn22.jl:25\\n  Test threw exception\\n  Expression: candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(::String) at /tmp/tmpppv3cn22.jl:15\\\
    n   [2] top-level scope at /tmp/tmpppv3cn22.jl:25\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpppv3cn22.jl:20\\n  \\nTest Summary: | Error\
    \  Total\\ntest set      |     5      5\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ goes here\n    return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpu6hkvboz.jl:22\\n  Expression: candidate(\"\
    \") == Vector{Int64}([])\\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] ==\
    \ Int64[]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpu6hkvboz.jl:22\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpu6hkvboz.jl:21\\ntest set: Test Failed at /tmp/tmpu6hkvboz.jl:23\\\
    n  Expression: candidate(\"o o o o\") == [4, 4, 4, 4]\\n   Evaluated: [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4] == [4, 4, 4, 4]\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpu6hkvboz.jl:23\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpu6hkvboz.jl:21\\ntest set: Test Failed at /tmp/tmpu6hkvboz.jl:24\\\
    n  Expression: candidate(\".| .| .| .|\") == [1, 1, 1, 1]\\n   Evaluated: [4,\
    \ 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [1, 1, 1, 1]\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmpu6hkvboz.jl:24\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpu6hkvboz.jl:21\\ntest set: Test Failed at /tmp/tmpu6hkvboz.jl:25\\\
    n  Expression: candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\\\
    n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [2, 2, 1, 1, 4, 4, 4, 4]\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpu6hkvboz.jl:25\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpu6hkvboz.jl:21\\ntest set: Test Failed at /tmp/tmpu6hkvboz.jl:26\\\
    n  Expression: candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\\\
    n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [2, 1, 2, 1, 4, 2, 4, 2]\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpu6hkvboz.jl:26\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpu6hkvboz.jl:21\\nTest Summary: | Fail  Total\\\
    ntest set      |    5      5\\n'"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\n    return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpimw4ifod.jl:22\n  Expression: candidate(\"\
    \") == Vector{Int64}([])\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpimw4ifod.jl:22\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpimw4ifod.jl:21\ntest set: Test Failed at /tmp/tmpimw4ifod.jl:23\n\
    \  Expression: candidate(\"o o o o\") == [4, 4, 4, 4]\n   Evaluated: [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4] == [4, 4, 4, 4]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpimw4ifod.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpimw4ifod.jl:21\ntest set: Test Failed at /tmp/tmpimw4ifod.jl:24\n\
    \  Expression: candidate(\".| .| .| .|\") == [1, 1, 1, 1]\n   Evaluated: [4, 2,\
    \ 1, 2, 2, 1, 1, 1, 1, 4, 4] == [1, 1, 1, 1]\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpimw4ifod.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpimw4ifod.jl:21\ntest set: Test Failed at /tmp/tmpimw4ifod.jl:25\n\
    \  Expression: candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n\
    \   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [2, 2, 1, 1, 4, 4, 4, 4]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpimw4ifod.jl:25\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpimw4ifod.jl:21\ntest set: Test Failed at /tmp/tmpimw4ifod.jl:26\n\
    \  Expression: candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n\
    \   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [2, 1, 2, 1, 4, 2, 4, 2]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpimw4ifod.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpimw4ifod.jl:21\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpimw4ifod.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # Your code\
    \ here\n    return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcm43a8ec.jl:22\n  Expression: candidate(\"\
    \") == Vector{Int64}([])\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpcm43a8ec.jl:22\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcm43a8ec.jl:21\ntest set: Test Failed at /tmp/tmpcm43a8ec.jl:23\n\
    \  Expression: candidate(\"o o o o\") == [4, 4, 4, 4]\n   Evaluated: [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4] == [4, 4, 4, 4]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpcm43a8ec.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcm43a8ec.jl:21\ntest set: Test Failed at /tmp/tmpcm43a8ec.jl:24\n\
    \  Expression: candidate(\".| .| .| .|\") == [1, 1, 1, 1]\n   Evaluated: [4, 2,\
    \ 1, 2, 2, 1, 1, 1, 1, 4, 4] == [1, 1, 1, 1]\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpcm43a8ec.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcm43a8ec.jl:21\ntest set: Test Failed at /tmp/tmpcm43a8ec.jl:25\n\
    \  Expression: candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n\
    \   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [2, 2, 1, 1, 4, 4, 4, 4]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpcm43a8ec.jl:25\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcm43a8ec.jl:21\ntest set: Test Failed at /tmp/tmpcm43a8ec.jl:26\n\
    \  Expression: candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n\
    \   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [2, 1, 2, 1, 4, 2, 4, 2]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpcm43a8ec.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcm43a8ec.jl:21\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcm43a8ec.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ goes here\n    return []\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8imz483l.jl:23\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n   Evaluated: Int64[] == [4, 4, 4, 4]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8imz483l.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8imz483l.jl:21\ntest set: Test Failed at /tmp/tmp8imz483l.jl:24\n\
    \  Expression: candidate(\".| .| .| .|\") == [1, 1, 1, 1]\n   Evaluated: Int64[]\
    \ == [1, 1, 1, 1]\nStacktrace:\n [1] top-level scope at /tmp/tmp8imz483l.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8imz483l.jl:21\ntest set: Test Failed at /tmp/tmp8imz483l.jl:25\n\
    \  Expression: candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n\
    \   Evaluated: Int64[] == [2, 2, 1, 1, 4, 4, 4, 4]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp8imz483l.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8imz483l.jl:21\ntest set: Test Failed at /tmp/tmp8imz483l.jl:26\n\
    \  Expression: candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n\
    \   Evaluated: Int64[] == [2, 1, 2, 1, 4, 2, 4, 2]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp8imz483l.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8imz483l.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8imz483l.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string, ' ')\n        if note == 'o'\n     \
    \       push!(beats, 4)\n        elseif note == 'o|'\n            push!(beats,\
    \ 2)\n        elseif note == '.|'\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid character literal\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmprnt0w5ou.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprnt0w5ou.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for i in music_string\n        if i == 'o'\n            push!(beats,\
    \ 4)\n        elseif i == 'o|'\n            push!(beats, 2)\n        elseif i\
    \ == '.|'\n            push!(beats, 1)\n        end\n    end\n    return beats\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid character literal\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp2ezgamtz.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2ezgamtz.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string)\n    beats = []\n    for note in notes\n        if note\
    \ == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n     \
    \       push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string, \" \")\n        if note == \"o\"\n \
    \           push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ goes here\n    # you can use the following function to convert a character to\
    \ a number\n    # parse(Int64, 'o')\n    # parse(Int64, 'o|')\n    # parse(Int64,\
    \ '.|')\n    # parse(Int64, '.')\n    # parse(Int64, '|')\n    # parse(Int64,\
    \ ' ')\n    # parse(Int64, '\\n')\n    # parse(Int64, '\\t')\n    # parse(Int64,\
    \ '\\r')\n    # parse(Int64, '\\f')\n    # parse(Int64, '\\v')\n    # parse(Int64,\
    \ '\\b')\n    # parse(Int64, '\\a')\n    # parse(Int64, '\\0')\n    # parse(Int64,\
    \ '\\x1b')\n    # parse(Int64, '\\u263a')\n    # parse(Int64, '\\U0001f600')\n\
    \    # parse(Int64, '\\U0001f600')\n    # parse(Int64, '\\U0001f600')\n    # parse(Int64,\
    \ '\\U0001f600')\n    # parse(Int64, '\\U0001f600')\n    # parse(Int64, '\\U0001f600')\n\
    \    # parse(Int64, '\\U0001f600')\n    # parse(Int64, '\\U0001f600')\n    # parse(Int64,\
    \ '\\U0001f600')\n    # parse(Int64, '\\U0001f600')\n    # parse(Int64, '\\U0001f600')\n\
    \    # parse(Int64, '\\U0001f600')\n    # parse(Int64, '\\U0001f600')\n    # parse(Int64,\
    \ '\\U0001f600')\n    # parse(Int64, '\\U0001f600')\n    # parse(Int64, '\\U0001f600')\n\
    \    # parse(Int64, '\\U0001f600')\n    # parse(Int64, '\\U0001f600')\n    # parse(Int64,\
    \ '\\U0001f600')\n    # parse(Int64, '\\U0001f\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp85ixh5in.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp85ixh5in.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp85ixh5in.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # Your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmprsrct3o9.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == Vector{Int64}([])\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Array{Int64,1}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:533\\n    convert(::Type{T}, !Matched::T) where T<:AbstractArray\
    \ at abstractarray.jl:14\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(::String) at /tmp/tmprsrct3o9.jl:15\\\
    n   [2] top-level scope at /tmp/tmprsrct3o9.jl:21\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmprsrct3o9.jl:20\\n  \\ntest set: Error During\
    \ Test at /tmp/tmprsrct3o9.jl:22\\n  Test threw exception\\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{Int64,1}\\n  Closest candidates are:\\n \
    \   convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(::String) at /tmp/tmprsrct3o9.jl:15\\\
    n   [2] top-level scope at /tmp/tmprsrct3o9.jl:22\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmprsrct3o9.jl:20\\n  \\ntest set: Error During\
    \ Test at /tmp/tmprsrct3o9.jl:23\\n  Test threw exception\\n  Expression: candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1]\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Array{Int64,1}\\n  Closest candidates are:\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(::String) at /tmp/tmprsrct3o9.jl:15\\\
    n   [2] top-level scope at /tmp/tmprsrct3o9.jl:23\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmprsrct3o9.jl:20\\n  \\ntest set: Error During\
    \ Test at /tmp/tmprsrct3o9.jl:24\\n  Test threw exception\\n  Expression: candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(::String) at /tmp/tmprsrct3o9.jl:15\\\
    n   [2] top-level scope at /tmp/tmprsrct3o9.jl:24\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmprsrct3o9.jl:20\\n  \\ntest set: Error During\
    \ Test at /tmp/tmprsrct3o9.jl:25\\n  Test threw exception\\n  Expression: candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(::String) at /tmp/tmprsrct3o9.jl:15\\\
    n   [2] top-level scope at /tmp/tmprsrct3o9.jl:25\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmprsrct3o9.jl:20\\n  \\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string, \" \")\n        if note == \"o\"\n \
    \           push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string)\n        if note == \"o\"\n        \
    \    push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = split(music_string, \" \")\n    beats = []\n    for i in music_string\n  \
    \      if i == \"o\"\n            push!(beats, 4)\n        elseif i == \"o|\"\n\
    \            push!(beats, 2)\n        elseif i == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ goes here\n    notes = split(music_string, \" \")\n    beats = []\n    for note\
    \ in notes\n        if note == \"o\"\n            push!(beats, 4)\n        elseif\
    \ note == \"o|\"\n            push!(beats, 2)\n        elseif note == \".|\"\n\
    \            push!(beats, 1)\n        end\n    end\n    return beats\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string, \" \")\n        if note == \"o\"\n \
    \           push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphxqoid0p.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmphxqoid0p.jl:15\n\
    \   [2] top-level scope at /tmp/tmphxqoid0p.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmphxqoid0p.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmphxqoid0p.jl:22\n  Test threw exception\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{Int64,1}\n  Closest candidates are:\n   \
    \ convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmphxqoid0p.jl:15\n\
    \   [2] top-level scope at /tmp/tmphxqoid0p.jl:22\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmphxqoid0p.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmphxqoid0p.jl:23\n  Test threw exception\n  Expression: candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{Int64,1}\n  Closest candidates are:\n   \
    \ convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmphxqoid0p.jl:15\n\
    \   [2] top-level scope at /tmp/tmphxqoid0p.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmphxqoid0p.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmphxqoid0p.jl:24\n  Test threw exception\n  Expression: candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmphxqoid0p.jl:15\n\
    \   [2] top-level scope at /tmp/tmphxqoid0p.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmphxqoid0p.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmphxqoid0p.jl:25\n  Test threw exception\n  Expression: candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmphxqoid0p.jl:15\n\
    \   [2] top-level scope at /tmp/tmphxqoid0p.jl:25\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmphxqoid0p.jl:20\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphxqoid0p.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ goes here\n    return []\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf848ypka.jl:23\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n   Evaluated: Int64[] == [4, 4, 4, 4]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf848ypka.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpf848ypka.jl:21\ntest set: Test Failed at /tmp/tmpf848ypka.jl:24\n\
    \  Expression: candidate(\".| .| .| .|\") == [1, 1, 1, 1]\n   Evaluated: Int64[]\
    \ == [1, 1, 1, 1]\nStacktrace:\n [1] top-level scope at /tmp/tmpf848ypka.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpf848ypka.jl:21\ntest set: Test Failed at /tmp/tmpf848ypka.jl:25\n\
    \  Expression: candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n\
    \   Evaluated: Int64[] == [2, 2, 1, 1, 4, 4, 4, 4]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpf848ypka.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpf848ypka.jl:21\ntest set: Test Failed at /tmp/tmpf848ypka.jl:26\n\
    \  Expression: candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n\
    \   Evaluated: Int64[] == [2, 1, 2, 1, 4, 2, 4, 2]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpf848ypka.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpf848ypka.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf848ypka.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp6caon8ce.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == Vector{Int64}([])\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Array{Int64,1}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:533\\n    convert(::Type{T}, !Matched::T) where T<:AbstractArray\
    \ at abstractarray.jl:14\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(::String) at /tmp/tmp6caon8ce.jl:15\\\
    n   [2] top-level scope at /tmp/tmp6caon8ce.jl:21\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp6caon8ce.jl:20\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp6caon8ce.jl:22\\n  Test threw exception\\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{Int64,1}\\n  Closest candidates are:\\n \
    \   convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(::String) at /tmp/tmp6caon8ce.jl:15\\\
    n   [2] top-level scope at /tmp/tmp6caon8ce.jl:22\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp6caon8ce.jl:20\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp6caon8ce.jl:23\\n  Test threw exception\\n  Expression: candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1]\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Array{Int64,1}\\n  Closest candidates are:\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(::String) at /tmp/tmp6caon8ce.jl:15\\\
    n   [2] top-level scope at /tmp/tmp6caon8ce.jl:23\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp6caon8ce.jl:20\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp6caon8ce.jl:24\\n  Test threw exception\\n  Expression: candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(::String) at /tmp/tmp6caon8ce.jl:15\\\
    n   [2] top-level scope at /tmp/tmp6caon8ce.jl:24\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp6caon8ce.jl:20\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp6caon8ce.jl:25\\n  Test threw exception\\n  Expression: candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(::String) at /tmp/tmp6caon8ce.jl:15\\\
    n   [2] top-level scope at /tmp/tmp6caon8ce.jl:25\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp6caon8ce.jl:20\\n  \\nTest Summary: | Error\
    \  '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string, \" \")\n        if note == \"o\"\n \
    \           push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    result =\
    \ []\n    for note in split(music_string, \" \")\n        if note == \"o\"\n \
    \           push!(result, 4)\n        elseif note == \"o|\"\n            push!(result,\
    \ 2)\n        elseif note == \".|\"\n            push!(result, 1)\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\n    return []\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpljiyrbmd.jl:23\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n   Evaluated: Int64[] == [4, 4, 4, 4]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpljiyrbmd.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpljiyrbmd.jl:21\ntest set: Test Failed at /tmp/tmpljiyrbmd.jl:24\n\
    \  Expression: candidate(\".| .| .| .|\") == [1, 1, 1, 1]\n   Evaluated: Int64[]\
    \ == [1, 1, 1, 1]\nStacktrace:\n [1] top-level scope at /tmp/tmpljiyrbmd.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpljiyrbmd.jl:21\ntest set: Test Failed at /tmp/tmpljiyrbmd.jl:25\n\
    \  Expression: candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n\
    \   Evaluated: Int64[] == [2, 2, 1, 1, 4, 4, 4, 4]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpljiyrbmd.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpljiyrbmd.jl:21\ntest set: Test Failed at /tmp/tmpljiyrbmd.jl:26\n\
    \  Expression: candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n\
    \   Evaluated: Int64[] == [2, 1, 2, 1, 4, 2, 4, 2]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpljiyrbmd.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpljiyrbmd.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpljiyrbmd.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, ' ')\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\n    notes = split(music_string, \" \")\n    beats = []\n    for note in\
    \ notes\n        if note == \"o\"\n            push!(beats, 4)\n        elseif\
    \ note == \"o|\"\n            push!(beats, 2)\n        elseif note == \".|\"\n\
    \            push!(beats, 1)\n        end\n    end\n    return beats\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for i in music_string\n        if i == 'o'\n            push!(beats,\
    \ 4)\n        elseif i == 'o|'\n            push!(beats, 2)\n        elseif i\
    \ == '.|'\n            push!(beats, 1)\n        end\n    end\n    return beats\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid character literal\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp5abcvyjf.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5abcvyjf.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\n    return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpumm6__r8.jl:22\n  Expression: candidate(\"\
    \") == Vector{Int64}([])\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpumm6__r8.jl:22\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpumm6__r8.jl:21\ntest set: Test Failed at /tmp/tmpumm6__r8.jl:23\n\
    \  Expression: candidate(\"o o o o\") == [4, 4, 4, 4]\n   Evaluated: [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4] == [4, 4, 4, 4]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpumm6__r8.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpumm6__r8.jl:21\ntest set: Test Failed at /tmp/tmpumm6__r8.jl:24\n\
    \  Expression: candidate(\".| .| .| .|\") == [1, 1, 1, 1]\n   Evaluated: [4, 2,\
    \ 1, 2, 2, 1, 1, 1, 1, 4, 4] == [1, 1, 1, 1]\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpumm6__r8.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpumm6__r8.jl:21\ntest set: Test Failed at /tmp/tmpumm6__r8.jl:25\n\
    \  Expression: candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n\
    \   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [2, 2, 1, 1, 4, 4, 4, 4]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpumm6__r8.jl:25\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpumm6__r8.jl:21\ntest set: Test Failed at /tmp/tmpumm6__r8.jl:26\n\
    \  Expression: candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n\
    \   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [2, 1, 2, 1, 4, 2, 4, 2]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpumm6__r8.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpumm6__r8.jl:21\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpumm6__r8.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ goes here\n    # hint: you may want to use a regexp\n    # hint: you may want\
    \ to use a dictionary\n    # hint: you may want to use a map function\n    # hint:\
    \ you may want to use a split function\n    # hint: you may want to use a parse\
    \ function\n    # hint: you may want to use a try/catch block\n    # hint: you\
    \ may want to use a vector\n    # hint: you may want to use a for loop\n    #\
    \ hint: you may want to use a push! function\n    # hint: you may want to use\
    \ a join function\n    # hint: you may want to use a parse function\n    # hint:\
    \ you may want to use a try/catch block\n    # hint: you may want to use a vector\n\
    \    # hint: you may want to use a for loop\n    # hint: you may want to use a\
    \ push! function\n    # hint: you may want to use a join function\n    # hint:\
    \ you may want to use a parse function\n    # hint: you may want to use a try/catch\
    \ block\n    # hint: you may want to use a vector\n    # hint: you may want to\
    \ use a for loop\n    # hint: you may want to use a push! function\n    # hint:\
    \ you may want to use a join function\n    # hint: you may want to use a parse\
    \ function\n    # hint: you may want to use a try/catch block\n    # hint: you\
    \ may want to use a vector\n    # hint: you may want to use a for loop\n    #\
    \ hint: you may want to use a push! function\n    # hint: you may want to use\
    \ a join function\n    # hint: you may want to use a parse function\n    # hint:\
    \ you may want to use a try/catch block\n    # hint: you may want to use a vector\n\
    \    # hint: you may want to use a for loop\n    # hint: you may want to use a\
    \ push! function\n    # hint: you may want to use a join function\n    # hint:\
    \ you may want to use a parse function\n    # hint: you may want to use a try/catch\
    \ block\n    # hint: you may want to use a vector\n    # hint: you may want to\
    \ use a for loop\n\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0hdn7qu3.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp0hdn7qu3.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp0hdn7qu3.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # YOUR CODE\
    \ HERE\n    # You can use the following function to convert a character to a note\
    \ duration:\n    # note_to_duration(note::Char) = ...\n    # You can use the following\
    \ function to convert a note duration to a number of beats:\n    # duration_to_beats(duration::Int64)\
    \ = ...\n    # You can use the following function to convert a note duration to\
    \ a number of beats:\n    # duration_to_beats(duration::Int64) = ...\n    # You\
    \ can use the following function to convert a note duration to a number of beats:\n\
    \    # duration_to_beats(duration::Int64) = ...\n    # You can use the following\
    \ function to convert a note duration to a number of beats:\n    # duration_to_beats(duration::Int64)\
    \ = ...\n    # You can use the following function to convert a note duration to\
    \ a number of beats:\n    # duration_to_beats(duration::Int64) = ...\n    # You\
    \ can use the following function to convert a note duration to a number of beats:\n\
    \    # duration_to_beats(duration::Int64) = ...\n    # You can use the following\
    \ function to convert a note duration to a number of beats:\n    # duration_to_beats(duration::Int64)\
    \ = ...\n    # You can use the following function to convert a note duration to\
    \ a number of beats:\n    # duration_to_beats(duration::Int64) = ...\n    # You\
    \ can use the following function to convert a note duration to a number of beats:\n\
    \    # duration_to_beats(duration::Int64) = ...\n    # You can use the following\
    \ function to convert a note duration to a number of beats:\n    # duration_to_beats(duration::Int64)\
    \ = ...\n    # You can use the following function to convert a note duration to\
    \ a number of beats:\n    # duration_to_beats(duration::Int64) = ...\n    # You\
    \ can use the following function to convert a note duration to a number of beats:\n\
    \    # duration_to_beats(duration::Int64) = ...\n    # You can use the following\
    \ function to convert a note duration to a number of beats:\n    # duration_to_beats\n\
    using Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpepicjxro.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpepicjxro.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpepicjxro.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string, \" \")\n        if note == \"o\"\n \
    \           push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string, \" \")\n        if note == \"o\"\n \
    \           push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpr2hndc7k.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpr2hndc7k.jl:15\n\
    \   [2] top-level scope at /tmp/tmpr2hndc7k.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpr2hndc7k.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpr2hndc7k.jl:22\n  Test threw exception\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{Int64,1}\n  Closest candidates are:\n   \
    \ convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpr2hndc7k.jl:15\n\
    \   [2] top-level scope at /tmp/tmpr2hndc7k.jl:22\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpr2hndc7k.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpr2hndc7k.jl:23\n  Test threw exception\n  Expression: candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{Int64,1}\n  Closest candidates are:\n   \
    \ convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpr2hndc7k.jl:15\n\
    \   [2] top-level scope at /tmp/tmpr2hndc7k.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpr2hndc7k.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpr2hndc7k.jl:24\n  Test threw exception\n  Expression: candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpr2hndc7k.jl:15\n\
    \   [2] top-level scope at /tmp/tmpr2hndc7k.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpr2hndc7k.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpr2hndc7k.jl:25\n  Test threw exception\n  Expression: candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpr2hndc7k.jl:15\n\
    \   [2] top-level scope at /tmp/tmpr2hndc7k.jl:25\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpr2hndc7k.jl:20\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr2hndc7k.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string, \" \")\n        if note == \"o\"\n \
    \           push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # YOUR CODE\
    \ HERE\n    # You can use the following code to convert a character to an integer\n\
    \    # int('o')\n    # int('|')\n    # int('.')\n    # int(' ')\n    # int('\\\
    n')\n    # int('\\t')\n    # int('\\r')\n    # int('\\f')\n    # int('\\v')\n\
    \    # int('\\b')\n    # int('\\a')\n    # int('\\0')\n    # int('\\x1b')\n  \
    \  # int('\\u2713')\n    # int('\\U0001f600')\n    # int('\\cH')\n    # int('\\\
    123')\n    # int('\\o')\n    # int('\\x')\n    # int('\\u')\n    # int('\\U')\n\
    \    # int('\\')\n    # int('\\c')\n    # int('\\')\n    # int('\\')\n    # int('\\\
    ')\n    # int('\\')\n    # int('\\')\n    # int('\\')\n    # int('\\')\n    #\
    \ int('\\')\n    # int('\\')\n    # int('\\')\n    # int('\\')\n    # int('\\\
    ')\n    # int('\\')\n    # int('\\')\n    # int('\\')\n    # int('\\')\n    #\
    \ int('\\')\n    # int('\\')\n    # int('\\')\n    # int('\\')\n    # int('\\\
    ')\n    # int('\\')\n    # int('\\')\n    # int('\\')\n    # int('\\')\n    #\
    \ int('\\')\n    # int('\\')\n    # int('\\')\n    # int('\\')\n    # int('\\\
    ')\n    # int('\\')\n    # int('\\')\n    # int('\\')\n    # int('\\')\n    #\
    \ int('\\')\n    # int('\\')\n    # int('\\')\n    # int('\\')\n    # int('\\\
    ')\n    # int('\\')\n    # int('\\')\n    # int('\\')\n    # int('\\')\n   \n\
    using Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpslene56l.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpslene56l.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpslene56l.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, ' ')\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string, \" \")\n        if note == \"o\"\n \
    \           push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ goes here\n    notes = split(music_string, \" \")\n    beats = []\n    for note\
    \ in notes\n        if note == \"o\"\n            push!(beats, 4)\n        elseif\
    \ note == \"o|\"\n            push!(beats, 2)\n        elseif note == \".|\"\n\
    \            push!(beats, 1)\n        end\n    end\n    return beats\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyqrk2zev.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpyqrk2zev.jl:15\n\
    \   [2] top-level scope at /tmp/tmpyqrk2zev.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpyqrk2zev.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpyqrk2zev.jl:22\n  Test threw exception\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{Int64,1}\n  Closest candidates are:\n   \
    \ convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpyqrk2zev.jl:15\n\
    \   [2] top-level scope at /tmp/tmpyqrk2zev.jl:22\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpyqrk2zev.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpyqrk2zev.jl:23\n  Test threw exception\n  Expression: candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{Int64,1}\n  Closest candidates are:\n   \
    \ convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpyqrk2zev.jl:15\n\
    \   [2] top-level scope at /tmp/tmpyqrk2zev.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpyqrk2zev.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpyqrk2zev.jl:24\n  Test threw exception\n  Expression: candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpyqrk2zev.jl:15\n\
    \   [2] top-level scope at /tmp/tmpyqrk2zev.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpyqrk2zev.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpyqrk2zev.jl:25\n  Test threw exception\n  Expression: candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpyqrk2zev.jl:15\n\
    \   [2] top-level scope at /tmp/tmpyqrk2zev.jl:25\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpyqrk2zev.jl:20\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyqrk2zev.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpujpr4l66.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpujpr4l66.jl:15\n\
    \   [2] top-level scope at /tmp/tmpujpr4l66.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpujpr4l66.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpujpr4l66.jl:22\n  Test threw exception\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{Int64,1}\n  Closest candidates are:\n   \
    \ convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpujpr4l66.jl:15\n\
    \   [2] top-level scope at /tmp/tmpujpr4l66.jl:22\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpujpr4l66.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpujpr4l66.jl:23\n  Test threw exception\n  Expression: candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{Int64,1}\n  Closest candidates are:\n   \
    \ convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpujpr4l66.jl:15\n\
    \   [2] top-level scope at /tmp/tmpujpr4l66.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpujpr4l66.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpujpr4l66.jl:24\n  Test threw exception\n  Expression: candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpujpr4l66.jl:15\n\
    \   [2] top-level scope at /tmp/tmpujpr4l66.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpujpr4l66.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpujpr4l66.jl:25\n  Test threw exception\n  Expression: candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpujpr4l66.jl:15\n\
    \   [2] top-level scope at /tmp/tmpujpr4l66.jl:25\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpujpr4l66.jl:20\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpujpr4l66.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\n    return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp7ngx41h4.jl:22\\n  Expression: candidate(\"\
    \") == Vector{Int64}([])\\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] ==\
    \ Int64[]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp7ngx41h4.jl:22\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp7ngx41h4.jl:21\\ntest set: Test Failed at /tmp/tmp7ngx41h4.jl:23\\\
    n  Expression: candidate(\"o o o o\") == [4, 4, 4, 4]\\n   Evaluated: [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4] == [4, 4, 4, 4]\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmp7ngx41h4.jl:23\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp7ngx41h4.jl:21\\ntest set: Test Failed at /tmp/tmp7ngx41h4.jl:24\\\
    n  Expression: candidate(\".| .| .| .|\") == [1, 1, 1, 1]\\n   Evaluated: [4,\
    \ 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [1, 1, 1, 1]\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmp7ngx41h4.jl:24\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp7ngx41h4.jl:21\\ntest set: Test Failed at /tmp/tmp7ngx41h4.jl:25\\\
    n  Expression: candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\\\
    n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [2, 2, 1, 1, 4, 4, 4, 4]\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmp7ngx41h4.jl:25\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp7ngx41h4.jl:21\\ntest set: Test Failed at /tmp/tmp7ngx41h4.jl:26\\\
    n  Expression: candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\\\
    n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [2, 1, 2, 1, 4, 2, 4, 2]\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmp7ngx41h4.jl:26\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp7ngx41h4.jl:21\\nTest Summary: | Fail  Total\\\
    ntest set      |    5      5\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpuvh8d16v.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == Vector{Int64}([])\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Array{Int64,1}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:533\\n    convert(::Type{T}, !Matched::T) where T<:AbstractArray\
    \ at abstractarray.jl:14\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(::String) at /tmp/tmpuvh8d16v.jl:15\\\
    n   [2] top-level scope at /tmp/tmpuvh8d16v.jl:21\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpuvh8d16v.jl:20\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpuvh8d16v.jl:22\\n  Test threw exception\\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{Int64,1}\\n  Closest candidates are:\\n \
    \   convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(::String) at /tmp/tmpuvh8d16v.jl:15\\\
    n   [2] top-level scope at /tmp/tmpuvh8d16v.jl:22\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpuvh8d16v.jl:20\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpuvh8d16v.jl:23\\n  Test threw exception\\n  Expression: candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1]\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Array{Int64,1}\\n  Closest candidates are:\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(::String) at /tmp/tmpuvh8d16v.jl:15\\\
    n   [2] top-level scope at /tmp/tmpuvh8d16v.jl:23\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpuvh8d16v.jl:20\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpuvh8d16v.jl:24\\n  Test threw exception\\n  Expression: candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(::String) at /tmp/tmpuvh8d16v.jl:15\\\
    n   [2] top-level scope at /tmp/tmpuvh8d16v.jl:24\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpuvh8d16v.jl:20\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpuvh8d16v.jl:25\\n  Test threw exception\\n  Expression: candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(::String) at /tmp/tmpuvh8d16v.jl:15\\\
    n   [2] top-level scope at /tmp/tmpuvh8d16v.jl:25\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpuvh8d16v.jl:20\\n  \\nTest Summary: | Error\
    \  Total\\ntest set      |     5      5\\n'"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmpuvh8d16v.jl:18\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string, \" \")\n        if note == \"o\"\n \
    \           push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for i in music_string\n        if i == 'o'\n            push!(beats,\
    \ 4)\n        elseif i == 'o|'\n            push!(beats, 2)\n        elseif i\
    \ == '.|'\n            push!(beats, 1)\n        end\n    end\n    return beats\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid character literal\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp0xolliig.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0xolliig.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp5uobz9s0.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == Vector{Int64}([])\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Array{Int64,1}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:533\\n    convert(::Type{T}, !Matched::T) where T<:AbstractArray\
    \ at abstractarray.jl:14\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(::String) at /tmp/tmp5uobz9s0.jl:15\\\
    n   [2] top-level scope at /tmp/tmp5uobz9s0.jl:21\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp5uobz9s0.jl:20\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp5uobz9s0.jl:22\\n  Test threw exception\\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{Int64,1}\\n  Closest candidates are:\\n \
    \   convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(::String) at /tmp/tmp5uobz9s0.jl:15\\\
    n   [2] top-level scope at /tmp/tmp5uobz9s0.jl:22\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp5uobz9s0.jl:20\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp5uobz9s0.jl:23\\n  Test threw exception\\n  Expression: candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1]\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Array{Int64,1}\\n  Closest candidates are:\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(::String) at /tmp/tmp5uobz9s0.jl:15\\\
    n   [2] top-level scope at /tmp/tmp5uobz9s0.jl:23\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp5uobz9s0.jl:20\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp5uobz9s0.jl:24\\n  Test threw exception\\n  Expression: candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(::String) at /tmp/tmp5uobz9s0.jl:15\\\
    n   [2] top-level scope at /tmp/tmp5uobz9s0.jl:24\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp5uobz9s0.jl:20\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp5uobz9s0.jl:25\\n  Test threw exception\\n  Expression: candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(::String) at /tmp/tmp5uobz9s0.jl:15\\\
    n   [2] top-level scope at /tmp/tmp5uobz9s0.jl:25\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp5uobz9s0.jl:20\\n  \\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppjweot83.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmppjweot83.jl:15\n\
    \   [2] top-level scope at /tmp/tmppjweot83.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmppjweot83.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmppjweot83.jl:22\n  Test threw exception\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{Int64,1}\n  Closest candidates are:\n   \
    \ convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmppjweot83.jl:15\n\
    \   [2] top-level scope at /tmp/tmppjweot83.jl:22\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmppjweot83.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmppjweot83.jl:23\n  Test threw exception\n  Expression: candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{Int64,1}\n  Closest candidates are:\n   \
    \ convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmppjweot83.jl:15\n\
    \   [2] top-level scope at /tmp/tmppjweot83.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmppjweot83.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmppjweot83.jl:24\n  Test threw exception\n  Expression: candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmppjweot83.jl:15\n\
    \   [2] top-level scope at /tmp/tmppjweot83.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmppjweot83.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmppjweot83.jl:25\n  Test threw exception\n  Expression: candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmppjweot83.jl:15\n\
    \   [2] top-level scope at /tmp/tmppjweot83.jl:25\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmppjweot83.jl:20\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppjweot83.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string, \" \")\n        if note == \"o\"\n \
    \           push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # Your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3rsu6g99.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmp3rsu6g99.jl:15\n\
    \   [2] top-level scope at /tmp/tmp3rsu6g99.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3rsu6g99.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmp3rsu6g99.jl:22\n  Test threw exception\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{Int64,1}\n  Closest candidates are:\n   \
    \ convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmp3rsu6g99.jl:15\n\
    \   [2] top-level scope at /tmp/tmp3rsu6g99.jl:22\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3rsu6g99.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmp3rsu6g99.jl:23\n  Test threw exception\n  Expression: candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{Int64,1}\n  Closest candidates are:\n   \
    \ convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmp3rsu6g99.jl:15\n\
    \   [2] top-level scope at /tmp/tmp3rsu6g99.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3rsu6g99.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmp3rsu6g99.jl:24\n  Test threw exception\n  Expression: candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmp3rsu6g99.jl:15\n\
    \   [2] top-level scope at /tmp/tmp3rsu6g99.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3rsu6g99.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmp3rsu6g99.jl:25\n  Test threw exception\n  Expression: candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmp3rsu6g99.jl:15\n\
    \   [2] top-level scope at /tmp/tmp3rsu6g99.jl:25\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3rsu6g99.jl:20\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3rsu6g99.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ goes here\n    notes = split(music_string, \" \")\n    beats = []\n    for note\
    \ in notes\n        if note == \"o\"\n            push!(beats, 4)\n        elseif\
    \ note == \"o|\"\n            push!(beats, 2)\n        elseif note == \".|\"\n\
    \            push!(beats, 1)\n        end\n    end\n    return beats\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = replace(music_string, \"o|\", \"|\")\n    music_string = replace(music_string,\
    \ \"o\", \"|\")\n    music_string = replace(music_string, \".\", \"|\")\n    music_string\
    \ = replace(music_string, \" \", \"\")\n    return map(x -> parse(Int64, x), split(music_string,\
    \ \"|\"))\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8s_jt9ke.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  MethodError: no method\
    \ matching replace(::String, ::String, ::String)\n  Closest candidates are:\n\
    \    replace(::String, !Matched::Pair{#s67,B} where B where #s67<:AbstractChar;\
    \ count) at strings/util.jl:421\n    replace(::String, !Matched::Pair{#s64,B}\
    \ where B where #s64<:Union{Tuple{Vararg{AbstractChar,N} where N}, Set{#s61} where\
    \ #s61<:AbstractChar, AbstractArray{#s62,1} where #s62<:AbstractChar}; count)\
    \ at strings/util.jl:426\n    replace(::String, !Matched::Pair; count) at strings/util.jl:433\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmp8s_jt9ke.jl:14\n\
    \   [2] top-level scope at /tmp/tmp8s_jt9ke.jl:25\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp8s_jt9ke.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp8s_jt9ke.jl:26\n  Test threw exception\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n  MethodError: no method matching replace(::String,\
    \ ::String, ::String)\n  Closest candidates are:\n    replace(::String, !Matched::Pair{#s67,B}\
    \ where B where #s67<:AbstractChar; count) at strings/util.jl:421\n    replace(::String,\
    \ !Matched::Pair{#s64,B} where B where #s64<:Union{Tuple{Vararg{AbstractChar,N}\
    \ where N}, Set{#s61} where #s61<:AbstractChar, AbstractArray{#s62,1} where #s62<:AbstractChar};\
    \ count) at strings/util.jl:426\n    replace(::String, !Matched::Pair; count)\
    \ at strings/util.jl:433\n    ...\n  Stacktrace:\n   [1] parse_music(::String)\
    \ at /tmp/tmp8s_jt9ke.jl:14\n   [2] top-level scope at /tmp/tmp8s_jt9ke.jl:26\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp8s_jt9ke.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp8s_jt9ke.jl:27\n  Test threw exception\n  Expression: candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1]\n  MethodError: no method matching replace(::String,\
    \ ::String, ::String)\n  Closest candidates are:\n    replace(::String, !Matched::Pair{#s67,B}\
    \ where B where #s67<:AbstractChar; count) at strings/util.jl:421\n    replace(::String,\
    \ !Matched::Pair{#s64,B} where B where #s64<:Union{Tuple{Vararg{AbstractChar,N}\
    \ where N}, Set{#s61} where #s61<:AbstractChar, AbstractArray{#s62,1} where #s62<:AbstractChar};\
    \ count) at strings/util.jl:426\n    replace(::String, !Matched::Pair; count)\
    \ at strings/util.jl:433\n    ...\n  Stacktrace:\n   [1] parse_music(::String)\
    \ at /tmp/tmp8s_jt9ke.jl:14\n   [2] top-level scope at /tmp/tmp8s_jt9ke.jl:27\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp8s_jt9ke.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp8s_jt9ke.jl:28\n  Test threw exception\n  Expression: candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n  MethodError: no method matching\
    \ replace(::String, ::String, ::String)\n  Closest candidates are:\n    replace(::String,\
    \ !Matched::Pair{#s67,B} where B where #s67<:AbstractChar; count) at strings/util.jl:421\n\
    \    replace(::String, !Matched::Pair{#s64,B} where B where #s64<:Union{Tuple{Vararg{AbstractChar,N}\
    \ where N}, Set{#s61} where #s61<:AbstractChar, AbstractArray{#s62,1} where #s62<:AbstractChar};\
    \ count) at strings/util.jl:426\n    replace(::String, !Matched::Pair; count)\
    \ at strings/util.jl:433\n    ...\n  Stacktrace:\n   [1] parse_music(::String)\
    \ at /tmp/tmp8s_jt9ke.jl:14\n   [2] top-level scope at /tmp/tmp8s_jt9ke.jl:28\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp8s_jt9ke.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp8s_jt9ke.jl:29\n  Test threw exception\n  Expression: candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n  MethodError: no method\
    \ matching replace(::String, ::String, ::String)\n  Closest candidates are:\n\
    \    replace(::String, !Matched::Pair{#s67,B} where B where #s67<:AbstractChar;\
    \ count) at strings/util.jl:421\n    replace(::String, !Matched::Pair{#s64,B}\
    \ where B where #s64<:Union{Tuple{Vararg{AbstractChar,N} where N}, Set{#s61} where\
    \ #s61<:AbstractChar, AbstractArray{#s62,1} where #s62<:AbstractChar}; count)\
    \ at strings/util.jl:426\n    replace(::String, !Matched::Pair; count) at strings/util.jl:433\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmp8s_jt9ke.jl:14\n\
    \   [2] top-level scope at /tmp/tmp8s_jt9ke.jl:29\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp8s_jt9ke.jl:24\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8s_jt9ke.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # YOUR CODE\
    \ HERE\n    # You can use the following function to convert a character to a number\n\
    \    # parse(Int64, '4')\n    # 4\n    # parse(Int64, 'o')\n    # ERROR: ArgumentError:\
    \ invalid base 10 digit 'o' in \"o\"\n    # parse(Int64, 'o')\n    # ERROR: ArgumentError:\
    \ invalid base 10 digit 'o' in \"o\"\n    # parse(Int64, 'o')\n    # ERROR: ArgumentError:\
    \ invalid base 10 digit 'o' in \"o\"\n    # parse(Int64, 'o')\n    # ERROR: ArgumentError:\
    \ invalid base 10 digit 'o' in \"o\"\n    # parse(Int64, 'o')\n    # ERROR: ArgumentError:\
    \ invalid base 10 digit 'o' in \"o\"\n    # parse(Int64, 'o')\n    # ERROR: ArgumentError:\
    \ invalid base 10 digit 'o' in \"o\"\n    # parse(Int64, 'o')\n    # ERROR: ArgumentError:\
    \ invalid base 10 digit 'o' in \"o\"\n    # parse(Int64, 'o')\n    # ERROR: ArgumentError:\
    \ invalid base 10 digit 'o' in \"o\"\n    # parse(Int64, 'o')\n    # ERROR: ArgumentError:\
    \ invalid base 10 digit 'o' in \"o\"\n    # parse(Int64, 'o')\n    # ERROR: ArgumentError:\
    \ invalid base 10 digit 'o' in \"o\"\n    # parse(Int64, 'o')\n    # ERROR: ArgumentError:\
    \ invalid base 10 digit 'o' in \"o\"\n    # parse(Int64, 'o')\n    # ERROR: ArgumentError:\
    \ invalid base 10 digit 'o' in \"o\"\n    # parse(Int64, 'o')\n    # ERROR: ArgumentError:\
    \ invalid base 10 digit 'o' in \"o\"\n    # parse(Int64, 'o')\n    # ERROR: ArgumentError:\
    \ invalid base 10 digit 'o' in \"o\"\n    # parse(Int64, 'o')\n    # ERROR: ArgumentError:\
    \ invalid base 10 digit 'o' in \"o\"\n    # parse(Int64, 'o')\n    # ERROR: ArgumentError:\
    \ invalid base 10 digit 'o\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6rxfmbkw.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp6rxfmbkw.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp6rxfmbkw.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for i in music_string\n        if i == 'o'\n            push!(beats,\
    \ 4)\n        elseif i == 'o|'\n            push!(beats, 2)\n        elseif i\
    \ == '.|'\n            push!(beats, 1)\n        end\n    end\n    return beats\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid character literal\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpld7soc5j.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpld7soc5j.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpg1d3btwy.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == Vector{Int64}([])\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Array{Int64,1}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:533\\n    convert(::Type{T}, !Matched::T) where T<:AbstractArray\
    \ at abstractarray.jl:14\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(::String) at /tmp/tmpg1d3btwy.jl:15\\\
    n   [2] top-level scope at /tmp/tmpg1d3btwy.jl:21\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpg1d3btwy.jl:20\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpg1d3btwy.jl:22\\n  Test threw exception\\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{Int64,1}\\n  Closest candidates are:\\n \
    \   convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(::String) at /tmp/tmpg1d3btwy.jl:15\\\
    n   [2] top-level scope at /tmp/tmpg1d3btwy.jl:22\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpg1d3btwy.jl:20\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpg1d3btwy.jl:23\\n  Test threw exception\\n  Expression: candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1]\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Array{Int64,1}\\n  Closest candidates are:\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(::String) at /tmp/tmpg1d3btwy.jl:15\\\
    n   [2] top-level scope at /tmp/tmpg1d3btwy.jl:23\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpg1d3btwy.jl:20\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpg1d3btwy.jl:24\\n  Test threw exception\\n  Expression: candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(::String) at /tmp/tmpg1d3btwy.jl:15\\\
    n   [2] top-level scope at /tmp/tmpg1d3btwy.jl:24\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpg1d3btwy.jl:20\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpg1d3btwy.jl:25\\n  Test threw exception\\n  Expression: candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(::String) at /tmp/tmpg1d3btwy.jl:15\\\
    n   [2] top-level scope at /tmp/tmpg1d3btwy.jl:25\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpg1d3btwy.jl:20\\n  \\nTest Summary: | Error\
    \  Total\\ntest set      |     5      5\\n'"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ goes here\n    notes = split(music_string, \" \")\n    beats = []\n    for note\
    \ in notes\n        if note == \"o\"\n            push!(beats, 4)\n        elseif\
    \ note == \"o|\"\n            push!(beats, 2)\n        elseif note == \".|\"\n\
    \            push!(beats, 1)\n        end\n    end\n    return beats\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp0sp2kvf0.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == Vector{Int64}([])\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Array{Int64,1}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:533\\n    convert(::Type{T}, !Matched::T) where T<:AbstractArray\
    \ at abstractarray.jl:14\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(::String) at /tmp/tmp0sp2kvf0.jl:15\\\
    n   [2] top-level scope at /tmp/tmp0sp2kvf0.jl:21\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp0sp2kvf0.jl:20\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp0sp2kvf0.jl:22\\n  Test threw exception\\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{Int64,1}\\n  Closest candidates are:\\n \
    \   convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(::String) at /tmp/tmp0sp2kvf0.jl:15\\\
    n   [2] top-level scope at /tmp/tmp0sp2kvf0.jl:22\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp0sp2kvf0.jl:20\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp0sp2kvf0.jl:23\\n  Test threw exception\\n  Expression: candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1]\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Array{Int64,1}\\n  Closest candidates are:\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(::String) at /tmp/tmp0sp2kvf0.jl:15\\\
    n   [2] top-level scope at /tmp/tmp0sp2kvf0.jl:23\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp0sp2kvf0.jl:20\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp0sp2kvf0.jl:24\\n  Test threw exception\\n  Expression: candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(::String) at /tmp/tmp0sp2kvf0.jl:15\\\
    n   [2] top-level scope at /tmp/tmp0sp2kvf0.jl:24\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp0sp2kvf0.jl:20\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp0sp2kvf0.jl:25\\n  Test threw exception\\n  Expression: candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(::String) at /tmp/tmp0sp2kvf0.jl:15\\\
    n   [2] top-level scope at /tmp/tmp0sp2kvf0.jl:25\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp0sp2kvf0.jl:20\\n  \\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\n    notes = split(music_string, \" \")\n    beats = []\n    for note in\
    \ notes\n        if note == \"o\"\n            push!(beats, 4)\n        elseif\
    \ note == \"o|\"\n            push!(beats, 2)\n        elseif note == \".|\"\n\
    \            push!(beats, 1)\n        end\n    end\n    return beats\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6_302t3u.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmp6_302t3u.jl:15\n\
    \   [2] top-level scope at /tmp/tmp6_302t3u.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp6_302t3u.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmp6_302t3u.jl:22\n  Test threw exception\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{Int64,1}\n  Closest candidates are:\n   \
    \ convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmp6_302t3u.jl:15\n\
    \   [2] top-level scope at /tmp/tmp6_302t3u.jl:22\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp6_302t3u.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmp6_302t3u.jl:23\n  Test threw exception\n  Expression: candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{Int64,1}\n  Closest candidates are:\n   \
    \ convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmp6_302t3u.jl:15\n\
    \   [2] top-level scope at /tmp/tmp6_302t3u.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp6_302t3u.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmp6_302t3u.jl:24\n  Test threw exception\n  Expression: candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmp6_302t3u.jl:15\n\
    \   [2] top-level scope at /tmp/tmp6_302t3u.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp6_302t3u.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmp6_302t3u.jl:25\n  Test threw exception\n  Expression: candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmp6_302t3u.jl:15\n\
    \   [2] top-level scope at /tmp/tmp6_302t3u.jl:25\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp6_302t3u.jl:20\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6_302t3u.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\n    return []\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmprk_15fm1.jl:23\\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\\n   Evaluated: Int64[] == [4, 4, 4, 4]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmprk_15fm1.jl:23\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmprk_15fm1.jl:21\\ntest set: Test Failed at /tmp/tmprk_15fm1.jl:24\\\
    n  Expression: candidate(\".| .| .| .|\") == [1, 1, 1, 1]\\n   Evaluated: Int64[]\
    \ == [1, 1, 1, 1]\\nStacktrace:\\n [1] top-level scope at /tmp/tmprk_15fm1.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmprk_15fm1.jl:21\\ntest set: Test Failed at /tmp/tmprk_15fm1.jl:25\\\
    n  Expression: candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\\\
    n   Evaluated: Int64[] == [2, 2, 1, 1, 4, 4, 4, 4]\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmprk_15fm1.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmprk_15fm1.jl:21\\ntest set: Test Failed at /tmp/tmprk_15fm1.jl:26\\\
    n  Expression: candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\\\
    n   Evaluated: Int64[] == [2, 1, 2, 1, 4, 2, 4, 2]\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmprk_15fm1.jl:26\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmprk_15fm1.jl:21\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    1     4  '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ goes here\n    return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0gznl_vx.jl:22\n  Expression: candidate(\"\
    \") == Vector{Int64}([])\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp0gznl_vx.jl:22\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0gznl_vx.jl:21\ntest set: Test Failed at /tmp/tmp0gznl_vx.jl:23\n\
    \  Expression: candidate(\"o o o o\") == [4, 4, 4, 4]\n   Evaluated: [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4] == [4, 4, 4, 4]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp0gznl_vx.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0gznl_vx.jl:21\ntest set: Test Failed at /tmp/tmp0gznl_vx.jl:24\n\
    \  Expression: candidate(\".| .| .| .|\") == [1, 1, 1, 1]\n   Evaluated: [4, 2,\
    \ 1, 2, 2, 1, 1, 1, 1, 4, 4] == [1, 1, 1, 1]\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp0gznl_vx.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0gznl_vx.jl:21\ntest set: Test Failed at /tmp/tmp0gznl_vx.jl:25\n\
    \  Expression: candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n\
    \   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [2, 2, 1, 1, 4, 4, 4, 4]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp0gznl_vx.jl:25\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0gznl_vx.jl:21\ntest set: Test Failed at /tmp/tmp0gznl_vx.jl:26\n\
    \  Expression: candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n\
    \   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [2, 1, 2, 1, 4, 2, 4, 2]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp0gznl_vx.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0gznl_vx.jl:21\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0gznl_vx.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string, \" \")\n        if note == \"o\"\n \
    \           push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ goes here\n    notes = split(music_string, \" \")\n    beats = []\n    for note\
    \ in notes\n        if note == \"o\"\n            push!(beats, 4)\n        elseif\
    \ note == \"o|\"\n            push!(beats, 2)\n        elseif note == \".|\"\n\
    \            push!(beats, 1)\n        end\n    end\n    return beats\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ goes here\n    notes = split(music_string, \" \")\n    beats = []\n    for note\
    \ in notes\n        if note == \"o\"\n            push!(beats, 4)\n        elseif\
    \ note == \"o|\"\n            push!(beats, 2)\n        elseif note == \".|\"\n\
    \            push!(beats, 1)\n        end\n    end\n    return beats\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\n    return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpds06banb.jl:22\\n  Expression: candidate(\"\
    \") == Vector{Int64}([])\\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] ==\
    \ Int64[]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpds06banb.jl:22\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpds06banb.jl:21\\ntest set: Test Failed at /tmp/tmpds06banb.jl:23\\\
    n  Expression: candidate(\"o o o o\") == [4, 4, 4, 4]\\n   Evaluated: [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4] == [4, 4, 4, 4]\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpds06banb.jl:23\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpds06banb.jl:21\\ntest set: Test Failed at /tmp/tmpds06banb.jl:24\\\
    n  Expression: candidate(\".| .| .| .|\") == [1, 1, 1, 1]\\n   Evaluated: [4,\
    \ 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [1, 1, 1, 1]\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmpds06banb.jl:24\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpds06banb.jl:21\\ntest set: Test Failed at /tmp/tmpds06banb.jl:25\\\
    n  Expression: candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\\\
    n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [2, 2, 1, 1, 4, 4, 4, 4]\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpds06banb.jl:25\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpds06banb.jl:21\\ntest set: Test Failed at /tmp/tmpds06banb.jl:26\\\
    n  Expression: candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\\\
    n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [2, 1, 2, 1, 4, 2, 4, 2]\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpds06banb.jl:26\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpds06banb.jl:21\\nTest Summary: | Fail  Total\\\
    ntest set      |    5      5\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpe9cl7ziw.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpe9cl7ziw.jl:15\n\
    \   [2] top-level scope at /tmp/tmpe9cl7ziw.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpe9cl7ziw.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpe9cl7ziw.jl:22\n  Test threw exception\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{Int64,1}\n  Closest candidates are:\n   \
    \ convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpe9cl7ziw.jl:15\n\
    \   [2] top-level scope at /tmp/tmpe9cl7ziw.jl:22\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpe9cl7ziw.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpe9cl7ziw.jl:23\n  Test threw exception\n  Expression: candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{Int64,1}\n  Closest candidates are:\n   \
    \ convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpe9cl7ziw.jl:15\n\
    \   [2] top-level scope at /tmp/tmpe9cl7ziw.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpe9cl7ziw.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpe9cl7ziw.jl:24\n  Test threw exception\n  Expression: candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpe9cl7ziw.jl:15\n\
    \   [2] top-level scope at /tmp/tmpe9cl7ziw.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpe9cl7ziw.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpe9cl7ziw.jl:25\n  Test threw exception\n  Expression: candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpe9cl7ziw.jl:15\n\
    \   [2] top-level scope at /tmp/tmpe9cl7ziw.jl:25\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpe9cl7ziw.jl:20\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe9cl7ziw.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string, \" \")\n        if note == \"o\"\n \
    \           push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # YOUR CODE\
    \ HERE\n    notes = split(music_string, \" \")\n    beats = []\n    for note in\
    \ notes\n        if note == \"o\"\n            push!(beats, 4)\n        elseif\
    \ note == \"o|\"\n            push!(beats, 2)\n        elseif note == \".|\"\n\
    \            push!(beats, 1)\n        end\n    end\n    return beats\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string, \" \")\n        if note == \"o\"\n \
    \           push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ goes here\n    notes = split(music_string, \" \")\n    beats = []\n    for note\
    \ in notes\n        if note == \"o\"\n            push!(beats, 4)\n        elseif\
    \ note == \"o|\"\n            push!(beats, 2)\n        elseif note == \".|\"\n\
    \            push!(beats, 1)\n        end\n    end\n    return beats\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # YOUR CODE\
    \ HERE\n    # You can use the following code to test your solution:\n    # run_tests(parse_music)\n\
    \    # You can also use the following code to test your solution:\n    # @testset\
    \ \"parse_music\" begin\n    #     @test parse_music(\"o o| .| o| o| .| .| .|\
    \ .| o o\") == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    # end\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3qnbk_fn.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp3qnbk_fn.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp3qnbk_fn.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\n    return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpcixqjs0t.jl:22\\n  Expression: candidate(\"\
    \") == Vector{Int64}([])\\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] ==\
    \ Int64[]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpcixqjs0t.jl:22\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpcixqjs0t.jl:21\\ntest set: Test Failed at /tmp/tmpcixqjs0t.jl:23\\\
    n  Expression: candidate(\"o o o o\") == [4, 4, 4, 4]\\n   Evaluated: [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4] == [4, 4, 4, 4]\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpcixqjs0t.jl:23\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpcixqjs0t.jl:21\\ntest set: Test Failed at /tmp/tmpcixqjs0t.jl:24\\\
    n  Expression: candidate(\".| .| .| .|\") == [1, 1, 1, 1]\\n   Evaluated: [4,\
    \ 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [1, 1, 1, 1]\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmpcixqjs0t.jl:24\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpcixqjs0t.jl:21\\ntest set: Test Failed at /tmp/tmpcixqjs0t.jl:25\\\
    n  Expression: candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\\\
    n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [2, 2, 1, 1, 4, 4, 4, 4]\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpcixqjs0t.jl:25\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpcixqjs0t.jl:21\\ntest set: Test Failed at /tmp/tmpcixqjs0t.jl:26\\\
    n  Expression: candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\\\
    n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [2, 1, 2, 1, 4, 2, 4, 2]\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpcixqjs0t.jl:26\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpcixqjs0t.jl:21\\nTest Summary: | Fail  Total\\\
    ntest set      |    5      5\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in music_string\n        if note == 'o'\n            push!(beats,\
    \ 4)\n        elseif note == 'o|'\n            push!(beats, 2)\n        elseif\
    \ note == '.|'\n            push!(beats, 1)\n        end\n    end\n    return\
    \ beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid character literal\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpm3jw5df9.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpm3jw5df9.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # YOUR CODE\
    \ HERE\n    # You can use split(music_string, ' ') to split the string into a\
    \ vector of strings\n    # representing individual notes.\n    # You can use the\
    \ length() function to get the length of a vector.\n    # You can use the push!()\
    \ function to append elements to a vector.\n    # You can use the parse(Int64,\
    \ ...) function to convert a string to an integer.\n    # You can use the parse(Float64,\
    \ ...) function to convert a string to a floating point number.\n    # You can\
    \ use the isequal() function to compare two strings.\n    # You can use the isequal()\
    \ function to compare two integers.\n    # You can use the isequal() function\
    \ to compare two floating point numbers.\n    # You can use the isequal() function\
    \ to compare two vectors.\n    # You can use the isequal() function to compare\
    \ two booleans.\n    # You can use the isequal() function to compare two characters.\n\
    \    # You can use the isequal() function to compare two dictionaries.\n    #\
    \ You can use the isequal() function to compare two tuples.\n    # You can use\
    \ the isequal() function to compare two sets.\n    # You can use the isequal()\
    \ function to compare two functions.\n    # You can use the isequal() function\
    \ to compare two objects.\n    # You can use the isequal() function to compare\
    \ two ranges.\n    # You can use the isequal() function to compare two channels.\n\
    \    # You can use the isequal() function to compare two iterators.\n    # You\
    \ can use the isequal() function to compare two generators.\n    # You can use\
    \ the isequal() function to compare two tasks.\n    # You can use the isequal()\
    \ function to compare two channels.\n    # You can use the isequal() function\
    \ to compare two iterators.\n    # You can use the isequal() function to compare\
    \ two generators.\n    # You can use the isequal() function to compare two tasks.\n\
    \    # You can use the isequal() function to compare two channels.\n    # You\
    \ can use the isequal() function to compare two iterators.\n    # You can use\
    \ the isequal() function to compare two generators.\n    # You can use the isequal()\
    \ function to compare two\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxa112wqc.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpxa112wqc.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpxa112wqc.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\n    return []\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpery8nmed.jl:23\\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\\n   Evaluated: Int64[] == [4, 4, 4, 4]\\nStacktrace:\\\
    n [1] top-level scope at '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, ' ')\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, ' ')\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # YOUR CODE\
    \ HERE\n    notes = split(music_string, \" \")\n    beats = []\n    for note in\
    \ notes\n        if note == \"o\"\n            push!(beats, 4)\n        elseif\
    \ note == \"o|\"\n            push!(beats, 2)\n        elseif note == \".|\"\n\
    \            push!(beats, 1)\n        end\n    end\n    return beats\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = split(music_string, \" \")\n    beats = []\n    for i in music_string\n  \
    \      if i == \"o\"\n            push!(beats, 4)\n        elseif i == \"o|\"\n\
    \            push!(beats, 2)\n        elseif i == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpxn_s84xv.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == Vector{Int64}([])\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Array{Int64,1}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:533\\n    convert(::Type{T}, !Matched::T) where T<:AbstractArray\
    \ at abstractarray.jl:14\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(::String) at /tmp/tmpxn_s84xv.jl:15\\\
    n   [2] top-level scope at /tmp/tmpxn_s84xv.jl:21\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpxn_s84xv.jl:20\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpxn_s84xv.jl:22\\n  Test threw exception\\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{Int64,1}\\n  Closest candidates are:\\n \
    \   convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(::String) at /tmp/tmpxn_s84xv.jl:15\\\
    n   [2] top-level scope at /tmp/tmpxn_s84xv.jl:22\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpxn_s84xv.jl:20\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpxn_s84xv.jl:23\\n  Test threw exception\\n  Expression: candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1]\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Array{Int64,1}\\n  Closest candidates are:\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(::String) at /tmp/tmpxn_s84xv.jl:15\\\
    n   [2] top-level scope at /tmp/tmpxn_s84xv.jl:23\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpxn_s84xv.jl:20\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpxn_s84xv.jl:24\\n  Test threw exception\\n  Expression: candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(::String) at /tmp/tmpxn_s84xv.jl:15\\\
    n   [2] top-level scope at /tmp/tmpxn_s84xv.jl:24\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpxn_s84xv.jl:20\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpxn_s84xv.jl:25\\n  Test threw exception\\n  Expression: candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(::String) at /tmp/tmpxn_s84xv.jl:15\\\
    n   [2] top-level scope at /tmp/tmpxn_s84xv.jl:25\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpxn_s84xv.jl:20\\n  \\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # Your code\
    \ here\n    # Hint: you can use `split` function to split a string into a list\
    \ of substrings\n    # Hint: you can use `push!` function to append an element\
    \ to the end of a list\n    # Hint: you can use `parse(Int64, \"1\")` to convert\
    \ a string \"1\" to an integer 1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxrh44rzr.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpxrh44rzr.jl:18\n\
    \   [2] top-level scope at /tmp/tmpxrh44rzr.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpxrh44rzr.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpxrh44rzr.jl:25\n  Test threw exception\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{Int64,1}\n  Closest candidates are:\n   \
    \ convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpxrh44rzr.jl:18\n\
    \   [2] top-level scope at /tmp/tmpxrh44rzr.jl:25\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpxrh44rzr.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpxrh44rzr.jl:26\n  Test threw exception\n  Expression: candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{Int64,1}\n  Closest candidates are:\n   \
    \ convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpxrh44rzr.jl:18\n\
    \   [2] top-level scope at /tmp/tmpxrh44rzr.jl:26\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpxrh44rzr.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpxrh44rzr.jl:27\n  Test threw exception\n  Expression: candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpxrh44rzr.jl:18\n\
    \   [2] top-level scope at /tmp/tmpxrh44rzr.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpxrh44rzr.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpxrh44rzr.jl:28\n  Test threw exception\n  Expression: candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpxrh44rzr.jl:18\n\
    \   [2] top-level scope at /tmp/tmpxrh44rzr.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpxrh44rzr.jl:23\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxrh44rzr.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string, \" \")\n        if note == \"o\"\n \
    \           push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = replace(music_string, \"o|\", \"|\")\n    music_string = replace(music_string,\
    \ \"o\", \"|\")\n    music_string = replace(music_string, \".\", \"|\")\n    music_string\
    \ = replace(music_string, \" \", \"\")\n    music_string = replace(music_string,\
    \ \"|\", \" \")\n    music_string = split(music_string)\n    music_string = parse.(Int64,\
    \ music_string)\n    return music_string\nend\nusing Test\n\n@testset begin\n\n\
    candidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7gw63rkv.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  MethodError: no method\
    \ matching replace(::String, ::String, ::String)\n  Closest candidates are:\n\
    \    replace(::String, !Matched::Pair{#s67,B} where B where #s67<:AbstractChar;\
    \ count) at strings/util.jl:421\n    replace(::String, !Matched::Pair{#s64,B}\
    \ where B where #s64<:Union{Tuple{Vararg{AbstractChar,N} where N}, Set{#s61} where\
    \ #s61<:AbstractChar, AbstractArray{#s62,1} where #s62<:AbstractChar}; count)\
    \ at strings/util.jl:426\n    replace(::String, !Matched::Pair; count) at strings/util.jl:433\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmp7gw63rkv.jl:14\n\
    \   [2] top-level scope at /tmp/tmp7gw63rkv.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp7gw63rkv.jl:27\n  \ntest set: Error During\
    \ Test at /tmp/tmp7gw63rkv.jl:29\n  Test threw exception\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n  MethodError: no method matching replace(::String,\
    \ ::String, ::String)\n  Closest candidates are:\n    replace(::String, !Matched::Pair{#s67,B}\
    \ where B where #s67<:AbstractChar; count) at strings/util.jl:421\n    replace(::String,\
    \ !Matched::Pair{#s64,B} where B where #s64<:Union{Tuple{Vararg{AbstractChar,N}\
    \ where N}, Set{#s61} where #s61<:AbstractChar, AbstractArray{#s62,1} where #s62<:AbstractChar};\
    \ count) at strings/util.jl:426\n    replace(::String, !Matched::Pair; count)\
    \ at strings/util.jl:433\n    ...\n  Stacktrace:\n   [1] parse_music(::String)\
    \ at /tmp/tmp7gw63rkv.jl:14\n   [2] top-level scope at /tmp/tmp7gw63rkv.jl:29\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp7gw63rkv.jl:27\n  \ntest set: Error During\
    \ Test at /tmp/tmp7gw63rkv.jl:30\n  Test threw exception\n  Expression: candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1]\n  MethodError: no method matching replace(::String,\
    \ ::String, ::String)\n  Closest candidates are:\n    replace(::String, !Matched::Pair{#s67,B}\
    \ where B where #s67<:AbstractChar; count) at strings/util.jl:421\n    replace(::String,\
    \ !Matched::Pair{#s64,B} where B where #s64<:Union{Tuple{Vararg{AbstractChar,N}\
    \ where N}, Set{#s61} where #s61<:AbstractChar, AbstractArray{#s62,1} where #s62<:AbstractChar};\
    \ count) at strings/util.jl:426\n    replace(::String, !Matched::Pair; count)\
    \ at strings/util.jl:433\n    ...\n  Stacktrace:\n   [1] parse_music(::String)\
    \ at /tmp/tmp7gw63rkv.jl:14\n   [2] top-level scope at /tmp/tmp7gw63rkv.jl:30\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp7gw63rkv.jl:27\n  \ntest set: Error During\
    \ Test at /tmp/tmp7gw63rkv.jl:31\n  Test threw exception\n  Expression: candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n  MethodError: no method matching\
    \ replace(::String, ::String, ::String)\n  Closest candidates are:\n    replace(::String,\
    \ !Matched::Pair{#s67,B} where B where #s67<:AbstractChar; count) at strings/util.jl:421\n\
    \    replace(::String, !Matched::Pair{#s64,B} where B where #s64<:Union{Tuple{Vararg{AbstractChar,N}\
    \ where N}, Set{#s61} where #s61<:AbstractChar, AbstractArray{#s62,1} where #s62<:AbstractChar};\
    \ count) at strings/util.jl:426\n    replace(::String, !Matched::Pair; count)\
    \ at strings/util.jl:433\n    ...\n  Stacktrace:\n   [1] parse_music(::String)\
    \ at /tmp/tmp7gw63rkv.jl:14\n   [2] top-level scope at /tmp/tmp7gw63rkv.jl:31\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp7gw63rkv.jl:27\n  \ntest set: Error During\
    \ Test at /tmp/tmp7gw63rkv.jl:32\n  Test threw exception\n  Expression: candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n  MethodError: no method\
    \ matching replace(::String, ::String, ::String)\n  Closest candidates are:\n\
    \    replace(::String, !Matched::Pair{#s67,B} where B where #s67<:AbstractChar;\
    \ count) at strings/util.jl:421\n    replace(::String, !Matched::Pair{#s64,B}\
    \ where B where #s64<:Union{Tuple{Vararg{AbstractChar,N} where N}, Set{#s61} where\
    \ #s61<:AbstractChar, AbstractArray{#s62,1} where #s62<:AbstractChar}; count)\
    \ at strings/util.jl:426\n    replace(::String, !Matched::Pair; count) at strings/util.jl:433\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmp7gw63rkv.jl:14\n\
    \   [2] top-level scope at /tmp/tmp7gw63rkv.jl:32\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp7gw63rkv.jl:27\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7gw63rkv.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\nend\n \nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2kq6dipr.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmp2kq6dipr.jl:15\n\
    \   [2] top-level scope at /tmp/tmp2kq6dipr.jl:22\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp2kq6dipr.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmp2kq6dipr.jl:23\n  Test threw exception\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{Int64,1}\n  Closest candidates are:\n   \
    \ convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmp2kq6dipr.jl:15\n\
    \   [2] top-level scope at /tmp/tmp2kq6dipr.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp2kq6dipr.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmp2kq6dipr.jl:24\n  Test threw exception\n  Expression: candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{Int64,1}\n  Closest candidates are:\n   \
    \ convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmp2kq6dipr.jl:15\n\
    \   [2] top-level scope at /tmp/tmp2kq6dipr.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp2kq6dipr.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmp2kq6dipr.jl:25\n  Test threw exception\n  Expression: candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmp2kq6dipr.jl:15\n\
    \   [2] top-level scope at /tmp/tmp2kq6dipr.jl:25\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp2kq6dipr.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmp2kq6dipr.jl:26\n  Test threw exception\n  Expression: candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmp2kq6dipr.jl:15\n\
    \   [2] top-level scope at /tmp/tmp2kq6dipr.jl:26\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp2kq6dipr.jl:21\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2kq6dipr.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string, \" \")\n        if note == \"o\"\n \
    \           push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\n    return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1ef1ckgn.jl:22\n  Expression: candidate(\"\
    \") == Vector{Int64}([])\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp1ef1ckgn.jl:22\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1ef1ckgn.jl:21\ntest set: Test Failed at /tmp/tmp1ef1ckgn.jl:23\n\
    \  Expression: candidate(\"o o o o\") == [4, 4, 4, 4]\n   Evaluated: [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4] == [4, 4, 4, 4]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp1ef1ckgn.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1ef1ckgn.jl:21\ntest set: Test Failed at /tmp/tmp1ef1ckgn.jl:24\n\
    \  Expression: candidate(\".| .| .| .|\") == [1, 1, 1, 1]\n   Evaluated: [4, 2,\
    \ 1, 2, 2, 1, 1, 1, 1, 4, 4] == [1, 1, 1, 1]\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp1ef1ckgn.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1ef1ckgn.jl:21\ntest set: Test Failed at /tmp/tmp1ef1ckgn.jl:25\n\
    \  Expression: candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n\
    \   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [2, 2, 1, 1, 4, 4, 4, 4]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp1ef1ckgn.jl:25\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1ef1ckgn.jl:21\ntest set: Test Failed at /tmp/tmp1ef1ckgn.jl:26\n\
    \  Expression: candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n\
    \   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [2, 1, 2, 1, 4, 2, 4, 2]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp1ef1ckgn.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1ef1ckgn.jl:21\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1ef1ckgn.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # YOUR CODE\
    \ HERE\n    # You can use the following code to get started:\n    # return [4,\
    \ 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    notes = split(music_string, \" \")\n    beats\
    \ = []\n    for note in notes\n        if note == \"o\"\n            push!(beats,\
    \ 4)\n        elseif note == \"o|\"\n            push!(beats, 2)\n        elseif\
    \ note == \".|\"\n            push!(beats, 1)\n        end\n    end\n    return\
    \ beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ goes here\n    return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpiqzzpzv9.jl:22\n  Expression: candidate(\"\
    \") == Vector{Int64}([])\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpiqzzpzv9.jl:22\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpiqzzpzv9.jl:21\ntest set: Test Failed at /tmp/tmpiqzzpzv9.jl:23\n\
    \  Expression: candidate(\"o o o o\") == [4, 4, 4, 4]\n   Evaluated: [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4] == [4, 4, 4, 4]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpiqzzpzv9.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpiqzzpzv9.jl:21\ntest set: Test Failed at /tmp/tmpiqzzpzv9.jl:24\n\
    \  Expression: candidate(\".| .| .| .|\") == [1, 1, 1, 1]\n   Evaluated: [4, 2,\
    \ 1, 2, 2, 1, 1, 1, 1, 4, 4] == [1, 1, 1, 1]\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpiqzzpzv9.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpiqzzpzv9.jl:21\ntest set: Test Failed at /tmp/tmpiqzzpzv9.jl:25\n\
    \  Expression: candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n\
    \   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [2, 2, 1, 1, 4, 4, 4, 4]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpiqzzpzv9.jl:25\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpiqzzpzv9.jl:21\ntest set: Test Failed at /tmp/tmpiqzzpzv9.jl:26\n\
    \  Expression: candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n\
    \   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [2, 1, 2, 1, 4, 2, 4, 2]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpiqzzpzv9.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpiqzzpzv9.jl:21\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiqzzpzv9.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\n    notes = split(music_string, \" \")\n    beats = []\n    for note in\
    \ notes\n        if note == \"o\"\n            push!(beats, 4)\n        elseif\
    \ note == \"o|\"\n            push!(beats, 2)\n        elseif note == \".|\"\n\
    \            push!(beats, 1)\n        end\n    end\n    return beats\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ goes here\n    notes = split(music_string, \" \")\n    beats = []\n    for note\
    \ in notes\n        if note == \"o\"\n            push!(beats, 4)\n        elseif\
    \ note == \"o|\"\n            push!(beats, 2)\n        elseif note == \".|\"\n\
    \            push!(beats, 1)\n        end\n    end\n    return beats\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = replace(music_string, \" \" => \"\")\n    music_string = replace(music_string,\
    \ \"o\" => \"o|\")\n    music_string = replace(music_string, \"|\" => \"\")\n\
    \    music_string = replace(music_string, \"o\" => \"4\")\n    music_string =\
    \ replace(music_string, \".\" => \"1\")\n    music_string = split(music_string,\
    \ \"\")\n    music_string = parse.(Int64, music_string)\n    return music_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9rud_igo.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  ArgumentError: input string\
    \ is empty or only contains whitespace\n  Stacktrace:\n   [1] tryparse_internal(::Type{Int64},\
    \ ::SubString{String}, ::Int64, ::Int64, ::Int64, ::Bool) at ./parse.jl:95\n \
    \  [2] parse(::Type{Int64}, ::SubString{String}; base::Nothing) at ./parse.jl:238\n\
    \   [3] parse at ./parse.jl:238 [inlined]\n   [4] _broadcast_getindex_evalf at\
    \ ./broadcast.jl:631 [inlined]\n   [5] _broadcast_getindex at ./broadcast.jl:614\
    \ [inlined]\n   [6] getindex at ./broadcast.jl:564 [inlined]\n   [7] macro expansion\
    \ at ./broadcast.jl:910 [inlined]\n   [8] macro expansion at ./simdloop.jl:77\
    \ [inlined]\n   [9] copyto! at ./broadcast.jl:909 [inlined]\n   [10] copyto! at\
    \ ./broadcast.jl:864 [inlined]\n   [11] copy at ./broadcast.jl:840 [inlined]\n\
    \   [12] materialize at ./broadcast.jl:820 [inlined]\n   [13] parse_music(::String)\
    \ at /tmp/tmp9rud_igo.jl:20\n   [14] top-level scope at /tmp/tmp9rud_igo.jl:28\n\
    \   [15] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [16] top-level scope at /tmp/tmp9rud_igo.jl:27\n  \ntest set: Test Failed\
    \ at /tmp/tmp9rud_igo.jl:31\n  Expression: candidate(\"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: [4, 4, 1, 1, 4, 4, 4, 4] == [2, 2,\
    \ 1, 1, 4, 4, 4, 4]\nStacktrace:\n [1] top-level scope at /tmp/tmp9rud_igo.jl:31\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9rud_igo.jl:27\ntest set: Test Failed at /tmp/tmp9rud_igo.jl:32\n\
    \  Expression: candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n\
    \   Evaluated: [4, 1, 4, 1, 4, 4, 4, 4] == [2, 1, 2, 1, 4, 2, 4, 2]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9rud_igo.jl:32\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9rud_igo.jl:27\nTest Summary: | Pass  Fail  Error\
    \  Total\ntest set      |    2     2      1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 2 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9rud_igo.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ goes here\n    return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf0pcn96z.jl:22\n  Expression: candidate(\"\
    \") == Vector{Int64}([])\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpf0pcn96z.jl:22\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpf0pcn96z.jl:21\ntest set: Test Failed at /tmp/tmpf0pcn96z.jl:23\n\
    \  Expression: candidate(\"o o o o\") == [4, 4, 4, 4]\n   Evaluated: [4, 2, 1,\
    \ 2, 2, 1, 1, 1, 1, 4, 4] == [4, 4, 4, 4]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpf0pcn96z.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpf0pcn96z.jl:21\ntest set: Test Failed at /tmp/tmpf0pcn96z.jl:24\n\
    \  Expression: candidate(\".| .| .| .|\") == [1, 1, 1, 1]\n   Evaluated: [4, 2,\
    \ 1, 2, 2, 1, 1, 1, 1, 4, 4] == [1, 1, 1, 1]\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpf0pcn96z.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpf0pcn96z.jl:21\ntest set: Test Failed at /tmp/tmpf0pcn96z.jl:25\n\
    \  Expression: candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n\
    \   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [2, 2, 1, 1, 4, 4, 4, 4]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpf0pcn96z.jl:25\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpf0pcn96z.jl:21\ntest set: Test Failed at /tmp/tmpf0pcn96z.jl:26\n\
    \  Expression: candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n\
    \   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [2, 1, 2, 1, 4, 2, 4, 2]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpf0pcn96z.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpf0pcn96z.jl:21\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf0pcn96z.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string)\n        if note == \"o\"\n        \
    \    push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    result =\
    \ []\n    for i in 1:length(music_string)\n        if music_string[i] == 'o'\n\
    \            if i == length(music_string) || music_string[i+1] != '|'\n      \
    \          push!(result, 4)\n            else\n                push!(result, 2)\n\
    \                i += 1\n            end\n        elseif music_string[i] == '.'\n\
    \            push!(result, 1)\n            i += 1\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # YOUR CODE\
    \ HERE\n    notes = split(music_string, \" \")\n    beats = []\n    for note in\
    \ notes\n        if note == \"o\"\n            push!(beats, 4)\n        elseif\
    \ note == \"o|\"\n            push!(beats, 2)\n        elseif note == \".|\"\n\
    \            push!(beats, 1)\n        end\n    end\n    return beats\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\n    return []\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmpz70s3m.jl:23\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n   Evaluated: Int64[] == [4, 4, 4, 4]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmpz70s3m.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmpz70s3m.jl:21\ntest set: Test Failed at /tmp/tmpmpz70s3m.jl:24\n\
    \  Expression: candidate(\".| .| .| .|\") == [1, 1, 1, 1]\n   Evaluated: Int64[]\
    \ == [1, 1, 1, 1]\nStacktrace:\n [1] top-level scope at /tmp/tmpmpz70s3m.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmpz70s3m.jl:21\ntest set: Test Failed at /tmp/tmpmpz70s3m.jl:25\n\
    \  Expression: candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n\
    \   Evaluated: Int64[] == [2, 2, 1, 1, 4, 4, 4, 4]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpmpz70s3m.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmpz70s3m.jl:21\ntest set: Test Failed at /tmp/tmpmpz70s3m.jl:26\n\
    \  Expression: candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n\
    \   Evaluated: Int64[] == [2, 1, 2, 1, 4, 2, 4, 2]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpmpz70s3m.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmpz70s3m.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmpz70s3m.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ goes here\n    notes = split(music_string, \" \")\n    beats = []\n    for note\
    \ in notes\n        if note == \"o\"\n            push!(beats, 4)\n        elseif\
    \ note == \"o|\"\n            push!(beats, 2)\n        elseif note == \".|\"\n\
    \            push!(beats, 1)\n        end\n    end\n    return beats\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # Your code\
    \ here\n    # You can use the following function to convert a character to a number\n\
    \    # parse(Int64, 'o')\n    # parse(Int64, 'o|')\n    # parse(Int64, '.|')\n\
    \    # parse(Int64, 'o')\n    # parse(Int64, 'o|')\n    # parse(Int64, '.|')\n\
    \    # parse(Int64, 'o|')\n    # parse(Int64, 'o|')\n    # parse(Int64, '.|')\n\
    \    # parse(Int64, '.|')\n    # parse(Int64, '.|')\n    # parse(Int64, '.|')\n\
    \    # parse(Int64, 'o')\n    # parse(Int64, 'o')\n    # parse(Int64, 'o')\n \
    \   # parse(Int64, 'o')\n    # parse(Int64, 'o')\n    # parse(Int64, 'o')\n  \
    \  # parse(Int64, 'o')\n    # parse(Int64, 'o')\n    # parse(Int64, 'o')\n   \
    \ # parse(Int64, 'o')\n    # parse(Int64, 'o')\n    # parse(Int64, 'o')\n    #\
    \ parse(Int64, 'o')\n    # parse(Int64, 'o')\n    # parse(Int64, 'o')\n    # parse(Int64,\
    \ 'o')\n    # parse(Int64, 'o')\n    # parse(Int64, 'o')\n    # parse(Int64, 'o')\n\
    \    # parse(Int64, 'o')\n    # parse(Int64, 'o')\n    # parse(Int64, 'o')\n \
    \   # parse(Int64, 'o')\n    # parse(Int64, 'o')\n    # parse(Int64, 'o')\n  \
    \  # parse(Int64, 'o')\n    # parse(Int64, 'o')\n    # parse(Int64, 'o')\n   \
    \ # parse(Int64, 'o')\n    # parse(Int64, 'o')\n    # parse(Int64, 'o')\n    #\
    \ parse(Int64, 'o')\n   \nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0ndeiahw.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp0ndeiahw.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp0ndeiahw.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # YOUR CODE\
    \ HERE\n    notes = split(music_string, \" \")\n    beats = []\n    for note in\
    \ notes\n        if note == \"o\"\n            push!(beats, 4)\n        elseif\
    \ note == \"o|\"\n            push!(beats, 2)\n        elseif note == \".|\"\n\
    \            push!(beats, 1)\n        end\n    end\n    return beats\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string, \" \")\n        if note == \"o\"\n \
    \           push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ goes here\n    notes = split(music_string, ' ')\n    beats = []\n    for note\
    \ in notes\n        if note == \"o\"\n            push!(beats, 4)\n        elseif\
    \ note == \"o|\"\n            push!(beats, 2)\n        elseif note == \".|\"\n\
    \            push!(beats, 1)\n        end\n    end\n    return beats\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5q4sxvmq.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmp5q4sxvmq.jl:15\n\
    \   [2] top-level scope at /tmp/tmp5q4sxvmq.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp5q4sxvmq.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmp5q4sxvmq.jl:22\n  Test threw exception\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{Int64,1}\n  Closest candidates are:\n   \
    \ convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmp5q4sxvmq.jl:15\n\
    \   [2] top-level scope at /tmp/tmp5q4sxvmq.jl:22\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp5q4sxvmq.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmp5q4sxvmq.jl:23\n  Test threw exception\n  Expression: candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{Int64,1}\n  Closest candidates are:\n   \
    \ convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmp5q4sxvmq.jl:15\n\
    \   [2] top-level scope at /tmp/tmp5q4sxvmq.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp5q4sxvmq.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmp5q4sxvmq.jl:24\n  Test threw exception\n  Expression: candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmp5q4sxvmq.jl:15\n\
    \   [2] top-level scope at /tmp/tmp5q4sxvmq.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp5q4sxvmq.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmp5q4sxvmq.jl:25\n  Test threw exception\n  Expression: candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmp5q4sxvmq.jl:15\n\
    \   [2] top-level scope at /tmp/tmp5q4sxvmq.jl:25\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp5q4sxvmq.jl:20\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5q4sxvmq.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # Your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqc_imndw.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpqc_imndw.jl:15\n\
    \   [2] top-level scope at /tmp/tmpqc_imndw.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqc_imndw.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpqc_imndw.jl:22\n  Test threw exception\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{Int64,1}\n  Closest candidates are:\n   \
    \ convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpqc_imndw.jl:15\n\
    \   [2] top-level scope at /tmp/tmpqc_imndw.jl:22\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqc_imndw.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpqc_imndw.jl:23\n  Test threw exception\n  Expression: candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{Int64,1}\n  Closest candidates are:\n   \
    \ convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpqc_imndw.jl:15\n\
    \   [2] top-level scope at /tmp/tmpqc_imndw.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqc_imndw.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpqc_imndw.jl:24\n  Test threw exception\n  Expression: candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpqc_imndw.jl:15\n\
    \   [2] top-level scope at /tmp/tmpqc_imndw.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqc_imndw.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpqc_imndw.jl:25\n  Test threw exception\n  Expression: candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmpqc_imndw.jl:15\n\
    \   [2] top-level scope at /tmp/tmpqc_imndw.jl:25\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqc_imndw.jl:20\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqc_imndw.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ goes here\n    # you can use any other functions you want\n    # you can use\
    \ any other data structures you want\n    # you can use any other packages you\
    \ want\n    # you can use any other language features you want\n    # you can\
    \ use any other language you want\n    # you can use any other compiler you want\n\
    \    # you can use any other operating system you want\n    # you can use any\
    \ other hardware you want\n    # you can use any other universe you want\n   \
    \ # you can use any other dimension you want\n    # you can use any other time\
    \ you want\n    # you can use any other space you want\n    # you can use any\
    \ other matter you want\n    # you can use any other energy you want\n    # you\
    \ can use any other force you want\n    # you can use any other information you\
    \ want\n    # you can use any other life you want\n    # you can use any other\
    \ intelligence you want\n    # you can use any other consciousness you want\n\
    \    # you can use any other soul you want\n    # you can use any other god you\
    \ want\n    # you can use any other universe you want\n    # you can use any other\
    \ dimension you want\n    # you can use any other time you want\n    # you can\
    \ use any other space you want\n    # you can use any other matter you want\n\
    \    # you can use any other energy you want\n    # you can use any other force\
    \ you want\n    # you can use any other information you want\n    # you can use\
    \ any other life you want\n    # you can use any other intelligence you want\n\
    \    # you can use any other consciousness you want\n    # you can use any other\
    \ soul you want\n    # you can use any other god you want\n    # you can use any\
    \ other universe you want\n    # you can use any other dimension you want\n  \
    \  # you can use any other time you want\n    # you can use any other space you\
    \ want\n    # you can use any other matter you want\n    # you can use any other\
    \ energy you want\n    # you can use any other force you want\n    # you can use\
    \ any other information you want\n    # you can use any other life you want\n\
    \    # you can use any other intelligence you want\n    # you can use any other\
    \ consciousness you want\n    # you can use any\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7xnef3u7.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp7xnef3u7.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp7xnef3u7.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string, \" \")\n        if note == \"o\"\n \
    \           push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # YOUR CODE\
    \ HERE\n    # You may find `split` function useful\n    # https://docs.julialang.org/en/v1/base/strings/#Base.split\n\
    \    # You may also find `parse` function useful\n    # https://docs.julialang.org/en/v1/base/strings/#Base.parse\n\
    \    # You may also find `replace` function useful\n    # https://docs.julialang.org/en/v1/base/strings/#Base.replace\n\
    \    # You may also find `map` function useful\n    # https://docs.julialang.org/en/v1/base/collections/#Base.map\n\
    \    # You may also find `repeat` function useful\n    # https://docs.julialang.org/en/v1/base/arrays/#Base.repeat\n\
    \    # You may also find `collect` function useful\n    # https://docs.julialang.org/en/v1/base/arrays/#Base.collect\n\
    \    # You may also find `reduce` function useful\n    # https://docs.julialang.org/en/v1/base/collections/#Base.reduce\n\
    \    # You may also find `+` function useful\n    # https://docs.julialang.org/en/v1/base/math/#Base.+\n\
    \    # You may also find `parse` function useful\n    # https://docs.julialang.org/en/v1/base/strings/#Base.parse\n\
    \    # You may also find `replace` function useful\n    # https://docs.julialang.org/en/v1/base/strings/#Base.replace\n\
    \    # You may also find `map` function useful\n    # https://docs.julialang.org/en/v1/base/collections/#Base.map\n\
    \    # You may also find `repeat` function useful\n    # https://docs.julialang.org/en/v1/base/arrays/#Base.repeat\n\
    \    # You may also find `collect` function useful\n    # https://docs.julialang.org/en/v1/base/arrays/#Base.collect\n\
    \    # You\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpt5012eec.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpt5012eec.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpt5012eec.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # Your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppejnq84d.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmppejnq84d.jl:15\n\
    \   [2] top-level scope at /tmp/tmppejnq84d.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmppejnq84d.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmppejnq84d.jl:22\n  Test threw exception\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{Int64,1}\n  Closest candidates are:\n   \
    \ convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmppejnq84d.jl:15\n\
    \   [2] top-level scope at /tmp/tmppejnq84d.jl:22\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmppejnq84d.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmppejnq84d.jl:23\n  Test threw exception\n  Expression: candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1]\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{Int64,1}\n  Closest candidates are:\n   \
    \ convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmppejnq84d.jl:15\n\
    \   [2] top-level scope at /tmp/tmppejnq84d.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmppejnq84d.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmppejnq84d.jl:24\n  Test threw exception\n  Expression: candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmppejnq84d.jl:15\n\
    \   [2] top-level scope at /tmp/tmppejnq84d.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmppejnq84d.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmppejnq84d.jl:25\n  Test threw exception\n  Expression: candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(::String) at /tmp/tmppejnq84d.jl:15\n\
    \   [2] top-level scope at /tmp/tmppejnq84d.jl:25\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmppejnq84d.jl:20\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppejnq84d.jl:18\n"
  exit_code: 1
  status: SyntaxError
