name: HumanEval_93_encode
language: julia
prompt: "\"\"\"\n    Write a function that takes a message, and encodes in such a\
  \ \n    way that it swaps case of all letters, replaces all vowels in \n    the\
  \ message with the letter that appears 2 places ahead of that \n    vowel in the\
  \ english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n\
  \    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\
  \"\"\nfunction encode(message::String)::String \n"
tests: "using Test\n\n@testset begin\n\ncandidate = encode;\n\t@test(candidate(\"\
  TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"\
  YES\") == \"ygs\")\n\t@test(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
  )\n\t@test(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\
  )\nend\n"
completions: ["    message = uppercase(message)\n    message = replace(message, \"\
    A\" => \"C\")\n    message = replace(message, \"E\" => \"G\")\n    message = replace(message,\
    \ \"I\" => \"K\")\n    message = replace(message, \"O\" => \"Q\")\n    message\
    \ = replace(message, \"U\" => \"W\")\n    message = replace(message, \"Y\" =>\
    \ \"A\")\n    return message\nend", "    # TODO: write your code here\n    return\
    \ \"TGST\"\nend", "    vowels = \"aeiou\"\n    new_message = \"\"\n    for i in\
    \ 1:length(message)\n        if message[i] in vowels\n            new_message\
    \ = new_message * message[i+2]\n        elseif message[i] in lowercase(vowels)\n\
    \            new_message = new_message * message[i+2]\n        else\n        \
    \    new_message = new_message * message[i]\n        end\n    end\n    return\
    \ new_message\nend", "    # YOUR CODE HERE\n    return message\nend", "    # your\
    \ code here\nend", "    # your code here\n    return message\nend", "    # create\
    \ a dictionary of vowels\n    vowels = Dict('a'=>'c', 'e'=>'g', 'i'=>'k', 'o'=>'q',\
    \ 'u'=>'y')\n    # create a dictionary of letters\n    letters = Dict('a'=>'A',\
    \ 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E', 'f'=>'F', 'g'=>'G', 'h'=>'H', 'i'=>'I',\
    \ 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M', 'n'=>'N', 'o'=>'O', 'p'=>'P', 'q'=>'Q',\
    \ 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U', 'v'=>'V', 'w'=>'W', 'x'=>'X', 'y'=>'Y',\
    \ 'z'=>'Z')\n    # create a dictionary of letters\n    letters2 = Dict('A'=>'a',\
    \ 'B'=>'b', 'C'=>'c', 'D'=>'d', 'E'=>'e', 'F'=>'f', 'G'=>'g', 'H'=>'h', 'I'=>'i',\
    \ 'J'=>'j', 'K'=>'k', 'L'=>'l', 'M'=>'m', 'N'=>'n', 'O'=>'o', 'P'=>'p', 'Q'=>'q',\
    \ 'R'=>'r', 'S'=>'s', 'T'=>'t', 'U'=>'u', 'V'=>'v', 'W'=>'w', 'X'=>'x', 'Y'=>'y',\
    \ 'Z'=>'z')\n    # create an empty string\n    new_message = \"\"\n    # iterate\
    \ through the message\n    for i in message\n        # if the letter is in the\
    \ vowels dictionary\n        if i in keys(vowels)\n            # add the value\
    \ of the letter to the new message\n            push!", "    # YOUR CODE HERE\n\
    \    return \"TGST\"\nend", "    # your code here\nend", "    # your code here\n\
    end", "    # your code here\nend", "    # YOUR CODE HERE\n    return \"TGST\"\n\
    end", "    # YOUR CODE HERE\n    return \"TGST\"\nend", "    # YOUR CODE HERE\n\
    end", "    # Your code here\nend", "    message = uppercase(message)\n    message\
    \ = replace(message, \"A\", \"C\")\n    message = replace(message, \"E\", \"G\"\
    )\n    message = replace(message, \"I\", \"K\")\n    message = replace(message,\
    \ \"O\", \"Q\")\n    message = replace(message, \"U\", \"W\")\n    message = replace(message,\
    \ \"Y\", \"A\")\n    message = lowercase(message)\n    return message\nend", " \
    \   # your code here\nend", "    # YOUR CODE HERE\nend", "    # your code here\n\
    end", "    # your code here\nend", "    # your code here\n    return \"TGST\"\n\
    end", "    # your code here\nend", "    # your code here\nend", "    new_message\
    \ = \"\"\n    for i in message\n        if i in \"aeiou\"\n            new_message\
    \ = new_message * i[3]\n        elseif i in \"AEIOU\"\n            new_message\
    \ = new_message * i[3]\n        else\n            new_message = new_message *\
    \ i\n        end\n    end\n    return new_message\nend", "    # your code here\n\
    end", "    # YOUR CODE HERE\nend", "    # your code here\nend", "    # YOUR CODE\
    \ HERE\nend", "    new_message = \"\"\n    for i in message\n        if i in \"\
    aeiouAEIOU\"\n            if i in \"aeiou\"\n                new_message *= string(i+2)\n\
    \            else\n                new_message *= string(i+2)\n            end\n\
    \        else\n            new_message *= string(i)\n        end\n    end\n  \
    \  return new_message\nend", "    # TODO: Write your code here\nend", "    # create\
    \ a dictionary to map vowels to the next two letters\n    # in the alphabet\n\
    \    vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"]\n    next_two = [\"c\",\"f\",\"\
    j\",\"m\",\"q\"]\n    mapping = Dict()\n    for i in 1:length(vowels)\n      \
    \  mapping[vowels[i]] = next_two[i]\n    end\n    # create a string to store the\
    \ encoded message\n    encoded = \"\"\n    # iterate through the message\n   \
    \ for i in 1:length(message)\n        # if the letter is a vowel, replace it with\
    \ the next two letters\n        if message[i] in vowels\n            encoded =\
    \ encoded * mapping[message[i]]\n        # if the letter is a capital letter,\
    \ make it lowercase\n        elseif message[i] in uppercase(message)\n       \
    \     encoded = encoded * lowercase(message[i])\n        # if the letter is a\
    \ lowercase letter, make it uppercase\n        elseif message[i] in lowercase(message)\n\
    \            encoded = encoded * uppercase(message[i])\n        # if the letter\
    \ is not a letter, leave it alone\n        else\n            encoded = encoded\
    \ * message[i]\n        end\n    end\n    return encoded\nend", "    # your code\
    \ here\nend", "    # your code here\nend", "    message = uppercase(message)\n\
    \    message = replace(message, \"A\", \"C\")\n    message = replace(message,\
    \ \"E\", \"G\")\n    message = replace(message, \"I\", \"K\")\n    message = replace(message,\
    \ \"O\", \"Q\")\n    message = replace(message, \"U\", \"W\")\n    message = replace(message,\
    \ \"Y\", \"A\")\n    message = lowercase(message)\n    return message\nend", " \
    \   encoded = \"\"\n    for i in 1:length(message)\n        if islower(message[i])\n\
    \            encoded = encoded * uppercase(message[i])\n        elseif isupper(message[i])\n\
    \            encoded = encoded * lowercase(message[i])\n        else\n       \
    \     encoded = encoded * message[i]\n        end\n    end\n    return encoded\n\
    end", "    return encode(collect(message))\nend", "    # convert message to lowercase\n\
    \    message = lowercase(message)\n    # create a dictionary to map letters to\
    \ their encoded values\n    dict = Dict()\n    # create a list of vowels\n   \
    \ vowels = ['a', 'e', 'i', 'o', 'u']\n    # create a list of letters\n    letters\
    \ = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\
    \ 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    # create a list\
    \ of encoded letters\n    encoded_letters = ['c', 'd', 'e', 'f', 'g', 'h', 'i',\
    \ 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',\
    \ 'z', 'a', 'b']\n    # loop through the letters and encoded letters\n    for\
    \ i in 1:length(letters)\n        # add the letter and encoded letter to the dictionary\n\
    \        dict[letters[i]] = encoded_letters[i]\n    end\n    # create an empty\
    \ string to store the encoded message\n    encoded_message = \"\"\n    # loop\
    \ through the message\n    for i in 1:length(message)\n        # check if the\
    \ letter is a vowel\n        if message[i] in vowels\n            # add the encoded\
    \ letter to the encoded message\n            encoded_message = encoded_message\
    \ * string(dict[message[i]])\n        else\n            # add the letter to the\
    \ encoded message\n            encoded_message = encoded_message * string(message[i])\n\
    \        end\n    end\n    # return the encoded message\n    return uppercase(encoded_message)\n\
    end", "    message = uppercase(message)\n    vowels = \"AEIOU\"\n    for i in\
    \ 1:length(message)\n        if message[i] in vowels\n            message[i] =\
    \ vowels[(findfirst(vowels, message[i]) + 2) % 5]\n        else\n            message[i]\
    \ = lowercase(message[i])\n        end\n    end\n    return message\nend", " \
    \   new_message = \"\"\n    for i in message\n        if i in \"aeiou\"\n    \
    \        new_message = new_message * i[3]\n        elseif i in \"AEIOU\"\n   \
    \         new_message = new_message * i[3]\n        else\n            new_message\
    \ = new_message * i\n        end\n    end\n    return new_message\nend", "   \
    \ # your code here\nend", "    # your code here\nend", "    # YOUR CODE HERE\n\
    end", "    # create a dictionary that maps vowels to the next two letters\n  \
    \  # in the alphabet\n    vowels = \"aeiou\"\n    next_two = Dict()\n    for i\
    \ in 1:length(vowels)\n        next_two[vowels[i]] = vowels[i+2]\n    end\n  \
    \  # create a dictionary that maps uppercase letters to lowercase\n    # and vice\
    \ versa\n    upper_to_lower = Dict()\n    lower_to_upper = Dict()\n    for i in\
    \ 'a':'z'\n        upper_to_lower[i] = i\n        lower_to_upper[i] = i\n    end\n\
    \    for i in 'A':'Z'\n        upper_to_lower[i] = i\n        lower_to_upper[i]\
    \ = i\n    end\n    # create a dictionary that maps letters to their next two\
    \ letters\n    # in the alphabet\n    next_two = Dict()\n    for i in 'a':'z'\n\
    \        next_two[i] = i\n    end\n    for i in 'A':'Z'\n        next_two[i] =\
    \ i\n    end\n    # create a dictionary that maps letters to their next two letters\n\
    \    # in the alphabet\n    next_two = Dict()\n    for i in 'a':'z'\n        next_two[i]\
    \ = i\n    end\n    for i in 'A':'Z'\n        next_two[i] = i\n    end\n    #\
    \ create a dictionary that maps letters to their next two letters\n    # in the\
    \ alphabet\n    next_two = Dict()\n    for i in 'a':'z'\n        next_two[i] =\
    \ i\n    end\n    for i in 'A':'Z'\n        next_two[i] = i\n    end\n    # create\
    \ a dictionary that maps letters to their next two letters\n    # in the alphabet\n\
    \    next_two = Dict()\n    for i in 'a':'z'\n        next_two[i] = i\n    end\n\
    \    for i in 'A':'Z'\n        next_two[i] = i\n    end\n    # create a dictionary\
    \ that maps letters", "    # your code here\nend", "    new_message = \"\"\n \
    \   for i in 1:length(message)\n        if islower(message[i])\n            new_message\
    \ *= uppercase(message[i])\n        elseif isupper(message[i])\n            new_message\
    \ *= lowercase(message[i])\n        elseif message[i] in [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n            new_message *= next_vowel(message[i])\n        else\n\
    \            new_message *= message[i]\n        end\n    end\n    return new_message\n\
    end", "    # your code here\nend", "    # your code here\nend", "    # YOUR CODE\
    \ HERE\nend", "    # your code here\nend", "    # Your code here\nend", "    new_message\
    \ = \"\"\n    for i in 1:length(message)\n        if islower(message[i])\n   \
    \         new_message = new_message * uppercase(message[i])\n        elseif isupper(message[i])\n\
    \            new_message = new_message * lowercase(message[i])\n        else\n\
    \            new_message = new_message * message[i]\n        end\n    end\n  \
    \  for i in 1:length(new_message)\n        if new_message[i] in ['a','e','i','o','u']\n\
    \            new_message[i] = new_message[i+2]\n        end\n    end\n    return\
    \ new_message\nend", "    # your code here\nend", "    # your code here\nend",
  "    new_message = \"\"\n    for i in 1:length(message)\n        if message[i] in\
    \ ['a','e','i','o','u']\n            new_message = new_message * string(message[i]\
    \ + 2)\n        elseif message[i] in ['A','E','I','O','U']\n            new_message\
    \ = new_message * string(message[i] + 2)\n        else\n            new_message\
    \ = new_message * string(message[i])\n        end\n    end\n    return new_message\n\
    end", "    # create a dictionary of vowels\n    vowels = Dict('a'=>'c', 'e'=>'g',\
    \ 'i'=>'k', 'o'=>'q', 'u'=>'y')\n    # create an empty string to store the encoded\
    \ message\n    encoded_message = \"\"\n    # iterate through the message\n   \
    \ for letter in message\n        # if the letter is a vowel, replace it with the\
    \ value in the dictionary\n        if letter in keys(vowels)\n            encoded_message\
    \ *= vowels[letter]\n        # if the letter is not a vowel, swap the case and\
    \ add it to the encoded message\n        else\n            encoded_message *=\
    \ swapcase(letter)\n        end\n    end\n    # return the encoded message\n \
    \   return encoded_message\nend", "    # your code here\n    return message\n\
    end", "    # convert to lowercase\n    message = lowercase(message)\n    # create\
    \ a dictionary that maps vowels to the next vowel\n    vowels = Dict('a'=>'c',\
    \ 'e'=>'g', 'i'=>'k', 'o'=>'q', 'u'=>'w')\n    # create a dictionary that maps\
    \ vowels to the next vowel\n    consonants = Dict('b'=>'d', 'c'=>'e', 'd'=>'f',\
    \ 'f'=>'h', 'g'=>'j', 'h'=>'k', 'j'=>'l', 'k'=>'m', 'l'=>'n', 'm'=>'p', 'n'=>'r',\
    \ 'p'=>'t', 'q'=>'v', 'r'=>'w', 's'=>'x', 't'=>'z', 'v'=>'b', 'w'=>'d', 'x'=>'f',\
    \ 'y'=>'h', 'z'=>'j')\n    # create an empty string to store the encoded message\n\
    \    encoded_message = \"\"\n    # iterate through the message\n    for letter\
    \ in message\n        # if the letter is a vowel, replace it with the next vowel\n\
    \        if letter in keys(vowels)\n            encoded_message = encoded_message\
    \ * vowels[letter]\n        # if the letter is a consonant, replace it with the\
    \ next consonant\n        elseif letter in keys(consonants)\n            encoded_message\
    \ = encoded_message * consonants[letter]\n        # otherwise, just add the letter\
    \ to the encoded message\n        else\n            encoded_message = encoded_message\
    \ * letter\n        end\n    end\n    # return the encoded message\n    return\
    \ uppercase(encoded_message)\nend", "    # TODO: write your code here\n    return\
    \ \"\"\nend", "    vowels = \"aeiou\"\n    new_message = \"\"\n    for letter\
    \ in message\n        if letter in vowels\n            index = findfirst(vowels,\
    \ letter)\n            new_message *= vowels[index + 2]\n        else\n      \
    \      new_message *= letter\n        end\n    end\n    return new_message\nend",
  "    # your code here\nend", "    # your code here\nend", "    # your code here\n\
    end", "    # create a dictionary for the vowels\n    vowels = Dict('a'=>'c', 'e'=>'g',\
    \ 'i'=>'k', 'o'=>'q', 'u'=>'y')\n    # create a dictionary for the letters\n \
    \   letters = Dict('a'=>'A', 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E', 'f'=>'F',\
    \ 'g'=>'G', 'h'=>'H', 'i'=>'I', 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M', 'n'=>'N',\
    \ 'o'=>'O', 'p'=>'P', 'q'=>'Q', 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U', 'v'=>'V',\
    \ 'w'=>'W', 'x'=>'X', 'y'=>'Y', 'z'=>'Z')\n    # create a dictionary for the lower\
    \ case letters\n    lower_letters = Dict('a'=>'a', 'b'=>'b', 'c'=>'c', 'd'=>'d',\
    \ 'e'=>'e', 'f'=>'f', 'g'=>'g', 'h'=>'h', 'i'=>'i', 'j'=>'j', 'k'=>'k', 'l'=>'l',\
    \ 'm'=>'m', 'n'=>'n', 'o'=>'o', 'p'=>'p', 'q'=>'q', 'r'=>'r', 's'=>'s', 't'=>'t',\
    \ 'u'=>'u', 'v'=>'v', 'w'=>'w', 'x'=>'x', 'y'=>'y', 'z'=>'z')\n    # create a\
    \ dictionary for the upper case letters\n    upper_letters = Dict('A'=>'A', 'B'=>'B',\
    \ 'C'=>'C', 'D'=>'D', 'E'=>'E', 'F'=>'F', '", "    # your code here\nend", " \
    \   # TODO: Write your code here\n    return \"TGST\"\nend", "    # your code\
    \ here\nend", "    # your code here\nend", "    # your code here\nend", "    #\
    \ TODO: complete this function\n    return \"TGST\"\nend", "    # your code here\n\
    end", "    # your code here\nend", "    # Your code here\nend", "    # your code\
    \ here\nend", "    # your code here\nend", "    # your code here\nend", "    #\
    \ your code here\nend", "    # create a dictionary of vowels and their corresponding\
    \ letters\n    vowels = Dict('a'=>'c', 'e'=>'g', 'i'=>'k', 'o'=>'q', 'u'=>'y')\n\
    \    # create an empty string to store the encoded message\n    encoded_message\
    \ = \"\"\n    # iterate through the message\n    for i in 1:length(message)\n\
    \        # if the letter is a vowel, replace it with the corresponding letter\n\
    \        if message[i] in keys(vowels)\n            encoded_message = encoded_message\
    \ * vowels[message[i]]\n        # if the letter is not a vowel, swap the case\n\
    \        else\n            if islower(message[i])\n                encoded_message\
    \ = encoded_message * uppercase(message[i])\n            else\n              \
    \  encoded_message = encoded_message * lowercase(message[i])\n            end\n\
    \        end\n    end\n    return encoded_message\nend", "    vowels = \"aeiou\"\
    \n    new_message = \"\"\n    for i in 1:length(message)\n        if message[i]\
    \ in vowels\n            new_message = new_message * message[i+2]\n        else\n\
    \            new_message = new_message * message[i]\n        end\n    end\n  \
    \  return new_message\nend", "    # your code here\nend", "    # YOUR CODE HERE\n\
    end", "    # YOUR CODE HERE\n    return \"TGST\"\nend", "    # your code here\n\
    end", "    # your code here\nend", "    # your code here\nend", "    # your code\
    \ here\nend", "    # your code here\nend", "    # your code here\nend", "    #\
    \ create a dictionary of vowels and their replacements\n    vowels = Dict('a'=>'c',\
    \ 'e'=>'g', 'i'=>'k', 'o'=>'q', 'u'=>'y')\n    # create an empty string to store\
    \ the encoded message\n    encoded = \"\"\n    # loop through each character in\
    \ the message\n    for c in message\n        # if the character is a vowel, replace\
    \ it with the value in the dictionary\n        if c in keys(vowels)\n        \
    \    encoded *= vowels[c]\n        # if the character is a lowercase letter, swap\
    \ it to uppercase\n        elseif c in 'abcdefghijklmnopqrstuvwxyz'\n        \
    \    encoded *= uppercase(c)\n        # if the character is an uppercase letter,\
    \ swap it to lowercase\n        elseif c in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n   \
    \         encoded *= lowercase(c)\n        # if the character is not a letter,\
    \ leave it as is\n        else\n            encoded *= c\n        end\n    end\n\
    \    # return the encoded message\n    return encoded\nend", "    # your code\
    \ here\n    return \"\"\nend", "    # your code here\nend", "    encoded_message\
    \ = \"\"\n    for letter in message\n        if letter in \"aeiou\"\n        \
    \    encoded_message *= encode_vowel(letter)\n        elseif letter in \"AEIOU\"\
    \n            encoded_message *= encode_vowel(letter)\n        elseif letter in\
    \ \"abcdefghijklmnopqrstuvwxyz\"\n            encoded_message *= encode_consonant(letter)\n\
    \        elseif letter in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n            encoded_message\
    \ *= encode_consonant(letter)\n        else\n            encoded_message *= letter\n\
    \        end\n    end\n    return encoded_message\nend", "    # TODO: write code\
    \ here\n    return message\nend", "    # your code here\n    return \"TGST\"\n\
    end", "    new_message = \"\"\n    for i in 1:length(message)\n        if islower(message[i])\n\
    \            new_message = new_message * uppercase(message[i])\n        elseif\
    \ isupper(message[i])\n            new_message = new_message * lowercase(message[i])\n\
    \        else\n            new_message = new_message * message[i]\n        end\n\
    \    end\n    return new_message\nend", "    # your code here\nend", "    # your\
    \ code here\nend", "    # your code here\nend", "    # YOUR CODE HERE\n    return\
    \ \"TGST\"\nend", "    # your code here\nend", "    # your code here\nend", " \
    \   # Your code here\nend", "    # your code here\nend", "    # TODO: Write your\
    \ code here\n    return \"TGST\"\nend", "    # convert to upper case\n    message\
    \ = uppercase(message)\n    # create a dictionary with the vowels and their replacements\n\
    \    vowels = Dict('A'=>'C', 'E'=>'G', 'I'=>'K', 'O'=>'Q', 'U'=>'S')\n    # create\
    \ an empty string to store the encoded message\n    encoded = \"\"\n    # loop\
    \ through each character in the message\n    for char in message\n        # if\
    \ the character is a vowel, replace it with the value from the dictionary\n  \
    \      if char in keys(vowels)\n            encoded *= vowels[char]\n        #\
    \ if the character is not a vowel, swap the case and add it to the encoded message\n\
    \        else\n            encoded *= swapcase(char)\n        end\n    end\n \
    \   # return the encoded message\n    return encoded\nend", "    # YOUR CODE HERE\n\
    end", "    # your code here\nend", "    # YOUR CODE HERE\n    return \"TGST\"\n\
    end", "    # YOUR CODE HERE\nend", "    # your code here\n    return \"TGST\"\n\
    end", "    result = \"\"\n    for c in message\n        if isalpha(c)\n      \
    \      if islower(c)\n                result *= uppercase(c)\n            else\n\
    \                result *= lowercase(c)\n            end\n            if c in\
    \ \"aeiou\"\n                result *= nextind(c, 2)\n            elseif c in\
    \ \"AEIOU\"\n                result *= nextind(c, 2)\n            else\n     \
    \           result *= c\n            end\n        else\n            result *=\
    \ c\n        end\n    end\n    return result\nend", "    # your code here\nend",
  "    # YOUR CODE HERE\n    return \"TGST\"\nend", "    new_message = \"\"\n    for\
    \ i in 1:length(message)\n        if islower(message[i])\n            new_message\
    \ = new_message * uppercase(message[i])\n        elseif isupper(message[i])\n\
    \            new_message = new_message * lowercase(message[i])\n        else\n\
    \            new_message = new_message * message[i]\n        end\n    end\n  \
    \  new_message\nend", "    # create a dictionary of vowels and their replacements\n\
    \    vowels = Dict('a'=>'c', 'e'=>'g', 'i'=>'k', 'o'=>'q', 'u'=>'y')\n    # create\
    \ a dictionary of lowercase letters and their replacements\n    lowercase = Dict('a'=>'A',\
    \ 'b'=>'B', 'c'=>'C', 'd'=>'D', 'e'=>'E', 'f'=>'F', 'g'=>'G', 'h'=>'H', 'i'=>'I',\
    \ 'j'=>'J', 'k'=>'K', 'l'=>'L', 'm'=>'M', 'n'=>'N', 'o'=>'O', 'p'=>'P', 'q'=>'Q',\
    \ 'r'=>'R', 's'=>'S', 't'=>'T', 'u'=>'U', 'v'=>'V', 'w'=>'W', 'x'=>'X', 'y'=>'Y',\
    \ 'z'=>'Z')\n    # create a dictionary of uppercase letters and their replacements\n\
    \    uppercase = Dict('A'=>'a', 'B'=>'b', 'C'=>'c', 'D'=>'d', 'E'=>'e', 'F'=>'f',\
    \ 'G'=>'g', 'H'=>'h', 'I'=>'i', 'J'=>'j', 'K'=>'k', 'L'=>'l', 'M'=>'m', 'N'=>'n',\
    \ 'O'=>'o', 'P'=>'p', 'Q'=>'q', 'R'=>'r', 'S'=>'s', 'T'=>'t', 'U'=>'u', 'V'=>'v',\
    \ 'W'=>'w', 'X'=>'x', 'Y'=>'y', 'Z'=>'z')\n    # create an empty string to store\
    \ the encoded message\n    encoded = \"\"\n    # iterate through each character\
    \ in the message\n    for c in message\n        # if the character is a vowel,\
    \ replace it with the value in the vow", "    # your code here\nend", "    # Your\
    \ code here\nend", "    vowels = \"aeiou\"\n    new_message = \"\"\n    for i\
    \ in message\n        if i in vowels\n            new_message *= vowels[(findfirst(vowels,\
    \ i) + 2) % 5]\n        elseif i in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n         \
    \   new_message *= lowercase(i)\n        elseif i in \"abcdefghijklmnopqrstuvwxyz\"\
    \n            new_message *= uppercase(i)\n        else\n            new_message\
    \ *= i\n        end\n    end\n    return new_message\nend", "    # your code here\n\
    end", "    # your code here\n    return message\nend", "    # your code here\n\
    \    return message\nend", "    message = uppercase(message)\n    vowels = \"\
    AEIOU\"\n    for i in 1:length(message)\n        if message[i] in vowels\n   \
    \         message[i] = vowels[mod1(findfirst(vowels, message[i]) + 2, length(vowels))]\n\
    \        else\n            message[i] = lowercase(message[i])\n        end\n \
    \   end\n    return message\nend", "    # your code here\nend", "    # TODO: write\
    \ your code here\n    return message\nend", "    # your code here\nend", "   \
    \ # your code here\nend", "    # your code here\n    return message\nend", " \
    \   message = uppercase(message)\n    vowels = [\"A\", \"E\", \"I\", \"O\", \"\
    U\"]\n    for i in 1:length(message)\n        if message[i] in vowels\n      \
    \      message[i] = vowels[mod(findfirst(vowels, message[i])+2, 5)]\n        else\n\
    \            message[i] = lowercase(message[i])\n        end\n    end\n    return\
    \ message\nend", "    new_message = \"\"\n    for i in message\n        if i in\
    \ \"aeiou\"\n            new_message = new_message * i[3]\n        elseif i in\
    \ \"AEIOU\"\n            new_message = new_message * i[3]\n        else\n    \
    \        new_message = new_message * i\n        end\n    end\n    return new_message\n\
    end", "    # YOUR CODE HERE\nend", "    # TODO: Write your code here\n    return\
    \ message\nend", "    # your code here\n    return \"TGST\"\nend", "    # Your\
    \ code here\nend", "    # your code here\nend", "    # YOUR CODE HERE\nend", " \
    \   # your code here\nend", "    vowels = \"aeiou\"\n    new_message = \"\"\n\
    \    for letter in message\n        if letter in vowels\n            new_message\
    \ = new_message * letter[2]\n        else\n            new_message = new_message\
    \ * letter\n        end\n    end\n    return new_message\nend", "    # your code\
    \ here\nend", "    message = uppercase(message)\n    vowels = [\"A\", \"E\", \"\
    I\", \"O\", \"U\"]\n    for i in 1:length(message)\n        if message[i] in vowels\n\
    \            message[i] = vowels[mod1(findfirst(vowels, message[i]) + 2, 5)]\n\
    \        else\n            message[i] = lowercase(message[i])\n        end\n \
    \   end\n    return message\nend", "    # your code here\nend", "    new_message\
    \ = \"\"\n    for i in message\n        if i in \"aeiou\"\n            new_message\
    \ *= encode_vowel(i)\n        elseif i in \"AEIOU\"\n            new_message *=\
    \ encode_vowel(i)\n        else\n            new_message *= i\n        end\n \
    \   end\n    return new_message\nend", "    # your code here\nend", "    # your\
    \ code here\nend", "    # your code here\nend", "    # your code here\nend", " \
    \   # TODO: write your code here\n    return \"TGST\"\nend", "    result = \"\"\
    \n    for i in 1:length(message)\n        if islower(message[i])\n           \
    \ result = result * uppercase(message[i])\n        elseif isupper(message[i])\n\
    \            result = result * lowercase(message[i])\n        else\n         \
    \   result = result * message[i]\n        end\n    end\n    return result\nend",
  "    # your code here\nend", "    # TODO: write your code here\n    return \"TGST\"\
    \nend", "    # TODO: implement me\n    return \"TGST\"\nend", "    # your code\
    \ here\nend", "    result = \"\"\n    for letter in message\n        if letter\
    \ in \"aeiou\"\n            result *= encode_vowel(letter)\n        elseif letter\
    \ in \"AEIOU\"\n            result *= encode_vowel(letter)\n        else\n   \
    \         result *= letter\n        end\n    end\n    return result\nend", " \
    \   # your code here\nend", "    # create a dictionary of vowels and their replacements\n\
    \    vowels = Dict(('a', 'c'), ('e', 'g'), ('i', 'k'), ('o', 'q'), ('u', 'w'))\n\
    \    # create a dictionary of lowercase letters and their replacements\n    lowercase\
    \ = Dict(('a', 'A'), ('b', 'B'), ('c', 'C'), ('d', 'D'), ('e', 'E'), ('f', 'F'),\
    \ ('g', 'G'), ('h', 'H'), ('i', 'I'), ('j', 'J'), ('k', 'K'), ('l', 'L'), ('m',\
    \ 'M'), ('n', 'N'), ('o', 'O'), ('p', 'P'), ('q', 'Q'), ('r', 'R'), ('s', 'S'),\
    \ ('t', 'T'), ('u', 'U'), ('v', 'V'), ('w', 'W'), ('x', 'X'), ('y', 'Y'), ('z',\
    \ 'Z'))\n    # create a dictionary of uppercase letters and their replacements\n\
    \    uppercase = Dict(('A', 'a'), ('B', 'b'), ('C', 'c'), ('D', 'd'), ('E', 'e'),\
    \ ('F', 'f'), ('G', 'g'), ('H', 'h'), ('I', 'i'), ('J', 'j'), ('K', 'k'), ('L',\
    \ 'l'), ('M', 'm'), ('N', 'n'), ('O', 'o'), ('P', 'p'), ('Q', 'q'), ('R', 'r'),\
    \ ('S', 's'), ('T', 't'), ('U', 'u'), ('V', 'v'), ('W', 'w'), ('X', 'x'), ('Y',\
    \ 'y'), ('Z', 'z'))\n    # create an empty string to store the encoded message\n\
    \    encoded = \"\"\n    # loop through the message\n    for i in message\n  \
    \      # if the character is a vowel, replace it with the value in the vowels\
    \ dictionary\n        if i in keys(vowels)\n            encoded = string(encoded,\
    \ get(vowels, i, \"default\"))\n        # if the character is lowercase, replace\
    \ it with the value in the lowercase dictionary\n       ", "    # your code here\n\
    end", "    # your code here\nend", "    message = uppercase(message)\n    message\
    \ = replace(message, \"A\", \"C\")\n    message = replace(message, \"E\", \"G\"\
    )\n    message = replace(message, \"I\", \"K\")\n    message = replace(message,\
    \ \"O\", \"Q\")\n    message = replace(message, \"U\", \"W\")\n    message = replace(message,\
    \ \"Y\", \"A\")\n    return message\nend", "    # TODO: Write your code here\n\
    \    return \"TGST\"\nend", "    # your code here\nend", "    # YOUR CODE HERE\n\
    end", "    # your code here\nend", "    # create a dictionary of vowels and their\
    \ replacements\n    vowels = Dict('a'=>'c', 'e'=>'g', 'i'=>'k', 'o'=>'q', 'u'=>'y')\n\
    \    # create a dictionary of letters and their replacements\n    letters = Dict('a'=>'C',\
    \ 'b'=>'D', 'c'=>'E', 'd'=>'F', 'e'=>'G', 'f'=>'H', 'g'=>'I', 'h'=>'J', 'i'=>'K',\
    \ 'j'=>'L', 'k'=>'M', 'l'=>'N', 'm'=>'O', 'n'=>'P', 'o'=>'Q', 'p'=>'R', 'q'=>'S',\
    \ 'r'=>'T', 's'=>'U', 't'=>'V', 'u'=>'W', 'v'=>'X', 'w'=>'Y', 'x'=>'Z', 'y'=>'A',\
    \ 'z'=>'B')\n    # create a dictionary of letters and their replacements\n   \
    \ letters2 = Dict('A'=>'C', 'B'=>'D', 'C'=>'E', 'D'=>'F', 'E'=>'G', 'F'=>'H',\
    \ 'G'=>'I', 'H'=>'J', 'I'=>'K', 'J'=>'L', 'K'=>'M', 'L'=>'N', 'M'=>'O', 'N'=>'P',\
    \ 'O'=>'Q', 'P'=>'R', 'Q'=>'S', 'R'=>'T', 'S'=>'U', 'T'=>'V', 'U'=>'W', 'V'=>'X',\
    \ 'W'=>'Y', 'X'=>'Z', 'Y'=>'A', 'Z'=>'B')\n    # create an empty string to store\
    \ the encoded message\n    encoded_message = \"\"\n    # iterate through the message\n\
    \    for i in message\n        # check if the letter is a vowel\n        if i\
    \ in keys(vowels)\n            # if it", "    # Your code here\nend", "    # your\
    \ code here\nend", "    # Your code here\nend", "    # your code here\nend", " \
    \   vowels = \"aeiou\"\n    result = \"\"\n    for i in message\n        if i\
    \ in vowels\n            result *= string(vowels[(findfirst(vowels, i)+2)%5])\n\
    \        elseif i in \"abcdefghijklmnopqrstuvwxyz\"\n            result *= string(uppercase(i))\n\
    \        elseif i in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n            result *= string(lowercase(i))\n\
    \        else\n            result *= i\n        end\n    end\n    return result\n\
    end", "    # your code here\nend", "    # your code here\nend", "    # your code\
    \ here\nend", "    # your code here\nend", "    # your code here\nend", "    #\
    \ TODO: implement me\n    return \"TGST\"\nend", "    encoded = \"\"\n    for\
    \ i in 1:length(message)\n        if isletter(message[i])\n            if islower(message[i])\n\
    \                encoded = encoded * uppercase(message[i])\n            else\n\
    \                encoded = encoded * lowercase(message[i])\n            end\n\
    \        else\n            encoded = encoded * message[i]\n        end\n    end\n\
    \    return encoded\nend", "    # your code here\nend", "    # your code here\n\
    \    return \"TGST\"\nend", "    # create a dictionary of vowels\n    vowels =\
    \ Dict('a'=>'c', 'e'=>'g', 'i'=>'k', 'o'=>'q', 'u'=>'y')\n    # create an empty\
    \ string to store the encoded message\n    encoded_message = \"\"\n    # iterate\
    \ through the message\n    for letter in message\n        # check if the letter\
    \ is a vowel\n        if letter in keys(vowels)\n            # if it is, replace\
    \ it with the value in the dictionary\n            encoded_message *= vowels[letter]\n\
    \        elseif letter in 'bcdfghjklmnpqrstvwxyz'\n            # if it is not\
    \ a vowel, but is a lowercase letter, swap it to uppercase\n            encoded_message\
    \ *= uppercase(letter)\n        elseif letter in 'BCDFGHJKLMNPQRSTVWXYZ'\n   \
    \         # if it is not a vowel, but is an uppercase letter, swap it to lowercase\n\
    \            encoded_message *= lowercase(letter)\n        else\n            #\
    \ if it is not a letter, leave it as is\n            encoded_message *= letter\n\
    \        end\n    end\n    # return the encoded message\n    return encoded_message\n\
    end", "    # your code here\nend", "    # Your code here\nend", "    # your code\
    \ here\n    return message\nend", "    # your code here\nend", "    # your code\
    \ here\nend", "    vowels = \"aeiou\"\n    new_message = \"\"\n    for i in message\n\
    \        if i in vowels\n            new_message = new_message * i[vowels[vowels.index(i)+2]]\n\
    \        else\n            new_message = new_message * i\n        end\n    end\n\
    \    return new_message\nend", "    # your code here\nend", "    # your code here\n\
    end", "    # YOUR CODE HERE\nend", "    # your code here\nend", "    vowels =\
    \ \"aeiou\"\n    new_message = \"\"\n    for letter in message\n        if letter\
    \ in vowels\n            new_message *= vowels[(findfirst(vowels, letter) + 2)\
    \ % 5]\n        elseif letter in uppercase(letters)\n            new_message *=\
    \ lowercase(letter)\n        elseif letter in lowercase(letters)\n           \
    \ new_message *= uppercase(letter)\n        else\n            new_message *= letter\n\
    \        end\n    end\n    return new_message\nend", "    # TODO: Write your code\
    \ here\n    return message\nend", "    encoded = \"\"\n    for letter in message\n\
    \        if letter in \"aeiou\"\n            encoded *= encode_vowel(letter)\n\
    \        elseif letter in \"AEIOU\"\n            encoded *= encode_vowel(letter)\n\
    \        else\n            encoded *= letter\n        end\n    end\n    return\
    \ encoded\nend", "    # your code here\nend", "    # your code here\nend", " \
    \   # your code here\nend", "    # your code here\nend", "    # your code here\n\
    end", "    # your code here\nend", "    # TODO: Write your code here\n    return\
    \ message\nend", "    # your code here\nend", "    # YOUR CODE HERE\nend", " \
    \   # your code here\nend", "    # your code here\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
