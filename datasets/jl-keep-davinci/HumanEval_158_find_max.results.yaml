name: HumanEval_158_find_max
language: julia
results:
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptm4r8t4c.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmptm4r8t4c.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptm4r8t4c.jl:26\ntest set: Test Failed at /tmp/tmptm4r8t4c.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmptm4r8t4c.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptm4r8t4c.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptm4r8t4c.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplmtmafe6.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmplmtmafe6.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplmtmafe6.jl:26\ntest set: Test Failed at /tmp/tmplmtmafe6.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmplmtmafe6.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplmtmafe6.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplmtmafe6.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkm4cg_zf.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpkm4cg_zf.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkm4cg_zf.jl:26\ntest set: Test Failed at /tmp/tmpkm4cg_zf.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpkm4cg_zf.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkm4cg_zf.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkm4cg_zf.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp76ij46g6.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp76ij46g6.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp76ij46g6.jl:26\ntest set: Test Failed at /tmp/tmp76ij46g6.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp76ij46g6.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp76ij46g6.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp76ij46g6.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_unique\
    \ = 0\n    max_word = \"\"\n    for word in words\n        unique_chars = length(unique(word))\n\
    \        if unique_chars > max_unique\n            max_unique = unique_chars\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9tv0bu0h.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp9tv0bu0h.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9tv0bu0h.jl:26\ntest set: Test Failed at /tmp/tmp9tv0bu0h.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp9tv0bu0h.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9tv0bu0h.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9tv0bu0h.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp973vuhxg.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp973vuhxg.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp973vuhxg.jl:26\ntest set: Test Failed at /tmp/tmp973vuhxg.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp973vuhxg.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp973vuhxg.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp973vuhxg.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp2ud5lya.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpp2ud5lya.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp2ud5lya.jl:26\ntest set: Test Failed at /tmp/tmpp2ud5lya.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpp2ud5lya.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp2ud5lya.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp2ud5lya.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_len =\
    \ 0\n    max_word = \"\"\n    for word in words\n        if length(unique(word))\
    \ > max_len\n            max_len = length(unique(word))\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph29yukc0.jl:27\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmph29yukc0.jl:27\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph29yukc0.jl:25\ntest set: Test Failed at /tmp/tmph29yukc0.jl:30\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmph29yukc0.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph29yukc0.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph29yukc0.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwpkijecj.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpwpkijecj.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwpkijecj.jl:26\ntest set: Test Failed at /tmp/tmpwpkijecj.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpwpkijecj.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwpkijecj.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwpkijecj.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2kw68q9q.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp2kw68q9q.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2kw68q9q.jl:26\ntest set: Test Failed at /tmp/tmp2kw68q9q.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp2kw68q9q.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2kw68q9q.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2kw68q9q.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr7vc4g4a.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpr7vc4g4a.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr7vc4g4a.jl:26\ntest set: Test Failed at /tmp/tmpr7vc4g4a.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpr7vc4g4a.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr7vc4g4a.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr7vc4g4a.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsf2danzg.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpsf2danzg.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsf2danzg.jl:26\ntest set: Test Failed at /tmp/tmpsf2danzg.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpsf2danzg.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsf2danzg.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsf2danzg.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_unique\
    \ = 0\n    max_word = \"\"\n    for word in words\n        unique_chars = length(unique(word))\n\
    \        if unique_chars > max_unique\n            max_unique = unique_chars\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1i66u3n9.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp1i66u3n9.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1i66u3n9.jl:26\ntest set: Test Failed at /tmp/tmp1i66u3n9.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp1i66u3n9.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1i66u3n9.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1i66u3n9.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjg6a_rjo.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpjg6a_rjo.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjg6a_rjo.jl:26\ntest set: Test Failed at /tmp/tmpjg6a_rjo.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpjg6a_rjo.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjg6a_rjo.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjg6a_rjo.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9_s3482u.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp9_s3482u.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9_s3482u.jl:26\ntest set: Test Failed at /tmp/tmp9_s3482u.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp9_s3482u.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9_s3482u.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9_s3482u.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptn5r3t0j.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmptn5r3t0j.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptn5r3t0j.jl:26\ntest set: Test Failed at /tmp/tmptn5r3t0j.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmptn5r3t0j.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptn5r3t0j.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptn5r3t0j.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwaayvnyc.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpwaayvnyc.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwaayvnyc.jl:26\ntest set: Test Failed at /tmp/tmpwaayvnyc.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpwaayvnyc.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwaayvnyc.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwaayvnyc.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpfanwq3h_.jl:28\\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\\n   Evaluated: \"name\" == \"enam\"\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpfanwq3h_.jl:28\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpfanwq3h_.jl:26\\ntest set: Test Failed at /tmp/tmpfanwq3h_.jl:31\\\
    n  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\\n   Evaluated: \"play\" == \"footbott\"\\nStacktrace:\\n [1]\
    \ top-level scope at /tmp/tmpfanwq3h_.jl:31\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpfanwq3h_.jl:26\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    8     2     10\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkr2wo20p.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpkr2wo20p.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkr2wo20p.jl:26\ntest set: Test Failed at /tmp/tmpkr2wo20p.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpkr2wo20p.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkr2wo20p.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkr2wo20p.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp00dyy9dz.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp00dyy9dz.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp00dyy9dz.jl:26\ntest set: Test Failed at /tmp/tmp00dyy9dz.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp00dyy9dz.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp00dyy9dz.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp00dyy9dz.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_len =\
    \ 0\n    max_word = \"\"\n    for word in words\n        if length(unique(word))\
    \ > max_len\n            max_len = length(unique(word))\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3wcmsb8q.jl:27\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp3wcmsb8q.jl:27\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3wcmsb8q.jl:25\ntest set: Test Failed at /tmp/tmp3wcmsb8q.jl:30\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp3wcmsb8q.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3wcmsb8q.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3wcmsb8q.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps5js9694.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmps5js9694.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps5js9694.jl:26\ntest set: Test Failed at /tmp/tmps5js9694.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmps5js9694.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps5js9694.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps5js9694.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoyj3sgwf.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpoyj3sgwf.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoyj3sgwf.jl:26\ntest set: Test Failed at /tmp/tmpoyj3sgwf.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpoyj3sgwf.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoyj3sgwf.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoyj3sgwf.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgu4sc4gp.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpgu4sc4gp.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgu4sc4gp.jl:26\ntest set: Test Failed at /tmp/tmpgu4sc4gp.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpgu4sc4gp.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgu4sc4gp.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgu4sc4gp.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnjrung73.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpnjrung73.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnjrung73.jl:26\ntest set: Test Failed at /tmp/tmpnjrung73.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpnjrung73.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnjrung73.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnjrung73.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_len =\
    \ 0\n    max_word = \"\"\n    for word in words\n        if length(unique(word))\
    \ > max_len\n            max_len = length(unique(word))\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdz5ofd9f.jl:27\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpdz5ofd9f.jl:27\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdz5ofd9f.jl:25\ntest set: Test Failed at /tmp/tmpdz5ofd9f.jl:30\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpdz5ofd9f.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdz5ofd9f.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdz5ofd9f.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp17trvach.jl:28\\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\\n   Evaluated: \"name\" == \"enam\"\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmp17trvach.jl:28\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp17trvach.jl:26\\ntest set: Test Failed at /tmp/tmp17trvach.jl:31\\\
    n  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\\n   Evaluated: \"play\" == \"footbott\"\\nStacktrace:\\n [1]\
    \ top-level scope at /tmp/tmp17trvach.jl:31\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp17trvach.jl:26\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    8     2     10\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa51nc2s8.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpa51nc2s8.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa51nc2s8.jl:26\ntest set: Test Failed at /tmp/tmpa51nc2s8.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpa51nc2s8.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa51nc2s8.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa51nc2s8.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0zbgvaky.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp0zbgvaky.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0zbgvaky.jl:26\ntest set: Test Failed at /tmp/tmp0zbgvaky.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp0zbgvaky.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0zbgvaky.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0zbgvaky.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_unique_chars\
    \ = 0\n    max_word = \"\"\n    for word in words\n        unique_chars = length(unique(word))\n\
    \        if unique_chars > max_unique_chars\n            max_unique_chars = unique_chars\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7yi26epj.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp7yi26epj.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7yi26epj.jl:26\ntest set: Test Failed at /tmp/tmp7yi26epj.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp7yi26epj.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7yi26epj.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7yi26epj.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp19fjqgjj.jl:28\\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\\n   Evaluated: \"name\" == \"enam\"\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmp19fjqgjj.jl:28\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp19fjqgjj.jl:26\\ntest set: Test Failed at /tmp/tmp19fjqgjj.jl:31\\\
    n  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\\n   Evaluated: \"play\" == \"footbott\"\\nStacktrace:\\n [1]\
    \ top-level scope at /tmp/tmp19fjqgjj.jl:31\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp19fjqgjj.jl:26\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    8     2  '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7qebx8ll.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp7qebx8ll.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7qebx8ll.jl:26\ntest set: Test Failed at /tmp/tmp7qebx8ll.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp7qebx8ll.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7qebx8ll.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7qebx8ll.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsowfd3im.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpsowfd3im.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsowfd3im.jl:26\ntest set: Test Failed at /tmp/tmpsowfd3im.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpsowfd3im.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsowfd3im.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsowfd3im.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_chars = 0\n    for word in words\n        if length(unique(word))\
    \ > max_chars\n            max_chars = length(unique(word))\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpvmc32c5z.jl:27\\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\\n   Evaluated: \"name\" == \"enam\"\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpvmc32c5z.jl:27\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpvmc32c5z.jl:25\\ntest set: Test Failed at /tmp/tmpvmc32c5z.jl:30\\\
    n  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\\n   Evaluated: \"play\" == \"footbott\"\\nStacktrace:\\n [1]\
    \ top-level scope at /tmp/tmpvmc32c5z.jl:30\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpvmc32c5z.jl:25\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe31jftkc.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpe31jftkc.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpe31jftkc.jl:26\ntest set: Test Failed at /tmp/tmpe31jftkc.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpe31jftkc.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpe31jftkc.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe31jftkc.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd6aemuu0.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpd6aemuu0.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpd6aemuu0.jl:26\ntest set: Test Failed at /tmp/tmpd6aemuu0.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpd6aemuu0.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpd6aemuu0.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd6aemuu0.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_char = 0\n    for word in words\n        unique_char =\
    \ length(unique(word))\n        if unique_char > max_unique_char\n           \
    \ max_unique_char = unique_char\n            max_word = word\n        end\n  \
    \  end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\
    \t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0r22hkr6.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp0r22hkr6.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0r22hkr6.jl:26\ntest set: Test Failed at /tmp/tmp0r22hkr6.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp0r22hkr6.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0r22hkr6.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0r22hkr6.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa73iz12i.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpa73iz12i.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa73iz12i.jl:26\ntest set: Test Failed at /tmp/tmpa73iz12i.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpa73iz12i.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa73iz12i.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa73iz12i.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpcki0o02i.jl:28\\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\\n   Evaluated: \"name\" == \"enam\"\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpcki0o02i.jl:28\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpcki0o02i.jl:26\\ntest set: Test Failed at /tmp/tmpcki0o02i.jl:31\\\
    n  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\\n   Evaluated: \"play\" == \"footbott\"\\nStacktrace:\\n [1]\
    \ top-level scope at /tmp/tmpcki0o02i.jl:31\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpcki0o02i.jl:26\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    8     2     10\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfjwtqepy.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpfjwtqepy.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfjwtqepy.jl:26\ntest set: Test Failed at /tmp/tmpfjwtqepy.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpfjwtqepy.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfjwtqepy.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfjwtqepy.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_len = 0\n    for word in words\n        if length(unique(word))\
    \ > max_len\n            max_len = length(unique(word))\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdhpfji_p.jl:27\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpdhpfji_p.jl:27\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdhpfji_p.jl:25\ntest set: Test Failed at /tmp/tmpdhpfji_p.jl:30\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpdhpfji_p.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdhpfji_p.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdhpfji_p.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_len = 0\n    for word in words\n        if length(unique(word))\
    \ > max_len\n            max_len = length(unique(word))\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn4_iwwrg.jl:27\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpn4_iwwrg.jl:27\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn4_iwwrg.jl:25\ntest set: Test Failed at /tmp/tmpn4_iwwrg.jl:30\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpn4_iwwrg.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn4_iwwrg.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn4_iwwrg.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc7nmz1ae.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpc7nmz1ae.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc7nmz1ae.jl:26\ntest set: Test Failed at /tmp/tmpc7nmz1ae.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpc7nmz1ae.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc7nmz1ae.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc7nmz1ae.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_len = 0\n    for word in words\n        if length(unique(word))\
    \ > max_len\n            max_len = length(unique(word))\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkjkt3dio.jl:27\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpkjkt3dio.jl:27\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkjkt3dio.jl:25\ntest set: Test Failed at /tmp/tmpkjkt3dio.jl:30\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpkjkt3dio.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkjkt3dio.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkjkt3dio.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppdsll5_m.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmppdsll5_m.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppdsll5_m.jl:26\ntest set: Test Failed at /tmp/tmppdsll5_m.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmppdsll5_m.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppdsll5_m.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppdsll5_m.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy8le48rv.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpy8le48rv.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy8le48rv.jl:26\ntest set: Test Failed at /tmp/tmpy8le48rv.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpy8le48rv.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy8le48rv.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy8le48rv.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_unique_chars\
    \ = 0\n    max_unique_word = \"\"\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_unique_chars = unique_chars\n            max_unique_word = word\n  \
    \      end\n    end\n    return max_unique_word\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyejol80j.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpyejol80j.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyejol80j.jl:26\ntest set: Test Failed at /tmp/tmpyejol80j.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpyejol80j.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyejol80j.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyejol80j.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmlaj8bbl.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpmlaj8bbl.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmlaj8bbl.jl:26\ntest set: Test Failed at /tmp/tmpmlaj8bbl.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpmlaj8bbl.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmlaj8bbl.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmlaj8bbl.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    unique_char_count\
    \ = Dict{String, Int}()\n    for word in words\n        unique_char_count[word]\
    \ = length(unique(word))\n    end\n    max_unique_char_count = maximum(values(unique_char_count))\n\
    \    max_unique_char_words = filter(x -> unique_char_count[x] == max_unique_char_count,\
    \ keys(unique_char_count))\n    return min(max_unique_char_words)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpq69pts_7.jl:24\n  Test threw exception\n\
    \  Expression: candidate([\"name\", \"of\", \"string\"]) == \"string\"\n  MethodError:\
    \ no method matching min(::Set{String})\n  Closest candidates are:\n    min(::Any,\
    \ !Matched::Missing) at missing.jl:126\n    min(::Any, !Matched::Any) at operators.jl:422\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at operators.jl:529\n\
    \    ...\n  Stacktrace:\n   [1] find_max(::Array{String,1}) at /tmp/tmpq69pts_7.jl:17\n\
    \   [2] top-level scope at /tmp/tmpq69pts_7.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpq69pts_7.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpq69pts_7.jl:25\n  Test threw exception\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n  MethodError: no method matching min(::Set{String})\n\
    \  Closest candidates are:\n    min(::Any, !Matched::Missing) at missing.jl:126\n\
    \    min(::Any, !Matched::Any) at operators.jl:422\n    min(::Any, !Matched::Any,\
    \ !Matched::Any, !Matched::Any...) at operators.jl:529\n    ...\n  Stacktrace:\n\
    \   [1] find_max(::Array{String,1}) at /tmp/tmpq69pts_7.jl:17\n   [2] top-level\
    \ scope at /tmp/tmpq69pts_7.jl:25\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpq69pts_7.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpq69pts_7.jl:26\n  Test threw exception\n  Expression: candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\n  MethodError: no method matching\
    \ min(::Set{String})\n  Closest candidates are:\n    min(::Any, !Matched::Missing)\
    \ at missing.jl:126\n    min(::Any, !Matched::Any) at operators.jl:422\n    min(::Any,\
    \ !Matched::Any, !Matched::Any, !Matched::Any...) at operators.jl:529\n    ...\n\
    \  Stacktrace:\n   [1] find_max(::Array{String,1}) at /tmp/tmpq69pts_7.jl:17\n\
    \   [2] top-level scope at /tmp/tmpq69pts_7.jl:26\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpq69pts_7.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpq69pts_7.jl:27\n  Test threw exception\n  Expression: candidate([\"\
    abc\", \"cba\"]) == \"abc\"\n  MethodError: no method matching min(::Set{String})\n\
    \  Closest candidates are:\n    min(::Any, !Matched::Missing) at missing.jl:126\n\
    \    min(::Any, !Matched::Any) at operators.jl:422\n    min(::Any, !Matched::Any,\
    \ !Matched::Any, !Matched::Any...) at operators.jl:529\n    ...\n  Stacktrace:\n\
    \   [1] find_max(::Array{String,1}) at /tmp/tmpq69pts_7.jl:17\n   [2] top-level\
    \ scope at /tmp/tmpq69pts_7.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpq69pts_7.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpq69pts_7.jl:28\n  Test threw exception\n  Expression: candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\"\n  MethodError:\
    \ no method matching min(::Set{String})\n  Closest candidates are:\n    min(::Any,\
    \ !Matched::Missing) at missing.jl:126\n    min(::Any, !Matched::Any) at operators.jl:422\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at operators.jl:529\n\
    \    ...\n  Stacktrace:\n   [1] find_max(::Array{String,1}) at /tmp/tmpq69pts_7.jl:17\n\
    \   [2] top-level scope at /tmp/tmpq69pts_7.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpq69pts_7.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpq69pts_7.jl:29\n  Test threw exception\n  Expression: candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"\n  MethodError: no method matching\
    \ min(::Set{String})\n  Closest candidates are:\n    min(::Any, !Matched::Missing)\
    \ at missing.jl:126\n    min(::Any, !Matched::Any) at operators.jl:422\n    min(::Any,\
    \ !Matched::Any, !Matched::Any, !Matched::Any...) at operators.jl:529\n    ...\n\
    \  Stacktrace:\n   [1] find_max(::Array{String,1}) at /tmp/tmpq69pts_7.jl:17\n\
    \   [2] top-level scope at /tmp/tmpq69pts_7.jl:29\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpq69pts_7.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpq69pts_7.jl:30\n  Test threw exception\n  Expression: candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\"\n  MethodError: no method\
    \ matching min(::Set{String})\n  Closest candidates are:\n    min(::Any, !Matched::Missing)\
    \ at missing.jl:126\n    min(::Any, !Matched::Any) at operators.jl:422\n    min(::Any,\
    \ !Matched::Any, !Matched::Any, !Matched::Any...) at operators.jl:529\n    ...\n\
    \  Stacktrace:\n   [1] find_max(::Array{String,1}) at /tmp/tmpq69pts_7.jl:17\n\
    \   [2] top-level scope at /tmp/tmpq69pts_7.jl:30\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpq69pts_7.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpq69pts_7.jl:31\n  Test threw exception\n  Expression: candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\"\n  MethodError: no method matching\
    \ min(::Set{String})\n  Closest candidates are:\n    min(::Any, !Matched::Missing)\
    \ at missing.jl:126\n    min(::Any, !Matched::Any) at operators.jl:422\n    min(::Any,\
    \ !Matched::Any, !Matched::Any, !Matched::Any...) at operators.jl:529\n    ...\n\
    \  Stacktrace:\n   [1] find_max(::Array{String,1}) at /tmp/tmpq69pts_7.jl:17\n\
    \   [2] top-level scope at /tmp/tmpq69pts_7.jl:31\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpq69pts_7.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpq69pts_7.jl:32\n  Test threw exception\n  Expression: candidate([\"\
    b\"]) == \"b\"\n  MethodError: no method matching min(::Set{String})\n  Closest\
    \ candidates are:\n    min(::Any, !Matched::Missing) at missing.jl:126\n    min(::Any,\
    \ !Matched::Any) at operators.jl:422\n    min(::Any, !Matched::Any, !Matched::Any,\
    \ !Matched::Any...) at operators.jl:529\n    ...\n  Stacktrace:\n   [1] find_max(::Array{String,1})\
    \ at /tmp/tmpq69pts_7.jl:17\n   [2] top-level scope at /tmp/tmpq69pts_7.jl:32\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpq69pts_7.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpq69pts_7.jl:33\n  Test threw exception\n  Expression: candidate([\"\
    play\", \"play\", \"play\"]) == \"play\"\n  MethodError: no method matching min(::Set{String})\n\
    \  Closest candidates are:\n    min(::Any, !Matched::Missing) at missing.jl:126\n\
    \    min(::Any, !Matched::Any) at operators.jl:422\n    min(::Any, !Matched::Any,\
    \ !Matched::Any, !Matched::Any...) at operators.jl:529\n    ...\n  Stacktrace:\n\
    \   [1] find_max(::Array{String,1}) at /tmp/tmpq69pts_7.jl:17\n   [2] top-level\
    \ scope at /tmp/tmpq69pts_7.jl:33\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpq69pts_7.jl:23\n  \nTest Summary: | Error \
    \ Total\ntest set      |    10     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq69pts_7.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpyn8gjzlb.jl:28\\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\\n   Evaluated: \"name\" == \"enam\"\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpyn8gjzlb.jl:28\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpyn8gjzlb.jl:26\\ntest set: Test Failed at /tmp/tmpyn8gjzlb.jl:31\\\
    n  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\\n   Evaluated: \"play\" == \"footbott\"\\nStacktrace:\\n [1]\
    \ top-level scope at /tmp/tmpyn8gjzlb.jl:31\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpyn8gjzlb.jl:26\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    8     2     10\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp7af9055.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpp7af9055.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp7af9055.jl:26\ntest set: Test Failed at /tmp/tmpp7af9055.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpp7af9055.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp7af9055.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp7af9055.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1c8qxhsf.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp1c8qxhsf.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1c8qxhsf.jl:26\ntest set: Test Failed at /tmp/tmp1c8qxhsf.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp1c8qxhsf.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1c8qxhsf.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1c8qxhsf.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnrxborqd.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpnrxborqd.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnrxborqd.jl:26\ntest set: Test Failed at /tmp/tmpnrxborqd.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpnrxborqd.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnrxborqd.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnrxborqd.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        if length(unique(word))\
    \ > max_count\n            max_count = length(unique(word))\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp0pcvgnrc.jl:27\\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\\n   Evaluated: \"name\" == \"enam\"\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmp0pcvgnrc.jl:27\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp0pcvgnrc.jl:25\\ntest set: Test Failed at /tmp/tmp0pcvgnrc.jl:30\\\
    n  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\\n   Evaluated: \"play\" == \"footbott\"\\nStacktrace:\\n [1]\
    \ top-level scope at /tmp/tmp0pcvgnrc.jl:30\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp0pcvgnrc.jl:25\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    8     2     10\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpiyqqmj5j.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpiyqqmj5j.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpiyqqmj5j.jl:26\ntest set: Test Failed at /tmp/tmpiyqqmj5j.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpiyqqmj5j.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpiyqqmj5j.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiyqqmj5j.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpc_jf2543.jl:28\\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\\n   Evaluated: \"name\" == \"enam\"\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpc_jf2543.jl:28\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpc_jf2543.jl:26\\ntest set: Test Failed at /tmp/tmpc_jf2543.jl:31\\\
    n  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\\n   Evaluated: \"play\" == \"footbott\"\\nStacktrace:\\n [1]\
    \ top-level scope at /tmp/tmpc_jf2543.jl:31\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpc_jf2543.jl:26\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    8     2     10\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        if length(unique(word))\
    \ > max_count\n            max_count = length(unique(word))\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp4t7aumc7.jl:27\\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\\n   Evaluated: \"name\" == \"enam\"\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmp4t7aumc7.jl:27\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp4t7aumc7.jl:25\\ntest set: Test Failed at /tmp/tmp4t7aumc7.jl:30\\\
    n  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\\n   Evaluated: \"play\" == \"footbott\"\\nStacktrace:\\n [1]\
    \ top-level scope at /tmp/tmp4t7aumc7.jl:30\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp4t7aumc7.jl:25\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    8     2     10\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqt0ov6x8.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpqt0ov6x8.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqt0ov6x8.jl:26\ntest set: Test Failed at /tmp/tmpqt0ov6x8.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpqt0ov6x8.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqt0ov6x8.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqt0ov6x8.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmps2db9j_d.jl:28\\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\\n   Evaluated: \"name\" == \"enam\"\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmps2db9j_d.jl:28\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmps2db9j_d.jl:26\\ntest set: Test Failed at /tmp/tmps2db9j_d.jl:31\\\
    n  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\\n   Evaluated: \"play\" == \"footbott\"\\nStacktrace:\\n [1]\
    \ top-level scope at /tmp/tmps2db9j_d.jl:31\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmps2db9j_d.jl:26\\nTest Summary: | Pass  Fail \
    \ Total\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_unique_chars\
    \ = 0\n    max_word = \"\"\n    for word in words\n        unique_chars = length(unique(word))\n\
    \        if unique_chars > max_unique_chars\n            max_unique_chars = unique_chars\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp65_4kbu.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpp65_4kbu.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp65_4kbu.jl:26\ntest set: Test Failed at /tmp/tmpp65_4kbu.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpp65_4kbu.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp65_4kbu.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp65_4kbu.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbnzc3s88.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpbnzc3s88.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbnzc3s88.jl:26\ntest set: Test Failed at /tmp/tmpbnzc3s88.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpbnzc3s88.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbnzc3s88.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbnzc3s88.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj95opbn8.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpj95opbn8.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj95opbn8.jl:26\ntest set: Test Failed at /tmp/tmpj95opbn8.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpj95opbn8.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj95opbn8.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj95opbn8.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_unique\
    \ = 0\n    max_word = \"\"\n    for word in words\n        unique_chars = length(unique(word))\n\
    \        if unique_chars > max_unique\n            max_unique = unique_chars\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyuoswzt9.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpyuoswzt9.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyuoswzt9.jl:26\ntest set: Test Failed at /tmp/tmpyuoswzt9.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpyuoswzt9.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyuoswzt9.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyuoswzt9.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_unique_chars\
    \ = 0\n    max_unique_word = \"\"\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_unique_chars = unique_chars\n            max_unique_word = word\n  \
    \      end\n    end\n    return max_unique_word\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqjcdkslw.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpqjcdkslw.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqjcdkslw.jl:26\ntest set: Test Failed at /tmp/tmpqjcdkslw.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpqjcdkslw.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqjcdkslw.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqjcdkslw.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9oh22b53.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp9oh22b53.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9oh22b53.jl:26\ntest set: Test Failed at /tmp/tmp9oh22b53.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp9oh22b53.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9oh22b53.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9oh22b53.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjl527_hk.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpjl527_hk.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjl527_hk.jl:26\ntest set: Test Failed at /tmp/tmpjl527_hk.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpjl527_hk.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjl527_hk.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjl527_hk.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        if length(unique(word))\
    \ > max_count\n            max_count = length(unique(word))\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpul18hk77.jl:27\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpul18hk77.jl:27\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpul18hk77.jl:25\ntest set: Test Failed at /tmp/tmpul18hk77.jl:30\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpul18hk77.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpul18hk77.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpul18hk77.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp40jeyit6.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp40jeyit6.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp40jeyit6.jl:26\ntest set: Test Failed at /tmp/tmp40jeyit6.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp40jeyit6.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp40jeyit6.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp40jeyit6.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_unique\
    \ = 0\n    max_word = \"\"\n    for word in words\n        unique_chars = length(unique(word))\n\
    \        if unique_chars > max_unique\n            max_unique = unique_chars\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpau5i2yex.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpau5i2yex.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpau5i2yex.jl:26\ntest set: Test Failed at /tmp/tmpau5i2yex.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpau5i2yex.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpau5i2yex.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpau5i2yex.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgynvyjl0.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpgynvyjl0.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgynvyjl0.jl:26\ntest set: Test Failed at /tmp/tmpgynvyjl0.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpgynvyjl0.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgynvyjl0.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgynvyjl0.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppfpqcb3q.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmppfpqcb3q.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppfpqcb3q.jl:26\ntest set: Test Failed at /tmp/tmppfpqcb3q.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmppfpqcb3q.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppfpqcb3q.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppfpqcb3q.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplpqhk0ki.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmplpqhk0ki.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplpqhk0ki.jl:26\ntest set: Test Failed at /tmp/tmplpqhk0ki.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmplpqhk0ki.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplpqhk0ki.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplpqhk0ki.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1k223pfs.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp1k223pfs.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1k223pfs.jl:26\ntest set: Test Failed at /tmp/tmp1k223pfs.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp1k223pfs.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1k223pfs.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1k223pfs.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc2dei8vf.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpc2dei8vf.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc2dei8vf.jl:26\ntest set: Test Failed at /tmp/tmpc2dei8vf.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpc2dei8vf.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc2dei8vf.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc2dei8vf.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_fqjsn36.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp_fqjsn36.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_fqjsn36.jl:26\ntest set: Test Failed at /tmp/tmp_fqjsn36.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp_fqjsn36.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_fqjsn36.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_fqjsn36.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx2th5u37.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpx2th5u37.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx2th5u37.jl:26\ntest set: Test Failed at /tmp/tmpx2th5u37.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpx2th5u37.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx2th5u37.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx2th5u37.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpgmrur1yy.jl:28\\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\\n   Evaluated: \"name\" == \"enam\"\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpgmrur1yy.jl:28\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpgmrur1yy.jl:26\\ntest set: Test Failed at /tmp/tmpgmrur1yy.jl:31\\\
    n  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\\n   Evaluated: \"play\" == \"footbott\"\\nStacktrace:\\n [1]\
    \ top-level scope at /tmp/tmpgmrur1yy.jl:31\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpgmrur1yy.jl:26\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpqsfp4o4p.jl:28\\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\\n   Evaluated: \"name\" == \"enam\"\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpqsfp4o4p.jl:28\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpqsfp4o4p.jl:26\\ntest set: Test Failed at /tmp/tmpqsfp4o4p.jl:31\\\
    n  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\\n   Evaluated: \"play\" == \"footbott\"\\nStacktrace:\\n [1]\
    \ top-level scope at /tmp/tmpqsfp4o4p.jl:31\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpqsfp4o4p.jl:26\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq918v8c7.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpq918v8c7.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq918v8c7.jl:26\ntest set: Test Failed at /tmp/tmpq918v8c7.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpq918v8c7.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq918v8c7.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq918v8c7.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0swfh09t.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp0swfh09t.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0swfh09t.jl:26\ntest set: Test Failed at /tmp/tmp0swfh09t.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp0swfh09t.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0swfh09t.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0swfh09t.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpk3_muuuz.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpk3_muuuz.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpk3_muuuz.jl:26\ntest set: Test Failed at /tmp/tmpk3_muuuz.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpk3_muuuz.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpk3_muuuz.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk3_muuuz.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe515zjrq.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpe515zjrq.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpe515zjrq.jl:26\ntest set: Test Failed at /tmp/tmpe515zjrq.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpe515zjrq.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpe515zjrq.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe515zjrq.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_word_len = 0\n    for word in words\n        if length(unique(word))\
    \ > max_word_len\n            max_word = word\n            max_word_len = length(unique(word))\n\
    \        end\n    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpiafouoxq.jl:27\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpiafouoxq.jl:27\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpiafouoxq.jl:25\ntest set: Test Failed at /tmp/tmpiafouoxq.jl:30\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpiafouoxq.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpiafouoxq.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiafouoxq.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_unique\
    \ = 0\n    max_word = \"\"\n    for word in words\n        unique_chars = length(unique(word))\n\
    \        if unique_chars > max_unique\n            max_unique = unique_chars\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpbm6bikfi.jl:28\\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\\n   Evaluated: \"name\" == \"enam\"\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpbm6bikfi.jl:28\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpbm6bikfi.jl:26\\ntest set: Test Failed at /tmp/tmpbm6bikfi.jl:31\\\
    n  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\\n   Evaluated: \"play\" == \"footbott\"\\nStacktrace:\\n [1]\
    \ top-level scope at /tmp/tmpbm6bikfi.jl:31\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpbm6bikfi.jl:26\\nTest Summary: | Pass  Fail \
    \ Total\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_char = 0\n    for word in words\n        if length(unique(word))\
    \ > max_char\n            max_char = length(unique(word))\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqvhu1zms.jl:27\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpqvhu1zms.jl:27\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqvhu1zms.jl:25\ntest set: Test Failed at /tmp/tmpqvhu1zms.jl:30\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpqvhu1zms.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqvhu1zms.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqvhu1zms.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjuquxw40.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpjuquxw40.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjuquxw40.jl:26\ntest set: Test Failed at /tmp/tmpjuquxw40.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpjuquxw40.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjuquxw40.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjuquxw40.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp25jmuhbu.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp25jmuhbu.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp25jmuhbu.jl:26\ntest set: Test Failed at /tmp/tmp25jmuhbu.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp25jmuhbu.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp25jmuhbu.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp25jmuhbu.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_unique_chars\
    \ = 0\n    max_unique_word = \"\"\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_unique_chars = unique_chars\n            max_unique_word = word\n  \
    \      end\n    end\n    return max_unique_word\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbq4u_9a9.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpbq4u_9a9.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbq4u_9a9.jl:26\ntest set: Test Failed at /tmp/tmpbq4u_9a9.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpbq4u_9a9.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbq4u_9a9.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbq4u_9a9.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi5zr6z45.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpi5zr6z45.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi5zr6z45.jl:26\ntest set: Test Failed at /tmp/tmpi5zr6z45.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpi5zr6z45.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi5zr6z45.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi5zr6z45.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptvy07d33.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmptvy07d33.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptvy07d33.jl:26\ntest set: Test Failed at /tmp/tmptvy07d33.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmptvy07d33.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptvy07d33.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptvy07d33.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm6q04wlo.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpm6q04wlo.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpm6q04wlo.jl:26\ntest set: Test Failed at /tmp/tmpm6q04wlo.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpm6q04wlo.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpm6q04wlo.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm6q04wlo.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp84kon_nb.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp84kon_nb.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp84kon_nb.jl:26\ntest set: Test Failed at /tmp/tmp84kon_nb.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp84kon_nb.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp84kon_nb.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp84kon_nb.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpod3qqe44.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpod3qqe44.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpod3qqe44.jl:26\ntest set: Test Failed at /tmp/tmpod3qqe44.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpod3qqe44.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpod3qqe44.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpod3qqe44.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsgishnf7.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpsgishnf7.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsgishnf7.jl:26\ntest set: Test Failed at /tmp/tmpsgishnf7.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpsgishnf7.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsgishnf7.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsgishnf7.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        unique_count = length(unique(word))\n\
    \        if unique_count > max_count\n            max_count = unique_count\n \
    \           max_word = word\n        end\n    end\n    return max_word\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppfm4i_u7.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmppfm4i_u7.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppfm4i_u7.jl:26\ntest set: Test Failed at /tmp/tmppfm4i_u7.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmppfm4i_u7.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppfm4i_u7.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppfm4i_u7.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_v1iek87.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp_v1iek87.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_v1iek87.jl:26\ntest set: Test Failed at /tmp/tmp_v1iek87.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp_v1iek87.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_v1iek87.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_v1iek87.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_len =\
    \ 0\n    max_word = \"\"\n    for word in words\n        if length(unique(word))\
    \ > max_len\n            max_len = length(unique(word))\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq0mw2jnj.jl:27\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpq0mw2jnj.jl:27\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq0mw2jnj.jl:25\ntest set: Test Failed at /tmp/tmpq0mw2jnj.jl:30\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpq0mw2jnj.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq0mw2jnj.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq0mw2jnj.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_unique\
    \ = 0\n    max_word = \"\"\n    for word in words\n        unique_chars = length(unique(word))\n\
    \        if unique_chars > max_unique\n            max_unique = unique_chars\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4g09jwrd.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp4g09jwrd.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4g09jwrd.jl:26\ntest set: Test Failed at /tmp/tmp4g09jwrd.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp4g09jwrd.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4g09jwrd.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4g09jwrd.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprc_qrgtm.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmprc_qrgtm.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprc_qrgtm.jl:26\ntest set: Test Failed at /tmp/tmprc_qrgtm.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmprc_qrgtm.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprc_qrgtm.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprc_qrgtm.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_4nuktnl.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp_4nuktnl.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_4nuktnl.jl:26\ntest set: Test Failed at /tmp/tmp_4nuktnl.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp_4nuktnl.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_4nuktnl.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_4nuktnl.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn3n8jie0.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpn3n8jie0.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn3n8jie0.jl:26\ntest set: Test Failed at /tmp/tmpn3n8jie0.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpn3n8jie0.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn3n8jie0.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn3n8jie0.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpk88s44g3.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpk88s44g3.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpk88s44g3.jl:26\ntest set: Test Failed at /tmp/tmpk88s44g3.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpk88s44g3.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpk88s44g3.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk88s44g3.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp503m1lmd.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp503m1lmd.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp503m1lmd.jl:26\ntest set: Test Failed at /tmp/tmp503m1lmd.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp503m1lmd.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp503m1lmd.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp503m1lmd.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        unique_chars = unique(word)\n\
    \        if length(unique_chars) > max_count\n            max_count = length(unique_chars)\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpc33r2xgt.jl:28\\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\\n   Evaluated: \"name\" == \"enam\"\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpc33r2xgt.jl:28\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpc33r2xgt.jl:26\\ntest set: Test Failed at /tmp/tmpc33r2xgt.jl:31\\\
    n  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\\n   Evaluated: \"play\" == \"footbott\"\\nStacktrace:\\n [1]\
    \ top-level scope at /tmp/tmpc33r2xgt.jl:31\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpc33r2xgt.jl:26\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    8     2     10\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu8xxyg2q.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpu8xxyg2q.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu8xxyg2q.jl:26\ntest set: Test Failed at /tmp/tmpu8xxyg2q.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpu8xxyg2q.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu8xxyg2q.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu8xxyg2q.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_unique_chars = unique_chars\n            max_word = word\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp26k8l4la.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp26k8l4la.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp26k8l4la.jl:26\ntest set: Test Failed at /tmp/tmp26k8l4la.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp26k8l4la.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp26k8l4la.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp26k8l4la.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd99mh7xv.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpd99mh7xv.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpd99mh7xv.jl:26\ntest set: Test Failed at /tmp/tmpd99mh7xv.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpd99mh7xv.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpd99mh7xv.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd99mh7xv.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    # find the\
    \ word with maximum number of unique characters\n    # if multiple strings have\
    \ maximum number of unique characters,\n    # return the one which comes first\
    \ in lexicographical order.\n    #\n    # YOUR CODE HERE\n    #\n    return \"\
    \"\nend\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt1n_5mmf.jl:24\n  Expression: candidate([\"\
    name\", \"of\", \"string\"]) == \"string\"\n   Evaluated: \"\" == \"string\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpt1n_5mmf.jl:24\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt1n_5mmf.jl:23\ntest set: Test Failed at /tmp/tmpt1n_5mmf.jl:25\n\
    \  Expression: candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated:\
    \ \"\" == \"enam\"\nStacktrace:\n [1] top-level scope at /tmp/tmpt1n_5mmf.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt1n_5mmf.jl:23\ntest set: Test Failed at /tmp/tmpt1n_5mmf.jl:26\n\
    \  Expression: candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\n   Evaluated:\
    \ \"\" == \"aaaaaaa\"\nStacktrace:\n [1] top-level scope at /tmp/tmpt1n_5mmf.jl:26\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt1n_5mmf.jl:23\ntest set: Test Failed at /tmp/tmpt1n_5mmf.jl:27\n\
    \  Expression: candidate([\"abc\", \"cba\"]) == \"abc\"\n   Evaluated: \"\" ==\
    \ \"abc\"\nStacktrace:\n [1] top-level scope at /tmp/tmpt1n_5mmf.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt1n_5mmf.jl:23\ntest set: Test Failed at /tmp/tmpt1n_5mmf.jl:28\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpt1n_5mmf.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt1n_5mmf.jl:23\ntest set: Test Failed at /tmp/tmpt1n_5mmf.jl:29\n\
    \  Expression: candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"\n\
    \   Evaluated: \"\" == \"gonna\"\nStacktrace:\n [1] top-level scope at /tmp/tmpt1n_5mmf.jl:29\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt1n_5mmf.jl:23\ntest set: Test Failed at /tmp/tmpt1n_5mmf.jl:30\n\
    \  Expression: candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"\
    nation\"\n   Evaluated: \"\" == \"nation\"\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpt1n_5mmf.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt1n_5mmf.jl:23\ntest set: Test Failed at /tmp/tmpt1n_5mmf.jl:31\n\
    \  Expression: candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\"\n  \
    \ Evaluated: \"\" == \"this\"\nStacktrace:\n [1] top-level scope at /tmp/tmpt1n_5mmf.jl:31\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt1n_5mmf.jl:23\ntest set: Test Failed at /tmp/tmpt1n_5mmf.jl:32\n\
    \  Expression: candidate([\"b\"]) == \"b\"\n   Evaluated: \"\" == \"b\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt1n_5mmf.jl:32\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt1n_5mmf.jl:23\ntest set: Test Failed at /tmp/tmpt1n_5mmf.jl:33\n\
    \  Expression: candidate([\"play\", \"play\", \"play\"]) == \"play\"\n   Evaluated:\
    \ \"\" == \"play\"\nStacktrace:\n [1] top-level scope at /tmp/tmpt1n_5mmf.jl:33\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt1n_5mmf.jl:23\nTest Summary: | Fail  Total\n\
    test set      |   10     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 10 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt1n_5mmf.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfs0_ymej.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpfs0_ymej.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfs0_ymej.jl:26\ntest set: Test Failed at /tmp/tmpfs0_ymej.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpfs0_ymej.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfs0_ymej.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfs0_ymej.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_unique\
    \ = 0\n    max_word = \"\"\n    for word in words\n        unique_chars = length(unique(word))\n\
    \        if unique_chars > max_unique\n            max_unique = unique_chars\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe_4i6hd6.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpe_4i6hd6.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpe_4i6hd6.jl:26\ntest set: Test Failed at /tmp/tmpe_4i6hd6.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpe_4i6hd6.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpe_4i6hd6.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe_4i6hd6.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpydn0vk8b.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpydn0vk8b.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpydn0vk8b.jl:26\ntest set: Test Failed at /tmp/tmpydn0vk8b.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpydn0vk8b.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpydn0vk8b.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpydn0vk8b.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgmux6u39.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpgmux6u39.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgmux6u39.jl:26\ntest set: Test Failed at /tmp/tmpgmux6u39.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpgmux6u39.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgmux6u39.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgmux6u39.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphobkyvd0.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmphobkyvd0.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphobkyvd0.jl:26\ntest set: Test Failed at /tmp/tmphobkyvd0.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmphobkyvd0.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphobkyvd0.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphobkyvd0.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8kof3wvw.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp8kof3wvw.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8kof3wvw.jl:26\ntest set: Test Failed at /tmp/tmp8kof3wvw.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp8kof3wvw.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8kof3wvw.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8kof3wvw.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpuysz6lxh.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpuysz6lxh.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpuysz6lxh.jl:26\ntest set: Test Failed at /tmp/tmpuysz6lxh.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpuysz6lxh.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpuysz6lxh.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuysz6lxh.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_unique_chars\
    \ = 0\n    max_unique_chars_word = \"\"\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_unique_chars = unique_chars\n            max_unique_chars_word = word\n\
    \        end\n    end\n    return max_unique_chars_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8gi8rq7y.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp8gi8rq7y.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8gi8rq7y.jl:26\ntest set: Test Failed at /tmp/tmp8gi8rq7y.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp8gi8rq7y.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8gi8rq7y.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8gi8rq7y.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp5o_x9vrt.jl:28\\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\\n   Evaluated: \"name\" == \"enam\"\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmp5o_x9vrt.jl:28\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp5o_x9vrt.jl:26\\ntest set: Test Failed at /tmp/tmp5o_x9vrt.jl:31\\\
    n  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\\n   Evaluated: \"play\" == \"footbott\"\\nStacktrace:\\n [1]\
    \ top-level scope at /tmp/tmp5o_x9vrt.jl:31\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp5o_x9vrt.jl:26\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    8     2     10\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplmwjjdwp.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmplmwjjdwp.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplmwjjdwp.jl:26\ntest set: Test Failed at /tmp/tmplmwjjdwp.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmplmwjjdwp.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplmwjjdwp.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplmwjjdwp.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpko0rvk5g.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpko0rvk5g.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpko0rvk5g.jl:26\ntest set: Test Failed at /tmp/tmpko0rvk5g.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpko0rvk5g.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpko0rvk5g.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpko0rvk5g.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkmevctyh.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpkmevctyh.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkmevctyh.jl:26\ntest set: Test Failed at /tmp/tmpkmevctyh.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpkmevctyh.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkmevctyh.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkmevctyh.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyyt86ivj.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpyyt86ivj.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyyt86ivj.jl:26\ntest set: Test Failed at /tmp/tmpyyt86ivj.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpyyt86ivj.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyyt86ivj.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyyt86ivj.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt3aziqdv.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpt3aziqdv.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt3aziqdv.jl:26\ntest set: Test Failed at /tmp/tmpt3aziqdv.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpt3aziqdv.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt3aziqdv.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt3aziqdv.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjesj9f09.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpjesj9f09.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjesj9f09.jl:26\ntest set: Test Failed at /tmp/tmpjesj9f09.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpjesj9f09.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjesj9f09.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjesj9f09.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6pejt0iv.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp6pejt0iv.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6pejt0iv.jl:26\ntest set: Test Failed at /tmp/tmp6pejt0iv.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp6pejt0iv.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6pejt0iv.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6pejt0iv.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpodfbpf7b.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpodfbpf7b.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpodfbpf7b.jl:26\ntest set: Test Failed at /tmp/tmpodfbpf7b.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpodfbpf7b.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpodfbpf7b.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpodfbpf7b.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmptziarswp.jl:28\\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\\n   Evaluated: \"name\" == \"enam\"\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmptziarswp.jl:28\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmptziarswp.jl:26\\ntest set: Test Failed at /tmp/tmptziarswp.jl:31\\\
    n  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\\n   Evaluated: \"play\" == \"footbott\"\\nStacktrace:\\n [1]\
    \ top-level scope at /tmp/tmptziarswp.jl:31\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmptziarswp.jl:26\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    8     2     10\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4l9b_xsk.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp4l9b_xsk.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4l9b_xsk.jl:26\ntest set: Test Failed at /tmp/tmp4l9b_xsk.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp4l9b_xsk.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4l9b_xsk.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4l9b_xsk.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp5xup6gdt.jl:28\\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\\n   Evaluated: \"name\" == \"enam\"\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmp5xup6gdt.jl:28\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp5xup6gdt.jl:26\\ntest set: Test Failed at /tmp/tmp5xup6gdt.jl:31\\\
    n  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\\n   Evaluated: \"play\" == \"footbott\"\\nStacktrace:\\n [1]\
    \ top-level scope at /tmp/tmp5xup6gdt.jl:31\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp5xup6gdt.jl:26\\nTest Summary: | '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpr8l2x7gw.jl:28\\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\\n   Evaluated: \"name\" == \"enam\"\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpr8l2x7gw.jl:28\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpr8l2x7gw.jl:26\\ntest set: Test Failed at /tmp/tmpr8l2x7gw.jl:31\\\
    n  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\\n   Evaluated: \"play\" == \"footbott\"\\nStacktrace:\\n [1]\
    \ top-level scope at /tmp/tmpr8l2x7gw.jl:31\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpr8l2x7gw.jl:26\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxkw2uq6r.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpxkw2uq6r.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxkw2uq6r.jl:26\ntest set: Test Failed at /tmp/tmpxkw2uq6r.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpxkw2uq6r.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxkw2uq6r.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxkw2uq6r.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpiuelu2wr.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpiuelu2wr.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpiuelu2wr.jl:26\ntest set: Test Failed at /tmp/tmpiuelu2wr.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpiuelu2wr.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpiuelu2wr.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiuelu2wr.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn2f9803m.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpn2f9803m.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn2f9803m.jl:26\ntest set: Test Failed at /tmp/tmpn2f9803m.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpn2f9803m.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn2f9803m.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn2f9803m.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpg0954blj.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpg0954blj.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg0954blj.jl:26\ntest set: Test Failed at /tmp/tmpg0954blj.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpg0954blj.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg0954blj.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg0954blj.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy76w_8cq.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpy76w_8cq.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy76w_8cq.jl:26\ntest set: Test Failed at /tmp/tmpy76w_8cq.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpy76w_8cq.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy76w_8cq.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy76w_8cq.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxd_0336d.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpxd_0336d.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxd_0336d.jl:26\ntest set: Test Failed at /tmp/tmpxd_0336d.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpxd_0336d.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxd_0336d.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxd_0336d.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcx3ki4xg.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpcx3ki4xg.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcx3ki4xg.jl:26\ntest set: Test Failed at /tmp/tmpcx3ki4xg.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpcx3ki4xg.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcx3ki4xg.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcx3ki4xg.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps5_uxai1.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmps5_uxai1.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps5_uxai1.jl:26\ntest set: Test Failed at /tmp/tmps5_uxai1.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmps5_uxai1.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps5_uxai1.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps5_uxai1.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcmwml30v.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpcmwml30v.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcmwml30v.jl:26\ntest set: Test Failed at /tmp/tmpcmwml30v.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpcmwml30v.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcmwml30v.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcmwml30v.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_unique_characters\
    \ = 0\n    max_unique_characters_word = \"\"\n    for word in words\n        unique_characters\
    \ = Set(word)\n        if length(unique_characters) > max_unique_characters\n\
    \            max_unique_characters = length(unique_characters)\n            max_unique_characters_word\
    \ = word\n        end\n    end\n    return max_unique_characters_word\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsi63qb36.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpsi63qb36.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsi63qb36.jl:26\ntest set: Test Failed at /tmp/tmpsi63qb36.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpsi63qb36.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsi63qb36.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsi63qb36.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm807zl1g.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpm807zl1g.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpm807zl1g.jl:26\ntest set: Test Failed at /tmp/tmpm807zl1g.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpm807zl1g.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpm807zl1g.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm807zl1g.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt1klz_xh.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpt1klz_xh.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt1klz_xh.jl:26\ntest set: Test Failed at /tmp/tmpt1klz_xh.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpt1klz_xh.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt1klz_xh.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt1klz_xh.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpu6dullv9.jl:28\\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\\n   Evaluated: \"name\" == \"enam\"\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpu6dullv9.jl:28\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpu6dullv9.jl:26\\ntest set: Test Failed at /tmp/tmpu6dullv9.jl:31\\\
    n  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\\n   Evaluated: \"play\" == \"footbott\"\\nStacktrace:\\n [1]\
    \ top-level scope at /tmp/tmpu6dullv9.jl:31\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpu6dullv9.jl:26\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpspopbtf5.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpspopbtf5.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpspopbtf5.jl:26\ntest set: Test Failed at /tmp/tmpspopbtf5.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpspopbtf5.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpspopbtf5.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpspopbtf5.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprhlja7nx.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmprhlja7nx.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprhlja7nx.jl:26\ntest set: Test Failed at /tmp/tmprhlja7nx.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmprhlja7nx.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprhlja7nx.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprhlja7nx.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpxi6tg5dc.jl:28\\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\\n   Evaluated: \"name\" == \"enam\"\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpxi6tg5dc.jl:28\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpxi6tg5dc.jl:26\\ntest set: Test Failed at /tmp/tmpxi6tg5dc.jl:31\\\
    n  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\\n   Evaluated: \"play\" == \"footbott\"\\nStacktrace:\\n [1]\
    \ top-level scope at /tmp/tmpxi6tg5dc.jl:31\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpxi6tg5dc.jl:26\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    8     2     10\\n'"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpoqt9lsso.jl:28\\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\\n   Evaluated: \"name\" == \"enam\"\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpoqt9lsso.jl:28\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpoqt9lsso.jl:26\\ntest set: Test Failed at /tmp/tmpoqt9lsso.jl:31\\\
    n  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\\n   Evaluated: \"play\" == \"footbott\"\\nStacktrace:\\n [1]\
    \ top-level scope at /tmp/tmpoqt9lsso.jl:31\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpoqt9lsso.jl:26\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    8     2     10\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzxap4ppm.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpzxap4ppm.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzxap4ppm.jl:26\ntest set: Test Failed at /tmp/tmpzxap4ppm.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpzxap4ppm.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzxap4ppm.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzxap4ppm.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpj9z824f3.jl:28\\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\\n   Evaluated: \"name\" == \"enam\"\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpj9z824f3.jl:28\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpj9z824f3.jl:26\\ntest set: Test Failed at /tmp/tmpj9z824f3.jl:31\\\
    n  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\\n   Evaluated: \"play\" == \"footbott\"\\nStacktrace:\\n [1]\
    \ top-level scope at /tmp/tmpj9z824f3.jl:31\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpj9z824f3.jl:26\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3ju6deot.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp3ju6deot.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3ju6deot.jl:26\ntest set: Test Failed at /tmp/tmp3ju6deot.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp3ju6deot.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3ju6deot.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3ju6deot.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvj0ddv5z.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpvj0ddv5z.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvj0ddv5z.jl:26\ntest set: Test Failed at /tmp/tmpvj0ddv5z.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpvj0ddv5z.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvj0ddv5z.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvj0ddv5z.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2bb82b2s.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp2bb82b2s.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2bb82b2s.jl:26\ntest set: Test Failed at /tmp/tmp2bb82b2s.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp2bb82b2s.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2bb82b2s.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2bb82b2s.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0as91dqe.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp0as91dqe.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0as91dqe.jl:26\ntest set: Test Failed at /tmp/tmp0as91dqe.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp0as91dqe.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0as91dqe.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0as91dqe.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp3bp17pe.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpp3bp17pe.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp3bp17pe.jl:26\ntest set: Test Failed at /tmp/tmpp3bp17pe.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpp3bp17pe.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp3bp17pe.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp3bp17pe.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp14rb_zir.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp14rb_zir.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp14rb_zir.jl:26\ntest set: Test Failed at /tmp/tmp14rb_zir.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp14rb_zir.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp14rb_zir.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp14rb_zir.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_unique\
    \ = 0\n    max_word = \"\"\n    for word in words\n        unique_chars = Set(word)\n\
    \        if length(unique_chars) > max_unique\n            max_unique = length(unique_chars)\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp79wtld99.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp79wtld99.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp79wtld99.jl:26\ntest set: Test Failed at /tmp/tmp79wtld99.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp79wtld99.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp79wtld99.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp79wtld99.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3ydl6njo.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp3ydl6njo.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3ydl6njo.jl:26\ntest set: Test Failed at /tmp/tmp3ydl6njo.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp3ydl6njo.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3ydl6njo.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3ydl6njo.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_len = 0\n    for word in words\n        if length(unique(word))\
    \ > max_len\n            max_len = length(unique(word))\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvkpsxe8l.jl:27\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpvkpsxe8l.jl:27\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvkpsxe8l.jl:25\ntest set: Test Failed at /tmp/tmpvkpsxe8l.jl:30\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpvkpsxe8l.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvkpsxe8l.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvkpsxe8l.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbkyqwhcg.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpbkyqwhcg.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbkyqwhcg.jl:26\ntest set: Test Failed at /tmp/tmpbkyqwhcg.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpbkyqwhcg.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbkyqwhcg.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbkyqwhcg.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxrf0pjpe.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpxrf0pjpe.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxrf0pjpe.jl:26\ntest set: Test Failed at /tmp/tmpxrf0pjpe.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpxrf0pjpe.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxrf0pjpe.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxrf0pjpe.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpdhvpwf3h.jl:28\\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\\n   Evaluated: \"name\" == \"enam\"\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpdhvpwf3h.jl:28\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpdhvpwf3h.jl:26\\ntest set: Test Failed at /tmp/tmpdhvpwf3h.jl:31\\\
    n  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\\n   Evaluated: \"play\" == \"footbott\"\\nStacktrace:\\n [1]\
    \ top-level scope at /tmp/tmpdhvpwf3h.jl:31\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpdhvpwf3h.jl:26\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    8     2     10\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        unique_chars = unique(word)\n\
    \        if length(unique_chars) > max_count\n            max_count = length(unique_chars)\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp32sec1up.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp32sec1up.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp32sec1up.jl:26\ntest set: Test Failed at /tmp/tmp32sec1up.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp32sec1up.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp32sec1up.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp32sec1up.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwsxb5bcv.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpwsxb5bcv.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwsxb5bcv.jl:26\ntest set: Test Failed at /tmp/tmpwsxb5bcv.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpwsxb5bcv.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwsxb5bcv.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwsxb5bcv.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0rftk5o_.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp0rftk5o_.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0rftk5o_.jl:26\ntest set: Test Failed at /tmp/tmp0rftk5o_.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp0rftk5o_.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0rftk5o_.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0rftk5o_.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9nbnooap.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp9nbnooap.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9nbnooap.jl:26\ntest set: Test Failed at /tmp/tmp9nbnooap.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp9nbnooap.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9nbnooap.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9nbnooap.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_66dv9_d.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp_66dv9_d.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_66dv9_d.jl:26\ntest set: Test Failed at /tmp/tmp_66dv9_d.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp_66dv9_d.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_66dv9_d.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_66dv9_d.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0h7ekbus.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp0h7ekbus.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0h7ekbus.jl:26\ntest set: Test Failed at /tmp/tmp0h7ekbus.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp0h7ekbus.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0h7ekbus.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0h7ekbus.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_len = 0\n    for word in words\n        if length(unique(word))\
    \ > max_len\n            max_len = length(unique(word))\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb17ftxid.jl:27\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpb17ftxid.jl:27\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpb17ftxid.jl:25\ntest set: Test Failed at /tmp/tmpb17ftxid.jl:30\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpb17ftxid.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpb17ftxid.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb17ftxid.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_len = 0\n    for word in words\n        if length(unique(word))\
    \ > max_len\n            max_len = length(unique(word))\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp63r9k2eg.jl:27\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp63r9k2eg.jl:27\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp63r9k2eg.jl:25\ntest set: Test Failed at /tmp/tmp63r9k2eg.jl:30\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp63r9k2eg.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp63r9k2eg.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp63r9k2eg.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpypylbq32.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpypylbq32.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpypylbq32.jl:26\ntest set: Test Failed at /tmp/tmpypylbq32.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpypylbq32.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpypylbq32.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpypylbq32.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        unique_chars = unique(word)\n\
    \        if length(unique_chars) > max_count\n            max_count = length(unique_chars)\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpnsfblxp7.jl:28\\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\\n   Evaluated: \"name\" == \"enam\"\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpnsfblxp7.jl:28\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpnsfblxp7.jl:26\\ntest set: Test Failed at /tmp/tmpnsfblxp7.jl:31\\\
    n  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\\n   Evaluated: \"play\" == \"footbott\"\\nStacktrace:\\n [1]\
    \ top-level scope at /tmp/tmpnsfblxp7.jl:31\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpnsfblxp7.jl:26\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7odv84r2.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp7odv84r2.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7odv84r2.jl:26\ntest set: Test Failed at /tmp/tmp7odv84r2.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp7odv84r2.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7odv84r2.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7odv84r2.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8tsrfwvg.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp8tsrfwvg.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8tsrfwvg.jl:26\ntest set: Test Failed at /tmp/tmp8tsrfwvg.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp8tsrfwvg.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8tsrfwvg.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8tsrfwvg.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_len = 0\n    for word in words\n        len = length(unique(word))\n\
    \        if len > max_len\n            max_len = len\n            max_word = word\n\
    \        end\n    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpqspanv73.jl:28\\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\\n   Evaluated: \"name\" == \"enam\"\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpqspanv73.jl:28\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpqspanv73.jl:26\\ntest set: Test Failed at /tmp/tmpqspanv73.jl:31\\\
    n  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\\n   Evaluated: \"play\" == \"footbott\"\\nStacktrace:\\n [1]\
    \ top-level scope at /tmp/tmpqspanv73.jl:31\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpqspanv73.jl:26\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfvhufqbb.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpfvhufqbb.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfvhufqbb.jl:26\ntest set: Test Failed at /tmp/tmpfvhufqbb.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpfvhufqbb.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfvhufqbb.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfvhufqbb.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbh01lyem.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpbh01lyem.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbh01lyem.jl:26\ntest set: Test Failed at /tmp/tmpbh01lyem.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpbh01lyem.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbh01lyem.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbh01lyem.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_length = 0\n    for word in words\n        if length(unique(word))\
    \ > max_length\n            max_length = length(unique(word))\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwplwt8z_.jl:27\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpwplwt8z_.jl:27\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwplwt8z_.jl:25\ntest set: Test Failed at /tmp/tmpwplwt8z_.jl:30\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpwplwt8z_.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwplwt8z_.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwplwt8z_.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    # find the\
    \ word with maximum number of unique characters\n    # if multiple strings have\
    \ maximum number of unique characters,\n    # return the one which comes first\
    \ in lexicographical order.\n    max_word = \"\"\n    max_unique_chars = 0\n \
    \   for word in words\n        unique_chars = length(unique(word))\n        if\
    \ unique_chars > max_unique_chars\n            max_word = word\n            max_unique_chars\
    \ = unique_chars\n        elseif unique_chars == max_unique_chars\n          \
    \  if word < max_word\n                max_word = word\n            end\n    \
    \    end\n    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3fxv50h6.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp3fxv50h6.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3fxv50h6.jl:26\ntest set: Test Failed at /tmp/tmp3fxv50h6.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp3fxv50h6.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3fxv50h6.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3fxv50h6.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_length\
    \ = 0\n    max_word = \"\"\n    for word in words\n        if length(unique(word))\
    \ > max_length\n            max_length = length(unique(word))\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm28zlwvl.jl:27\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpm28zlwvl.jl:27\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpm28zlwvl.jl:25\ntest set: Test Failed at /tmp/tmpm28zlwvl.jl:30\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpm28zlwvl.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpm28zlwvl.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm28zlwvl.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl1q9c2ts.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpl1q9c2ts.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl1q9c2ts.jl:26\ntest set: Test Failed at /tmp/tmpl1q9c2ts.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpl1q9c2ts.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl1q9c2ts.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl1q9c2ts.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_unique_chars\
    \ = 0\n    max_word = \"\"\n    for word in words\n        unique_chars = length(unique(word))\n\
    \        if unique_chars > max_unique_chars\n            max_unique_chars = unique_chars\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr00xa131.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpr00xa131.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr00xa131.jl:26\ntest set: Test Failed at /tmp/tmpr00xa131.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpr00xa131.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr00xa131.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr00xa131.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpho9bh7vp.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpho9bh7vp.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpho9bh7vp.jl:26\ntest set: Test Failed at /tmp/tmpho9bh7vp.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpho9bh7vp.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpho9bh7vp.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpho9bh7vp.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_unique_chars\
    \ = 0\n    max_word = \"\"\n    for word in words\n        unique_chars = length(unique(word))\n\
    \        if unique_chars > max_unique_chars\n            max_unique_chars = unique_chars\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5hkj3x34.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp5hkj3x34.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5hkj3x34.jl:26\ntest set: Test Failed at /tmp/tmp5hkj3x34.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp5hkj3x34.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5hkj3x34.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5hkj3x34.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_unique_chars = 0\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_word = word\n            max_unique_chars = unique_chars\n        end\n\
    \    end\n    return max_word\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd2gsucv5.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpd2gsucv5.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpd2gsucv5.jl:26\ntest set: Test Failed at /tmp/tmpd2gsucv5.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpd2gsucv5.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpd2gsucv5.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd2gsucv5.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_unique_chars\
    \ = 0\n    max_word = \"\"\n    for word in words\n        unique_chars = length(unique(word))\n\
    \        if unique_chars > max_unique_chars\n            max_unique_chars = unique_chars\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmnty_8hu.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpmnty_8hu.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmnty_8hu.jl:26\ntest set: Test Failed at /tmp/tmpmnty_8hu.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpmnty_8hu.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmnty_8hu.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmnty_8hu.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_unique_chars\
    \ = 0\n    max_word = \"\"\n    for word in words\n        unique_chars = length(unique(word))\n\
    \        if unique_chars > max_unique_chars\n            max_unique_chars = unique_chars\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph5qwsgpb.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmph5qwsgpb.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph5qwsgpb.jl:26\ntest set: Test Failed at /tmp/tmph5qwsgpb.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmph5qwsgpb.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph5qwsgpb.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph5qwsgpb.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        if length(unique(word))\
    \ > max_count\n            max_count = length(unique(word))\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpwzx76eur.jl:27\\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\\n   Evaluated: \"name\" == \"enam\"\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpwzx76eur.jl:27\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpwzx76eur.jl:25\\ntest set: Test Failed at /tmp/tmpwzx76eur.jl:30\\\
    n  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\\n   Evaluated: \"play\" == \"footbott\"\\nStacktrace:\\n [1]\
    \ top-level scope at /tmp/tmpwzx76eur.jl:30\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpwzx76eur.jl:25\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    8     2     10\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfb__6ar2.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpfb__6ar2.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfb__6ar2.jl:26\ntest set: Test Failed at /tmp/tmpfb__6ar2.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpfb__6ar2.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfb__6ar2.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfb__6ar2.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_unique_char_count\
    \ = 0\n    max_unique_char_word = \"\"\n    for word in words\n        unique_char_count\
    \ = length(unique(word))\n        if unique_char_count > max_unique_char_count\n\
    \            max_unique_char_count = unique_char_count\n            max_unique_char_word\
    \ = word\n        end\n    end\n    return max_unique_char_word\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\"\
    , \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7_9sfxol.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp7_9sfxol.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7_9sfxol.jl:26\ntest set: Test Failed at /tmp/tmp7_9sfxol.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp7_9sfxol.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7_9sfxol.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7_9sfxol.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_unique_chars\
    \ = 0\n    max_unique_word = \"\"\n    for word in words\n        unique_chars\
    \ = length(unique(word))\n        if unique_chars > max_unique_chars\n       \
    \     max_unique_chars = unique_chars\n            max_unique_word = word\n  \
    \      end\n    end\n    return max_unique_word\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx9bdufwj.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpx9bdufwj.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx9bdufwj.jl:26\ntest set: Test Failed at /tmp/tmpx9bdufwj.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpx9bdufwj.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx9bdufwj.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx9bdufwj.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyj3h23tb.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpyj3h23tb.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyj3h23tb.jl:26\ntest set: Test Failed at /tmp/tmpyj3h23tb.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpyj3h23tb.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyj3h23tb.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyj3h23tb.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpszq683hl.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpszq683hl.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpszq683hl.jl:26\ntest set: Test Failed at /tmp/tmpszq683hl.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpszq683hl.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpszq683hl.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpszq683hl.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx4e0fo3v.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpx4e0fo3v.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx4e0fo3v.jl:26\ntest set: Test Failed at /tmp/tmpx4e0fo3v.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpx4e0fo3v.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx4e0fo3v.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx4e0fo3v.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6nf2mknz.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp6nf2mknz.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6nf2mknz.jl:26\ntest set: Test Failed at /tmp/tmp6nf2mknz.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp6nf2mknz.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6nf2mknz.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6nf2mknz.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_unique_char\
    \ = 0\n    max_word = \"\"\n    for word in words\n        unique_char = length(unique(word))\n\
    \        if unique_char > max_unique_char\n            max_unique_char = unique_char\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnex7bo6i.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpnex7bo6i.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnex7bo6i.jl:26\ntest set: Test Failed at /tmp/tmpnex7bo6i.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpnex7bo6i.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnex7bo6i.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnex7bo6i.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_unique\
    \ = 0\n    max_word = \"\"\n    for word in words\n        unique_chars = length(unique(word))\n\
    \        if unique_chars > max_unique\n            max_unique = unique_chars\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpntcpp56o.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpntcpp56o.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpntcpp56o.jl:26\ntest set: Test Failed at /tmp/tmpntcpp56o.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpntcpp56o.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpntcpp56o.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpntcpp56o.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfwbho981.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpfwbho981.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfwbho981.jl:26\ntest set: Test Failed at /tmp/tmpfwbho981.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpfwbho981.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfwbho981.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfwbho981.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbjj8au48.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpbjj8au48.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbjj8au48.jl:26\ntest set: Test Failed at /tmp/tmpbjj8au48.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpbjj8au48.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbjj8au48.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbjj8au48.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_unique_chars\
    \ = 0\n    max_word = \"\"\n    for word in words\n        unique_chars = length(unique(word))\n\
    \        if unique_chars > max_unique_chars\n            max_unique_chars = unique_chars\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfqdqjfnh.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpfqdqjfnh.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfqdqjfnh.jl:26\ntest set: Test Failed at /tmp/tmpfqdqjfnh.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpfqdqjfnh.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfqdqjfnh.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfqdqjfnh.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\nfunction find_max(words::Vector{String})::String \n    max_word =\
    \ \"\"\n    max_count = 0\n    for word in words\n        count = length(unique(word))\n\
    \        if count > max_count\n            max_count = count\n            max_word\
    \ = word\n        end\n    end\n    return max_word\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu27o66fn.jl:28\n  Expression: candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\"\n   Evaluated: \"name\" == \"enam\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpu27o66fn.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu27o66fn.jl:26\ntest set: Test Failed at /tmp/tmpu27o66fn.jl:31\n\
    \  Expression: candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\"\n   Evaluated: \"play\" == \"footbott\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpu27o66fn.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu27o66fn.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu27o66fn.jl:24\n"
  exit_code: 1
  status: SyntaxError
