name: HumanEval_7_filter_by_substring
language: julia
results:
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpz25mdpmh.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpz25mdpmh.jl:8\n   [9] top-level scope at /tmp/tmpz25mdpmh.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpz25mdpmh.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpz25mdpmh.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpz25mdpmh.jl:8\n\
    \   [9] top-level scope at /tmp/tmpz25mdpmh.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpz25mdpmh.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpz25mdpmh.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpz25mdpmh.jl:8\n\
    \   [9] top-level scope at /tmp/tmpz25mdpmh.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpz25mdpmh.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz25mdpmh.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpwch51cjs.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n   [1] error(::String) at ./error.jl:33\\\
    n   [2] in(::String, ::String) at ./strings/search.jl:533\\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\\n   [4] iterate at ./iterators.jl:430 [inlined]\\\
    n   [5] iterate at ./generator.jl:44 [inlined]\\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\\n   [7] collect at ./array.jl:663 [inlined]\\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpwch51cjs.jl:8\\n   [9] top-level scope at /tmp/tmpwch51cjs.jl:16\\\
    n   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmpwch51cjs.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpwch51cjs.jl:17\\n  Test threw exception\\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x, y) for string containment\\\
    n  Stacktrace:\\n   [1] error(::String) at ./error.jl:33\\n   [2] in(::String,\
    \ ::String) at ./strings/search.jl:533\\n   [3] (::var\"#3#4\"{String})(::String)\
    \ at ./none:0\\n   [4] iterate at ./iterators.jl:430 [inlined]\\n   [5] iterate\
    \ at ./generator.jl:44 [inlined]\\n   [6] grow_to! at ./array.jl:726 [inlined]\\\
    n   [7] collect at ./array.jl:663 [inlined]\\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpwch51cjs.jl:8\\n   [9] top-level scope at /tmp/tmpwch51cjs.jl:17\\\
    n   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmpwch51cjs.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpwch51cjs.jl:18\\n  Test threw exception\\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\\n  use occursin(x, y) for string containment\\n  Stacktrace:\\n   [1] error(::String)\
    \ at ./error.jl:33\\n   [2] in(::String, ::String) at ./strings/search.jl:533\\\
    n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\\n   [5] iterate at ./generator.jl:44 [inlined]\\n   [6] grow_to!\
    \ at ./array.jl:726 [inlined]\\n   [7] collect at ./array.jl:663 [inlined]\\n\
    \   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpwch51cjs.jl:8\\\
    n   [9] top-level scope at /tmp/tmpwch51cjs.jl:18\\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmpwch51cjs.jl:14\\n  \\nTest Summary: | Pass\
    \  Error  Total\\ntest set      |    1      3      4\\n'"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmpwch51cjs.jl:12\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpi1goj6ox.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpi1goj6ox.jl:8\n   [9] top-level scope at /tmp/tmpi1goj6ox.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpi1goj6ox.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpi1goj6ox.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpi1goj6ox.jl:8\n\
    \   [9] top-level scope at /tmp/tmpi1goj6ox.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpi1goj6ox.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpi1goj6ox.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpi1goj6ox.jl:8\n\
    \   [9] top-level scope at /tmp/tmpi1goj6ox.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpi1goj6ox.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi1goj6ox.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp70ccq6hq.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp70ccq6hq.jl:8\n   [9] top-level scope at /tmp/tmp70ccq6hq.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp70ccq6hq.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp70ccq6hq.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp70ccq6hq.jl:8\n\
    \   [9] top-level scope at /tmp/tmp70ccq6hq.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp70ccq6hq.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp70ccq6hq.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp70ccq6hq.jl:8\n\
    \   [9] top-level scope at /tmp/tmp70ccq6hq.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp70ccq6hq.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp70ccq6hq.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfg4g3ysh.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpfg4g3ysh.jl:8\n   [9] top-level scope at /tmp/tmpfg4g3ysh.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpfg4g3ysh.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpfg4g3ysh.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpfg4g3ysh.jl:8\n\
    \   [9] top-level scope at /tmp/tmpfg4g3ysh.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpfg4g3ysh.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpfg4g3ysh.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpfg4g3ysh.jl:8\n\
    \   [9] top-level scope at /tmp/tmpfg4g3ysh.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpfg4g3ysh.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfg4g3ysh.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4am2wf48.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp4am2wf48.jl:8\n   [9] top-level scope at /tmp/tmp4am2wf48.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp4am2wf48.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp4am2wf48.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp4am2wf48.jl:8\n\
    \   [9] top-level scope at /tmp/tmp4am2wf48.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp4am2wf48.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp4am2wf48.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp4am2wf48.jl:8\n\
    \   [9] top-level scope at /tmp/tmp4am2wf48.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp4am2wf48.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4am2wf48.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpj1mqi5fi.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n   [1] error(::String) at ./error.jl:33\\\
    n   [2] in(::String, ::String) at ./strings/search.jl:533\\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\\n   [4] iterate at ./iterators.jl:430 [inlined]\\\
    n   [5] iterate at ./generator.jl:44 [inlined]\\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\\n   [7] collect at ./array.jl:663 [inlined]\\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpj1mqi5fi.jl:8\\n   [9] top-level scope at /tmp/tmpj1mqi5fi.jl:16\\\
    n   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmpj1mqi5fi.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpj1mqi5fi.jl:17\\n  Test threw exception\\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x, y) for string containment\\\
    n  Stacktrace:\\n   [1] error(::String) at ./error.jl:33\\n   [2] in(::String,\
    \ ::String) at ./strings/search.jl:533\\n   [3] (::var\"#3#4\"{String})(::String)\
    \ at ./none:0\\n   [4] iterate at ./iterators.jl:430 [inlined]\\n   [5] iterate\
    \ at ./generator.jl:44 [inlined]\\n   [6] grow_to! at ./array.jl:726 [inlined]\\\
    n   [7] collect at ./array.jl:663 [inlined]\\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpj1mqi5fi.jl:8\\n   [9] top-level scope at /tmp/tmpj1mqi5fi.jl:17\\\
    n   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmpj1mqi5fi.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpj1mqi5fi.jl:18\\n  Test threw exception\\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\\n  use occursin(x, y) for string containment\\n  Stacktrace:\\n   [1] error(::String)\
    \ at ./error.jl:33\\n   [2] in(::String, ::String) at ./strings/search.jl:533\\\
    n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\\n   [5] iterate at ./generator.jl:44 [inlined]\\n   [6] grow_to!\
    \ at ./array.jl:726 [inlined]\\n   [7] collect at ./array.jl:663 [inlined]\\n\
    \   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpj1mqi5fi.jl:8\\\
    n   [9] top-level scope at /tmp/tmpj1mqi5fi.jl:18\\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmpj1mqi5fi.jl:14\\n  \\nTest Summary: | Pass\
    \  Error  Total\\ntest set      |    1      3      4\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxzj8x54b.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpxzj8x54b.jl:8\n   [9] top-level scope at /tmp/tmpxzj8x54b.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpxzj8x54b.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpxzj8x54b.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpxzj8x54b.jl:8\n\
    \   [9] top-level scope at /tmp/tmpxzj8x54b.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpxzj8x54b.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpxzj8x54b.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpxzj8x54b.jl:8\n\
    \   [9] top-level scope at /tmp/tmpxzj8x54b.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpxzj8x54b.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxzj8x54b.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp1_kg85tb.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n   [1] error(::String) at ./error.jl:33\\\
    n   [2] in(::String, ::String) at ./strings/search.jl:533\\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\\n   [4] iterate at ./iterators.jl:430 [inlined]\\\
    n   [5] iterate at ./generator.jl:44 [inlined]\\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\\n   [7] collect at ./array.jl:663 [inlined]\\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp1_kg85tb.jl:8\\n   [9] top-level scope at /tmp/tmp1_kg85tb.jl:16\\\
    n   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmp1_kg85tb.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp1_kg85tb.jl:17\\n  Test threw exception\\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x, y) for string containment\\\
    n  Stacktrace:\\n   [1] error(::String) at ./error.jl:33\\n   [2] in(::String,\
    \ ::String) at ./strings/search.jl:533\\n   [3] (::var\"#3#4\"{String})(::String)\
    \ at ./none:0\\n   [4] iterate at ./iterators.jl:430 [inlined]\\n   [5] iterate\
    \ at ./generator.jl:44 [inlined]\\n   [6] grow_to! at ./array.jl:726 [inlined]\\\
    n   [7] collect at ./array.jl:663 [inlined]\\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp1_kg85tb.jl:8\\n   [9] top-level scope at /tmp/tmp1_kg85tb.jl:17\\\
    n   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmp1_kg85tb.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp1_kg85tb.jl:18\\n  Test threw exception\\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\\n  use occursin(x, y) for string containment\\n  Stacktrace:\\n   [1] error(::String)\
    \ at ./error.jl:33\\n   [2] in(::String, ::String) at ./strings/search.jl:533\\\
    n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\\n   [5] iterate at ./generator.jl:44 [inlined]\\n   [6] grow_to!\
    \ at ./array.jl:726 [inlined]\\n   [7] collect at ./array.jl:663 [inlined]\\n\
    \   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp1_kg85tb.jl:8\\\
    n   [9] top-level scope at /tmp/tmp1_kg85tb.jl:18\\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmp1_kg85tb.jl:14\\n  \\nTest Summary: | Pass\
    \  Error  Total\\ntest set      |    1      3      4\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp3jnlf8hc.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n   [1] error(::String) at ./error.jl:33\\\
    n   [2] in(::String, ::String) at ./strings/search.jl:533\\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\\n   [4] iterate at ./iterators.jl:430 [inlined]\\\
    n   [5] iterate at ./generator.jl:44 [inlined]\\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\\n   [7] collect at ./array.jl:663 [inlined]\\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp3jnlf8hc.jl:8\\n   [9] top-level scope at /tmp/tmp3jnlf8hc.jl:16\\\
    n   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmp3jnlf8hc.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp3jnlf8hc.jl:17\\n  Test threw exception\\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x, y) for string containment\\\
    n  Stacktrace:\\n   [1] error(::String) at ./error.jl:33\\n   [2] in(::String,\
    \ ::String) at ./strings/search.jl:533\\n   [3] (::var\"#3#4\"{String})(::String)\
    \ at ./none:0\\n   [4] iterate at ./iterators.jl:430 [inlined]\\n   [5] iterate\
    \ at ./generator.jl:44 [inlined]\\n   [6] grow_to! at ./array.jl:726 [inlined]\\\
    n   [7] collect at ./array.jl:663 [inlined]\\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp3jnlf8hc.jl:8\\n   [9] top-level scope at /tmp/tmp3jnlf8hc.jl:17\\\
    n   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmp3jnlf8hc.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp3jnlf8hc.jl:18\\n  Test threw exception\\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\\n  use occursin(x, y) for string containment\\n  Stacktrace:\\n   [1] error(::String)\
    \ at ./error.jl:33\\n   [2] in(::String, ::String) at ./strings/search.jl:533\\\
    n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\\n   [5] iterate at ./generator.jl:44 [inlined]\\n   [6] grow_to!\
    \ at ./array.jl:726 [inlined]\\n   [7] collect at ./array.jl:663 [inlined]\\n\
    \   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp3jnlf8hc.jl:8\\\
    n   [9] top-level scope at /tmp/tmp3jnlf8hc.jl:18\\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmp3jnlf8hc.jl:14\\n  \\nTest Summary: | Pass\
    \  Error  Total\\ntest set      |    1      3      4\\n'"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmarjyq6x.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpmarjyq6x.jl:8\n   [9] top-level scope at /tmp/tmpmarjyq6x.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpmarjyq6x.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpmarjyq6x.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpmarjyq6x.jl:8\n\
    \   [9] top-level scope at /tmp/tmpmarjyq6x.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpmarjyq6x.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpmarjyq6x.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpmarjyq6x.jl:8\n\
    \   [9] top-level scope at /tmp/tmpmarjyq6x.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpmarjyq6x.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmarjyq6x.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7iw4i27_.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp7iw4i27_.jl:8\n   [9] top-level scope at /tmp/tmp7iw4i27_.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp7iw4i27_.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp7iw4i27_.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp7iw4i27_.jl:8\n\
    \   [9] top-level scope at /tmp/tmp7iw4i27_.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp7iw4i27_.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp7iw4i27_.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp7iw4i27_.jl:8\n\
    \   [9] top-level scope at /tmp/tmp7iw4i27_.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp7iw4i27_.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7iw4i27_.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpkkhh3cnm.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n   [1] error(::String) at ./error.jl:33\\\
    n   [2] in(::String, ::String) at ./strings/search.jl:533\\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\\n   [4] iterate at ./iterators.jl:430 [inlined]\\\
    n   [5] iterate at ./generator.jl:44 [inlined]\\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\\n   [7] collect at ./array.jl:663 [inlined]\\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpkkhh3cnm.jl:8\\n   [9] top-level scope at /tmp/tmpkkhh3cnm.jl:16\\\
    n   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmpkkhh3cnm.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpkkhh3cnm.jl:17\\n  Test threw exception\\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x, y) for string containment\\\
    n  Stacktrace:\\n   [1] error(::String) at ./error.jl:33\\n   [2] in(::String,\
    \ ::String) at ./strings/search.jl:533\\n   [3] (::var\"#3#4\"{String})(::String)\
    \ at ./none:0\\n   [4] iterate at ./iterators.jl:430 [inlined]\\n   [5] iterate\
    \ at ./generator.jl:44 [inlined]\\n   [6] grow_to! at ./array.jl:726 [inlined]\\\
    n   [7] collect at ./array.jl:663 [inlined]\\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpkkhh3cnm.jl:8\\n   [9] top-level scope at /tmp/tmpkkhh3cnm.jl:17\\\
    n   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmpkkhh3cnm.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpkkhh3cnm.jl:18\\n  Test threw exception\\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\\n  use occursin(x, y) for string containment\\n  Stacktrace:\\n   [1] error(::String)\
    \ at ./error.jl:33\\n   [2] in(::String, ::String) at ./strings/search.jl:533\\\
    n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\\n   [5] iterate at ./generator.jl:44 [inlined]\\n   [6] grow_to!\
    \ at ./array.jl:726 [inlined]\\n   [7] collect at ./array.jl:663 [inlined]\\n\
    \   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpkkhh3cnm.jl:8\\\
    n   [9] top-level scope at /tmp/tmpkkhh3cnm.jl:18\\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmpkkhh3cnm.jl:14\\n  \\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppuanrvx9.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmppuanrvx9.jl:8\n   [9] top-level scope at /tmp/tmppuanrvx9.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmppuanrvx9.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmppuanrvx9.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmppuanrvx9.jl:8\n\
    \   [9] top-level scope at /tmp/tmppuanrvx9.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmppuanrvx9.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmppuanrvx9.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmppuanrvx9.jl:8\n\
    \   [9] top-level scope at /tmp/tmppuanrvx9.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmppuanrvx9.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppuanrvx9.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2khibv13.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp2khibv13.jl:8\n   [9] top-level scope at /tmp/tmp2khibv13.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp2khibv13.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp2khibv13.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp2khibv13.jl:8\n\
    \   [9] top-level scope at /tmp/tmp2khibv13.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp2khibv13.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp2khibv13.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp2khibv13.jl:8\n\
    \   [9] top-level scope at /tmp/tmp2khibv13.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp2khibv13.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2khibv13.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4dquzahp.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp4dquzahp.jl:8\n   [9] top-level scope at /tmp/tmp4dquzahp.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp4dquzahp.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp4dquzahp.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp4dquzahp.jl:8\n\
    \   [9] top-level scope at /tmp/tmp4dquzahp.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp4dquzahp.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp4dquzahp.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp4dquzahp.jl:8\n\
    \   [9] top-level scope at /tmp/tmp4dquzahp.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp4dquzahp.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4dquzahp.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9kb2uraj.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp9kb2uraj.jl:8\n   [9] top-level scope at /tmp/tmp9kb2uraj.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp9kb2uraj.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp9kb2uraj.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp9kb2uraj.jl:8\n\
    \   [9] top-level scope at /tmp/tmp9kb2uraj.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp9kb2uraj.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp9kb2uraj.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp9kb2uraj.jl:8\n\
    \   [9] top-level scope at /tmp/tmp9kb2uraj.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp9kb2uraj.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9kb2uraj.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp0t18xpve.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n   [1] error(::String) at ./error.jl:33\\\
    n   [2] in(::String, ::String) at ./strings/search.jl:533\\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\\n   [4] iterate at ./iterators.jl:430 [inlined]\\\
    n   [5] iterate at ./generator.jl:44 [inlined]\\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\\n   [7] collect at ./array.jl:663 [inlined]\\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp0t18xpve.jl:8\\n   [9] top-level scope at /tmp/tmp0t18xpve.jl:16\\\
    n   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmp0t18xpve.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp0t18xpve.jl:17\\n  Test threw exception\\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x, y) for string containment\\\
    n  Stacktrace:\\n   [1] error(::String) at ./error.jl:33\\n   [2] in(::String,\
    \ ::String) at ./strings/search.jl:533\\n   [3] (::var\"#3#4\"{String})(::String)\
    \ at ./none:0\\n   [4] iterate at ./iterators.jl:430 [inlined]\\n   [5] iterate\
    \ at ./generator.jl:44 [inlined]\\n   [6] grow_to! at ./array.jl:726 [inlined]\\\
    n   [7] collect at ./array.jl:663 [inlined]\\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp0t18xpve.jl:8\\n   [9] top-level scope at /tmp/tmp0t18xpve.jl:17\\\
    n   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmp0t18xpve.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp0t18xpve.jl:18\\n  Test threw exception\\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\\n  use occursin(x, y) for string containment\\n  Stacktrace:\\n   [1] error(::String)\
    \ at ./error.jl:33\\n   [2] in(::String, ::String) at ./strings/search.jl:533\\\
    n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\\n   [5] iterate at ./generator.jl:44 [inlined]\\n   [6] grow_to!\
    \ at ./array.jl:726 [inlined]\\n   [7] collect at ./array.jl:663 [inlined]\\n\
    \   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp0t18xpve.jl:8\\\
    n   [9] top-level scope at /tmp/tmp0t18xpve.jl:18\\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmp0t18xpve.jl:14\\n  \\nTest Summary: | Pass\
    \  Error  Total\\ntest set      |    1      3      4\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcvpnvkf0.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpcvpnvkf0.jl:8\n   [9] top-level scope at /tmp/tmpcvpnvkf0.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpcvpnvkf0.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpcvpnvkf0.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpcvpnvkf0.jl:8\n\
    \   [9] top-level scope at /tmp/tmpcvpnvkf0.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpcvpnvkf0.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpcvpnvkf0.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpcvpnvkf0.jl:8\n\
    \   [9] top-level scope at /tmp/tmpcvpnvkf0.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpcvpnvkf0.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcvpnvkf0.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxzi3gev0.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmpxzi3gev0.jl:8\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpxzi3gev0.jl:8\n\
    \   [4] top-level scope at /tmp/tmpxzi3gev0.jl:16\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpxzi3gev0.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpxzi3gev0.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains not defined\n\
    \  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmpxzi3gev0.jl:8\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpxzi3gev0.jl:8\n\
    \   [4] top-level scope at /tmp/tmpxzi3gev0.jl:17\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpxzi3gev0.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpxzi3gev0.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  UndefVarError: contains not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"\
    {String})(::String) at /tmp/tmpxzi3gev0.jl:8\n   [2] filter(::var\"#3#4\"{String},\
    \ ::Array{String,1}) at ./array.jl:2375\n   [3] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpxzi3gev0.jl:8\n   [4] top-level scope at /tmp/tmpxzi3gev0.jl:18\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpxzi3gev0.jl:14\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxzi3gev0.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpnkag7sxt.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n   [1] error(::String) at ./error.jl:33\\\
    n   [2] in(::String, ::String) at ./strings/search.jl:533\\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\\n   [4] iterate at ./iterators.jl:430 [inlined]\\\
    n   [5] iterate at ./generator.jl:44 [inlined]\\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\\n   [7] collect at ./array.jl:663 [inlined]\\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpnkag7sxt.jl:8\\n   [9] top-level scope at /tmp/tmpnkag7sxt.jl:16\\\
    n   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmpnkag7sxt.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpnkag7sxt.jl:17\\n  Test threw exception\\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x, y) for string containment\\\
    n  Stacktrace:\\n   [1] error(::String) at ./error.jl:33\\n   [2] in(::String,\
    \ ::String) at ./strings/search.jl:533\\n   [3] (::var\"#3#4\"{String})(::String)\
    \ at ./none:0\\n   [4] iterate at ./iterators.jl:430 [inlined]\\n   [5] iterate\
    \ at ./generator.jl:44 [inlined]\\n   [6] grow_to! at ./array.jl:726 [inlined]\\\
    n   [7] collect at ./array.jl:663 [inlined]\\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpnkag7sxt.jl:8\\n   [9] top-level scope at /tmp/tmpnkag7sxt.jl:17\\\
    n   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmpnkag7sxt.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpnkag7sxt.jl:18\\n  Test threw exception\\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\\n  use occursin(x, y) for string containment\\n  Stacktrace:\\n   [1] error(::String)\
    \ at ./error.jl:33\\n   [2] in(::String, ::String) at ./strings/search.jl:533\\\
    n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\\n   [5] iterate at ./generator.jl:44 [inlined]\\n   [6] grow_to!\
    \ at ./array.jl:726 [inlined]\\n   [7] collect at ./array.jl:663 [inlined]\\n\
    \   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpnkag7sxt.jl:8\\\
    n   [9] top-level scope at /tmp/tmpnkag7sxt.jl:18\\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmpnkag7sxt.jl:14\\n  \\nTest Summary: | Pass\
    \  Error  Total\\ntest set      |    1      3      4\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpniv0osxl.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n   [1] error(::String) at ./error.jl:33\\\
    n   [2] in(::String, ::String) at ./strings/search.jl:533\\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\\n   [4] iterate at ./iterators.jl:430 [inlined]\\\
    n   [5] iterate at ./generator.jl:44 [inlined]\\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\\n   [7] collect at ./array.jl:663 [inlined]\\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpniv0osxl.jl:8\\n   [9] top-level scope at /tmp/tmpniv0osxl.jl:16\\\
    n   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmpniv0osxl.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpniv0osxl.jl:17\\n  Test threw exception\\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x, y) for string containment\\\
    n  Stacktrace:\\n   [1] error(::String) at ./error.jl:33\\n   [2] in(::String,\
    \ ::String) at ./strings/search.jl:533\\n   [3] (::var\"#3#4\"{String})(::String)\
    \ at ./none:0\\n   [4] iterate at ./iterators.jl:430 [inlined]\\n   [5] iterate\
    \ at ./generator.jl:44 [inlined]\\n   [6] grow_to! at ./array.jl:726 [inlined]\\\
    n   [7] collect at ./array.jl:663 [inlined]\\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpniv0osxl.jl:8\\n   [9] top-level scope at /tmp/tmpniv0osxl.jl:17\\\
    n   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmpniv0osxl.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpniv0osxl.jl:18\\n  Test threw exception\\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\\n  use occursin(x, y) for string containment\\n  Stacktrace:\\n   [1] error(::String)\
    \ at ./error.jl:33\\n   [2] in(::String, ::String) at ./strings/search.jl:533\\\
    n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\\n   [5] iterate at ./generator.jl:44 [inlined]\\n   [6] grow_to!\
    \ at ./array.jl:726 [inlined]\\n   [7] collect at ./array.jl:663 [inlined]\\n\
    \   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpniv0osxl.jl:8\\\
    n   [9] top-level scope at /tmp/tmpniv0osxl.jl:18\\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmpniv0osxl.jl:14\\n  \\nTest Summary: | Pass\
    \  Error  Total\\ntest set      |    1      3      4\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6mctcxz9.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmp6mctcxz9.jl:8\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp6mctcxz9.jl:8\n\
    \   [4] top-level scope at /tmp/tmp6mctcxz9.jl:16\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp6mctcxz9.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp6mctcxz9.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains not defined\n\
    \  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmp6mctcxz9.jl:8\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp6mctcxz9.jl:8\n\
    \   [4] top-level scope at /tmp/tmp6mctcxz9.jl:17\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp6mctcxz9.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp6mctcxz9.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  UndefVarError: contains not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"\
    {String})(::String) at /tmp/tmp6mctcxz9.jl:8\n   [2] filter(::var\"#3#4\"{String},\
    \ ::Array{String,1}) at ./array.jl:2375\n   [3] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp6mctcxz9.jl:8\n   [4] top-level scope at /tmp/tmp6mctcxz9.jl:18\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp6mctcxz9.jl:14\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6mctcxz9.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6ymf6br6.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmp6ymf6br6.jl:8\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp6ymf6br6.jl:8\n\
    \   [4] top-level scope at /tmp/tmp6ymf6br6.jl:16\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp6ymf6br6.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp6ymf6br6.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains not defined\n\
    \  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmp6ymf6br6.jl:8\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp6ymf6br6.jl:8\n\
    \   [4] top-level scope at /tmp/tmp6ymf6br6.jl:17\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp6ymf6br6.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp6ymf6br6.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  UndefVarError: contains not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"\
    {String})(::String) at /tmp/tmp6ymf6br6.jl:8\n   [2] filter(::var\"#3#4\"{String},\
    \ ::Array{String,1}) at ./array.jl:2375\n   [3] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp6ymf6br6.jl:8\n   [4] top-level scope at /tmp/tmp6ymf6br6.jl:18\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp6ymf6br6.jl:14\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6ymf6br6.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpq4yiv8k4.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpq4yiv8k4.jl:8\n   [9] top-level scope at /tmp/tmpq4yiv8k4.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpq4yiv8k4.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpq4yiv8k4.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpq4yiv8k4.jl:8\n\
    \   [9] top-level scope at /tmp/tmpq4yiv8k4.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpq4yiv8k4.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpq4yiv8k4.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpq4yiv8k4.jl:8\n\
    \   [9] top-level scope at /tmp/tmpq4yiv8k4.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpq4yiv8k4.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq4yiv8k4.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpu_cm9574.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpu_cm9574.jl:8\n   [9] top-level scope at /tmp/tmpu_cm9574.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpu_cm9574.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpu_cm9574.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpu_cm9574.jl:8\n\
    \   [9] top-level scope at /tmp/tmpu_cm9574.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpu_cm9574.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpu_cm9574.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpu_cm9574.jl:8\n\
    \   [9] top-level scope at /tmp/tmpu_cm9574.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpu_cm9574.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu_cm9574.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpf03wuzt9.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpf03wuzt9.jl:8\n   [9] top-level scope at /tmp/tmpf03wuzt9.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpf03wuzt9.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpf03wuzt9.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpf03wuzt9.jl:8\n\
    \   [9] top-level scope at /tmp/tmpf03wuzt9.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpf03wuzt9.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpf03wuzt9.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpf03wuzt9.jl:8\n\
    \   [9] top-level scope at /tmp/tmpf03wuzt9.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpf03wuzt9.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf03wuzt9.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphlkdx90b.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmphlkdx90b.jl:8\n   [9] top-level scope at /tmp/tmphlkdx90b.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmphlkdx90b.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmphlkdx90b.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmphlkdx90b.jl:8\n\
    \   [9] top-level scope at /tmp/tmphlkdx90b.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmphlkdx90b.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmphlkdx90b.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmphlkdx90b.jl:8\n\
    \   [9] top-level scope at /tmp/tmphlkdx90b.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmphlkdx90b.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphlkdx90b.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpa8xypk04.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmpa8xypk04.jl:8\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpa8xypk04.jl:8\n\
    \   [4] top-level scope at /tmp/tmpa8xypk04.jl:16\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpa8xypk04.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpa8xypk04.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains not defined\n\
    \  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmpa8xypk04.jl:8\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpa8xypk04.jl:8\n\
    \   [4] top-level scope at /tmp/tmpa8xypk04.jl:17\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpa8xypk04.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpa8xypk04.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  UndefVarError: contains not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"\
    {String})(::String) at /tmp/tmpa8xypk04.jl:8\n   [2] filter(::var\"#3#4\"{String},\
    \ ::Array{String,1}) at ./array.jl:2375\n   [3] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpa8xypk04.jl:8\n   [4] top-level scope at /tmp/tmpa8xypk04.jl:18\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpa8xypk04.jl:14\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa8xypk04.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpa7eo1kke.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpa7eo1kke.jl:8\n   [9] top-level scope at /tmp/tmpa7eo1kke.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpa7eo1kke.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpa7eo1kke.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpa7eo1kke.jl:8\n\
    \   [9] top-level scope at /tmp/tmpa7eo1kke.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpa7eo1kke.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpa7eo1kke.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpa7eo1kke.jl:8\n\
    \   [9] top-level scope at /tmp/tmpa7eo1kke.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpa7eo1kke.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa7eo1kke.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8z2n9wul.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp8z2n9wul.jl:8\n   [9] top-level scope at /tmp/tmp8z2n9wul.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp8z2n9wul.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp8z2n9wul.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp8z2n9wul.jl:8\n\
    \   [9] top-level scope at /tmp/tmp8z2n9wul.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp8z2n9wul.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp8z2n9wul.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp8z2n9wul.jl:8\n\
    \   [9] top-level scope at /tmp/tmp8z2n9wul.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp8z2n9wul.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8z2n9wul.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp5sixee7q.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  UndefVarError:\
    \ contains not defined\\n  Stacktrace:\\n   [1] (::var\"#3#4\"{String})(::String)\
    \ at /tmp/tmp5sixee7q.jl:8\\n   [2] filter(::var\"#3#4\"{String}, ::Array{String,1})\
    \ at ./array.jl:2375\\n   [3] filter_by_substring(::Array{String,1}, ::String)\
    \ at /tmp/tmp5sixee7q.jl:8\\n   [4] top-level scope at /tmp/tmp5sixee7q.jl:16\\\
    n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [6] top-level scope at /tmp/tmp5sixee7q.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp5sixee7q.jl:17\\n  Test threw exception\\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  UndefVarError: contains not defined\\\
    n  Stacktrace:\\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmp5sixee7q.jl:8\\\
    n   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\\\
    n   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp5sixee7q.jl:8\\\
    n   [4] top-level scope at /tmp/tmp5sixee7q.jl:17\\n   [5] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [6] top-level scope at /tmp/tmp5sixee7q.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp5sixee7q.jl:18\\n  Test threw exception\\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\\n  UndefVarError: contains not defined\\n  Stacktrace:\\n   [1] (::var\"#3#4\"\
    {String})(::String) at /tmp/tmp5sixee7q.jl:8\\n   [2] filter(::var\"#3#4\"{String},\
    \ ::Array{String,1}) at ./array.jl:2375\\n   [3] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp5sixee7q.jl:8\\n   [4] top-level scope at /tmp/tmp5sixee7q.jl:18\\\
    n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [6] top-level scope at /tmp/tmp5sixee7q.jl:14\\n  \\nTest Summary: | Pass\
    \  Error  Total\\ntest set      |    1      3      4\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpe7642d27.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpe7642d27.jl:8\n   [9] top-level scope at /tmp/tmpe7642d27.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpe7642d27.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpe7642d27.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpe7642d27.jl:8\n\
    \   [9] top-level scope at /tmp/tmpe7642d27.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpe7642d27.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpe7642d27.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpe7642d27.jl:8\n\
    \   [9] top-level scope at /tmp/tmpe7642d27.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpe7642d27.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe7642d27.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmhsm6wb9.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpmhsm6wb9.jl:8\n   [9] top-level scope at /tmp/tmpmhsm6wb9.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpmhsm6wb9.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpmhsm6wb9.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpmhsm6wb9.jl:8\n\
    \   [9] top-level scope at /tmp/tmpmhsm6wb9.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpmhsm6wb9.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpmhsm6wb9.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpmhsm6wb9.jl:8\n\
    \   [9] top-level scope at /tmp/tmpmhsm6wb9.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpmhsm6wb9.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmhsm6wb9.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfaw8d825.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpfaw8d825.jl:8\n   [9] top-level scope at /tmp/tmpfaw8d825.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpfaw8d825.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpfaw8d825.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpfaw8d825.jl:8\n\
    \   [9] top-level scope at /tmp/tmpfaw8d825.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpfaw8d825.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpfaw8d825.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpfaw8d825.jl:8\n\
    \   [9] top-level scope at /tmp/tmpfaw8d825.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpfaw8d825.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfaw8d825.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpk7_2fgfy.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpk7_2fgfy.jl:8\n   [9] top-level scope at /tmp/tmpk7_2fgfy.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpk7_2fgfy.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpk7_2fgfy.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpk7_2fgfy.jl:8\n\
    \   [9] top-level scope at /tmp/tmpk7_2fgfy.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpk7_2fgfy.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpk7_2fgfy.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpk7_2fgfy.jl:8\n\
    \   [9] top-level scope at /tmp/tmpk7_2fgfy.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpk7_2fgfy.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk7_2fgfy.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqx9pzeg_.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpqx9pzeg_.jl:8\n   [9] top-level scope at /tmp/tmpqx9pzeg_.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpqx9pzeg_.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpqx9pzeg_.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpqx9pzeg_.jl:8\n\
    \   [9] top-level scope at /tmp/tmpqx9pzeg_.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpqx9pzeg_.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpqx9pzeg_.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpqx9pzeg_.jl:8\n\
    \   [9] top-level scope at /tmp/tmpqx9pzeg_.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpqx9pzeg_.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqx9pzeg_.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp6cxn2cul.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n   [1] error(::String) at ./error.jl:33\\\
    n   [2] in(::String, ::String) at ./strings/search.jl:533\\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\\n   [4] iterate at ./iterators.jl:430 [inlined]\\\
    n   [5] iterate at ./generator.jl:44 [inlined]\\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\\n   [7] collect at ./array.jl:663 [inlined]\\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp6cxn2cul.jl:8\\n   [9] top-level scope at /tmp/tmp6cxn2cul.jl:16\\\
    n   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmp6cxn2cul.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp6cxn2cul.jl:17\\n  Test threw exception\\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x, y) for string containment\\\
    n  Stacktrace:\\n   [1] error(::String) at ./error.jl:33\\n   [2] in(::String,\
    \ ::String) at ./strings/search.jl:533\\n   [3] (::var\"#3#4\"{String})(::String)\
    \ at ./none:0\\n   [4] iterate at ./iterators.jl:430 [inlined]\\n   [5] iterate\
    \ at ./generator.jl:44 [inlined]\\n   [6] grow_to! at ./array.jl:726 [inlined]\\\
    n   [7] collect at ./array.jl:663 [inlined]\\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp6cxn2cul.jl:8\\n   [9] top-level scope at /tmp/tmp6cxn2cul.jl:17\\\
    n   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmp6cxn2cul.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp6cxn2cul.jl:18\\n  Test threw exception\\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\\n  use occursin(x, y) for string containment\\n  Stacktrace:\\n   [1] error(::String)\
    \ at ./error.jl:33\\n   [2] in(::String, ::String) at ./strings/search.jl:533\\\
    n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\\n   [5] iterate at ./generator.jl:44 [inlined]\\n   [6] grow_to!\
    \ at ./array.jl:726 [inlined]\\n   [7] collect at ./array.jl:663 [inlined]\\n\
    \   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp6cxn2cul.jl:8\\\
    n   [9] top-level scope at /tmp/tmp6cxn2cul.jl:18\\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmp6cxn2cul.jl:14\\n  \\nTest Summary: | Pass\
    \  Error  Total\\ntest set      |    1      3      4\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_kkr408g.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp_kkr408g.jl:8\n   [9] top-level scope at /tmp/tmp_kkr408g.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp_kkr408g.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp_kkr408g.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp_kkr408g.jl:8\n\
    \   [9] top-level scope at /tmp/tmp_kkr408g.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp_kkr408g.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp_kkr408g.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp_kkr408g.jl:8\n\
    \   [9] top-level scope at /tmp/tmp_kkr408g.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp_kkr408g.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_kkr408g.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpomlk_rk9.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpomlk_rk9.jl:8\n   [9] top-level scope at /tmp/tmpomlk_rk9.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpomlk_rk9.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpomlk_rk9.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpomlk_rk9.jl:8\n\
    \   [9] top-level scope at /tmp/tmpomlk_rk9.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpomlk_rk9.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpomlk_rk9.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpomlk_rk9.jl:8\n\
    \   [9] top-level scope at /tmp/tmpomlk_rk9.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpomlk_rk9.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpomlk_rk9.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmptvdbjz81.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n   [1] error(::String) at ./error.jl:33\\\
    n   [2] in(::String, ::String) at ./strings/search.jl:533\\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\\n   [4] iterate at ./iterators.jl:430 [inlined]\\\
    n   [5] iterate at ./generator.jl:44 [inlined]\\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\\n   [7] collect at ./array.jl:663 [inlined]\\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmptvdbjz81.jl:8\\n   [9] top-level scope at /tmp/tmptvdbjz81.jl:16\\\
    n   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmptvdbjz81.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmptvdbjz81.jl:17\\n  Test threw exception\\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x, y) for string containment\\\
    n  Stacktrace:\\n   [1] error(::String) at ./error.jl:33\\n   [2] in(::String,\
    \ ::String) at ./strings/search.jl:533\\n   [3] (::var\"#3#4\"{String})(::String)\
    \ at ./none:0\\n   [4] iterate at ./iterators.jl:430 [inlined]\\n   [5] iterate\
    \ at ./generator.jl:44 [inlined]\\n   [6] grow_to! at ./array.jl:726 [inlined]\\\
    n   [7] collect at ./array.jl:663 [inlined]\\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmptvdbjz81.jl:8\\n   [9] top-level scope at /tmp/tmptvdbjz81.jl:17\\\
    n   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmptvdbjz81.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmptvdbjz81.jl:18\\n  Test threw exception\\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\\n  use occursin(x, y) for string containment\\n  Stacktrace:\\n   [1] error(::String)\
    \ at ./error.jl:33\\n   [2] in(::String, ::String) at ./strings/search.jl:533\\\
    n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\\n   [5] iterate at ./generator.jl:44 [inlined]\\n   [6] grow_to!\
    \ at ./array.jl:726 [inlined]\\n   [7] collect at ./array.jl:663 [inlined]\\n\
    \   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmptvdbjz81.jl:8\\\
    n   [9] top-level scope at /tmp/tmptvdbjz81.jl:18\\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmptvdbjz81.jl:14\\n  \\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_95m1uec.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmp_95m1uec.jl:8\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp_95m1uec.jl:8\n\
    \   [4] top-level scope at /tmp/tmp_95m1uec.jl:16\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp_95m1uec.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp_95m1uec.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains not defined\n\
    \  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmp_95m1uec.jl:8\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp_95m1uec.jl:8\n\
    \   [4] top-level scope at /tmp/tmp_95m1uec.jl:17\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp_95m1uec.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp_95m1uec.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  UndefVarError: contains not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"\
    {String})(::String) at /tmp/tmp_95m1uec.jl:8\n   [2] filter(::var\"#3#4\"{String},\
    \ ::Array{String,1}) at ./array.jl:2375\n   [3] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp_95m1uec.jl:8\n   [4] top-level scope at /tmp/tmp_95m1uec.jl:18\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp_95m1uec.jl:14\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_95m1uec.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0ajnxog5.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp0ajnxog5.jl:8\n   [9] top-level scope at /tmp/tmp0ajnxog5.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp0ajnxog5.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp0ajnxog5.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp0ajnxog5.jl:8\n\
    \   [9] top-level scope at /tmp/tmp0ajnxog5.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp0ajnxog5.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp0ajnxog5.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp0ajnxog5.jl:8\n\
    \   [9] top-level scope at /tmp/tmp0ajnxog5.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp0ajnxog5.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0ajnxog5.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpw2u0hxvc.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n   [1] error(::String) at ./error.jl:33\\\
    n   [2] in(::String, ::String) at ./strings/search.jl:533\\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\\n   [4] iterate at ./iterators.jl:430 [inlined]\\\
    n   [5] iterate at ./generator.jl:44 [inlined]\\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\\n   [7] collect at ./array.jl:663 [inlined]\\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpw2u0hxvc.jl:8\\n   [9] top-level scope at /tmp/tmpw2u0hxvc.jl:16\\\
    n   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmpw2u0hxvc.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpw2u0hxvc.jl:17\\n  Test threw exception\\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x, y) for string containment\\\
    n  Stacktrace:\\n   [1] error(::String) at ./error.jl:33\\n   [2] in(::String,\
    \ ::String) at ./strings/search.jl:533\\n   [3] (::var\"#3#4\"{String})(::String)\
    \ at ./none:0\\n   [4] iterate at ./iterators.jl:430 [inlined]\\n   [5] iterate\
    \ at ./generator.jl:44 [inlined]\\n   [6] grow_to! at ./array.jl:726 [inlined]\\\
    n   [7] collect at ./array.jl:663 [inlined]\\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpw2u0hxvc.jl:8\\n   [9] top-level scope at /tmp/tmpw2u0hxvc.jl:17\\\
    n   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmpw2u0hxvc.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpw2u0hxvc.jl:18\\n  Test threw exception\\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\\n  use occursin(x, y) for string containment\\n  Stacktrace:\\n   [1] error(::String)\
    \ at ./error.jl:33\\n   [2] in(::String, ::String) at ./strings/search.jl:533\\\
    n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\\n   [5] iterate at ./generator.jl:44 [inlined]\\n   [6] grow_to!\
    \ at ./array.jl:726 [inlined]\\n   [7] collect at ./array.jl:663 [inlined]\\n\
    \   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpw2u0hxvc.jl:8\\\
    n   [9] top-level scope at /tmp/tmpw2u0hxvc.jl:18\\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmpw2u0hxvc.jl:14\\n  \\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2wb0ahne.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp2wb0ahne.jl:8\n   [9] top-level scope at /tmp/tmp2wb0ahne.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp2wb0ahne.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp2wb0ahne.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp2wb0ahne.jl:8\n\
    \   [9] top-level scope at /tmp/tmp2wb0ahne.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp2wb0ahne.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp2wb0ahne.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp2wb0ahne.jl:8\n\
    \   [9] top-level scope at /tmp/tmp2wb0ahne.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp2wb0ahne.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2wb0ahne.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvojjr5eg.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpvojjr5eg.jl:8\n   [9] top-level scope at /tmp/tmpvojjr5eg.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpvojjr5eg.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpvojjr5eg.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpvojjr5eg.jl:8\n\
    \   [9] top-level scope at /tmp/tmpvojjr5eg.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpvojjr5eg.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpvojjr5eg.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpvojjr5eg.jl:8\n\
    \   [9] top-level scope at /tmp/tmpvojjr5eg.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpvojjr5eg.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvojjr5eg.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpz91brbzf.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpz91brbzf.jl:8\n   [9] top-level scope at /tmp/tmpz91brbzf.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpz91brbzf.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpz91brbzf.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpz91brbzf.jl:8\n\
    \   [9] top-level scope at /tmp/tmpz91brbzf.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpz91brbzf.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpz91brbzf.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpz91brbzf.jl:8\n\
    \   [9] top-level scope at /tmp/tmpz91brbzf.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpz91brbzf.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz91brbzf.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5xxr78k6.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp5xxr78k6.jl:8\n   [9] top-level scope at /tmp/tmp5xxr78k6.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp5xxr78k6.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp5xxr78k6.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp5xxr78k6.jl:8\n\
    \   [9] top-level scope at /tmp/tmp5xxr78k6.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp5xxr78k6.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp5xxr78k6.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp5xxr78k6.jl:8\n\
    \   [9] top-level scope at /tmp/tmp5xxr78k6.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp5xxr78k6.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5xxr78k6.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0tnpfoye.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp0tnpfoye.jl:8\n   [9] top-level scope at /tmp/tmp0tnpfoye.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp0tnpfoye.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp0tnpfoye.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp0tnpfoye.jl:8\n\
    \   [9] top-level scope at /tmp/tmp0tnpfoye.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp0tnpfoye.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp0tnpfoye.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp0tnpfoye.jl:8\n\
    \   [9] top-level scope at /tmp/tmp0tnpfoye.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp0tnpfoye.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0tnpfoye.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6sr2mk6j.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp6sr2mk6j.jl:8\n   [9] top-level scope at /tmp/tmp6sr2mk6j.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp6sr2mk6j.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp6sr2mk6j.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp6sr2mk6j.jl:8\n\
    \   [9] top-level scope at /tmp/tmp6sr2mk6j.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp6sr2mk6j.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp6sr2mk6j.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp6sr2mk6j.jl:8\n\
    \   [9] top-level scope at /tmp/tmp6sr2mk6j.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp6sr2mk6j.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6sr2mk6j.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp15jh7ets.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp15jh7ets.jl:8\n   [9] top-level scope at /tmp/tmp15jh7ets.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp15jh7ets.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp15jh7ets.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp15jh7ets.jl:8\n\
    \   [9] top-level scope at /tmp/tmp15jh7ets.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp15jh7ets.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp15jh7ets.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp15jh7ets.jl:8\n\
    \   [9] top-level scope at /tmp/tmp15jh7ets.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp15jh7ets.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp15jh7ets.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpr6ul9e62.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n   [1] error(::String) at ./error.jl:33\\\
    n   [2] in(::String, ::String) at ./strings/search.jl:533\\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\\n   [4] iterate at ./iterators.jl:430 [inlined]\\\
    n   [5] iterate at ./generator.jl:44 [inlined]\\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\\n   [7] collect at ./array.jl:663 [inlined]\\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpr6ul9e62.jl:8\\n   [9] top-level scope at /tmp/tmpr6ul9e62.jl:16\\\
    n   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmpr6ul9e62.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpr6ul9e62.jl:17\\n  Test threw exception\\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x, y) for string containment\\\
    n  Stacktrace:\\n   [1] error(::String) at ./error.jl:33\\n   [2] in(::String,\
    \ ::String) at ./strings/search.jl:533\\n   [3] (::var\"#3#4\"{String})(::String)\
    \ at ./none:0\\n   [4] iterate at ./iterators.jl:430 [inlined]\\n   [5] iterate\
    \ at ./generator.jl:44 [inlined]\\n   [6] grow_to! at ./array.jl:726 [inlined]\\\
    n   [7] collect at ./array.jl:663 [inlined]\\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpr6ul9e62.jl:8\\n   [9] top-level scope at /tmp/tmpr6ul9e62.jl:17\\\
    n   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmpr6ul9e62.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpr6ul9e62.jl:18\\n  Test threw exception\\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\\n  use occursin(x, y) for string containment\\n  Stacktrace:\\n   [1] error(::String)\
    \ at ./error.jl:33\\n   [2] in(::String, ::String) at ./strings/search.jl:533\\\
    n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\\n   [5] iterate at ./generator.jl:44 [inlined]\\n   [6] grow_to!\
    \ at ./array.jl:726 [inlined]\\n   [7] collect at ./array.jl:663 [inlined]\\n\
    \   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpr6ul9e62.jl:8\\\
    n   [9] top-level scope at /tmp/tmpr6ul9e62.jl:18\\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmpr6ul9e62.jl:14\\n  \\nTest Summary: | Pass\
    \  Error  Total\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmper7iagw4.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmper7iagw4.jl:8\n   [9] top-level scope at /tmp/tmper7iagw4.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmper7iagw4.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmper7iagw4.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmper7iagw4.jl:8\n\
    \   [9] top-level scope at /tmp/tmper7iagw4.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmper7iagw4.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmper7iagw4.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmper7iagw4.jl:8\n\
    \   [9] top-level scope at /tmp/tmper7iagw4.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmper7iagw4.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmper7iagw4.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpu8e45ezf.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpu8e45ezf.jl:8\n   [9] top-level scope at /tmp/tmpu8e45ezf.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpu8e45ezf.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpu8e45ezf.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpu8e45ezf.jl:8\n\
    \   [9] top-level scope at /tmp/tmpu8e45ezf.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpu8e45ezf.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpu8e45ezf.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpu8e45ezf.jl:8\n\
    \   [9] top-level scope at /tmp/tmpu8e45ezf.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpu8e45ezf.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu8e45ezf.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpunr_xtvm.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpunr_xtvm.jl:8\n   [9] top-level scope at /tmp/tmpunr_xtvm.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpunr_xtvm.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpunr_xtvm.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpunr_xtvm.jl:8\n\
    \   [9] top-level scope at /tmp/tmpunr_xtvm.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpunr_xtvm.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpunr_xtvm.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpunr_xtvm.jl:8\n\
    \   [9] top-level scope at /tmp/tmpunr_xtvm.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpunr_xtvm.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpunr_xtvm.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpti9pq_2p.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpti9pq_2p.jl:8\n   [9] top-level scope at /tmp/tmpti9pq_2p.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpti9pq_2p.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpti9pq_2p.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpti9pq_2p.jl:8\n\
    \   [9] top-level scope at /tmp/tmpti9pq_2p.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpti9pq_2p.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpti9pq_2p.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpti9pq_2p.jl:8\n\
    \   [9] top-level scope at /tmp/tmpti9pq_2p.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpti9pq_2p.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpti9pq_2p.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpu82rbhr8.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmpu82rbhr8.jl:8\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpu82rbhr8.jl:8\n\
    \   [4] top-level scope at /tmp/tmpu82rbhr8.jl:16\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpu82rbhr8.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpu82rbhr8.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains not defined\n\
    \  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmpu82rbhr8.jl:8\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpu82rbhr8.jl:8\n\
    \   [4] top-level scope at /tmp/tmpu82rbhr8.jl:17\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpu82rbhr8.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpu82rbhr8.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  UndefVarError: contains not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"\
    {String})(::String) at /tmp/tmpu82rbhr8.jl:8\n   [2] filter(::var\"#3#4\"{String},\
    \ ::Array{String,1}) at ./array.jl:2375\n   [3] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpu82rbhr8.jl:8\n   [4] top-level scope at /tmp/tmpu82rbhr8.jl:18\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpu82rbhr8.jl:14\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu82rbhr8.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmppqg_39iw.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n   [1] error(::String) at ./error.jl:33\\\
    n   [2] in(::String, ::String) at ./strings/search.jl:533\\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\\n   [4] iterate at ./iterators.jl:430 [inlined]\\\
    n   [5] iterate at ./generator.jl:44 [inlined]\\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\\n   [7] collect at ./array.jl:663 [inlined]\\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmppqg_39iw.jl:8\\n   [9] top-level scope at /tmp/tmppqg_39iw.jl:16\\\
    n   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmppqg_39iw.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmppqg_39iw.jl:17\\n  Test threw exception\\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x, y) for string containment\\\
    n  Stacktrace:\\n   [1] error(::String) at ./error.jl:33\\n   [2] in(::String,\
    \ ::String) at ./strings/search.jl:533\\n   [3] (::var\"#3#4\"{String})(::String)\
    \ at ./none:0\\n   [4] iterate at ./iterators.jl:430 [inlined]\\n   [5] iterate\
    \ at ./generator.jl:44 [inlined]\\n   [6] grow_to! at ./array.jl:726 [inlined]\\\
    n   [7] collect at ./array.jl:663 [inlined]\\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmppqg_39iw.jl:8\\n   [9] top-level scope at /tmp/tmppqg_39iw.jl:17\\\
    n   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmppqg_39iw.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmppqg_39iw.jl:18\\n  Test threw exception\\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\\n  use occursin(x, y) for string containment\\n  Stacktrace:\\n   [1] error(::String)\
    \ at ./error.jl:33\\n   [2] in(::String, ::String) at ./strings/search.jl:533\\\
    n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\\n   [5] iterate at ./generator.jl:44 [inlined]\\n   [6] grow_to!\
    \ at ./array.jl:726 [inlined]\\n   [7] collect at ./array.jl:663 [inlined]\\n\
    \   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmppqg_39iw.jl:8\\\
    n   [9] top-level scope at /tmp/tmppqg_39iw.jl:18\\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmppqg_39iw.jl:14\\n  \\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpa7nrkipi.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmpa7nrkipi.jl:8\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpa7nrkipi.jl:8\n\
    \   [4] top-level scope at /tmp/tmpa7nrkipi.jl:16\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpa7nrkipi.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpa7nrkipi.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains not defined\n\
    \  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmpa7nrkipi.jl:8\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpa7nrkipi.jl:8\n\
    \   [4] top-level scope at /tmp/tmpa7nrkipi.jl:17\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpa7nrkipi.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpa7nrkipi.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  UndefVarError: contains not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"\
    {String})(::String) at /tmp/tmpa7nrkipi.jl:8\n   [2] filter(::var\"#3#4\"{String},\
    \ ::Array{String,1}) at ./array.jl:2375\n   [3] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpa7nrkipi.jl:8\n   [4] top-level scope at /tmp/tmpa7nrkipi.jl:18\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpa7nrkipi.jl:14\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa7nrkipi.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpnosw4a_n.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpnosw4a_n.jl:8\n   [9] top-level scope at /tmp/tmpnosw4a_n.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpnosw4a_n.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpnosw4a_n.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpnosw4a_n.jl:8\n\
    \   [9] top-level scope at /tmp/tmpnosw4a_n.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpnosw4a_n.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpnosw4a_n.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpnosw4a_n.jl:8\n\
    \   [9] top-level scope at /tmp/tmpnosw4a_n.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpnosw4a_n.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnosw4a_n.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = []\n    for s in strings\n        if contains(s, substring)\n\
    \            push!(filtered, s)\n        end\n    end\n    return filtered\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpllt9q75c.jl:22\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains\
    \ not defined\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1}, ::String)\
    \ at /tmp/tmpllt9q75c.jl:10\n   [2] top-level scope at /tmp/tmpllt9q75c.jl:22\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpllt9q75c.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpllt9q75c.jl:23\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains not defined\n\
    \  Stacktrace:\n   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpllt9q75c.jl:10\n\
    \   [2] top-level scope at /tmp/tmpllt9q75c.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpllt9q75c.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpllt9q75c.jl:24\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  UndefVarError: contains not defined\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpllt9q75c.jl:10\n   [2] top-level scope at /tmp/tmpllt9q75c.jl:24\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpllt9q75c.jl:20\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpllt9q75c.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqvg8881r.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpqvg8881r.jl:8\n   [9] top-level scope at /tmp/tmpqvg8881r.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpqvg8881r.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpqvg8881r.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpqvg8881r.jl:8\n\
    \   [9] top-level scope at /tmp/tmpqvg8881r.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpqvg8881r.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpqvg8881r.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpqvg8881r.jl:8\n\
    \   [9] top-level scope at /tmp/tmpqvg8881r.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpqvg8881r.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqvg8881r.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4itlog6s.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp4itlog6s.jl:8\n   [9] top-level scope at /tmp/tmp4itlog6s.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp4itlog6s.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp4itlog6s.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp4itlog6s.jl:8\n\
    \   [9] top-level scope at /tmp/tmp4itlog6s.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp4itlog6s.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp4itlog6s.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp4itlog6s.jl:8\n\
    \   [9] top-level scope at /tmp/tmp4itlog6s.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp4itlog6s.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4itlog6s.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpnyfhiq_j.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpnyfhiq_j.jl:8\n   [9] top-level scope at /tmp/tmpnyfhiq_j.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpnyfhiq_j.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpnyfhiq_j.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpnyfhiq_j.jl:8\n\
    \   [9] top-level scope at /tmp/tmpnyfhiq_j.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpnyfhiq_j.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpnyfhiq_j.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpnyfhiq_j.jl:8\n\
    \   [9] top-level scope at /tmp/tmpnyfhiq_j.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpnyfhiq_j.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnyfhiq_j.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4yt4dxpi.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp4yt4dxpi.jl:8\n   [9] top-level scope at /tmp/tmp4yt4dxpi.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp4yt4dxpi.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp4yt4dxpi.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp4yt4dxpi.jl:8\n\
    \   [9] top-level scope at /tmp/tmp4yt4dxpi.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp4yt4dxpi.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp4yt4dxpi.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp4yt4dxpi.jl:8\n\
    \   [9] top-level scope at /tmp/tmp4yt4dxpi.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp4yt4dxpi.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4yt4dxpi.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpb_xd25e9.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpb_xd25e9.jl:8\n   [9] top-level scope at /tmp/tmpb_xd25e9.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpb_xd25e9.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpb_xd25e9.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpb_xd25e9.jl:8\n\
    \   [9] top-level scope at /tmp/tmpb_xd25e9.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpb_xd25e9.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpb_xd25e9.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpb_xd25e9.jl:8\n\
    \   [9] top-level scope at /tmp/tmpb_xd25e9.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpb_xd25e9.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb_xd25e9.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmfkrgpwa.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmpmfkrgpwa.jl:8\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpmfkrgpwa.jl:8\n\
    \   [4] top-level scope at /tmp/tmpmfkrgpwa.jl:16\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpmfkrgpwa.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpmfkrgpwa.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains not defined\n\
    \  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmpmfkrgpwa.jl:8\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpmfkrgpwa.jl:8\n\
    \   [4] top-level scope at /tmp/tmpmfkrgpwa.jl:17\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpmfkrgpwa.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpmfkrgpwa.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  UndefVarError: contains not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"\
    {String})(::String) at /tmp/tmpmfkrgpwa.jl:8\n   [2] filter(::var\"#3#4\"{String},\
    \ ::Array{String,1}) at ./array.jl:2375\n   [3] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpmfkrgpwa.jl:8\n   [4] top-level scope at /tmp/tmpmfkrgpwa.jl:18\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpmfkrgpwa.jl:14\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmfkrgpwa.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp12qpe7qj.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp12qpe7qj.jl:8\n   [9] top-level scope at /tmp/tmp12qpe7qj.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp12qpe7qj.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp12qpe7qj.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp12qpe7qj.jl:8\n\
    \   [9] top-level scope at /tmp/tmp12qpe7qj.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp12qpe7qj.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp12qpe7qj.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp12qpe7qj.jl:8\n\
    \   [9] top-level scope at /tmp/tmp12qpe7qj.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp12qpe7qj.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp12qpe7qj.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzjwf9pcx.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpzjwf9pcx.jl:8\n   [9] top-level scope at /tmp/tmpzjwf9pcx.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpzjwf9pcx.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpzjwf9pcx.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpzjwf9pcx.jl:8\n\
    \   [9] top-level scope at /tmp/tmpzjwf9pcx.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpzjwf9pcx.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpzjwf9pcx.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpzjwf9pcx.jl:8\n\
    \   [9] top-level scope at /tmp/tmpzjwf9pcx.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpzjwf9pcx.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzjwf9pcx.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpg610dell.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpg610dell.jl:8\n   [9] top-level scope at /tmp/tmpg610dell.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpg610dell.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpg610dell.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpg610dell.jl:8\n\
    \   [9] top-level scope at /tmp/tmpg610dell.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpg610dell.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpg610dell.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpg610dell.jl:8\n\
    \   [9] top-level scope at /tmp/tmpg610dell.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpg610dell.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg610dell.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = []\n    for s in strings\n        if contains(s, substring)\n\
    \            push!(filtered, s)\n        end\n    end\n    return filtered\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp02t_ut7v.jl:22\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains\
    \ not defined\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1}, ::String)\
    \ at /tmp/tmp02t_ut7v.jl:10\n   [2] top-level scope at /tmp/tmp02t_ut7v.jl:22\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp02t_ut7v.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmp02t_ut7v.jl:23\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains not defined\n\
    \  Stacktrace:\n   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp02t_ut7v.jl:10\n\
    \   [2] top-level scope at /tmp/tmp02t_ut7v.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp02t_ut7v.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmp02t_ut7v.jl:24\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  UndefVarError: contains not defined\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp02t_ut7v.jl:10\n   [2] top-level scope at /tmp/tmp02t_ut7v.jl:24\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp02t_ut7v.jl:20\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp02t_ut7v.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8zbz71h5.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp8zbz71h5.jl:8\n   [9] top-level scope at /tmp/tmp8zbz71h5.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp8zbz71h5.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp8zbz71h5.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp8zbz71h5.jl:8\n\
    \   [9] top-level scope at /tmp/tmp8zbz71h5.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp8zbz71h5.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp8zbz71h5.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp8zbz71h5.jl:8\n\
    \   [9] top-level scope at /tmp/tmp8zbz71h5.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp8zbz71h5.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8zbz71h5.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpbp2eza_g.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n   [1] error(::String) at ./error.jl:33\\\
    n   [2] in(::String, ::String) at ./strings/search.jl:533\\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\\n   [4] iterate at ./iterators.jl:430 [inlined]\\\
    n   [5] iterate at ./generator.jl:44 [inlined]\\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\\n   [7] collect at ./array.jl:663 [inlined]\\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpbp2eza_g.jl:8\\n   [9] top-level scope at /tmp/tmpbp2eza_g.jl:16\\\
    n   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmpbp2eza_g.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpbp2eza_g.jl:17\\n  Test threw exception\\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x, y) for string containment\\\
    n  Stacktrace:\\n   [1] error(::String) at ./error.jl:33\\n   [2] in(::String,\
    \ ::String) at ./strings/search.jl:533\\n   [3] (::var\"#3#4\"{String})(::String)\
    \ at ./none:0\\n   [4] iterate at ./iterators.jl:430 [inlined]\\n   [5] iterate\
    \ at ./generator.jl:44 [inlined]\\n   [6] grow_to! at ./array.jl:726 [inlined]\\\
    n   [7] collect at ./array.jl:663 [inlined]\\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpbp2eza_g.jl:8\\n   [9] top-level scope at /tmp/tmpbp2eza_g.jl:17\\\
    n   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmpbp2eza_g.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpbp2eza_g.jl:18\\n  Test threw exception\\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\\n  use occursin(x, y) for string containment\\n  Stacktrace:\\n   [1] error(::String)\
    \ at ./error.jl:33\\n   [2] in(::String, ::String) at ./strings/search.jl:533\\\
    n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\\n   [5] iterate at ./generator.jl:44 [inlined]\\n   [6] grow_to!\
    \ at ./array.jl:726 [inlined]\\n   [7] collect at ./array.jl:663 [inlined]\\n\
    \   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpbp2eza_g.jl:8\\\
    n   [9] top-level scope at /tmp/tmpbp2eza_g.jl:18\\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmpbp2eza_g.jl:14\\n  \\nTest Summary: | Pass\
    \  Error  Total\\ntest set      |    1      3      4\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpik4q599i.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpik4q599i.jl:8\n   [9] top-level scope at /tmp/tmpik4q599i.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpik4q599i.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpik4q599i.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpik4q599i.jl:8\n\
    \   [9] top-level scope at /tmp/tmpik4q599i.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpik4q599i.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpik4q599i.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpik4q599i.jl:8\n\
    \   [9] top-level scope at /tmp/tmpik4q599i.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpik4q599i.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpik4q599i.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2gmw4uca.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp2gmw4uca.jl:8\n   [9] top-level scope at /tmp/tmp2gmw4uca.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp2gmw4uca.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp2gmw4uca.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp2gmw4uca.jl:8\n\
    \   [9] top-level scope at /tmp/tmp2gmw4uca.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp2gmw4uca.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp2gmw4uca.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp2gmw4uca.jl:8\n\
    \   [9] top-level scope at /tmp/tmp2gmw4uca.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp2gmw4uca.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2gmw4uca.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxv18f4d5.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpxv18f4d5.jl:8\n   [9] top-level scope at /tmp/tmpxv18f4d5.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpxv18f4d5.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpxv18f4d5.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpxv18f4d5.jl:8\n\
    \   [9] top-level scope at /tmp/tmpxv18f4d5.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpxv18f4d5.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpxv18f4d5.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpxv18f4d5.jl:8\n\
    \   [9] top-level scope at /tmp/tmpxv18f4d5.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpxv18f4d5.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxv18f4d5.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjmojzur_.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmpjmojzur_.jl:8\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpjmojzur_.jl:8\n\
    \   [4] top-level scope at /tmp/tmpjmojzur_.jl:16\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpjmojzur_.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpjmojzur_.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains not defined\n\
    \  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmpjmojzur_.jl:8\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpjmojzur_.jl:8\n\
    \   [4] top-level scope at /tmp/tmpjmojzur_.jl:17\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpjmojzur_.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpjmojzur_.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  UndefVarError: contains not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"\
    {String})(::String) at /tmp/tmpjmojzur_.jl:8\n   [2] filter(::var\"#3#4\"{String},\
    \ ::Array{String,1}) at ./array.jl:2375\n   [3] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpjmojzur_.jl:8\n   [4] top-level scope at /tmp/tmpjmojzur_.jl:18\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpjmojzur_.jl:14\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjmojzur_.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpl6eq6pdp.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpl6eq6pdp.jl:8\n   [9] top-level scope at /tmp/tmpl6eq6pdp.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpl6eq6pdp.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpl6eq6pdp.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpl6eq6pdp.jl:8\n\
    \   [9] top-level scope at /tmp/tmpl6eq6pdp.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpl6eq6pdp.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpl6eq6pdp.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpl6eq6pdp.jl:8\n\
    \   [9] top-level scope at /tmp/tmpl6eq6pdp.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpl6eq6pdp.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl6eq6pdp.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5wu9y7di.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp5wu9y7di.jl:8\n   [9] top-level scope at /tmp/tmp5wu9y7di.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp5wu9y7di.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp5wu9y7di.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp5wu9y7di.jl:8\n\
    \   [9] top-level scope at /tmp/tmp5wu9y7di.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp5wu9y7di.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp5wu9y7di.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp5wu9y7di.jl:8\n\
    \   [9] top-level scope at /tmp/tmp5wu9y7di.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp5wu9y7di.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5wu9y7di.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1ds8d2vz.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp1ds8d2vz.jl:8\n   [9] top-level scope at /tmp/tmp1ds8d2vz.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp1ds8d2vz.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp1ds8d2vz.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp1ds8d2vz.jl:8\n\
    \   [9] top-level scope at /tmp/tmp1ds8d2vz.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp1ds8d2vz.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp1ds8d2vz.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp1ds8d2vz.jl:8\n\
    \   [9] top-level scope at /tmp/tmp1ds8d2vz.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp1ds8d2vz.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1ds8d2vz.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6k8ovdb9.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp6k8ovdb9.jl:8\n   [9] top-level scope at /tmp/tmp6k8ovdb9.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp6k8ovdb9.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp6k8ovdb9.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp6k8ovdb9.jl:8\n\
    \   [9] top-level scope at /tmp/tmp6k8ovdb9.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp6k8ovdb9.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp6k8ovdb9.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp6k8ovdb9.jl:8\n\
    \   [9] top-level scope at /tmp/tmp6k8ovdb9.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp6k8ovdb9.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6k8ovdb9.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpypva8ny4.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmpypva8ny4.jl:8\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpypva8ny4.jl:8\n\
    \   [4] top-level scope at /tmp/tmpypva8ny4.jl:16\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpypva8ny4.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpypva8ny4.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains not defined\n\
    \  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmpypva8ny4.jl:8\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpypva8ny4.jl:8\n\
    \   [4] top-level scope at /tmp/tmpypva8ny4.jl:17\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpypva8ny4.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpypva8ny4.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  UndefVarError: contains not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"\
    {String})(::String) at /tmp/tmpypva8ny4.jl:8\n   [2] filter(::var\"#3#4\"{String},\
    \ ::Array{String,1}) at ./array.jl:2375\n   [3] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpypva8ny4.jl:8\n   [4] top-level scope at /tmp/tmpypva8ny4.jl:18\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpypva8ny4.jl:14\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpypva8ny4.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsjj_9w4o.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpsjj_9w4o.jl:8\n   [9] top-level scope at /tmp/tmpsjj_9w4o.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpsjj_9w4o.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpsjj_9w4o.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpsjj_9w4o.jl:8\n\
    \   [9] top-level scope at /tmp/tmpsjj_9w4o.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpsjj_9w4o.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpsjj_9w4o.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpsjj_9w4o.jl:8\n\
    \   [9] top-level scope at /tmp/tmpsjj_9w4o.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpsjj_9w4o.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsjj_9w4o.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplyhv0s0u.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmplyhv0s0u.jl:8\n   [9] top-level scope at /tmp/tmplyhv0s0u.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmplyhv0s0u.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmplyhv0s0u.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmplyhv0s0u.jl:8\n\
    \   [9] top-level scope at /tmp/tmplyhv0s0u.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmplyhv0s0u.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmplyhv0s0u.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmplyhv0s0u.jl:8\n\
    \   [9] top-level scope at /tmp/tmplyhv0s0u.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmplyhv0s0u.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplyhv0s0u.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgqyjyj_n.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmpgqyjyj_n.jl:8\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpgqyjyj_n.jl:8\n\
    \   [4] top-level scope at /tmp/tmpgqyjyj_n.jl:16\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpgqyjyj_n.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpgqyjyj_n.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains not defined\n\
    \  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmpgqyjyj_n.jl:8\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpgqyjyj_n.jl:8\n\
    \   [4] top-level scope at /tmp/tmpgqyjyj_n.jl:17\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpgqyjyj_n.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpgqyjyj_n.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  UndefVarError: contains not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"\
    {String})(::String) at /tmp/tmpgqyjyj_n.jl:8\n   [2] filter(::var\"#3#4\"{String},\
    \ ::Array{String,1}) at ./array.jl:2375\n   [3] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpgqyjyj_n.jl:8\n   [4] top-level scope at /tmp/tmpgqyjyj_n.jl:18\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpgqyjyj_n.jl:14\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgqyjyj_n.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpm6nnhrd9.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmpm6nnhrd9.jl:8\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpm6nnhrd9.jl:8\n\
    \   [4] top-level scope at /tmp/tmpm6nnhrd9.jl:16\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpm6nnhrd9.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpm6nnhrd9.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains not defined\n\
    \  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmpm6nnhrd9.jl:8\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpm6nnhrd9.jl:8\n\
    \   [4] top-level scope at /tmp/tmpm6nnhrd9.jl:17\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpm6nnhrd9.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpm6nnhrd9.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  UndefVarError: contains not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"\
    {String})(::String) at /tmp/tmpm6nnhrd9.jl:8\n   [2] filter(::var\"#3#4\"{String},\
    \ ::Array{String,1}) at ./array.jl:2375\n   [3] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpm6nnhrd9.jl:8\n   [4] top-level scope at /tmp/tmpm6nnhrd9.jl:18\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpm6nnhrd9.jl:14\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm6nnhrd9.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdmrtss3n.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpdmrtss3n.jl:8\n   [9] top-level scope at /tmp/tmpdmrtss3n.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpdmrtss3n.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpdmrtss3n.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpdmrtss3n.jl:8\n\
    \   [9] top-level scope at /tmp/tmpdmrtss3n.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpdmrtss3n.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpdmrtss3n.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpdmrtss3n.jl:8\n\
    \   [9] top-level scope at /tmp/tmpdmrtss3n.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpdmrtss3n.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdmrtss3n.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpth7ptsus.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpth7ptsus.jl:8\n   [9] top-level scope at /tmp/tmpth7ptsus.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpth7ptsus.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpth7ptsus.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpth7ptsus.jl:8\n\
    \   [9] top-level scope at /tmp/tmpth7ptsus.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpth7ptsus.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpth7ptsus.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpth7ptsus.jl:8\n\
    \   [9] top-level scope at /tmp/tmpth7ptsus.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpth7ptsus.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpth7ptsus.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpz9r1c1ty.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpz9r1c1ty.jl:8\n   [9] top-level scope at /tmp/tmpz9r1c1ty.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpz9r1c1ty.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpz9r1c1ty.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpz9r1c1ty.jl:8\n\
    \   [9] top-level scope at /tmp/tmpz9r1c1ty.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpz9r1c1ty.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpz9r1c1ty.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpz9r1c1ty.jl:8\n\
    \   [9] top-level scope at /tmp/tmpz9r1c1ty.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpz9r1c1ty.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz9r1c1ty.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = String[]\n    for string in strings\n        if contains(string,\
    \ substring)\n            push!(filtered, string)\n        end\n    end\n    return\
    \ filtered\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpex2e846_.jl:22\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains\
    \ not defined\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1}, ::String)\
    \ at /tmp/tmpex2e846_.jl:10\n   [2] top-level scope at /tmp/tmpex2e846_.jl:22\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpex2e846_.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpex2e846_.jl:23\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains not defined\n\
    \  Stacktrace:\n   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpex2e846_.jl:10\n\
    \   [2] top-level scope at /tmp/tmpex2e846_.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpex2e846_.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpex2e846_.jl:24\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  UndefVarError: contains not defined\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpex2e846_.jl:10\n   [2] top-level scope at /tmp/tmpex2e846_.jl:24\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpex2e846_.jl:20\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpex2e846_.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcv5rt5kp.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpcv5rt5kp.jl:8\n   [9] top-level scope at /tmp/tmpcv5rt5kp.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpcv5rt5kp.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpcv5rt5kp.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpcv5rt5kp.jl:8\n\
    \   [9] top-level scope at /tmp/tmpcv5rt5kp.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpcv5rt5kp.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpcv5rt5kp.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpcv5rt5kp.jl:8\n\
    \   [9] top-level scope at /tmp/tmpcv5rt5kp.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpcv5rt5kp.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcv5rt5kp.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1wfv_8jy.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp1wfv_8jy.jl:8\n   [9] top-level scope at /tmp/tmp1wfv_8jy.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp1wfv_8jy.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp1wfv_8jy.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp1wfv_8jy.jl:8\n\
    \   [9] top-level scope at /tmp/tmp1wfv_8jy.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp1wfv_8jy.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp1wfv_8jy.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp1wfv_8jy.jl:8\n\
    \   [9] top-level scope at /tmp/tmp1wfv_8jy.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp1wfv_8jy.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1wfv_8jy.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwhyuhclc.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpwhyuhclc.jl:8\n   [9] top-level scope at /tmp/tmpwhyuhclc.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpwhyuhclc.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpwhyuhclc.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpwhyuhclc.jl:8\n\
    \   [9] top-level scope at /tmp/tmpwhyuhclc.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpwhyuhclc.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpwhyuhclc.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpwhyuhclc.jl:8\n\
    \   [9] top-level scope at /tmp/tmpwhyuhclc.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpwhyuhclc.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwhyuhclc.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpji_g7wd0.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpji_g7wd0.jl:8\n   [9] top-level scope at /tmp/tmpji_g7wd0.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpji_g7wd0.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpji_g7wd0.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpji_g7wd0.jl:8\n\
    \   [9] top-level scope at /tmp/tmpji_g7wd0.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpji_g7wd0.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpji_g7wd0.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpji_g7wd0.jl:8\n\
    \   [9] top-level scope at /tmp/tmpji_g7wd0.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpji_g7wd0.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpji_g7wd0.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5r3gp2tq.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp5r3gp2tq.jl:8\n   [9] top-level scope at /tmp/tmp5r3gp2tq.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp5r3gp2tq.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp5r3gp2tq.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp5r3gp2tq.jl:8\n\
    \   [9] top-level scope at /tmp/tmp5r3gp2tq.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp5r3gp2tq.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp5r3gp2tq.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp5r3gp2tq.jl:8\n\
    \   [9] top-level scope at /tmp/tmp5r3gp2tq.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp5r3gp2tq.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5r3gp2tq.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpsoxmuhn1.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n   [1] error(::String) at ./error.jl:33\\\
    n   [2] in(::String, ::String) at ./strings/search.jl:533\\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\\n   [4] iterate at ./iterators.jl:430 [inlined]\\\
    n   [5] iterate at ./generator.jl:44 [inlined]\\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\\n   [7] collect at ./array.jl:663 [inlined]\\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpsoxmuhn1.jl:8\\n   [9] top-level scope at /tmp/tmpsoxmuhn1.jl:16\\\
    n   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmpsoxmuhn1.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpsoxmuhn1.jl:17\\n  Test threw exception\\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x, y) for string containment\\\
    n  Stacktrace:\\n   [1] error(::String) at ./error.jl:33\\n   [2] in(::String,\
    \ ::String) at ./strings/search.jl:533\\n   [3] (::var\"#3#4\"{String})(::String)\
    \ at ./none:0\\n   [4] iterate at ./iterators.jl:430 [inlined]\\n   [5] iterate\
    \ at ./generator.jl:44 [inlined]\\n   [6] grow_to! at ./array.jl:726 [inlined]\\\
    n   [7] collect at ./array.jl:663 [inlined]\\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpsoxmuhn1.jl:8\\n   [9] top-level scope at /tmp/tmpsoxmuhn1.jl:17\\\
    n   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmpsoxmuhn1.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpsoxmuhn1.jl:18\\n  Test threw exception\\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\\n  use occursin(x, y) for string containment\\n  Stacktrace:\\n   [1] error(::String)\
    \ at ./error.jl:33\\n   [2] in(::String, ::String) at ./strings/search.jl:533\\\
    n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\\n   [5] iterate at ./generator.jl:44 [inlined]\\n   [6] grow_to!\
    \ at ./array.jl:726 [inlined]\\n   [7] collect at ./array.jl:663 [inlined]\\n\
    \   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpsoxmuhn1.jl:8\\\
    n   [9] top-level scope at /tmp/tmpsoxmuhn1.jl:18\\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmpsoxmuhn1.jl:14\\n  \\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpninbjhd3.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpninbjhd3.jl:8\n   [9] top-level scope at /tmp/tmpninbjhd3.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpninbjhd3.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpninbjhd3.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpninbjhd3.jl:8\n\
    \   [9] top-level scope at /tmp/tmpninbjhd3.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpninbjhd3.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpninbjhd3.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpninbjhd3.jl:8\n\
    \   [9] top-level scope at /tmp/tmpninbjhd3.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpninbjhd3.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpninbjhd3.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmprq0cwkmn.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmprq0cwkmn.jl:8\n   [9] top-level scope at /tmp/tmprq0cwkmn.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmprq0cwkmn.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmprq0cwkmn.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmprq0cwkmn.jl:8\n\
    \   [9] top-level scope at /tmp/tmprq0cwkmn.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmprq0cwkmn.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmprq0cwkmn.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmprq0cwkmn.jl:8\n\
    \   [9] top-level scope at /tmp/tmprq0cwkmn.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmprq0cwkmn.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprq0cwkmn.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpg241pzpb.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpg241pzpb.jl:8\n   [9] top-level scope at /tmp/tmpg241pzpb.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpg241pzpb.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpg241pzpb.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpg241pzpb.jl:8\n\
    \   [9] top-level scope at /tmp/tmpg241pzpb.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpg241pzpb.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpg241pzpb.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpg241pzpb.jl:8\n\
    \   [9] top-level scope at /tmp/tmpg241pzpb.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpg241pzpb.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg241pzpb.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2hac4euv.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp2hac4euv.jl:8\n   [9] top-level scope at /tmp/tmp2hac4euv.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp2hac4euv.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp2hac4euv.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp2hac4euv.jl:8\n\
    \   [9] top-level scope at /tmp/tmp2hac4euv.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp2hac4euv.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp2hac4euv.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp2hac4euv.jl:8\n\
    \   [9] top-level scope at /tmp/tmp2hac4euv.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp2hac4euv.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2hac4euv.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmporfrwboc.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n   [1] error(::String) at ./error.jl:33\\\
    n   [2] in(::String, ::String) at ./strings/search.jl:533\\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\\n   [4] iterate at ./iterators.jl:430 [inlined]\\\
    n   [5] iterate at ./generator.jl:44 [inlined]\\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\\n   [7] collect at ./array.jl:663 [inlined]\\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmporfrwboc.jl:8\\n   [9] top-level scope at /tmp/tmporfrwboc.jl:16\\\
    n   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmporfrwboc.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmporfrwboc.jl:17\\n  Test threw exception\\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x, y) for string containment\\\
    n  Stacktrace:\\n   [1] error(::String) at ./error.jl:33\\n   [2] in(::String,\
    \ ::String) at ./strings/search.jl:533\\n   [3] (::var\"#3#4\"{String})(::String)\
    \ at ./none:0\\n   [4] iterate at ./iterators.jl:430 [inlined]\\n   [5] iterate\
    \ at ./generator.jl:44 [inlined]\\n   [6] grow_to! at ./array.jl:726 [inlined]\\\
    n   [7] collect at ./array.jl:663 [inlined]\\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmporfrwboc.jl:8\\n   [9] top-level scope at /tmp/tmporfrwboc.jl:17\\\
    n   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmporfrwboc.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmporfrwboc.jl:18\\n  Test threw exception\\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\\n  use occursin(x, y) for string containment\\n  Stacktrace:\\n   [1] error(::String)\
    \ at ./error.jl:33\\n   [2] in(::String, ::String) at ./strings/search.jl:533\\\
    n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\\n   [5] iterate at ./generator.jl:44 [inlined]\\n   [6] grow_to!\
    \ at ./array.jl:726 [inlined]\\n   [7] collect at ./array.jl:663 [inlined]\\n\
    \   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmporfrwboc.jl:8\\\
    n   [9] top-level scope at /tmp/tmporfrwboc.jl:18\\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmporfrwboc.jl:14\\n  \\nTest Summary: | Pass\
    \  Error  Total\\ntest set      |    1      3      4\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp89c4rxg5.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp89c4rxg5.jl:8\n   [9] top-level scope at /tmp/tmp89c4rxg5.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp89c4rxg5.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp89c4rxg5.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp89c4rxg5.jl:8\n\
    \   [9] top-level scope at /tmp/tmp89c4rxg5.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp89c4rxg5.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp89c4rxg5.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp89c4rxg5.jl:8\n\
    \   [9] top-level scope at /tmp/tmp89c4rxg5.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp89c4rxg5.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp89c4rxg5.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpu7a90yzo.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmpu7a90yzo.jl:8\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpu7a90yzo.jl:8\n\
    \   [4] top-level scope at /tmp/tmpu7a90yzo.jl:16\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpu7a90yzo.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpu7a90yzo.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains not defined\n\
    \  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmpu7a90yzo.jl:8\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpu7a90yzo.jl:8\n\
    \   [4] top-level scope at /tmp/tmpu7a90yzo.jl:17\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpu7a90yzo.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpu7a90yzo.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  UndefVarError: contains not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"\
    {String})(::String) at /tmp/tmpu7a90yzo.jl:8\n   [2] filter(::var\"#3#4\"{String},\
    \ ::Array{String,1}) at ./array.jl:2375\n   [3] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpu7a90yzo.jl:8\n   [4] top-level scope at /tmp/tmpu7a90yzo.jl:18\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpu7a90yzo.jl:14\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu7a90yzo.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpwtc3c_9x.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n   [1] error(::String) at ./error.jl:33\\\
    n   [2] in(::String, ::String) at ./strings/search.jl:533\\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\\n   [4] iterate at ./iterators.jl:430 [inlined]\\\
    n   [5] iterate at ./generator.jl:44 [inlined]\\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\\n   [7] collect at ./array.jl:663 [inlined]\\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpwtc3c_9x.jl:8\\n   [9] top-level scope at /tmp/tmpwtc3c_9x.jl:16\\\
    n   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmpwtc3c_9x.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpwtc3c_9x.jl:17\\n  Test threw exception\\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x, y) for string containment\\\
    n  Stacktrace:\\n   [1] error(::String) at ./error.jl:33\\n   [2] in(::String,\
    \ ::String) at ./strings/search.jl:533\\n   [3] (::var\"#3#4\"{String})(::String)\
    \ at ./none:0\\n   [4] iterate at ./iterators.jl:430 [inlined]\\n   [5] iterate\
    \ at ./generator.jl:44 [inlined]\\n   [6] grow_to! at ./array.jl:726 [inlined]\\\
    n   [7] collect at ./array.jl:663 [inlined]\\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpwtc3c_9x.jl:8\\n   [9] top-level scope at /tmp/tmpwtc3c_9x.jl:17\\\
    n   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmpwtc3c_9x.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpwtc3c_9x.jl:18\\n  Test threw exception\\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\\n  use occursin(x, y) for string containment\\n  Stacktrace:\\n   [1] error(::String)\
    \ at ./error.jl:33\\n   [2] in(::String, ::String) at ./strings/search.jl:533\\\
    n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\\n   [5] iterate at ./generator.jl:44 [inlined]\\n   [6] grow_to!\
    \ at ./array.jl:726 [inlined]\\n   [7] collect at ./array.jl:663 [inlined]\\n\
    \   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpwtc3c_9x.jl:8\\\
    n   [9] top-level scope at /tmp/tmpwtc3c_9x.jl:18\\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmpwtc3c_9x.jl:14\\n  \\nTest Summary: | Pass\
    \  Error  '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpbrye3d3c.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n   [1] error(::String) at ./error.jl:33\\\
    n   [2] in(::String, ::String) at ./strings/search.jl:533\\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\\n   [4] iterate at ./iterators.jl:430 [inlined]\\\
    n   [5] iterate at ./generator.jl:44 [inlined]\\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\\n   [7] collect at ./array.jl:663 [inlined]\\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpbrye3d3c.jl:8\\n   [9] top-level scope at /tmp/tmpbrye3d3c.jl:16\\\
    n   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmpbrye3d3c.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpbrye3d3c.jl:17\\n  Test threw exception\\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x, y) for string containment\\\
    n  Stacktrace:\\n   [1] error(::String) at ./error.jl:33\\n   [2] in(::String,\
    \ ::String) at ./strings/search.jl:533\\n   [3] (::var\"#3#4\"{String})(::String)\
    \ at ./none:0\\n   [4] iterate at ./iterators.jl:430 [inlined]\\n   [5] iterate\
    \ at ./generator.jl:44 [inlined]\\n   [6] grow_to! at ./array.jl:726 [inlined]\\\
    n   [7] collect at ./array.jl:663 [inlined]\\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpbrye3d3c.jl:8\\n   [9] top-level scope at /tmp/tmpbrye3d3c.jl:17\\\
    n   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmpbrye3d3c.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpbrye3d3c.jl:18\\n  Test threw exception\\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\\n  use occursin(x, y) for string containment\\n  Stacktrace:\\n   [1] error(::String)\
    \ at ./error.jl:33\\n   [2] in(::String, ::String) at ./strings/search.jl:533\\\
    n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\\n   [5] iterate at ./generator.jl:44 [inlined]\\n   [6] grow_to!\
    \ at ./array.jl:726 [inlined]\\n   [7] collect at ./array.jl:663 [inlined]\\n\
    \   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpbrye3d3c.jl:8\\\
    n   [9] top-level scope at /tmp/tmpbrye3d3c.jl:18\\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmpbrye3d3c.jl:14\\n  \\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpraiiymb3.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpraiiymb3.jl:8\n   [9] top-level scope at /tmp/tmpraiiymb3.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpraiiymb3.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpraiiymb3.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpraiiymb3.jl:8\n\
    \   [9] top-level scope at /tmp/tmpraiiymb3.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpraiiymb3.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpraiiymb3.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpraiiymb3.jl:8\n\
    \   [9] top-level scope at /tmp/tmpraiiymb3.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpraiiymb3.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpraiiymb3.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0lm8xc27.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp0lm8xc27.jl:8\n   [9] top-level scope at /tmp/tmp0lm8xc27.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp0lm8xc27.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp0lm8xc27.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp0lm8xc27.jl:8\n\
    \   [9] top-level scope at /tmp/tmp0lm8xc27.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp0lm8xc27.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp0lm8xc27.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp0lm8xc27.jl:8\n\
    \   [9] top-level scope at /tmp/tmp0lm8xc27.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp0lm8xc27.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0lm8xc27.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp0_gsb4d3.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n   [1] error(::String) at ./error.jl:33\\\
    n   [2] in(::String, ::String) at ./strings/search.jl:533\\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\\n   [4] iterate at ./iterators.jl:430 [inlined]\\\
    n   [5] iterate at ./generator.jl:44 [inlined]\\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\\n   [7] collect at ./array.jl:663 [inlined]\\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp0_gsb4d3.jl:8\\n   [9] top-level scope at /tmp/tmp0_gsb4d3.jl:16\\\
    n   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmp0_gsb4d3.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp0_gsb4d3.jl:17\\n  Test threw exception\\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x, y) for string containment\\\
    n  Stacktrace:\\n   [1] error(::String) at ./error.jl:33\\n   [2] in(::String,\
    \ ::String) at ./strings/search.jl:533\\n   [3] (::var\"#3#4\"{String})(::String)\
    \ at ./none:0\\n   [4] iterate at ./iterators.jl:430 [inlined]\\n   [5] iterate\
    \ at ./generator.jl:44 [inlined]\\n   [6] grow_to! at ./array.jl:726 [inlined]\\\
    n   [7] collect at ./array.jl:663 [inlined]\\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp0_gsb4d3.jl:8\\n   [9] top-level scope at /tmp/tmp0_gsb4d3.jl:17\\\
    n   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmp0_gsb4d3.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp0_gsb4d3.jl:18\\n  Test threw exception\\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\\n  use occursin(x, y) for string containment\\n  Stacktrace:\\n   [1] error(::String)\
    \ at ./error.jl:33\\n   [2] in(::String, ::String) at ./strings/search.jl:533\\\
    n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\\n   [5] iterate at ./generator.jl:44 [inlined]\\n   [6] grow_to!\
    \ at ./array.jl:726 [inlined]\\n   [7] collect at ./array.jl:663 [inlined]\\n\
    \   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp0_gsb4d3.jl:8\\\
    n   [9] top-level scope at /tmp/tmp0_gsb4d3.jl:18\\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmp0_gsb4d3.jl:14\\n  \\nTest Summary: | Pass\
    \  Error  Total\\ntest set      |    1      3      4\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpncebg7t_.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpncebg7t_.jl:8\n   [9] top-level scope at /tmp/tmpncebg7t_.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpncebg7t_.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpncebg7t_.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpncebg7t_.jl:8\n\
    \   [9] top-level scope at /tmp/tmpncebg7t_.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpncebg7t_.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpncebg7t_.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpncebg7t_.jl:8\n\
    \   [9] top-level scope at /tmp/tmpncebg7t_.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpncebg7t_.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpncebg7t_.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmph_mlab1b.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmph_mlab1b.jl:8\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmph_mlab1b.jl:8\n\
    \   [4] top-level scope at /tmp/tmph_mlab1b.jl:16\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmph_mlab1b.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmph_mlab1b.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains not defined\n\
    \  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmph_mlab1b.jl:8\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmph_mlab1b.jl:8\n\
    \   [4] top-level scope at /tmp/tmph_mlab1b.jl:17\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmph_mlab1b.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmph_mlab1b.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  UndefVarError: contains not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"\
    {String})(::String) at /tmp/tmph_mlab1b.jl:8\n   [2] filter(::var\"#3#4\"{String},\
    \ ::Array{String,1}) at ./array.jl:2375\n   [3] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmph_mlab1b.jl:8\n   [4] top-level scope at /tmp/tmph_mlab1b.jl:18\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmph_mlab1b.jl:14\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph_mlab1b.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsviil9wa.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpsviil9wa.jl:8\n   [9] top-level scope at /tmp/tmpsviil9wa.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpsviil9wa.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpsviil9wa.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpsviil9wa.jl:8\n\
    \   [9] top-level scope at /tmp/tmpsviil9wa.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpsviil9wa.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpsviil9wa.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpsviil9wa.jl:8\n\
    \   [9] top-level scope at /tmp/tmpsviil9wa.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpsviil9wa.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsviil9wa.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmps7y3huic.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmps7y3huic.jl:8\n   [9] top-level scope at /tmp/tmps7y3huic.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmps7y3huic.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmps7y3huic.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmps7y3huic.jl:8\n\
    \   [9] top-level scope at /tmp/tmps7y3huic.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmps7y3huic.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmps7y3huic.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmps7y3huic.jl:8\n\
    \   [9] top-level scope at /tmp/tmps7y3huic.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmps7y3huic.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps7y3huic.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpa3f6o5cb.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n   [1] error(::String) at ./error.jl:33\\\
    n   [2] in(::String, ::String) at ./strings/search.jl:533\\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\\n   [4] iterate at ./iterators.jl:430 [inlined]\\\
    n   [5] iterate at ./generator.jl:44 [inlined]\\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\\n   [7] collect at ./array.jl:663 [inlined]\\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpa3f6o5cb.jl:8\\n   [9] top-level scope at /tmp/tmpa3f6o5cb.jl:16\\\
    n   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmpa3f6o5cb.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpa3f6o5cb.jl:17\\n  Test threw exception\\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x, y) for string containment\\\
    n  Stacktrace:\\n   [1] error(::String) at ./error.jl:33\\n   [2] in(::String,\
    \ ::String) at ./strings/search.jl:533\\n   [3] (::var\"#3#4\"{String})(::String)\
    \ at ./none:0\\n   [4] iterate at ./iterators.jl:430 [inlined]\\n   [5] iterate\
    \ at ./generator.jl:44 [inlined]\\n   [6] grow_to! at ./array.jl:726 [inlined]\\\
    n   [7] collect at ./array.jl:663 [inlined]\\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpa3f6o5cb.jl:8\\n   [9] top-level scope at /tmp/tmpa3f6o5cb.jl:17\\\
    n   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmpa3f6o5cb.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpa3f6o5cb.jl:18\\n  Test threw exception\\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\\n  use occursin(x, y) for string containment\\n  Stacktrace:\\n   [1] error(::String)\
    \ at ./error.jl:33\\n   [2] in(::String, ::String) at ./strings/search.jl:533\\\
    n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\\n   [5] iterate at ./generator.jl:44 [inlined]\\n   [6] grow_to!\
    \ at ./array.jl:726 [inlined]\\n   [7] collect at ./array.jl:663 [inlined]\\n\
    \   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpa3f6o5cb.jl:8\\\
    n   [9] top-level scope at /tmp/tmpa3f6o5cb.jl:18\\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmpa3f6o5cb.jl:14\\n  \\nTest Summary: | Pass\
    \  Error  Total\\ntest set      |    1      3      4\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpy_u2n5us.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpy_u2n5us.jl:8\n   [9] top-level scope at /tmp/tmpy_u2n5us.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpy_u2n5us.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpy_u2n5us.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpy_u2n5us.jl:8\n\
    \   [9] top-level scope at /tmp/tmpy_u2n5us.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpy_u2n5us.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpy_u2n5us.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpy_u2n5us.jl:8\n\
    \   [9] top-level scope at /tmp/tmpy_u2n5us.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpy_u2n5us.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy_u2n5us.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = []\n    for s in strings\n        if contains(s, substring)\n\
    \            push!(filtered, s)\n        end\n    end\n    return filtered\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbpn2eyej.jl:22\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains\
    \ not defined\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1}, ::String)\
    \ at /tmp/tmpbpn2eyej.jl:10\n   [2] top-level scope at /tmp/tmpbpn2eyej.jl:22\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpbpn2eyej.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpbpn2eyej.jl:23\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains not defined\n\
    \  Stacktrace:\n   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpbpn2eyej.jl:10\n\
    \   [2] top-level scope at /tmp/tmpbpn2eyej.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpbpn2eyej.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpbpn2eyej.jl:24\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  UndefVarError: contains not defined\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpbpn2eyej.jl:10\n   [2] top-level scope at /tmp/tmpbpn2eyej.jl:24\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpbpn2eyej.jl:20\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbpn2eyej.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpf_lki481.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpf_lki481.jl:8\n   [9] top-level scope at /tmp/tmpf_lki481.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpf_lki481.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpf_lki481.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpf_lki481.jl:8\n\
    \   [9] top-level scope at /tmp/tmpf_lki481.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpf_lki481.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpf_lki481.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpf_lki481.jl:8\n\
    \   [9] top-level scope at /tmp/tmpf_lki481.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpf_lki481.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf_lki481.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptn7miewd.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmptn7miewd.jl:8\n   [9] top-level scope at /tmp/tmptn7miewd.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmptn7miewd.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmptn7miewd.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmptn7miewd.jl:8\n\
    \   [9] top-level scope at /tmp/tmptn7miewd.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmptn7miewd.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmptn7miewd.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmptn7miewd.jl:8\n\
    \   [9] top-level scope at /tmp/tmptn7miewd.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmptn7miewd.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptn7miewd.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpn9z_0yjr.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpn9z_0yjr.jl:8\n   [9] top-level scope at /tmp/tmpn9z_0yjr.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpn9z_0yjr.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpn9z_0yjr.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpn9z_0yjr.jl:8\n\
    \   [9] top-level scope at /tmp/tmpn9z_0yjr.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpn9z_0yjr.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpn9z_0yjr.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpn9z_0yjr.jl:8\n\
    \   [9] top-level scope at /tmp/tmpn9z_0yjr.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpn9z_0yjr.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn9z_0yjr.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpvlc7mjk8.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  UndefVarError:\
    \ contains not defined\\n  Stacktrace:\\n   [1] (::var\"#3#4\"{String})(::String)\
    \ at /tmp/tmpvlc7mjk8.jl:8\\n   [2] filter(::var\"#3#4\"{String}, ::Array{String,1})\
    \ at ./array.jl:2375\\n   [3] filter_by_substring(::Array{String,1}, ::String)\
    \ at /tmp/tmpvlc7mjk8.jl:8\\n   [4] top-level scope at /tmp/tmpvlc7mjk8.jl:16\\\
    n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [6] top-level scope at /tmp/tmpvlc7mjk8.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpvlc7mjk8.jl:17\\n  Test threw exception\\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  UndefVarError: contains not defined\\\
    n  Stacktrace:\\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmpvlc7mjk8.jl:8\\\
    n   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\\\
    n   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpvlc7mjk8.jl:8\\\
    n   [4] top-level scope at /tmp/tmpvlc7mjk8.jl:17\\n   [5] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [6] top-level scope at /tmp/tmpvlc7mjk8.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpvlc7mjk8.jl:18\\n  Test threw exception\\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\\n  UndefVarError: contains not defined\\n  Stacktrace:\\n   [1] (::var\"#3#4\"\
    {String})(::String) at /tmp/tmpvlc7mjk8.jl:8\\n   [2] filter(::var\"#3#4\"{String},\
    \ ::Array{String,1}) at ./array.jl:2375\\n   [3] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpvlc7mjk8.jl:8\\n   [4] top-level scope at /tmp/tmpvlc7mjk8.jl:18\\\
    n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [6] top-level scope at /tmp/tmpvlc7mjk8.jl:14\\n  \\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9dkzluqz.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp9dkzluqz.jl:8\n   [9] top-level scope at /tmp/tmp9dkzluqz.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp9dkzluqz.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp9dkzluqz.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp9dkzluqz.jl:8\n\
    \   [9] top-level scope at /tmp/tmp9dkzluqz.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp9dkzluqz.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp9dkzluqz.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp9dkzluqz.jl:8\n\
    \   [9] top-level scope at /tmp/tmp9dkzluqz.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp9dkzluqz.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9dkzluqz.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3hk8thuq.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp3hk8thuq.jl:8\n   [9] top-level scope at /tmp/tmp3hk8thuq.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp3hk8thuq.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp3hk8thuq.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp3hk8thuq.jl:8\n\
    \   [9] top-level scope at /tmp/tmp3hk8thuq.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp3hk8thuq.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp3hk8thuq.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp3hk8thuq.jl:8\n\
    \   [9] top-level scope at /tmp/tmp3hk8thuq.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp3hk8thuq.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3hk8thuq.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgthuatmj.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmpgthuatmj.jl:8\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpgthuatmj.jl:8\n\
    \   [4] top-level scope at /tmp/tmpgthuatmj.jl:16\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpgthuatmj.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpgthuatmj.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains not defined\n\
    \  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmpgthuatmj.jl:8\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpgthuatmj.jl:8\n\
    \   [4] top-level scope at /tmp/tmpgthuatmj.jl:17\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpgthuatmj.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpgthuatmj.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  UndefVarError: contains not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"\
    {String})(::String) at /tmp/tmpgthuatmj.jl:8\n   [2] filter(::var\"#3#4\"{String},\
    \ ::Array{String,1}) at ./array.jl:2375\n   [3] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpgthuatmj.jl:8\n   [4] top-level scope at /tmp/tmpgthuatmj.jl:18\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpgthuatmj.jl:14\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgthuatmj.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpot23ldb7.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpot23ldb7.jl:8\n   [9] top-level scope at /tmp/tmpot23ldb7.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpot23ldb7.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpot23ldb7.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpot23ldb7.jl:8\n\
    \   [9] top-level scope at /tmp/tmpot23ldb7.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpot23ldb7.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpot23ldb7.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpot23ldb7.jl:8\n\
    \   [9] top-level scope at /tmp/tmpot23ldb7.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpot23ldb7.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpot23ldb7.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3zxd3w11.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp3zxd3w11.jl:8\n   [9] top-level scope at /tmp/tmp3zxd3w11.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp3zxd3w11.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp3zxd3w11.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp3zxd3w11.jl:8\n\
    \   [9] top-level scope at /tmp/tmp3zxd3w11.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp3zxd3w11.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp3zxd3w11.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp3zxd3w11.jl:8\n\
    \   [9] top-level scope at /tmp/tmp3zxd3w11.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp3zxd3w11.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3zxd3w11.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpckqgjlzw.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpckqgjlzw.jl:8\n   [9] top-level scope at /tmp/tmpckqgjlzw.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpckqgjlzw.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpckqgjlzw.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpckqgjlzw.jl:8\n\
    \   [9] top-level scope at /tmp/tmpckqgjlzw.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpckqgjlzw.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpckqgjlzw.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpckqgjlzw.jl:8\n\
    \   [9] top-level scope at /tmp/tmpckqgjlzw.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpckqgjlzw.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpckqgjlzw.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpavnvnow9.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpavnvnow9.jl:8\n   [9] top-level scope at /tmp/tmpavnvnow9.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpavnvnow9.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpavnvnow9.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpavnvnow9.jl:8\n\
    \   [9] top-level scope at /tmp/tmpavnvnow9.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpavnvnow9.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpavnvnow9.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpavnvnow9.jl:8\n\
    \   [9] top-level scope at /tmp/tmpavnvnow9.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpavnvnow9.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpavnvnow9.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp0f4oc4df.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n   [1] error(::String) at ./error.jl:33\\\
    n   [2] in(::String, ::String) at ./strings/search.jl:533\\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\\n   [4] iterate at ./iterators.jl:430 [inlined]\\\
    n   [5] iterate at ./generator.jl:44 [inlined]\\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\\n   [7] collect at ./array.jl:663 [inlined]\\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp0f4oc4df.jl:8\\n   [9] top-level scope at /tmp/tmp0f4oc4df.jl:16\\\
    n   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmp0f4oc4df.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp0f4oc4df.jl:17\\n  Test threw exception\\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x, y) for string containment\\\
    n  Stacktrace:\\n   [1] error(::String) at ./error.jl:33\\n   [2] in(::String,\
    \ ::String) at ./strings/search.jl:533\\n   [3] (::var\"#3#4\"{String})(::String)\
    \ at ./none:0\\n   [4] iterate at ./iterators.jl:430 [inlined]\\n   [5] iterate\
    \ at ./generator.jl:44 [inlined]\\n   [6] grow_to! at ./array.jl:726 [inlined]\\\
    n   [7] collect at ./array.jl:663 [inlined]\\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp0f4oc4df.jl:8\\n   [9] top-level scope at /tmp/tmp0f4oc4df.jl:17\\\
    n   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmp0f4oc4df.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp0f4oc4df.jl:18\\n  Test threw exception\\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\\n  use occursin(x, y) for string containment\\n  Stacktrace:\\n   [1] error(::String)\
    \ at ./error.jl:33\\n   [2] in(::String, ::String) at ./strings/search.jl:533\\\
    n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\\n   [5] iterate at ./generator.jl:44 [inlined]\\n   [6] grow_to!\
    \ at ./array.jl:726 [inlined]\\n   [7] collect at ./array.jl:663 [inlined]\\n\
    \   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp0f4oc4df.jl:8\\\
    n   [9] top-level scope at /tmp/tmp0f4oc4df.jl:18\\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmp0f4oc4df.jl:14\\n  \\nTest Summary: | Pass\
    \  Error  Total\\ntest set      |    1      3      4\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqhpgg4f1.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmpqhpgg4f1.jl:8\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpqhpgg4f1.jl:8\n\
    \   [4] top-level scope at /tmp/tmpqhpgg4f1.jl:16\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpqhpgg4f1.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpqhpgg4f1.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains not defined\n\
    \  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmpqhpgg4f1.jl:8\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpqhpgg4f1.jl:8\n\
    \   [4] top-level scope at /tmp/tmpqhpgg4f1.jl:17\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpqhpgg4f1.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpqhpgg4f1.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  UndefVarError: contains not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"\
    {String})(::String) at /tmp/tmpqhpgg4f1.jl:8\n   [2] filter(::var\"#3#4\"{String},\
    \ ::Array{String,1}) at ./array.jl:2375\n   [3] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpqhpgg4f1.jl:8\n   [4] top-level scope at /tmp/tmpqhpgg4f1.jl:18\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpqhpgg4f1.jl:14\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqhpgg4f1.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppkzrsdqs.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmppkzrsdqs.jl:8\n   [9] top-level scope at /tmp/tmppkzrsdqs.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmppkzrsdqs.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmppkzrsdqs.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmppkzrsdqs.jl:8\n\
    \   [9] top-level scope at /tmp/tmppkzrsdqs.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmppkzrsdqs.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmppkzrsdqs.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmppkzrsdqs.jl:8\n\
    \   [9] top-level scope at /tmp/tmppkzrsdqs.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmppkzrsdqs.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppkzrsdqs.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpncwzlbda.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpncwzlbda.jl:8\n   [9] top-level scope at /tmp/tmpncwzlbda.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpncwzlbda.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpncwzlbda.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpncwzlbda.jl:8\n\
    \   [9] top-level scope at /tmp/tmpncwzlbda.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpncwzlbda.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpncwzlbda.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpncwzlbda.jl:8\n\
    \   [9] top-level scope at /tmp/tmpncwzlbda.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpncwzlbda.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpncwzlbda.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgw670bck.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpgw670bck.jl:8\n   [9] top-level scope at /tmp/tmpgw670bck.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpgw670bck.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpgw670bck.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpgw670bck.jl:8\n\
    \   [9] top-level scope at /tmp/tmpgw670bck.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpgw670bck.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpgw670bck.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpgw670bck.jl:8\n\
    \   [9] top-level scope at /tmp/tmpgw670bck.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpgw670bck.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgw670bck.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptqs2dryx.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmptqs2dryx.jl:8\n   [9] top-level scope at /tmp/tmptqs2dryx.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmptqs2dryx.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmptqs2dryx.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmptqs2dryx.jl:8\n\
    \   [9] top-level scope at /tmp/tmptqs2dryx.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmptqs2dryx.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmptqs2dryx.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmptqs2dryx.jl:8\n\
    \   [9] top-level scope at /tmp/tmptqs2dryx.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmptqs2dryx.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptqs2dryx.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp98ocv1vl.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp98ocv1vl.jl:8\n   [9] top-level scope at /tmp/tmp98ocv1vl.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp98ocv1vl.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp98ocv1vl.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp98ocv1vl.jl:8\n\
    \   [9] top-level scope at /tmp/tmp98ocv1vl.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp98ocv1vl.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp98ocv1vl.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp98ocv1vl.jl:8\n\
    \   [9] top-level scope at /tmp/tmp98ocv1vl.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp98ocv1vl.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp98ocv1vl.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptznd5dac.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmptznd5dac.jl:8\n   [9] top-level scope at /tmp/tmptznd5dac.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmptznd5dac.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmptznd5dac.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmptznd5dac.jl:8\n\
    \   [9] top-level scope at /tmp/tmptznd5dac.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmptznd5dac.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmptznd5dac.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmptznd5dac.jl:8\n\
    \   [9] top-level scope at /tmp/tmptznd5dac.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmptznd5dac.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptznd5dac.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmprvr6u2b8.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n   [1] error(::String) at ./error.jl:33\\\
    n   [2] in(::String, ::String) at ./strings/search.jl:533\\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\\n   [4] iterate at ./iterators.jl:430 [inlined]\\\
    n   [5] iterate at ./generator.jl:44 [inlined]\\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\\n   [7] collect at ./array.jl:663 [inlined]\\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmprvr6u2b8.jl:8\\n   [9] top-level scope at /tmp/tmprvr6u2b8.jl:16\\\
    n   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmprvr6u2b8.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmprvr6u2b8.jl:17\\n  Test threw exception\\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x, y) for string containment\\\
    n  Stacktrace:\\n   [1] error(::String) at ./error.jl:33\\n   [2] in(::String,\
    \ ::String) at ./strings/search.jl:533\\n   [3] (::var\"#3#4\"{String})(::String)\
    \ at ./none:0\\n   [4] iterate at ./iterators.jl:430 [inlined]\\n   [5] iterate\
    \ at ./generator.jl:44 [inlined]\\n   [6] grow_to! at ./array.jl:726 [inlined]\\\
    n   [7] collect at ./array.jl:663 [inlined]\\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmprvr6u2b8.jl:8\\n   [9] top-level scope at /tmp/tmprvr6u2b8.jl:17\\\
    n   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmprvr6u2b8.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmprvr6u2b8.jl:18\\n  Test threw exception\\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\\n  use occursin(x, y) for string containment\\n  Stacktrace:\\n   [1] error(::String)\
    \ at ./error.jl:33\\n   [2] in(::String, ::String) at ./strings/search.jl:533\\\
    n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\\n   [5] iterate at ./generator.jl:44 [inlined]\\n   [6] grow_to!\
    \ at ./array.jl:726 [inlined]\\n   [7] collect at ./array.jl:663 [inlined]\\n\
    \   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmprvr6u2b8.jl:8\\\
    n   [9] top-level scope at /tmp/tmprvr6u2b8.jl:18\\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmprvr6u2b8.jl:14\\n  \\nTest Summary: | Pass\
    \  Error  '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpx_vkib7o.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpx_vkib7o.jl:8\n   [9] top-level scope at /tmp/tmpx_vkib7o.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpx_vkib7o.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpx_vkib7o.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpx_vkib7o.jl:8\n\
    \   [9] top-level scope at /tmp/tmpx_vkib7o.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpx_vkib7o.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpx_vkib7o.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpx_vkib7o.jl:8\n\
    \   [9] top-level scope at /tmp/tmpx_vkib7o.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpx_vkib7o.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx_vkib7o.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbp1pzeo1.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmpbp1pzeo1.jl:8\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpbp1pzeo1.jl:8\n\
    \   [4] top-level scope at /tmp/tmpbp1pzeo1.jl:16\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpbp1pzeo1.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpbp1pzeo1.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains not defined\n\
    \  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmpbp1pzeo1.jl:8\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpbp1pzeo1.jl:8\n\
    \   [4] top-level scope at /tmp/tmpbp1pzeo1.jl:17\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpbp1pzeo1.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpbp1pzeo1.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  UndefVarError: contains not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"\
    {String})(::String) at /tmp/tmpbp1pzeo1.jl:8\n   [2] filter(::var\"#3#4\"{String},\
    \ ::Array{String,1}) at ./array.jl:2375\n   [3] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpbp1pzeo1.jl:8\n   [4] top-level scope at /tmp/tmpbp1pzeo1.jl:18\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpbp1pzeo1.jl:14\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbp1pzeo1.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqj1618wr.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpqj1618wr.jl:8\n   [9] top-level scope at /tmp/tmpqj1618wr.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpqj1618wr.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpqj1618wr.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpqj1618wr.jl:8\n\
    \   [9] top-level scope at /tmp/tmpqj1618wr.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpqj1618wr.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpqj1618wr.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpqj1618wr.jl:8\n\
    \   [9] top-level scope at /tmp/tmpqj1618wr.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpqj1618wr.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqj1618wr.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpnjkryya6.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpnjkryya6.jl:8\n   [9] top-level scope at /tmp/tmpnjkryya6.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpnjkryya6.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpnjkryya6.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpnjkryya6.jl:8\n\
    \   [9] top-level scope at /tmp/tmpnjkryya6.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpnjkryya6.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpnjkryya6.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpnjkryya6.jl:8\n\
    \   [9] top-level scope at /tmp/tmpnjkryya6.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpnjkryya6.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnjkryya6.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpikxf2727.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpikxf2727.jl:8\n   [9] top-level scope at /tmp/tmpikxf2727.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpikxf2727.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpikxf2727.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpikxf2727.jl:8\n\
    \   [9] top-level scope at /tmp/tmpikxf2727.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpikxf2727.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpikxf2727.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpikxf2727.jl:8\n\
    \   [9] top-level scope at /tmp/tmpikxf2727.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpikxf2727.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpikxf2727.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpj035hsci.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n   [1] error(::String) at ./error.jl:33\\\
    n   [2] in(::String, ::String) at ./strings/search.jl:533\\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\\n   [4] iterate at ./iterators.jl:430 [inlined]\\\
    n   [5] iterate at ./generator.jl:44 [inlined]\\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\\n   [7] collect at ./array.jl:663 [inlined]\\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpj035hsci.jl:8\\n   [9] top-level scope at /tmp/tmpj035hsci.jl:16\\\
    n   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmpj035hsci.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpj035hsci.jl:17\\n  Test threw exception\\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x, y) for string containment\\\
    n  Stacktrace:\\n   [1] error(::String) at ./error.jl:33\\n   [2] in(::String,\
    \ ::String) at ./strings/search.jl:533\\n   [3] (::var\"#3#4\"{String})(::String)\
    \ at ./none:0\\n   [4] iterate at ./iterators.jl:430 [inlined]\\n   [5] iterate\
    \ at ./generator.jl:44 [inlined]\\n   [6] grow_to! at ./array.jl:726 [inlined]\\\
    n   [7] collect at ./array.jl:663 [inlined]\\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpj035hsci.jl:8\\n   [9] top-level scope at /tmp/tmpj035hsci.jl:17\\\
    n   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmpj035hsci.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpj035hsci.jl:18\\n  Test threw exception\\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\\n  use occursin(x, y) for string containment\\n  Stacktrace:\\n   [1] error(::String)\
    \ at ./error.jl:33\\n   [2] in(::String, ::String) at ./strings/search.jl:533\\\
    n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\\n   [5] iterate at ./generator.jl:44 [inlined]\\n   [6] grow_to!\
    \ at ./array.jl:726 [inlined]\\n   [7] collect at ./array.jl:663 [inlined]\\n\
    \   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpj035hsci.jl:8\\\
    n   [9] top-level scope at /tmp/tmpj035hsci.jl:18\\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmpj035hsci.jl:14\\n  \\nTest Summary: | Pass\
    \  Error  Total\\ntest set      |    1      3      4\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpq2e6wr3i.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpq2e6wr3i.jl:8\n   [9] top-level scope at /tmp/tmpq2e6wr3i.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpq2e6wr3i.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpq2e6wr3i.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpq2e6wr3i.jl:8\n\
    \   [9] top-level scope at /tmp/tmpq2e6wr3i.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpq2e6wr3i.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpq2e6wr3i.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpq2e6wr3i.jl:8\n\
    \   [9] top-level scope at /tmp/tmpq2e6wr3i.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpq2e6wr3i.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq2e6wr3i.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2s0m03ne.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp2s0m03ne.jl:8\n   [9] top-level scope at /tmp/tmp2s0m03ne.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp2s0m03ne.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp2s0m03ne.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp2s0m03ne.jl:8\n\
    \   [9] top-level scope at /tmp/tmp2s0m03ne.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp2s0m03ne.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp2s0m03ne.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp2s0m03ne.jl:8\n\
    \   [9] top-level scope at /tmp/tmp2s0m03ne.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp2s0m03ne.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2s0m03ne.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptavvgzta.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmptavvgzta.jl:8\n   [9] top-level scope at /tmp/tmptavvgzta.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmptavvgzta.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmptavvgzta.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmptavvgzta.jl:8\n\
    \   [9] top-level scope at /tmp/tmptavvgzta.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmptavvgzta.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmptavvgzta.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmptavvgzta.jl:8\n\
    \   [9] top-level scope at /tmp/tmptavvgzta.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmptavvgzta.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptavvgzta.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp534fjkbv.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp534fjkbv.jl:8\n   [9] top-level scope at /tmp/tmp534fjkbv.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp534fjkbv.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp534fjkbv.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp534fjkbv.jl:8\n\
    \   [9] top-level scope at /tmp/tmp534fjkbv.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp534fjkbv.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp534fjkbv.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp534fjkbv.jl:8\n\
    \   [9] top-level scope at /tmp/tmp534fjkbv.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp534fjkbv.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp534fjkbv.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpk0if8h2e.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpk0if8h2e.jl:8\n   [9] top-level scope at /tmp/tmpk0if8h2e.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpk0if8h2e.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpk0if8h2e.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpk0if8h2e.jl:8\n\
    \   [9] top-level scope at /tmp/tmpk0if8h2e.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpk0if8h2e.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpk0if8h2e.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpk0if8h2e.jl:8\n\
    \   [9] top-level scope at /tmp/tmpk0if8h2e.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpk0if8h2e.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk0if8h2e.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpu9oc_hrf.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmpu9oc_hrf.jl:8\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpu9oc_hrf.jl:8\n\
    \   [4] top-level scope at /tmp/tmpu9oc_hrf.jl:16\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpu9oc_hrf.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpu9oc_hrf.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains not defined\n\
    \  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmpu9oc_hrf.jl:8\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpu9oc_hrf.jl:8\n\
    \   [4] top-level scope at /tmp/tmpu9oc_hrf.jl:17\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpu9oc_hrf.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpu9oc_hrf.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  UndefVarError: contains not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"\
    {String})(::String) at /tmp/tmpu9oc_hrf.jl:8\n   [2] filter(::var\"#3#4\"{String},\
    \ ::Array{String,1}) at ./array.jl:2375\n   [3] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpu9oc_hrf.jl:8\n   [4] top-level scope at /tmp/tmpu9oc_hrf.jl:18\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpu9oc_hrf.jl:14\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu9oc_hrf.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqns4elqk.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpqns4elqk.jl:8\n   [9] top-level scope at /tmp/tmpqns4elqk.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpqns4elqk.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpqns4elqk.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpqns4elqk.jl:8\n\
    \   [9] top-level scope at /tmp/tmpqns4elqk.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpqns4elqk.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpqns4elqk.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpqns4elqk.jl:8\n\
    \   [9] top-level scope at /tmp/tmpqns4elqk.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpqns4elqk.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqns4elqk.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpodf7kwmw.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpodf7kwmw.jl:8\n   [9] top-level scope at /tmp/tmpodf7kwmw.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpodf7kwmw.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpodf7kwmw.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpodf7kwmw.jl:8\n\
    \   [9] top-level scope at /tmp/tmpodf7kwmw.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpodf7kwmw.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpodf7kwmw.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpodf7kwmw.jl:8\n\
    \   [9] top-level scope at /tmp/tmpodf7kwmw.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpodf7kwmw.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpodf7kwmw.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpaz8in5hg.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpaz8in5hg.jl:8\n   [9] top-level scope at /tmp/tmpaz8in5hg.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpaz8in5hg.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpaz8in5hg.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpaz8in5hg.jl:8\n\
    \   [9] top-level scope at /tmp/tmpaz8in5hg.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpaz8in5hg.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpaz8in5hg.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpaz8in5hg.jl:8\n\
    \   [9] top-level scope at /tmp/tmpaz8in5hg.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpaz8in5hg.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaz8in5hg.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpe1i2rw9u.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpe1i2rw9u.jl:8\n   [9] top-level scope at /tmp/tmpe1i2rw9u.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpe1i2rw9u.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpe1i2rw9u.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpe1i2rw9u.jl:8\n\
    \   [9] top-level scope at /tmp/tmpe1i2rw9u.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpe1i2rw9u.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpe1i2rw9u.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpe1i2rw9u.jl:8\n\
    \   [9] top-level scope at /tmp/tmpe1i2rw9u.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpe1i2rw9u.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe1i2rw9u.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcfh4y65y.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpcfh4y65y.jl:8\n   [9] top-level scope at /tmp/tmpcfh4y65y.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpcfh4y65y.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpcfh4y65y.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpcfh4y65y.jl:8\n\
    \   [9] top-level scope at /tmp/tmpcfh4y65y.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpcfh4y65y.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpcfh4y65y.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpcfh4y65y.jl:8\n\
    \   [9] top-level scope at /tmp/tmpcfh4y65y.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpcfh4y65y.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcfh4y65y.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmph9f9djzv.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmph9f9djzv.jl:8\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmph9f9djzv.jl:8\n\
    \   [4] top-level scope at /tmp/tmph9f9djzv.jl:16\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmph9f9djzv.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmph9f9djzv.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains not defined\n\
    \  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmph9f9djzv.jl:8\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmph9f9djzv.jl:8\n\
    \   [4] top-level scope at /tmp/tmph9f9djzv.jl:17\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmph9f9djzv.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmph9f9djzv.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  UndefVarError: contains not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"\
    {String})(::String) at /tmp/tmph9f9djzv.jl:8\n   [2] filter(::var\"#3#4\"{String},\
    \ ::Array{String,1}) at ./array.jl:2375\n   [3] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmph9f9djzv.jl:8\n   [4] top-level scope at /tmp/tmph9f9djzv.jl:18\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmph9f9djzv.jl:14\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph9f9djzv.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpe53xe7mg.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpe53xe7mg.jl:8\n   [9] top-level scope at /tmp/tmpe53xe7mg.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpe53xe7mg.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpe53xe7mg.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpe53xe7mg.jl:8\n\
    \   [9] top-level scope at /tmp/tmpe53xe7mg.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpe53xe7mg.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpe53xe7mg.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpe53xe7mg.jl:8\n\
    \   [9] top-level scope at /tmp/tmpe53xe7mg.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpe53xe7mg.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe53xe7mg.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_7gd8jf7.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp_7gd8jf7.jl:8\n   [9] top-level scope at /tmp/tmp_7gd8jf7.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp_7gd8jf7.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp_7gd8jf7.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp_7gd8jf7.jl:8\n\
    \   [9] top-level scope at /tmp/tmp_7gd8jf7.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp_7gd8jf7.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp_7gd8jf7.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp_7gd8jf7.jl:8\n\
    \   [9] top-level scope at /tmp/tmp_7gd8jf7.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp_7gd8jf7.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_7gd8jf7.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    output = []\n    for s in strings\n        if contains(s, substring)\n\
    \            push!(output, s)\n        end\n    end\n    return output\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2wdv472g.jl:22\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains\
    \ not defined\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1}, ::String)\
    \ at /tmp/tmp2wdv472g.jl:10\n   [2] top-level scope at /tmp/tmp2wdv472g.jl:22\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp2wdv472g.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmp2wdv472g.jl:23\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains not defined\n\
    \  Stacktrace:\n   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp2wdv472g.jl:10\n\
    \   [2] top-level scope at /tmp/tmp2wdv472g.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp2wdv472g.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmp2wdv472g.jl:24\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  UndefVarError: contains not defined\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp2wdv472g.jl:10\n   [2] top-level scope at /tmp/tmp2wdv472g.jl:24\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp2wdv472g.jl:20\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2wdv472g.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpi3_tkzqb.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n   [1] error(::String) at ./error.jl:33\\\
    n   [2] in(::String, ::String) at ./strings/search.jl:533\\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\\n   [4] iterate at ./iterators.jl:430 [inlined]\\\
    n   [5] iterate at ./generator.jl:44 [inlined]\\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\\n   [7] collect at ./array.jl:663 [inlined]\\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpi3_tkzqb.jl:8\\n   [9] top-level scope at /tmp/tmpi3_tkzqb.jl:16\\\
    n   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmpi3_tkzqb.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpi3_tkzqb.jl:17\\n  Test threw exception\\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x, y) for string containment\\\
    n  Stacktrace:\\n   [1] error(::String) at ./error.jl:33\\n   [2] in(::String,\
    \ ::String) at ./strings/search.jl:533\\n   [3] (::var\"#3#4\"{String})(::String)\
    \ at ./none:0\\n   [4] iterate at ./iterators.jl:430 [inlined]\\n   [5] iterate\
    \ at ./generator.jl:44 [inlined]\\n   [6] grow_to! at ./array.jl:726 [inlined]\\\
    n   [7] collect at ./array.jl:663 [inlined]\\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpi3_tkzqb.jl:8\\n   [9] top-level scope at /tmp/tmpi3_tkzqb.jl:17\\\
    n   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmpi3_tkzqb.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpi3_tkzqb.jl:18\\n  Test threw exception\\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\\n  use occursin(x, y) for string containment\\n  Stacktrace:\\n   [1] error(::String)\
    \ at ./error.jl:33\\n   [2] in(::String, ::String) at ./strings/search.jl:533\\\
    n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\\n   [5] iterate at ./generator.jl:44 [inlined]\\n   [6] grow_to!\
    \ at ./array.jl:726 [inlined]\\n   [7] collect at ./array.jl:663 [inlined]\\n\
    \   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpi3_tkzqb.jl:8\\\
    n   [9] top-level scope at /tmp/tmpi3_tkzqb.jl:18\\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmpi3_tkzqb.jl:14\\n  \\nTest Summary: | Pass\
    \  Error  Total\\ntest set      |    1      3  '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgykaj7g7.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpgykaj7g7.jl:8\n   [9] top-level scope at /tmp/tmpgykaj7g7.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpgykaj7g7.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpgykaj7g7.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpgykaj7g7.jl:8\n\
    \   [9] top-level scope at /tmp/tmpgykaj7g7.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpgykaj7g7.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpgykaj7g7.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpgykaj7g7.jl:8\n\
    \   [9] top-level scope at /tmp/tmpgykaj7g7.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpgykaj7g7.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgykaj7g7.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyocllsxv.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpyocllsxv.jl:8\n   [9] top-level scope at /tmp/tmpyocllsxv.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpyocllsxv.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpyocllsxv.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpyocllsxv.jl:8\n\
    \   [9] top-level scope at /tmp/tmpyocllsxv.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpyocllsxv.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpyocllsxv.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpyocllsxv.jl:8\n\
    \   [9] top-level scope at /tmp/tmpyocllsxv.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpyocllsxv.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyocllsxv.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = []\n    for s in strings\n        if contains(s, substring)\n\
    \            push!(filtered, s)\n        end\n    end\n    return filtered\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5k5iw2yj.jl:22\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains\
    \ not defined\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1}, ::String)\
    \ at /tmp/tmp5k5iw2yj.jl:10\n   [2] top-level scope at /tmp/tmp5k5iw2yj.jl:22\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp5k5iw2yj.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmp5k5iw2yj.jl:23\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains not defined\n\
    \  Stacktrace:\n   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp5k5iw2yj.jl:10\n\
    \   [2] top-level scope at /tmp/tmp5k5iw2yj.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp5k5iw2yj.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmp5k5iw2yj.jl:24\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  UndefVarError: contains not defined\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp5k5iw2yj.jl:10\n   [2] top-level scope at /tmp/tmp5k5iw2yj.jl:24\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp5k5iw2yj.jl:20\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5k5iw2yj.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmppwdd6rwk.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n   [1] error(::String) at ./error.jl:33\\\
    n   [2] in(::String, ::String) at ./strings/search.jl:533\\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\\n   [4] iterate at ./iterators.jl:430 [inlined]\\\
    n   [5] iterate at ./generator.jl:44 [inlined]\\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\\n   [7] collect at ./array.jl:663 [inlined]\\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmppwdd6rwk.jl:8\\n   [9] top-level scope at /tmp/tmppwdd6rwk.jl:16\\\
    n   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmppwdd6rwk.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmppwdd6rwk.jl:17\\n  Test threw exception\\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x, y) for string containment\\\
    n  Stacktrace:\\n   [1] error(::String) at ./error.jl:33\\n   [2] in(::String,\
    \ ::String) at ./strings/search.jl:533\\n   [3] (::var\"#3#4\"{String})(::String)\
    \ at ./none:0\\n   [4] iterate at ./iterators.jl:430 [inlined]\\n   [5] iterate\
    \ at ./generator.jl:44 [inlined]\\n   [6] grow_to! at ./array.jl:726 [inlined]\\\
    n   [7] collect at ./array.jl:663 [inlined]\\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmppwdd6rwk.jl:8\\n   [9] top-level scope at /tmp/tmppwdd6rwk.jl:17\\\
    n   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmppwdd6rwk.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmppwdd6rwk.jl:18\\n  Test threw exception\\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\\n  use occursin(x, y) for string containment\\n  Stacktrace:\\n   [1] error(::String)\
    \ at ./error.jl:33\\n   [2] in(::String, ::String) at ./strings/search.jl:533\\\
    n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\\n   [5] iterate at ./generator.jl:44 [inlined]\\n   [6] grow_to!\
    \ at ./array.jl:726 [inlined]\\n   [7] collect at ./array.jl:663 [inlined]\\n\
    \   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmppwdd6rwk.jl:8\\\
    n   [9] top-level scope at /tmp/tmppwdd6rwk.jl:18\\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmppwdd6rwk.jl:14\\n  \\nTest Summary: | Pass\
    \  Error  Total\\ntest set      |    1      3      4\\n'"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_j8juwuv.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp_j8juwuv.jl:8\n   [9] top-level scope at /tmp/tmp_j8juwuv.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp_j8juwuv.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp_j8juwuv.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp_j8juwuv.jl:8\n\
    \   [9] top-level scope at /tmp/tmp_j8juwuv.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp_j8juwuv.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp_j8juwuv.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp_j8juwuv.jl:8\n\
    \   [9] top-level scope at /tmp/tmp_j8juwuv.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp_j8juwuv.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_j8juwuv.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9twjgfln.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmp9twjgfln.jl:8\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp9twjgfln.jl:8\n\
    \   [4] top-level scope at /tmp/tmp9twjgfln.jl:16\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp9twjgfln.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp9twjgfln.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains not defined\n\
    \  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmp9twjgfln.jl:8\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp9twjgfln.jl:8\n\
    \   [4] top-level scope at /tmp/tmp9twjgfln.jl:17\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp9twjgfln.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp9twjgfln.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  UndefVarError: contains not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"\
    {String})(::String) at /tmp/tmp9twjgfln.jl:8\n   [2] filter(::var\"#3#4\"{String},\
    \ ::Array{String,1}) at ./array.jl:2375\n   [3] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp9twjgfln.jl:8\n   [4] top-level scope at /tmp/tmp9twjgfln.jl:18\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp9twjgfln.jl:14\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9twjgfln.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7zzpewxd.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmp7zzpewxd.jl:8\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp7zzpewxd.jl:8\n\
    \   [4] top-level scope at /tmp/tmp7zzpewxd.jl:16\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp7zzpewxd.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp7zzpewxd.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains not defined\n\
    \  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmp7zzpewxd.jl:8\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp7zzpewxd.jl:8\n\
    \   [4] top-level scope at /tmp/tmp7zzpewxd.jl:17\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp7zzpewxd.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp7zzpewxd.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  UndefVarError: contains not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"\
    {String})(::String) at /tmp/tmp7zzpewxd.jl:8\n   [2] filter(::var\"#3#4\"{String},\
    \ ::Array{String,1}) at ./array.jl:2375\n   [3] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp7zzpewxd.jl:8\n   [4] top-level scope at /tmp/tmp7zzpewxd.jl:18\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp7zzpewxd.jl:14\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7zzpewxd.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfewa2tb9.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpfewa2tb9.jl:8\n   [9] top-level scope at /tmp/tmpfewa2tb9.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpfewa2tb9.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpfewa2tb9.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpfewa2tb9.jl:8\n\
    \   [9] top-level scope at /tmp/tmpfewa2tb9.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpfewa2tb9.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpfewa2tb9.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpfewa2tb9.jl:8\n\
    \   [9] top-level scope at /tmp/tmpfewa2tb9.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpfewa2tb9.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfewa2tb9.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpa_wyem3m.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpa_wyem3m.jl:8\n   [9] top-level scope at /tmp/tmpa_wyem3m.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpa_wyem3m.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpa_wyem3m.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpa_wyem3m.jl:8\n\
    \   [9] top-level scope at /tmp/tmpa_wyem3m.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpa_wyem3m.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpa_wyem3m.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpa_wyem3m.jl:8\n\
    \   [9] top-level scope at /tmp/tmpa_wyem3m.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpa_wyem3m.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa_wyem3m.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdnfkhhc2.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpdnfkhhc2.jl:8\n   [9] top-level scope at /tmp/tmpdnfkhhc2.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpdnfkhhc2.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpdnfkhhc2.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpdnfkhhc2.jl:8\n\
    \   [9] top-level scope at /tmp/tmpdnfkhhc2.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpdnfkhhc2.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpdnfkhhc2.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpdnfkhhc2.jl:8\n\
    \   [9] top-level scope at /tmp/tmpdnfkhhc2.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpdnfkhhc2.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdnfkhhc2.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzmrz9kjd.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpzmrz9kjd.jl:8\n   [9] top-level scope at /tmp/tmpzmrz9kjd.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpzmrz9kjd.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpzmrz9kjd.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpzmrz9kjd.jl:8\n\
    \   [9] top-level scope at /tmp/tmpzmrz9kjd.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpzmrz9kjd.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpzmrz9kjd.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpzmrz9kjd.jl:8\n\
    \   [9] top-level scope at /tmp/tmpzmrz9kjd.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpzmrz9kjd.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzmrz9kjd.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpdmj4x2tr.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n   [1] error(::String) at ./error.jl:33\\\
    n   [2] in(::String, ::String) at ./strings/search.jl:533\\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\\n   [4] iterate at ./iterators.jl:430 [inlined]\\\
    n   [5] iterate at ./generator.jl:44 [inlined]\\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\\n   [7] collect at ./array.jl:663 [inlined]\\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpdmj4x2tr.jl:8\\n   [9] top-level scope at /tmp/tmpdmj4x2tr.jl:16\\\
    n   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmpdmj4x2tr.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpdmj4x2tr.jl:17\\n  Test threw exception\\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x, y) for string containment\\\
    n  Stacktrace:\\n   [1] error(::String) at ./error.jl:33\\n   [2] in(::String,\
    \ ::String) at ./strings/search.jl:533\\n   [3] (::var\"#3#4\"{String})(::String)\
    \ at ./none:0\\n   [4] iterate at ./iterators.jl:430 [inlined]\\n   [5] iterate\
    \ at ./generator.jl:44 [inlined]\\n   [6] grow_to! at ./array.jl:726 [inlined]\\\
    n   [7] collect at ./array.jl:663 [inlined]\\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpdmj4x2tr.jl:8\\n   [9] top-level scope at /tmp/tmpdmj4x2tr.jl:17\\\
    n   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmpdmj4x2tr.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpdmj4x2tr.jl:18\\n  Test threw exception\\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\\n  use occursin(x, y) for string containment\\n  Stacktrace:\\n   [1] error(::String)\
    \ at ./error.jl:33\\n   [2] in(::String, ::String) at ./strings/search.jl:533\\\
    n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\\n   [5] iterate at ./generator.jl:44 [inlined]\\n   [6] grow_to!\
    \ at ./array.jl:726 [inlined]\\n   [7] collect at ./array.jl:663 [inlined]\\n\
    \   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpdmj4x2tr.jl:8\\\
    n   [9] top-level scope at /tmp/tmpdmj4x2tr.jl:18\\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmpdmj4x2tr.jl:14\\n  \\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpc8h04hgu.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n   [1] error(::String) at ./error.jl:33\\\
    n   [2] in(::String, ::String) at ./strings/search.jl:533\\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\\n   [4] iterate at ./iterators.jl:430 [inlined]\\\
    n   [5] iterate at ./generator.jl:44 [inlined]\\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\\n   [7] collect at ./array.jl:663 [inlined]\\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpc8h04hgu.jl:8\\n   [9] top-level scope at /tmp/tmpc8h04hgu.jl:16\\\
    n   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmpc8h04hgu.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpc8h04hgu.jl:17\\n  Test threw exception\\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x, y) for string containment\\\
    n  Stacktrace:\\n   [1] error(::String) at ./error.jl:33\\n   [2] in(::String,\
    \ ::String) at ./strings/search.jl:533\\n   [3] (::var\"#3#4\"{String})(::String)\
    \ at ./none:0\\n   [4] iterate at ./iterators.jl:430 [inlined]\\n   [5] iterate\
    \ at ./generator.jl:44 [inlined]\\n   [6] grow_to! at ./array.jl:726 [inlined]\\\
    n   [7] collect at ./array.jl:663 [inlined]\\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpc8h04hgu.jl:8\\n   [9] top-level scope at /tmp/tmpc8h04hgu.jl:17\\\
    n   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmpc8h04hgu.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpc8h04hgu.jl:18\\n  Test threw exception\\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\\n  use occursin(x, y) for string containment\\n  Stacktrace:\\n   [1] error(::String)\
    \ at ./error.jl:33\\n   [2] in(::String, ::String) at ./strings/search.jl:533\\\
    n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\\n   [5] iterate at ./generator.jl:44 [inlined]\\n   [6] grow_to!\
    \ at ./array.jl:726 [inlined]\\n   [7] collect at ./array.jl:663 [inlined]\\n\
    \   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpc8h04hgu.jl:8\\\
    n   [9] top-level scope at /tmp/tmpc8h04hgu.jl:18\\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmpc8h04hgu.jl:14\\n  \\nTest Summary: | Pass\
    \  Error  Total\\ntest set      |    1      3      4\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptc36p_q2.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmptc36p_q2.jl:8\n   [9] top-level scope at /tmp/tmptc36p_q2.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmptc36p_q2.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmptc36p_q2.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmptc36p_q2.jl:8\n\
    \   [9] top-level scope at /tmp/tmptc36p_q2.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmptc36p_q2.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmptc36p_q2.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmptc36p_q2.jl:8\n\
    \   [9] top-level scope at /tmp/tmptc36p_q2.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmptc36p_q2.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptc36p_q2.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpd07a_dk_.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpd07a_dk_.jl:8\n   [9] top-level scope at /tmp/tmpd07a_dk_.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpd07a_dk_.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpd07a_dk_.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpd07a_dk_.jl:8\n\
    \   [9] top-level scope at /tmp/tmpd07a_dk_.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpd07a_dk_.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpd07a_dk_.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpd07a_dk_.jl:8\n\
    \   [9] top-level scope at /tmp/tmpd07a_dk_.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpd07a_dk_.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd07a_dk_.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmphdssrh80.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n   [1] error(::String) at ./error.jl:33\\\
    n   [2] in(::String, ::String) at ./strings/search.jl:533\\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\\n   [4] iterate at ./iterators.jl:430 [inlined]\\\
    n   [5] iterate at ./generator.jl:44 [inlined]\\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\\n   [7] collect at ./array.jl:663 [inlined]\\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmphdssrh80.jl:8\\n   [9] top-level scope at /tmp/tmphdssrh80.jl:16\\\
    n   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmphdssrh80.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmphdssrh80.jl:17\\n  Test threw exception\\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x, y) for string containment\\\
    n  Stacktrace:\\n   [1] error(::String) at ./error.jl:33\\n   [2] in(::String,\
    \ ::String) at ./strings/search.jl:533\\n   [3] (::var\"#3#4\"{String})(::String)\
    \ at ./none:0\\n   [4] iterate at ./iterators.jl:430 [inlined]\\n   [5] iterate\
    \ at ./generator.jl:44 [inlined]\\n   [6] grow_to! at ./array.jl:726 [inlined]\\\
    n   [7] collect at ./array.jl:663 [inlined]\\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmphdssrh80.jl:8\\n   [9] top-level scope at /tmp/tmphdssrh80.jl:17\\\
    n   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmphdssrh80.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmphdssrh80.jl:18\\n  Test threw exception\\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\\n  use occursin(x, y) for string containment\\n  Stacktrace:\\n   [1] error(::String)\
    \ at ./error.jl:33\\n   [2] in(::String, ::String) at ./strings/search.jl:533\\\
    n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\\n   [5] iterate at ./generator.jl:44 [inlined]\\n   [6] grow_to!\
    \ at ./array.jl:726 [inlined]\\n   [7] collect at ./array.jl:663 [inlined]\\n\
    \   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmphdssrh80.jl:8\\\
    n   [9] top-level scope at /tmp/tmphdssrh80.jl:18\\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmphdssrh80.jl:14\\n  \\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = []\n    for s in strings\n        if contains(s, substring)\n\
    \            push!(filtered, s)\n        end\n    end\n    return filtered\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpb0e6n6it.jl:22\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains\
    \ not defined\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1}, ::String)\
    \ at /tmp/tmpb0e6n6it.jl:10\n   [2] top-level scope at /tmp/tmpb0e6n6it.jl:22\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpb0e6n6it.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpb0e6n6it.jl:23\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains not defined\n\
    \  Stacktrace:\n   [1] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpb0e6n6it.jl:10\n\
    \   [2] top-level scope at /tmp/tmpb0e6n6it.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpb0e6n6it.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpb0e6n6it.jl:24\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  UndefVarError: contains not defined\n  Stacktrace:\n   [1] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpb0e6n6it.jl:10\n   [2] top-level scope at /tmp/tmpb0e6n6it.jl:24\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpb0e6n6it.jl:20\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb0e6n6it.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpln5zguy0.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n   [1] error(::String) at ./error.jl:33\\\
    n   [2] in(::String, ::String) at ./strings/search.jl:533\\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\\n   [4] iterate at ./iterators.jl:430 [inlined]\\\
    n   [5] iterate at ./generator.jl:44 [inlined]\\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\\n   [7] collect at ./array.jl:663 [inlined]\\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpln5zguy0.jl:8\\n   [9] top-level scope at /tmp/tmpln5zguy0.jl:16\\\
    n   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmpln5zguy0.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpln5zguy0.jl:17\\n  Test threw exception\\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x, y) for string containment\\\
    n  Stacktrace:\\n   [1] error(::String) at ./error.jl:33\\n   [2] in(::String,\
    \ ::String) at ./strings/search.jl:533\\n   [3] (::var\"#3#4\"{String})(::String)\
    \ at ./none:0\\n   [4] iterate at ./iterators.jl:430 [inlined]\\n   [5] iterate\
    \ at ./generator.jl:44 [inlined]\\n   [6] grow_to! at ./array.jl:726 [inlined]\\\
    n   [7] collect at ./array.jl:663 [inlined]\\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpln5zguy0.jl:8\\n   [9] top-level scope at /tmp/tmpln5zguy0.jl:17\\\
    n   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmpln5zguy0.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpln5zguy0.jl:18\\n  Test threw exception\\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\\n  use occursin(x, y) for string containment\\n  Stacktrace:\\n   [1] error(::String)\
    \ at ./error.jl:33\\n   [2] in(::String, ::String) at ./strings/search.jl:533\\\
    n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\\n   [5] iterate at ./generator.jl:44 [inlined]\\n   [6] grow_to!\
    \ at ./array.jl:726 [inlined]\\n   [7] collect at ./array.jl:663 [inlined]\\n\
    \   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpln5zguy0.jl:8\\\
    n   [9] top-level scope at /tmp/tmpln5zguy0.jl:18\\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [11] top-level scope at /tmp/tmpln5zguy0.jl:14\\n  \\nTest Summary: | Pass\
    \  Error  Total\\ntest set      |    1      3      4\\n'"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmpln5zguy0.jl:12\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8s71krxo.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp8s71krxo.jl:8\n   [9] top-level scope at /tmp/tmp8s71krxo.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp8s71krxo.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp8s71krxo.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp8s71krxo.jl:8\n\
    \   [9] top-level scope at /tmp/tmp8s71krxo.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp8s71krxo.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp8s71krxo.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp8s71krxo.jl:8\n\
    \   [9] top-level scope at /tmp/tmp8s71krxo.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp8s71krxo.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8s71krxo.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmparxpg6o5.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmparxpg6o5.jl:8\n   [9] top-level scope at /tmp/tmparxpg6o5.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmparxpg6o5.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmparxpg6o5.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmparxpg6o5.jl:8\n\
    \   [9] top-level scope at /tmp/tmparxpg6o5.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmparxpg6o5.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmparxpg6o5.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmparxpg6o5.jl:8\n\
    \   [9] top-level scope at /tmp/tmparxpg6o5.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmparxpg6o5.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmparxpg6o5.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpc_9xo_kt.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpc_9xo_kt.jl:8\n   [9] top-level scope at /tmp/tmpc_9xo_kt.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpc_9xo_kt.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpc_9xo_kt.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpc_9xo_kt.jl:8\n\
    \   [9] top-level scope at /tmp/tmpc_9xo_kt.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpc_9xo_kt.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpc_9xo_kt.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpc_9xo_kt.jl:8\n\
    \   [9] top-level scope at /tmp/tmpc_9xo_kt.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpc_9xo_kt.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc_9xo_kt.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxh7y8luv.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpxh7y8luv.jl:8\n   [9] top-level scope at /tmp/tmpxh7y8luv.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpxh7y8luv.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpxh7y8luv.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpxh7y8luv.jl:8\n\
    \   [9] top-level scope at /tmp/tmpxh7y8luv.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpxh7y8luv.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpxh7y8luv.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpxh7y8luv.jl:8\n\
    \   [9] top-level scope at /tmp/tmpxh7y8luv.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpxh7y8luv.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxh7y8luv.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpj9iqhus8.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpj9iqhus8.jl:8\n   [9] top-level scope at /tmp/tmpj9iqhus8.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpj9iqhus8.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpj9iqhus8.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpj9iqhus8.jl:8\n\
    \   [9] top-level scope at /tmp/tmpj9iqhus8.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpj9iqhus8.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpj9iqhus8.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpj9iqhus8.jl:8\n\
    \   [9] top-level scope at /tmp/tmpj9iqhus8.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpj9iqhus8.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj9iqhus8.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmwy1jfyt.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmpmwy1jfyt.jl:8\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpmwy1jfyt.jl:8\n\
    \   [4] top-level scope at /tmp/tmpmwy1jfyt.jl:16\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpmwy1jfyt.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpmwy1jfyt.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains not defined\n\
    \  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmpmwy1jfyt.jl:8\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpmwy1jfyt.jl:8\n\
    \   [4] top-level scope at /tmp/tmpmwy1jfyt.jl:17\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpmwy1jfyt.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpmwy1jfyt.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  UndefVarError: contains not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"\
    {String})(::String) at /tmp/tmpmwy1jfyt.jl:8\n   [2] filter(::var\"#3#4\"{String},\
    \ ::Array{String,1}) at ./array.jl:2375\n   [3] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpmwy1jfyt.jl:8\n   [4] top-level scope at /tmp/tmpmwy1jfyt.jl:18\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpmwy1jfyt.jl:14\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmwy1jfyt.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6hwwxotc.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp6hwwxotc.jl:8\n   [9] top-level scope at /tmp/tmp6hwwxotc.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp6hwwxotc.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp6hwwxotc.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp6hwwxotc.jl:8\n\
    \   [9] top-level scope at /tmp/tmp6hwwxotc.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp6hwwxotc.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp6hwwxotc.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp6hwwxotc.jl:8\n\
    \   [9] top-level scope at /tmp/tmp6hwwxotc.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp6hwwxotc.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6hwwxotc.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpph79chv4.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpph79chv4.jl:8\n   [9] top-level scope at /tmp/tmpph79chv4.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpph79chv4.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpph79chv4.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpph79chv4.jl:8\n\
    \   [9] top-level scope at /tmp/tmpph79chv4.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpph79chv4.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpph79chv4.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpph79chv4.jl:8\n\
    \   [9] top-level scope at /tmp/tmpph79chv4.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpph79chv4.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpph79chv4.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpofp2x6_d.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpofp2x6_d.jl:8\n   [9] top-level scope at /tmp/tmpofp2x6_d.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpofp2x6_d.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpofp2x6_d.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpofp2x6_d.jl:8\n\
    \   [9] top-level scope at /tmp/tmpofp2x6_d.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpofp2x6_d.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpofp2x6_d.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpofp2x6_d.jl:8\n\
    \   [9] top-level scope at /tmp/tmpofp2x6_d.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpofp2x6_d.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpofp2x6_d.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpiv5qjqmo.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpiv5qjqmo.jl:8\n   [9] top-level scope at /tmp/tmpiv5qjqmo.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpiv5qjqmo.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpiv5qjqmo.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpiv5qjqmo.jl:8\n\
    \   [9] top-level scope at /tmp/tmpiv5qjqmo.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpiv5qjqmo.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpiv5qjqmo.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpiv5qjqmo.jl:8\n\
    \   [9] top-level scope at /tmp/tmpiv5qjqmo.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpiv5qjqmo.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiv5qjqmo.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvyxva_vg.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpvyxva_vg.jl:8\n   [9] top-level scope at /tmp/tmpvyxva_vg.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpvyxva_vg.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpvyxva_vg.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpvyxva_vg.jl:8\n\
    \   [9] top-level scope at /tmp/tmpvyxva_vg.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpvyxva_vg.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpvyxva_vg.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpvyxva_vg.jl:8\n\
    \   [9] top-level scope at /tmp/tmpvyxva_vg.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpvyxva_vg.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvyxva_vg.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp76lrsspt.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmp76lrsspt.jl:8\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp76lrsspt.jl:8\n\
    \   [4] top-level scope at /tmp/tmp76lrsspt.jl:16\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp76lrsspt.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp76lrsspt.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains not defined\n\
    \  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmp76lrsspt.jl:8\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp76lrsspt.jl:8\n\
    \   [4] top-level scope at /tmp/tmp76lrsspt.jl:17\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp76lrsspt.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp76lrsspt.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  UndefVarError: contains not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"\
    {String})(::String) at /tmp/tmp76lrsspt.jl:8\n   [2] filter(::var\"#3#4\"{String},\
    \ ::Array{String,1}) at ./array.jl:2375\n   [3] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp76lrsspt.jl:8\n   [4] top-level scope at /tmp/tmp76lrsspt.jl:18\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp76lrsspt.jl:14\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp76lrsspt.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzv74kpmh.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmpzv74kpmh.jl:8\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpzv74kpmh.jl:8\n\
    \   [4] top-level scope at /tmp/tmpzv74kpmh.jl:16\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpzv74kpmh.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpzv74kpmh.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: contains not defined\n\
    \  Stacktrace:\n   [1] (::var\"#3#4\"{String})(::String) at /tmp/tmpzv74kpmh.jl:8\n\
    \   [2] filter(::var\"#3#4\"{String}, ::Array{String,1}) at ./array.jl:2375\n\
    \   [3] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpzv74kpmh.jl:8\n\
    \   [4] top-level scope at /tmp/tmpzv74kpmh.jl:17\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpzv74kpmh.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpzv74kpmh.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  UndefVarError: contains not defined\n  Stacktrace:\n   [1] (::var\"#3#4\"\
    {String})(::String) at /tmp/tmpzv74kpmh.jl:8\n   [2] filter(::var\"#3#4\"{String},\
    \ ::Array{String,1}) at ./array.jl:2375\n   [3] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpzv74kpmh.jl:8\n   [4] top-level scope at /tmp/tmpzv74kpmh.jl:18\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpzv74kpmh.jl:14\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzv74kpmh.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8x989u_q.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp8x989u_q.jl:8\n   [9] top-level scope at /tmp/tmp8x989u_q.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp8x989u_q.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp8x989u_q.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp8x989u_q.jl:8\n\
    \   [9] top-level scope at /tmp/tmp8x989u_q.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp8x989u_q.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp8x989u_q.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp8x989u_q.jl:8\n\
    \   [9] top-level scope at /tmp/tmp8x989u_q.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp8x989u_q.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8x989u_q.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzov3n500.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpzov3n500.jl:8\n   [9] top-level scope at /tmp/tmpzov3n500.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpzov3n500.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpzov3n500.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpzov3n500.jl:8\n\
    \   [9] top-level scope at /tmp/tmpzov3n500.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpzov3n500.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpzov3n500.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpzov3n500.jl:8\n\
    \   [9] top-level scope at /tmp/tmpzov3n500.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpzov3n500.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzov3n500.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwq0u_gca.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpwq0u_gca.jl:8\n   [9] top-level scope at /tmp/tmpwq0u_gca.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpwq0u_gca.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpwq0u_gca.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpwq0u_gca.jl:8\n\
    \   [9] top-level scope at /tmp/tmpwq0u_gca.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpwq0u_gca.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpwq0u_gca.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpwq0u_gca.jl:8\n\
    \   [9] top-level scope at /tmp/tmpwq0u_gca.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpwq0u_gca.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwq0u_gca.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3ow0u41y.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp3ow0u41y.jl:8\n   [9] top-level scope at /tmp/tmp3ow0u41y.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp3ow0u41y.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp3ow0u41y.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp3ow0u41y.jl:8\n\
    \   [9] top-level scope at /tmp/tmp3ow0u41y.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp3ow0u41y.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp3ow0u41y.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp3ow0u41y.jl:8\n\
    \   [9] top-level scope at /tmp/tmp3ow0u41y.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp3ow0u41y.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3ow0u41y.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpl8zpb72l.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpl8zpb72l.jl:8\n   [9] top-level scope at /tmp/tmpl8zpb72l.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpl8zpb72l.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpl8zpb72l.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpl8zpb72l.jl:8\n\
    \   [9] top-level scope at /tmp/tmpl8zpb72l.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpl8zpb72l.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpl8zpb72l.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpl8zpb72l.jl:8\n\
    \   [9] top-level scope at /tmp/tmpl8zpb72l.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpl8zpb72l.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl8zpb72l.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0e7ulezv.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp0e7ulezv.jl:8\n   [9] top-level scope at /tmp/tmp0e7ulezv.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp0e7ulezv.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp0e7ulezv.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp0e7ulezv.jl:8\n\
    \   [9] top-level scope at /tmp/tmp0e7ulezv.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp0e7ulezv.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp0e7ulezv.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp0e7ulezv.jl:8\n\
    \   [9] top-level scope at /tmp/tmp0e7ulezv.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp0e7ulezv.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0e7ulezv.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpn1bmnbqa.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpn1bmnbqa.jl:8\n   [9] top-level scope at /tmp/tmpn1bmnbqa.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpn1bmnbqa.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpn1bmnbqa.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpn1bmnbqa.jl:8\n\
    \   [9] top-level scope at /tmp/tmpn1bmnbqa.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpn1bmnbqa.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpn1bmnbqa.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpn1bmnbqa.jl:8\n\
    \   [9] top-level scope at /tmp/tmpn1bmnbqa.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpn1bmnbqa.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn1bmnbqa.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwziqhvrs.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpwziqhvrs.jl:8\n   [9] top-level scope at /tmp/tmpwziqhvrs.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpwziqhvrs.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpwziqhvrs.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpwziqhvrs.jl:8\n\
    \   [9] top-level scope at /tmp/tmpwziqhvrs.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpwziqhvrs.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpwziqhvrs.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpwziqhvrs.jl:8\n\
    \   [9] top-level scope at /tmp/tmpwziqhvrs.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpwziqhvrs.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwziqhvrs.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9mvka_au.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp9mvka_au.jl:8\n   [9] top-level scope at /tmp/tmp9mvka_au.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp9mvka_au.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp9mvka_au.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp9mvka_au.jl:8\n\
    \   [9] top-level scope at /tmp/tmp9mvka_au.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp9mvka_au.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp9mvka_au.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp9mvka_au.jl:8\n\
    \   [9] top-level scope at /tmp/tmp9mvka_au.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp9mvka_au.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9mvka_au.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcxyxx0np.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpcxyxx0np.jl:8\n   [9] top-level scope at /tmp/tmpcxyxx0np.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpcxyxx0np.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpcxyxx0np.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpcxyxx0np.jl:8\n\
    \   [9] top-level scope at /tmp/tmpcxyxx0np.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpcxyxx0np.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpcxyxx0np.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpcxyxx0np.jl:8\n\
    \   [9] top-level scope at /tmp/tmpcxyxx0np.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpcxyxx0np.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcxyxx0np.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpz635xrsh.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmpz635xrsh.jl:8\n   [9] top-level scope at /tmp/tmpz635xrsh.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpz635xrsh.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpz635xrsh.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpz635xrsh.jl:8\n\
    \   [9] top-level scope at /tmp/tmpz635xrsh.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpz635xrsh.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpz635xrsh.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmpz635xrsh.jl:8\n\
    \   [9] top-level scope at /tmp/tmpz635xrsh.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpz635xrsh.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz635xrsh.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0t6ii6l0.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n\
    \   [2] in(::String, ::String) at ./strings/search.jl:533\n   [3] (::var\"#3#4\"\
    {String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430 [inlined]\n\
    \   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at ./array.jl:726\
    \ [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8] filter_by_substring(::Array{String,1},\
    \ ::String) at /tmp/tmp0t6ii6l0.jl:8\n   [9] top-level scope at /tmp/tmp0t6ii6l0.jl:16\n\
    \   [10] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp0t6ii6l0.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp0t6ii6l0.jl:17\n  Test threw exception\n  Expression: candidate([\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"\
    xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for string containment\n\
    \  Stacktrace:\n   [1] error(::String) at ./error.jl:33\n   [2] in(::String, ::String)\
    \ at ./strings/search.jl:533\n   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n\
    \   [4] iterate at ./iterators.jl:430 [inlined]\n   [5] iterate at ./generator.jl:44\
    \ [inlined]\n   [6] grow_to! at ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663\
    \ [inlined]\n   [8] filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp0t6ii6l0.jl:8\n\
    \   [9] top-level scope at /tmp/tmp0t6ii6l0.jl:17\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp0t6ii6l0.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp0t6ii6l0.jl:18\n  Test threw exception\n  Expression: candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ]\n  use occursin(x, y) for string containment\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] in(::String, ::String) at ./strings/search.jl:533\n\
    \   [3] (::var\"#3#4\"{String})(::String) at ./none:0\n   [4] iterate at ./iterators.jl:430\
    \ [inlined]\n   [5] iterate at ./generator.jl:44 [inlined]\n   [6] grow_to! at\
    \ ./array.jl:726 [inlined]\n   [7] collect at ./array.jl:663 [inlined]\n   [8]\
    \ filter_by_substring(::Array{String,1}, ::String) at /tmp/tmp0t6ii6l0.jl:8\n\
    \   [9] top-level scope at /tmp/tmp0t6ii6l0.jl:18\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp0t6ii6l0.jl:14\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0t6ii6l0.jl:12\n"
  exit_code: 1
  status: SyntaxError
