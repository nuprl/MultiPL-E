name: HumanEval_128_prod_signs
language: julia
results:
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i == 0\n            continue\n        end\n        if i > 0\n    \
    \        prod *= 1\n        else\n            prod *= -1\n        end\n      \
    \  sum += abs(i)\n    end\n    return prod * sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpiwgwo7a6.jl:37\n  Expression: candidate([0,\
    \ 1]) == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope at /tmp/tmpiwgwo7a6.jl:37\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpiwgwo7a6.jl:35\ntest set: Test Failed at /tmp/tmpiwgwo7a6.jl:43\n\
    \  Expression: candidate([-1, 1, 1, 0]) == 0\n   Evaluated: -3 == 0\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpiwgwo7a6.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpiwgwo7a6.jl:35\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiwgwo7a6.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    sum = 0\n    prod = 1\n    for i in arr\n\
    \        sum += abs(i)\n        prod *= sign(i)\n    end\n    return sum * prod\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    return prod(sign.(arr)) * sum(abs.(arr))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod_signs = 1\n    sum_magnitudes = 0\n\
    \    for i in arr\n        if i > 0\n            prod_signs *= 1\n        elseif\
    \ i < 0\n            prod_signs *= -1\n        else\n            prod_signs *=\
    \ 0\n        end\n        sum_magnitudes += abs(i)\n    end\n    return prod_signs\
    \ * sum_magnitudes\nend\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    signs = [sign(x) for x in arr]\n    return\
    \ prod(signs) * sum(abs.(arr))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i == 0\n            continue\n        end\n        sum += abs(i)\n\
    \        prod *= sign(i)\n    end\n    return prod * sum\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) ==\
    \ -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1,\
    \ 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc_np2k08.jl:33\n  Expression: candidate([0,\
    \ 1]) == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope at /tmp/tmpc_np2k08.jl:33\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc_np2k08.jl:31\ntest set: Test Failed at /tmp/tmpc_np2k08.jl:39\n\
    \  Expression: candidate([-1, 1, 1, 0]) == 0\n   Evaluated: -3 == 0\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpc_np2k08.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc_np2k08.jl:31\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc_np2k08.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    for i in arr\n        if i\
    \ > 0\n            prod *= 1\n        elseif i < 0\n            prod *= -1\n \
    \       else\n            prod *= 0\n        end\n    end\n    sum = 0\n    for\
    \ i in arr\n        sum += abs(i)\n    end\n    return sum * prod\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2,\
    \ 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1,\
    \ 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t\
    @test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    product = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            product *= 1\n        elseif i < 0\n          \
    \  product *= -1\n        else\n            product *= 0\n        end\n      \
    \  sum += abs(i)\n    end\n    return sum * product\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i == 0\n            continue\n        end\n        prod *= sign(i)\n\
    \        sum += abs(i)\n    end\n    return prod * sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpupvo6plg.jl:33\n  Expression: candidate([0,\
    \ 1]) == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope at /tmp/tmpupvo6plg.jl:33\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpupvo6plg.jl:31\ntest set: Test Failed at /tmp/tmpupvo6plg.jl:39\n\
    \  Expression: candidate([-1, 1, 1, 0]) == 0\n   Evaluated: -3 == 0\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpupvo6plg.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpupvo6plg.jl:31\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpupvo6plg.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if length(arr) ==\
    \ 0\n        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in\
    \ arr\n        if i > 0\n            prod *= 1\n        elseif i < 0\n       \
    \     prod *= -1\n        else\n            prod *= 0\n        end\n        sum\
    \ += abs(i)\n    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if length(arr) ==\
    \ 0\n        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in\
    \ arr\n        if i > 0\n            prod *= 1\n        elseif i < 0\n       \
    \     prod *= -1\n        else\n            prod *= 0\n        end\n        sum\
    \ += abs(i)\n    end\n    return prod * sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod_signs = 1\n    sum_magnitudes = 0\n\
    \    for i in arr\n        if i > 0\n            prod_signs *= 1\n        elseif\
    \ i < 0\n            prod_signs *= -1\n        else\n            prod_signs *=\
    \ 0\n        end\n        sum_magnitudes += abs(i)\n    end\n    return prod_signs\
    \ * sum_magnitudes\nend\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if length(arr) ==\
    \ 0\n        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in\
    \ arr\n        if i > 0\n            prod *= 1\n        elseif i < 0\n       \
    \     prod *= -1\n        else\n            prod *= 0\n        end\n        sum\
    \ += abs(i)\n    end\n    return prod * sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i == 0\n            continue\n        end\n        prod *= sign(i)\n\
    \        sum += abs(i)\n    end\n    return prod * sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmppklxwo4d.jl:33\\n  Expression: candidate([0,\
    \ 1]) == 0\\n   Evaluated: 1 == 0\\nStacktrace:\\n [1] top-level scope at /tmp/tmppklxwo4d.jl:33\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmppklxwo4d.jl:31\\ntest set: Test Failed at /tmp/tmppklxwo4d.jl:39\\\
    n  Expression: candidate([-1, 1, 1, 0]) == 0\\n   Evaluated: -3 == 0\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmppklxwo4d.jl:39\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmppklxwo4d.jl:31\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i == 0\n            prod *= 0\n        elseif i > 0\n            prod\
    \ *= 1\n        else\n            prod *= -1\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if length(arr) ==\
    \ 0\n        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in\
    \ arr\n        if i > 0\n            prod *= 1\n        elseif i < 0\n       \
    \     prod *= -1\n        else\n            prod *= 0\n        end\n        sum\
    \ += abs(i)\n    end\n    return prod * sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if length(arr) ==\
    \ 0\n        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in\
    \ arr\n        if i > 0\n            prod *= 1\n        elseif i < 0\n       \
    \     prod *= -1\n        else\n            prod *= 0\n        end\n        sum\
    \ += abs(i)\n    end\n    return prod * sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    for i in arr\n        if i\
    \ > 0\n            prod *= 1\n        elseif i < 0\n            prod *= -1\n \
    \       else\n            prod *= 0\n        end\n    end\n    sum = 0\n    for\
    \ i in arr\n        sum += abs(i)\n    end\n    return sum * prod\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2,\
    \ 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1,\
    \ 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t\
    @test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if length(arr) ==\
    \ 0\n        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in\
    \ arr\n        if i > 0\n            prod *= 1\n        elseif i < 0\n       \
    \     prod *= -1\n        else\n            prod *= 0\n        end\n        sum\
    \ += abs(i)\n    end\n    return prod * sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i == 0\n            continue\n        end\n        if i > 0\n    \
    \        prod *= 1\n        else\n            prod *= -1\n        end\n      \
    \  sum += abs(i)\n    end\n    return prod * sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa082m5xh.jl:37\n  Expression: candidate([0,\
    \ 1]) == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope at /tmp/tmpa082m5xh.jl:37\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa082m5xh.jl:35\ntest set: Test Failed at /tmp/tmpa082m5xh.jl:43\n\
    \  Expression: candidate([-1, 1, 1, 0]) == 0\n   Evaluated: -3 == 0\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpa082m5xh.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa082m5xh.jl:35\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa082m5xh.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    signs = [sign(x) for x in arr]\n    return\
    \ prod(signs) * sum(abs.(arr))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod_signs = 1\n    sum_magnitudes = 0\n\
    \    for i in arr\n        if i > 0\n            prod_signs *= 1\n        elseif\
    \ i < 0\n            prod_signs *= -1\n        else\n            prod_signs *=\
    \ 0\n        end\n        sum_magnitudes += abs(i)\n    end\n    return prod_signs\
    \ * sum_magnitudes\nend\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i == 0\n            continue\n        end\n        prod *= sign(i)\n\
    \        sum += abs(i)\n    end\n    return prod * sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0gle8r1i.jl:33\n  Expression: candidate([0,\
    \ 1]) == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope at /tmp/tmp0gle8r1i.jl:33\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0gle8r1i.jl:31\ntest set: Test Failed at /tmp/tmp0gle8r1i.jl:39\n\
    \  Expression: candidate([-1, 1, 1, 0]) == 0\n   Evaluated: -3 == 0\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0gle8r1i.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0gle8r1i.jl:31\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0gle8r1i.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i == 0\n            continue\n        end\n        prod *= sign(i)\n\
    \        sum += abs(i)\n    end\n    return prod * sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_n0j18p8.jl:33\n  Expression: candidate([0,\
    \ 1]) == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope at /tmp/tmp_n0j18p8.jl:33\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_n0j18p8.jl:31\ntest set: Test Failed at /tmp/tmp_n0j18p8.jl:39\n\
    \  Expression: candidate([-1, 1, 1, 0]) == 0\n   Evaluated: -3 == 0\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_n0j18p8.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_n0j18p8.jl:31\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_n0j18p8.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    product = 1\n    sum = 0\n    for i in arr\n\
    \        if i < 0\n            product *= -1\n        elseif i == 0\n        \
    \    product *= 0\n        end\n        sum += abs(i)\n    end\n    return sum\
    \ * product\nend\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t\
    @test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    for i in arr\n        if i\
    \ > 0\n            prod *= 1\n        elseif i < 0\n            prod *= -1\n \
    \       else\n            prod *= 0\n        end\n    end\n    return sum(abs.(arr))\
    \ * prod\nend\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i == 0\n            continue\n        end\n        prod *= sign(i)\n\
    \        sum += abs(i)\n    end\n    return prod * sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6tjdjx0b.jl:33\n  Expression: candidate([0,\
    \ 1]) == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope at /tmp/tmp6tjdjx0b.jl:33\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6tjdjx0b.jl:31\ntest set: Test Failed at /tmp/tmp6tjdjx0b.jl:39\n\
    \  Expression: candidate([-1, 1, 1, 0]) == 0\n   Evaluated: -3 == 0\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6tjdjx0b.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6tjdjx0b.jl:31\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6tjdjx0b.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if length(arr) ==\
    \ 0\n        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in\
    \ arr\n        if i == 0\n            continue\n        end\n        prod *= sign(i)\n\
    \        sum += abs(i)\n    end\n    return prod * sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpyncrz66e.jl:33\\n  Expression: candidate([0,\
    \ 1]) == 0\\n   Evaluated: 1 == 0\\nStacktrace:\\n [1] top-level scope at /tmp/tmpyncrz66e.jl:33\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpyncrz66e.jl:31\\ntest set: Test Failed at /tmp/tmpyncrz66e.jl:39\\\
    n  Expression: candidate([-1, 1, 1, 0]) == 0\\n   Evaluated: -3 == 0\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpyncrz66e.jl:39\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpyncrz66e.jl:31\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    6     2      8\\n'"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    return prod(sign.(arr)) * sum(abs.(arr))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    return prod(sign.(arr)) * sum(abs.(arr))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if length(arr) ==\
    \ 0\n        return nothing\n    end\n    signs = [sign(x) for x in arr]\n   \
    \ return sum(abs.(arr)) * prod(signs)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i < 0\n            prod *= -1\n        elseif i == 0\n           \
    \ prod *= 0\n        end\n        sum += abs(i)\n    end\n    return sum * prod\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if length(arr) ==\
    \ 0\n        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in\
    \ arr\n        if i > 0\n            prod *= 1\n        elseif i < 0\n       \
    \     prod *= -1\n        else\n            prod *= 0\n        end\n        sum\
    \ += abs(i)\n    end\n    return prod * sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i == 0\n            continue\n        end\n        prod *= sign(i)\n\
    \        sum += abs(i)\n    end\n    return prod * sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5fppd438.jl:33\n  Expression: candidate([0,\
    \ 1]) == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope at /tmp/tmp5fppd438.jl:33\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5fppd438.jl:31\ntest set: Test Failed at /tmp/tmp5fppd438.jl:39\n\
    \  Expression: candidate([-1, 1, 1, 0]) == 0\n   Evaluated: -3 == 0\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5fppd438.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5fppd438.jl:31\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5fppd438.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    product = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            product *= 1\n        elseif i < 0\n          \
    \  product *= -1\n        else\n            product *= 0\n        end\n      \
    \  sum += abs(i)\n    end\n    return sum * product\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    for i in arr\n        if i\
    \ > 0\n            prod *= 1\n        elseif i < 0\n            prod *= -1\n \
    \       else\n            prod *= 0\n        end\n    end\n    return sum(abs.(arr))\
    \ * prod\nend\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i == 0\n            continue\n        end\n        prod *= sign(i)\n\
    \        sum += abs(i)\n    end\n    return prod * sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp74sf_7kj.jl:33\n  Expression: candidate([0,\
    \ 1]) == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope at /tmp/tmp74sf_7kj.jl:33\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp74sf_7kj.jl:31\ntest set: Test Failed at /tmp/tmp74sf_7kj.jl:39\n\
    \  Expression: candidate([-1, 1, 1, 0]) == 0\n   Evaluated: -3 == 0\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp74sf_7kj.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp74sf_7kj.jl:31\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp74sf_7kj.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    return prod(sign.(arr)) * sum(abs.(arr))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    signs = map(x -> sign(x), arr)\n    return\
    \ sum(abs.(arr)) * prod(signs)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        prod *= sign(i)\n        sum += abs(i)\n    end\n    return prod * sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if length(arr) ==\
    \ 0\n        return nothing\n    end\n    prod = 1\n    for i in arr\n       \
    \ if i > 0\n            prod *= 1\n        elseif i < 0\n            prod *= -1\n\
    \        else\n            prod *= 0\n        end\n    end\n    return prod *\
    \ sum(abs.(arr))\nend\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i == 0\n            continue\n        end\n        prod *= sign(i)\n\
    \        sum += abs(i)\n    end\n    return prod * sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph21rs1gg.jl:33\n  Expression: candidate([0,\
    \ 1]) == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope at /tmp/tmph21rs1gg.jl:33\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph21rs1gg.jl:31\ntest set: Test Failed at /tmp/tmph21rs1gg.jl:39\n\
    \  Expression: candidate([-1, 1, 1, 0]) == 0\n   Evaluated: -3 == 0\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmph21rs1gg.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph21rs1gg.jl:31\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph21rs1gg.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod_signs = 1\n    sum_magnitudes = 0\n\
    \    for i in arr\n        if i > 0\n            prod_signs *= 1\n        elseif\
    \ i < 0\n            prod_signs *= -1\n        else\n            prod_signs *=\
    \ 0\n        end\n        sum_magnitudes += abs(i)\n    end\n    return prod_signs\
    \ * sum_magnitudes\nend\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    return prod(sign.(arr)) * sum(abs.(arr))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if length(arr) ==\
    \ 0\n        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in\
    \ arr\n        if i > 0\n            prod *= 1\n        elseif i < 0\n       \
    \     prod *= -1\n        else\n            prod *= 0\n        end\n        sum\
    \ += abs(i)\n    end\n    return prod * sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    # Your code here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp9fbkpfnm.jl:20\\n  Expression: candidate([1,\
    \ 2, 2, -4]) == -9\\n   Evaluated: nothing == -9\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmp9fbkpfnm.jl:20\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp9fbkpfnm.jl:19\\ntest set: Test Failed at /tmp/tmp9fbkpfnm.jl:21\\\
    n  Expression: candidate([0, 1]) == 0\\n   Evaluated: nothing == 0\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp9fbkpfnm.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp9fbkpfnm.jl:19\\ntest set: Test Failed at /tmp/tmp9fbkpfnm.jl:22\\\
    n  Expression: candidate([1, 1, 1, 2, 3, -1, 1]) == -10\\n   Evaluated: nothing\
    \ == -10\\nStacktrace:\\n [1] top-level scope at /tmp/tmp9fbkpfnm.jl:22\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp9fbkpfnm.jl:19\\ntest set: Test Failed at /tmp/tmp9fbkpfnm.jl:24\\\
    n  Expression: candidate([2, 4, 1, 2, -1, -1, 9]) == 20\\n   Evaluated: nothing\
    \ == 20\\nStacktrace:\\n [1] top-level scope at /tmp/tmp9fbkpfnm.jl:24\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp9fbkpfnm.jl:19\\ntest set: Test Failed at /tmp/tmp9fbkpfnm.jl:25\\\
    n  Expression: candidate([-1, 1, -1, 1]) == 4\\n   Evaluated: nothing == 4\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp9fbkpfnm.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp9fbkpfnm.jl:19\\ntest set: Test Failed at /tmp/tmp9fbkpfnm.jl:26\\\
    n  Expression: candidate([-1, 1, 1, 1]) == -4\\n   Evaluated: nothing == -4\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmp9fbkpfnm.jl:26\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp9fbkpfnm.jl:19\\ntest set: Test Failed at /tmp/tmp9fbkpfnm.jl:27\\\
    n  Expression: candidate([-1, 1, 1, 0]) == 0\\n   Evaluated: nothing == 0\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp9fbkpfnm.jl:27\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp9fbkpfnm.jl:19\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    1     7      8\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    sum_magnitudes = sum(abs.(arr))\n    product_signs\
    \ = prod(sign.(arr))\n    return sum_magnitudes * product_signs\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4])\
    \ == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1,\
    \ 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i == 0\n            continue\n        end\n        prod *= sign(i)\n\
    \        sum += abs(i)\n    end\n    return prod * sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp1tat0bol.jl:33\\n  Expression: candidate([0,\
    \ 1]) == 0\\n   Evaluated: 1 == 0\\nStacktrace:\\n [1] top-level scope at /tmp/tmp1tat0bol.jl:33\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp1tat0bol.jl:31\\ntest set: Test Failed at /tmp/tmp1tat0bol.jl:39\\\
    n  Expression: candidate([-1, 1, 1, 0]) == 0\\n   Evaluated: -3 == 0\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp1tat0bol.jl:39\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp1tat0bol.jl:31\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if length(arr) ==\
    \ 0\n        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in\
    \ arr\n        if i > 0\n            prod *= 1\n        elseif i < 0\n       \
    \     prod *= -1\n        else\n            prod *= 0\n        end\n        sum\
    \ += abs(i)\n    end\n    return prod * sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod_signs = 1\n    sum_magnitudes = 0\n\
    \    for i in arr\n        if i > 0\n            prod_signs *= 1\n        elseif\
    \ i < 0\n            prod_signs *= -1\n        else\n            prod_signs *=\
    \ 0\n        end\n        sum_magnitudes += abs(i)\n    end\n    prod_signs *\
    \ sum_magnitudes\nend\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    return prod(sign.(arr)) * sum(abs.(arr))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if length(arr) ==\
    \ 0\n        return nothing\n    end\n    signs = [sign(x) for x in arr]\n   \
    \ return sum(abs.(arr)) * prod(signs)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i == 0\n            continue\n        end\n        prod *= sign(i)\n\
    \        sum += abs(i)\n    end\n    return prod * sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9f64qxdq.jl:33\n  Expression: candidate([0,\
    \ 1]) == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope at /tmp/tmp9f64qxdq.jl:33\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9f64qxdq.jl:31\ntest set: Test Failed at /tmp/tmp9f64qxdq.jl:39\n\
    \  Expression: candidate([-1, 1, 1, 0]) == 0\n   Evaluated: -3 == 0\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9f64qxdq.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9f64qxdq.jl:31\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9f64qxdq.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    return prod(sign.(arr)) * sum(abs.(arr))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    signs = [sign(x) for x in arr]\n    return\
    \ prod(signs) * sum(abs.(arr))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if length(arr) ==\
    \ 0\n        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in\
    \ arr\n        if i > 0\n            prod *= 1\n        elseif i < 0\n       \
    \     prod *= -1\n        else\n            prod *= 0\n        end\n        sum\
    \ += abs(i)\n    end\n    return prod * sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    return prod(sign.(arr)) * sum(abs.(arr))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    for i in arr\n        if i\
    \ > 0\n            prod *= 1\n        elseif i < 0\n            prod *= -1\n \
    \       else\n            prod *= 0\n        end\n    end\n    return sum(abs.(arr))\
    \ * prod\nend\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    signs = [sign(x) for x in arr]\n    return\
    \ sum(abs.(arr)) * prod(signs)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    signs = [sign(x) for x in arr]\n    return\
    \ prod(signs) * sum(abs.(arr))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    s = 1\n    for i in arr\n        if i ==\
    \ 0\n            s = 0\n            break\n        elseif i < 0\n            s\
    \ *= -1\n        end\n    end\n    return s * sum(abs.(arr))\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4])\
    \ == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1,\
    \ 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i == 0\n            continue\n        end\n        prod *= sign(i)\n\
    \        sum += abs(i)\n    end\n    return prod * sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpazmoiglz.jl:33\\n  Expression: candidate([0,\
    \ 1]) == 0\\n   Evaluated: 1 == 0\\nStacktrace:\\n [1] top-level scope at /tmp/tmpazmoiglz.jl:33\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpazmoiglz.jl:31\\ntest set: Test Failed at /tmp/tmpazmoiglz.jl:39\\\
    n  Expression: candidate([-1, 1, 1, 0]) == 0\\n   Evaluated: -3 == 0\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpazmoiglz.jl:39\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpazmoiglz.jl:31\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    6     2      8\\n'"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod_signs = 1\n    sum_magnitudes = 0\n\
    \    for i in arr\n        if i > 0\n            prod_signs *= 1\n        elseif\
    \ i < 0\n            prod_signs *= -1\n        else\n            prod_signs *=\
    \ 0\n        end\n        sum_magnitudes += abs(i)\n    end\n    return prod_signs\
    \ * sum_magnitudes\nend\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    return sum(abs.(arr)) * prod(sign.(arr))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    return prod(sign.(arr)) * sum(abs.(arr))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    product = 1\n    sum = 0\n    for i in arr\n\
    \        if i == 0\n            continue\n        end\n        if i > 0\n    \
    \        product *= 1\n        else\n            product *= -1\n        end\n\
    \        sum += abs(i)\n    end\n    return product * sum\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) ==\
    \ -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1,\
    \ 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp9h1ueqqg.jl:37\\n  Expression: candidate([0,\
    \ 1]) == 0\\n   Evaluated: 1 == 0\\nStacktrace:\\n [1] top-level scope at /tmp/tmp9h1ueqqg.jl:37\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp9h1ueqqg.jl:35\\ntest set: Test Failed at /tmp/tmp9h1ueqqg.jl:43\\\
    n  Expression: candidate([-1, 1, 1, 0]) == 0\\n   Evaluated: -3 == 0\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp9h1ueqqg.jl:43\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp9h1ueqqg.jl:35\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    6     2      8\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    product = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            product *= 1\n        elseif i < 0\n          \
    \  product *= -1\n        else\n            product *= 0\n        end\n      \
    \  sum += abs(i)\n    end\n    return sum * product\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i == 0\n            continue\n        end\n        prod *= sign(i)\n\
    \        sum += abs(i)\n    end\n    return prod * sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp77c09ui3.jl:33\n  Expression: candidate([0,\
    \ 1]) == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope at /tmp/tmp77c09ui3.jl:33\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp77c09ui3.jl:31\ntest set: Test Failed at /tmp/tmp77c09ui3.jl:39\n\
    \  Expression: candidate([-1, 1, 1, 0]) == 0\n   Evaluated: -3 == 0\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp77c09ui3.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp77c09ui3.jl:31\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp77c09ui3.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod_signs = 1\n    sum_magnitudes = 0\n\
    \    for i in arr\n        if i > 0\n            prod_signs *= 1\n        elseif\
    \ i < 0\n            prod_signs *= -1\n        else\n            prod_signs *=\
    \ 0\n        end\n        sum_magnitudes += abs(i)\n    end\n    return prod_signs\
    \ * sum_magnitudes\nend\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod_signs = 1\n    sum_magnitudes = 0\n\
    \    for i in arr\n        if i == 0\n            continue\n        end\n    \
    \    prod_signs *= sign(i)\n        sum_magnitudes += abs(i)\n    end\n    return\
    \ prod_signs * sum_magnitudes\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbbvra7xu.jl:33\n  Expression: candidate([0,\
    \ 1]) == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope at /tmp/tmpbbvra7xu.jl:33\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbbvra7xu.jl:31\ntest set: Test Failed at /tmp/tmpbbvra7xu.jl:39\n\
    \  Expression: candidate([-1, 1, 1, 0]) == 0\n   Evaluated: -3 == 0\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbbvra7xu.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbbvra7xu.jl:31\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbbvra7xu.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod_signs = 1\n    sum_magnitudes = 0\n\
    \    for i in arr\n        if i > 0\n            prod_signs *= 1\n        elseif\
    \ i < 0\n            prod_signs *= -1\n        else\n            prod_signs *=\
    \ 0\n        end\n        sum_magnitudes += abs(i)\n    end\n    return prod_signs\
    \ * sum_magnitudes\nend\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if length(arr) ==\
    \ 0\n        return nothing\n    end\n    prod = 1\n    for i in arr\n       \
    \ if i == 0\n            prod *= 0\n        elseif i > 0\n            prod *=\
    \ 1\n        else\n            prod *= -1\n        end\n    end\n    return sum(abs.(arr))\
    \ * prod\nend\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    for i in arr\n        if i\
    \ > 0\n            prod *= 1\n        elseif i < 0\n            prod *= -1\n \
    \       else\n            prod *= 0\n        end\n    end\n    return prod * sum(abs.(arr))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    signs = [sign(x) for x in arr]\n    return\
    \ sum(abs.(arr)) * prod(signs)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i == 0\n            continue\n        end\n        prod *= sign(i)\n\
    \        sum += abs(i)\n    end\n    return prod * sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpvi5il5wn.jl:33\\n  Expression: candidate([0,\
    \ 1]) == 0\\n   Evaluated: 1 == 0\\nStacktrace:\\n [1] top-level scope at /tmp/tmpvi5il5wn.jl:33\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpvi5il5wn.jl:31\\ntest set: Test Failed at /tmp/tmpvi5il5wn.jl:39\\\
    n  Expression: candidate([-1, 1, 1, 0]) == 0\\n   Evaluated: -3 == 0\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpvi5il5wn.jl:39\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpvi5il5wn.jl:31\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    6     2      8\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i == 0\n            prod *= 0\n        elseif i < 0\n            prod\
    \ *= -1\n        end\n        sum += abs(i)\n    end\n    return prod * sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i == 0\n            continue\n        end\n        prod *= sign(i)\n\
    \        sum += abs(i)\n    end\n    return prod * sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0rt0_se1.jl:33\n  Expression: candidate([0,\
    \ 1]) == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope at /tmp/tmp0rt0_se1.jl:33\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0rt0_se1.jl:31\ntest set: Test Failed at /tmp/tmp0rt0_se1.jl:39\n\
    \  Expression: candidate([-1, 1, 1, 0]) == 0\n   Evaluated: -3 == 0\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0rt0_se1.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0rt0_se1.jl:31\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0rt0_se1.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if length(arr) ==\
    \ 0\n        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in\
    \ arr\n        if i == 0\n            continue\n        end\n        prod *= sign(i)\n\
    \        sum += abs(i)\n    end\n    return prod * sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6y2yzn3l.jl:33\n  Expression: candidate([0,\
    \ 1]) == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope at /tmp/tmp6y2yzn3l.jl:33\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6y2yzn3l.jl:31\ntest set: Test Failed at /tmp/tmp6y2yzn3l.jl:39\n\
    \  Expression: candidate([-1, 1, 1, 0]) == 0\n   Evaluated: -3 == 0\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6y2yzn3l.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6y2yzn3l.jl:31\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6y2yzn3l.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if length(arr) ==\
    \ 0\n        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in\
    \ arr\n        if i > 0\n            prod *= 1\n        elseif i < 0\n       \
    \     prod *= -1\n        else\n            prod *= 0\n        end\n        sum\
    \ += abs(i)\n    end\n    return prod * sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    return prod(sign.(arr)) * sum(abs.(arr))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    signs = [sign(x) for x in arr]\n    return\
    \ sum(abs.(arr)) * prod(signs)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod_signs = 1\n    sum_magnitudes = 0\n\
    \    for i in arr\n        if i > 0\n            prod_signs *= 1\n        elseif\
    \ i < 0\n            prod_signs *= -1\n        else\n            prod_signs *=\
    \ 0\n        end\n        sum_magnitudes += abs(i)\n    end\n    return prod_signs\
    \ * sum_magnitudes\nend\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if length(arr) ==\
    \ 0\n        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in\
    \ arr\n        if i > 0\n            prod *= 1\n        elseif i < 0\n       \
    \     prod *= -1\n        else\n            prod *= 0\n        end\n        sum\
    \ += abs(i)\n    end\n    return prod * sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    product = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            product *= 1\n        elseif i < 0\n          \
    \  product *= -1\n        else\n            product *= 0\n        end\n      \
    \  sum += abs(i)\n    end\n    return sum * product\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if length(arr) ==\
    \ 0\n        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in\
    \ arr\n        if i > 0\n            prod *= 1\n        elseif i < 0\n       \
    \     prod *= -1\n        else\n            prod *= 0\n        end\n        sum\
    \ += abs(i)\n    end\n    return prod * sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    for i in arr\n        if i\
    \ > 0\n            prod *= 1\n        elseif i < 0\n            prod *= -1\n \
    \       else\n            prod *= 0\n        end\n    end\n    return sum(abs.(arr))\
    \ * prod\nend\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    signs = [sign(x) for x in arr]\n    magnitudes\
    \ = [abs(x) for x in arr]\n    return sum(magnitudes) * prod(signs)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2,\
    \ 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1,\
    \ 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t\
    @test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    for i in arr\n        if i\
    \ > 0\n            prod *= 1\n        elseif i < 0\n            prod *= -1\n \
    \       else\n            prod *= 0\n        end\n    end\n    return sum(abs.(arr))\
    \ * prod\nend\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i == 0\n            prod *= 0\n        elseif i < 0\n            prod\
    \ *= -1\n        end\n        sum += abs(i)\n    end\n    return prod * sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod_signs = 1\n    sum_magnitudes = 0\n\
    \    for i in arr\n        if i > 0\n            prod_signs *= 1\n        elseif\
    \ i < 0\n            prod_signs *= -1\n        else\n            prod_signs *=\
    \ 0\n        end\n        sum_magnitudes += abs(i)\n    end\n    return prod_signs\
    \ * sum_magnitudes\nend\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if length(arr) ==\
    \ 0\n        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in\
    \ arr\n        if i > 0\n            prod *= 1\n        elseif i < 0\n       \
    \     prod *= -1\n        else\n            prod *= 0\n        end\n        sum\
    \ += abs(i)\n    end\n    return prod * sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    return prod(sign.(arr)) * sum(abs.(arr))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    for i in arr\n        if i\
    \ == 0\n            return 0\n        elseif i > 0\n            prod *= 1\n  \
    \      else\n            prod *= -1\n        end\n    end\n    return prod * sum(abs.(arr))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i == 0\n            continue\n        end\n        prod *= sign(i)\n\
    \        sum += abs(i)\n    end\n    return prod * sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4tpyi2qm.jl:33\n  Expression: candidate([0,\
    \ 1]) == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope at /tmp/tmp4tpyi2qm.jl:33\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4tpyi2qm.jl:31\ntest set: Test Failed at /tmp/tmp4tpyi2qm.jl:39\n\
    \  Expression: candidate([-1, 1, 1, 0]) == 0\n   Evaluated: -3 == 0\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4tpyi2qm.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4tpyi2qm.jl:31\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4tpyi2qm.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i > 0\n            prod *= 1\n        elseif i < 0\n            prod\
    \ *= -1\n        else\n            prod *= 0\n        end\n        sum += abs(i)\n\
    \    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if length(arr) ==\
    \ 0\n        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in\
    \ arr\n        if i > 0\n            prod *= 1\n        elseif i < 0\n       \
    \     prod *= -1\n        else\n            prod *= 0\n        end\n        sum\
    \ += abs(i)\n    end\n    return sum * prod\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n  \
    \  >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\nfunction\
    \ prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if isempty(arr)\n\
    \        return nothing\n    end\n    prod = 1\n    sum = 0\n    for i in arr\n\
    \        if i == 0\n            continue\n        end\n        prod *= sign(i)\n\
    \        sum += abs(i)\n    end\n    return prod * sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpaan3iuy3.jl:33\n  Expression: candidate([0,\
    \ 1]) == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope at /tmp/tmpaan3iuy3.jl:33\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpaan3iuy3.jl:31\ntest set: Test Failed at /tmp/tmpaan3iuy3.jl:39\n\
    \  Expression: candidate([-1, 1, 1, 0]) == 0\n   Evaluated: -3 == 0\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpaan3iuy3.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpaan3iuy3.jl:31\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaan3iuy3.jl:29\n"
  exit_code: 1
  status: SyntaxError
