name: HumanEval_135_can_arrange
language: julia
results:
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjgbjm0y7.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpjgbjm0y7.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjgbjm0y7.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjgbjm0y7.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmputra8sh0.jl:26\\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\\n   Evaluated: 2 == 4\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmputra8sh0.jl:26\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmputra8sh0.jl:22\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] &gt;= arr[i+1]\n         \
    \   return i\n        end\n    end\n    return -1\nend\n</code>\n\nusing Test\n\
    \n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpgjnxywew.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpgjnxywew.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnq9322uv.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpnq9322uv.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnq9322uv.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnq9322uv.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpei9gpc26.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpei9gpc26.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpei9gpc26.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpei9gpc26.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpykejaeqt.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpykejaeqt.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpykejaeqt.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpykejaeqt.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_slce8ep.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp_slce8ep.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_slce8ep.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_slce8ep.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6wjh7ggk.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp6wjh7ggk.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6wjh7ggk.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6wjh7ggk.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8z0a3eex.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp8z0a3eex.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8z0a3eex.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8z0a3eex.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr3a8qehs.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpr3a8qehs.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr3a8qehs.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr3a8qehs.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7gic_xru.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp7gic_xru.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7gic_xru.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7gic_xru.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl6zqgo2c.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpl6zqgo2c.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl6zqgo2c.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl6zqgo2c.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    n = length(arr)\n    for i in 1:n-1\n        if arr[i] >= arr[i+1]\n \
    \           return i\n        end\n    end\n    return -1\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4zzwi42a.jl:27\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp4zzwi42a.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4zzwi42a.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4zzwi42a.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe6w0qlix.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpe6w0qlix.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpe6w0qlix.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe6w0qlix.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    n = length(arr)\n    for i in 1:n-1\n        if arr[i] > arr[i+1]\n  \
    \          return i\n        end\n    end\n    return -1\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyh_p567o.jl:27\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpyh_p567o.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyh_p567o.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyh_p567o.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] >= arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpz9fe5_nd.jl:26\\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\\n   Evaluated: 2 == 4\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpz9fe5_nd.jl:26\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpz9fe5_nd.jl:22\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpzwg6mo1_.jl:26\\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\\n   Evaluated: 2 == 4\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpzwg6mo1_.jl:26\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpzwg6mo1_.jl:22\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    4     1      5\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpta89l3bs.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpta89l3bs.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpta89l3bs.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpta89l3bs.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppzuhmfms.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmppzuhmfms.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppzuhmfms.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppzuhmfms.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpse4ltrdk.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpse4ltrdk.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpse4ltrdk.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpse4ltrdk.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] < arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxpy02twu.jl:23\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: 1 == 3\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpxpy02twu.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxpy02twu.jl:22\ntest set: Test Failed at /tmp/tmpxpy02twu.jl:24\n\
    \  Expression: candidate([1, 2, 4, 5]) == -1\n   Evaluated: 1 == -1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxpy02twu.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxpy02twu.jl:22\ntest set: Test Failed at /tmp/tmpxpy02twu.jl:25\n\
    \  Expression: candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2\n   Evaluated: 1 ==\
    \ 2\nStacktrace:\n [1] top-level scope at /tmp/tmpxpy02twu.jl:25\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxpy02twu.jl:22\ntest set: Test Failed at /tmp/tmpxpy02twu.jl:26\n\
    \  Expression: candidate([4, 8, 5, 7, 3]) == 4\n   Evaluated: 1 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxpy02twu.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxpy02twu.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxpy02twu.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    # your code here\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyaw5njoo.jl:19\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: -1 == 3\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpyaw5njoo.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyaw5njoo.jl:18\ntest set: Test Failed at /tmp/tmpyaw5njoo.jl:21\n\
    \  Expression: candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2\n   Evaluated: -1\
    \ == 2\nStacktrace:\n [1] top-level scope at /tmp/tmpyaw5njoo.jl:21\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyaw5njoo.jl:18\ntest set: Test Failed at /tmp/tmpyaw5njoo.jl:22\n\
    \  Expression: candidate([4, 8, 5, 7, 3]) == 4\n   Evaluated: -1 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyaw5njoo.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyaw5njoo.jl:18\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyaw5njoo.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    # Initialize the largest index to -1\n    largest_index = -1\n    # Loop\
    \ through the array\n    for i in 1:length(arr)\n        # If the current element\
    \ is not greater than or equal to the previous element\n        if arr[i] <= arr[i-1]\n\
    \            # Update the largest index\n            largest_index = i\n     \
    \   end\n    end\n    # Return the largest index\n    return largest_index\nend\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8hvoh9ob.jl:29\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 4, 3, 5]) == 3\n  BoundsError: attempt to access\
    \ 5-element Array{Int64,1} at index [0]\n  Stacktrace:\n   [1] getindex at ./array.jl:788\
    \ [inlined]\n   [2] can_arrange(::Array{Int64,1}) at /tmp/tmp8hvoh9ob.jl:16\n\
    \   [3] top-level scope at /tmp/tmp8hvoh9ob.jl:29\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp8hvoh9ob.jl:28\n  \ntest set: Error During\
    \ Test at /tmp/tmp8hvoh9ob.jl:30\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 4, 5]) == -1\n  BoundsError: attempt to access 4-element Array{Int64,1} at\
    \ index [0]\n  Stacktrace:\n   [1] getindex at ./array.jl:788 [inlined]\n   [2]\
    \ can_arrange(::Array{Int64,1}) at /tmp/tmp8hvoh9ob.jl:16\n   [3] top-level scope\
    \ at /tmp/tmp8hvoh9ob.jl:30\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp8hvoh9ob.jl:28\n  \ntest set: Error During\
    \ Test at /tmp/tmp8hvoh9ob.jl:31\n  Test threw exception\n  Expression: candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2\n  BoundsError: attempt to access 9-element Array{Int64,1}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex at ./array.jl:788 [inlined]\n \
    \  [2] can_arrange(::Array{Int64,1}) at /tmp/tmp8hvoh9ob.jl:16\n   [3] top-level\
    \ scope at /tmp/tmp8hvoh9ob.jl:31\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp8hvoh9ob.jl:28\n  \ntest set: Error During\
    \ Test at /tmp/tmp8hvoh9ob.jl:32\n  Test threw exception\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n  BoundsError: attempt to access 5-element Array{Int64,1}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex at ./array.jl:788 [inlined]\n \
    \  [2] can_arrange(::Array{Int64,1}) at /tmp/tmp8hvoh9ob.jl:16\n   [3] top-level\
    \ scope at /tmp/tmp8hvoh9ob.jl:32\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp8hvoh9ob.jl:28\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8hvoh9ob.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] &gt;= arr[i+1]\n         \
    \   return i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\
    \t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8,\
    \ 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpf6buewjz.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpf6buewjz.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    n = length(arr)\n    for i in 1:n\n        if arr[i] >= arr[i-1]\n   \
    \         return i-1\n        end\n    end\n    return -1\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpaf2v4qdh.jl:24\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 4, 3, 5]) == 3\n  BoundsError: attempt to access\
    \ 5-element Array{Int64,1} at index [0]\n  Stacktrace:\n   [1] getindex at ./array.jl:788\
    \ [inlined]\n   [2] can_arrange(::Array{Int64,1}) at /tmp/tmpaf2v4qdh.jl:13\n\
    \   [3] top-level scope at /tmp/tmpaf2v4qdh.jl:24\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpaf2v4qdh.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpaf2v4qdh.jl:25\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 4, 5]) == -1\n  BoundsError: attempt to access 4-element Array{Int64,1} at\
    \ index [0]\n  Stacktrace:\n   [1] getindex at ./array.jl:788 [inlined]\n   [2]\
    \ can_arrange(::Array{Int64,1}) at /tmp/tmpaf2v4qdh.jl:13\n   [3] top-level scope\
    \ at /tmp/tmpaf2v4qdh.jl:25\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpaf2v4qdh.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpaf2v4qdh.jl:26\n  Test threw exception\n  Expression: candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2\n  BoundsError: attempt to access 9-element Array{Int64,1}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex at ./array.jl:788 [inlined]\n \
    \  [2] can_arrange(::Array{Int64,1}) at /tmp/tmpaf2v4qdh.jl:13\n   [3] top-level\
    \ scope at /tmp/tmpaf2v4qdh.jl:26\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpaf2v4qdh.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpaf2v4qdh.jl:27\n  Test threw exception\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n  BoundsError: attempt to access 5-element Array{Int64,1}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex at ./array.jl:788 [inlined]\n \
    \  [2] can_arrange(::Array{Int64,1}) at /tmp/tmpaf2v4qdh.jl:13\n   [3] top-level\
    \ scope at /tmp/tmpaf2v4qdh.jl:27\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpaf2v4qdh.jl:23\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaf2v4qdh.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5lfbj99d.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp5lfbj99d.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5lfbj99d.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5lfbj99d.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9gf9xyn1.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp9gf9xyn1.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9gf9xyn1.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9gf9xyn1.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm0rtzwgi.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpm0rtzwgi.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpm0rtzwgi.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm0rtzwgi.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] >= arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo29hbrm4.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpo29hbrm4.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpo29hbrm4.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo29hbrm4.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] &gt;= arr[i+1]\n         \
    \   return i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\
    \t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8,\
    \ 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpt0jm4a7j.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpt0jm4a7j.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpwvf29iex.jl:26\\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\\n   Evaluated: 2 == 4\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpwvf29iex.jl:26\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpwvf29iex.jl:22\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    4     1      5\\n'"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] &gt;= arr[i+1]\n         \
    \   return i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\
    \t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8,\
    \ 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmps8vf9ytp.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmps8vf9ytp.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfm8n9h6w.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpfm8n9h6w.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfm8n9h6w.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfm8n9h6w.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvxi1yb_7.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpvxi1yb_7.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvxi1yb_7.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvxi1yb_7.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpya36iru_.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpya36iru_.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpya36iru_.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpya36iru_.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa1ib73tr.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpa1ib73tr.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa1ib73tr.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa1ib73tr.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7xwi9mps.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp7xwi9mps.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7xwi9mps.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7xwi9mps.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    # your code here\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo0pp4m_7.jl:19\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: -1 == 3\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpo0pp4m_7.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpo0pp4m_7.jl:18\ntest set: Test Failed at /tmp/tmpo0pp4m_7.jl:21\n\
    \  Expression: candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2\n   Evaluated: -1\
    \ == 2\nStacktrace:\n [1] top-level scope at /tmp/tmpo0pp4m_7.jl:21\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpo0pp4m_7.jl:18\ntest set: Test Failed at /tmp/tmpo0pp4m_7.jl:22\n\
    \  Expression: candidate([4, 8, 5, 7, 3]) == 4\n   Evaluated: -1 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo0pp4m_7.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpo0pp4m_7.jl:18\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo0pp4m_7.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    n = length(arr)\n    for i in 1:n-1\n        if arr[i] > arr[i+1]\n  \
    \          return i\n        end\n    end\n    return -1\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmafq4dl6.jl:27\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpmafq4dl6.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmafq4dl6.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmafq4dl6.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx4_imaip.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpx4_imaip.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx4_imaip.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx4_imaip.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpizj3biv8.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpizj3biv8.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpizj3biv8.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpizj3biv8.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    n = length(arr)\n    for i in 1:n\n        if i == 1\n            continue\n\
    \        end\n        if arr[i] < arr[i-1]\n            return i-1\n        end\n\
    \    end\n    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfebq9ax1.jl:30\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpfebq9ax1.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfebq9ax1.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfebq9ax1.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkq06o2h9.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpkq06o2h9.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkq06o2h9.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkq06o2h9.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp44dyy_fp.jl:26\\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\\n   Evaluated: 2 == 4\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmp44dyy_fp.jl:26\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp44dyy_fp.jl:22\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    4     1      5\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] >= arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3e4jo28p.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp3e4jo28p.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3e4jo28p.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3e4jo28p.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpuyzm02t_.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpuyzm02t_.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpuyzm02t_.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuyzm02t_.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnkfuoeux.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpnkfuoeux.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnkfuoeux.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnkfuoeux.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] >= arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpznkdlfmm.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpznkdlfmm.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpznkdlfmm.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpznkdlfmm.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] >= arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpb06xyduw.jl:26\\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\\n   Evaluated: 2 == 4\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpb06xyduw.jl:26\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpb06xyduw.jl:22\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    4     1      5\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] &gt;= arr[i+1]\n         \
    \   return i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\
    \t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8,\
    \ 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpl4qioeit.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpl4qioeit.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] >= arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7yftij4z.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp7yftij4z.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7yftij4z.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7yftij4z.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] >= arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpibbugf0c.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpibbugf0c.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpibbugf0c.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpibbugf0c.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpu_kfjkd4.jl:26\\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\\n   Evaluated: 2 == 4\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpu_kfjkd4.jl:26\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpu_kfjkd4.jl:22\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    4     1      5\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] >= arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpooz3rllq.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpooz3rllq.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpooz3rllq.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpooz3rllq.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] >= arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6et6corz.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp6et6corz.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6et6corz.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6et6corz.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptv4noo11.jl:18\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 4, 3, 5]) == 3\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr)\
    \ where T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] can_arrange(::Array{Int64,1})\
    \ at /tmp/tmptv4noo11.jl:12\n   [2] top-level scope at /tmp/tmptv4noo11.jl:18\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmptv4noo11.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmptv4noo11.jl:19\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 4, 5]) == -1\n  MethodError: Cannot `convert` an object of type Nothing to\
    \ an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number) where\
    \ T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] can_arrange(::Array{Int64,1})\
    \ at /tmp/tmptv4noo11.jl:12\n   [2] top-level scope at /tmp/tmptv4noo11.jl:19\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmptv4noo11.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmptv4noo11.jl:20\n  Test threw exception\n  Expression: candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] can_arrange(::Array{Int64,1})\
    \ at /tmp/tmptv4noo11.jl:12\n   [2] top-level scope at /tmp/tmptv4noo11.jl:20\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmptv4noo11.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmptv4noo11.jl:21\n  Test threw exception\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] can_arrange(::Array{Int64,1})\
    \ at /tmp/tmptv4noo11.jl:12\n   [2] top-level scope at /tmp/tmptv4noo11.jl:21\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmptv4noo11.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmptv4noo11.jl:22\n  Test threw exception\n  Expression: candidate(Vector{Int64}([]))\
    \ == -1\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number) where\
    \ T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] can_arrange(::Array{Int64,1})\
    \ at /tmp/tmptv4noo11.jl:12\n   [2] top-level scope at /tmp/tmptv4noo11.jl:22\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmptv4noo11.jl:17\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptv4noo11.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1_kyr38r.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp1_kyr38r.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1_kyr38r.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1_kyr38r.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_1mxunva.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp_1mxunva.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_1mxunva.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_1mxunva.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp97k8cm5c.jl:18\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 4, 3, 5]) == 3\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr)\
    \ where T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] can_arrange(::Array{Int64,1})\
    \ at /tmp/tmp97k8cm5c.jl:12\n   [2] top-level scope at /tmp/tmp97k8cm5c.jl:18\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp97k8cm5c.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmp97k8cm5c.jl:19\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 4, 5]) == -1\n  MethodError: Cannot `convert` an object of type Nothing to\
    \ an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number) where\
    \ T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] can_arrange(::Array{Int64,1})\
    \ at /tmp/tmp97k8cm5c.jl:12\n   [2] top-level scope at /tmp/tmp97k8cm5c.jl:19\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp97k8cm5c.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmp97k8cm5c.jl:20\n  Test threw exception\n  Expression: candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] can_arrange(::Array{Int64,1})\
    \ at /tmp/tmp97k8cm5c.jl:12\n   [2] top-level scope at /tmp/tmp97k8cm5c.jl:20\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp97k8cm5c.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmp97k8cm5c.jl:21\n  Test threw exception\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] can_arrange(::Array{Int64,1})\
    \ at /tmp/tmp97k8cm5c.jl:12\n   [2] top-level scope at /tmp/tmp97k8cm5c.jl:21\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp97k8cm5c.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmp97k8cm5c.jl:22\n  Test threw exception\n  Expression: candidate(Vector{Int64}([]))\
    \ == -1\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number) where\
    \ T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] can_arrange(::Array{Int64,1})\
    \ at /tmp/tmp97k8cm5c.jl:12\n   [2] top-level scope at /tmp/tmp97k8cm5c.jl:22\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp97k8cm5c.jl:17\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp97k8cm5c.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] &gt;= arr[i+1]\n         \
    \   return i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\
    \t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8,\
    \ 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpi7jtlxwt.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpi7jtlxwt.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    n = length(arr)\n    for i in 1:n-1\n        if arr[i] >= arr[i+1]\n \
    \           return i\n        end\n    end\n    return -1\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy6qtyheg.jl:27\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpy6qtyheg.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy6qtyheg.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy6qtyheg.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6bppyhz4.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp6bppyhz4.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6bppyhz4.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6bppyhz4.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc0jt1k07.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpc0jt1k07.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc0jt1k07.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc0jt1k07.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    n = length(arr)\n    for i in 1:n-1\n        if arr[i] < arr[i+1]\n  \
    \          return i\n        end\n    end\n    return -1\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt_jfr9am.jl:24\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: 1 == 3\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpt_jfr9am.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt_jfr9am.jl:23\ntest set: Test Failed at /tmp/tmpt_jfr9am.jl:25\n\
    \  Expression: candidate([1, 2, 4, 5]) == -1\n   Evaluated: 1 == -1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt_jfr9am.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt_jfr9am.jl:23\ntest set: Test Failed at /tmp/tmpt_jfr9am.jl:26\n\
    \  Expression: candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2\n   Evaluated: 1 ==\
    \ 2\nStacktrace:\n [1] top-level scope at /tmp/tmpt_jfr9am.jl:26\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt_jfr9am.jl:23\ntest set: Test Failed at /tmp/tmpt_jfr9am.jl:27\n\
    \  Expression: candidate([4, 8, 5, 7, 3]) == 4\n   Evaluated: 1 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt_jfr9am.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt_jfr9am.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt_jfr9am.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpujw32d3q.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpujw32d3q.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpujw32d3q.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpujw32d3q.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    n = length(arr)\n    for i in 1:n-1\n        if arr[i] > arr[i+1]\n  \
    \          return i\n        end\n    end\n    return -1\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxytbdobz.jl:27\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpxytbdobz.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxytbdobz.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxytbdobz.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu_48qd9f.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpu_48qd9f.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu_48qd9f.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu_48qd9f.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxtzo2iuq.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpxtzo2iuq.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxtzo2iuq.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxtzo2iuq.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2jc0m6__.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp2jc0m6__.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2jc0m6__.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2jc0m6__.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    n = length(arr)\n    for i in 1:n-1\n        if arr[i] < arr[i+1]\n  \
    \          return i\n        end\n    end\n    return -1\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp88l8l8zo.jl:24\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: 1 == 3\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp88l8l8zo.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp88l8l8zo.jl:23\ntest set: Test Failed at /tmp/tmp88l8l8zo.jl:25\n\
    \  Expression: candidate([1, 2, 4, 5]) == -1\n   Evaluated: 1 == -1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp88l8l8zo.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp88l8l8zo.jl:23\ntest set: Test Failed at /tmp/tmp88l8l8zo.jl:26\n\
    \  Expression: candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2\n   Evaluated: 1 ==\
    \ 2\nStacktrace:\n [1] top-level scope at /tmp/tmp88l8l8zo.jl:26\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp88l8l8zo.jl:23\ntest set: Test Failed at /tmp/tmp88l8l8zo.jl:27\n\
    \  Expression: candidate([4, 8, 5, 7, 3]) == 4\n   Evaluated: 1 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp88l8l8zo.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp88l8l8zo.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp88l8l8zo.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp9_jb1_8w.jl:26\\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\\n   Evaluated: 2 == 4\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmp9_jb1_8w.jl:26\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp9_jb1_8w.jl:22\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_5d25b0s.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp_5d25b0s.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_5d25b0s.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_5d25b0s.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpczq14_5u.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpczq14_5u.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpczq14_5u.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpczq14_5u.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp27vo71nb.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp27vo71nb.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp27vo71nb.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp27vo71nb.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    n = length(arr)\n    for i in 1:n-1\n        if arr[i] > arr[i+1]\n  \
    \          return i\n        end\n    end\n    return -1\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp7d6qmb5p.jl:27\\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\\n   Evaluated: 2 == 4\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmp7d6qmb5p.jl:27\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp7d6qmb5p.jl:23\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    4     1      5\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    n = length(arr)\n    for i in 1:n-1\n        if arr[i] > arr[i+1]\n  \
    \          return i\n        end\n    end\n    return -1\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps2v4rgaz.jl:27\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmps2v4rgaz.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps2v4rgaz.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps2v4rgaz.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1v6vvk6r.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp1v6vvk6r.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1v6vvk6r.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1v6vvk6r.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] &gt;= arr[i+1]\n         \
    \   return i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\
    \t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8,\
    \ 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmphxpd4ii4.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmphxpd4ii4.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] >= arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwi1jb6nm.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpwi1jb6nm.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwi1jb6nm.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwi1jb6nm.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] >= arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4mh0wfje.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp4mh0wfje.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4mh0wfje.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4mh0wfje.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvi82jo3i.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpvi82jo3i.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvi82jo3i.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvi82jo3i.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpl2f3zrd8.jl:18\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 4, 3, 5]) == 3\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr)\
    \ where T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] can_arrange(::Array{Int64,1})\
    \ at /tmp/tmpl2f3zrd8.jl:12\n   [2] top-level scope at /tmp/tmpl2f3zrd8.jl:18\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpl2f3zrd8.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpl2f3zrd8.jl:19\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 4, 5]) == -1\n  MethodError: Cannot `convert` an object of type Nothing to\
    \ an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number) where\
    \ T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] can_arrange(::Array{Int64,1})\
    \ at /tmp/tmpl2f3zrd8.jl:12\n   [2] top-level scope at /tmp/tmpl2f3zrd8.jl:19\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpl2f3zrd8.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpl2f3zrd8.jl:20\n  Test threw exception\n  Expression: candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] can_arrange(::Array{Int64,1})\
    \ at /tmp/tmpl2f3zrd8.jl:12\n   [2] top-level scope at /tmp/tmpl2f3zrd8.jl:20\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpl2f3zrd8.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpl2f3zrd8.jl:21\n  Test threw exception\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] can_arrange(::Array{Int64,1})\
    \ at /tmp/tmpl2f3zrd8.jl:12\n   [2] top-level scope at /tmp/tmpl2f3zrd8.jl:21\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpl2f3zrd8.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpl2f3zrd8.jl:22\n  Test threw exception\n  Expression: candidate(Vector{Int64}([]))\
    \ == -1\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number) where\
    \ T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] can_arrange(::Array{Int64,1})\
    \ at /tmp/tmpl2f3zrd8.jl:12\n   [2] top-level scope at /tmp/tmpl2f3zrd8.jl:22\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpl2f3zrd8.jl:17\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl2f3zrd8.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] >= arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbl5egkg9.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpbl5egkg9.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbl5egkg9.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbl5egkg9.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    # your code here\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp8mw7o4ld.jl:19\\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\\n   Evaluated: -1 == 3\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmp8mw7o4ld.jl:19\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp8mw7o4ld.jl:18\\ntest set: Test Failed at /tmp/tmp8mw7o4ld.jl:21\\\
    n  Expression: candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2\\n   Evaluated: -1\
    \ == 2\\nStacktrace:\\n [1] top-level scope at /tmp/tmp8mw7o4ld.jl:21\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp8mw7o4ld.jl:18\\ntest set: Test Failed at /tmp/tmp8mw7o4ld.jl:22\\\
    n  Expression: candidate([4, 8, 5, 7, 3]) == 4\\n   Evaluated: -1 == 4\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp8mw7o4ld.jl:22\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp8mw7o4ld.jl:18\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw4s3vfl1.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpw4s3vfl1.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpw4s3vfl1.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw4s3vfl1.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] &gt;= arr[i+1]\n         \
    \   return i\n        end\n    end\n    return -1\nend\n</code>\n\nusing Test\n\
    \n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp2zylo7u7.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp2zylo7u7.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp11luoyn4.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp11luoyn4.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp11luoyn4.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp11luoyn4.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp78err98.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpp78err98.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp78err98.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp78err98.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc8nr50vj.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpc8nr50vj.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc8nr50vj.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc8nr50vj.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    n = length(arr)\n    for i in 1:n-1\n        if arr[i] > arr[i+1]\n  \
    \          return i\n        end\n    end\n    return -1\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpat79zoqb.jl:27\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpat79zoqb.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpat79zoqb.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpat79zoqb.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpuwzq4xf0.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpuwzq4xf0.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpuwzq4xf0.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuwzq4xf0.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjdnwfbwa.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpjdnwfbwa.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjdnwfbwa.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjdnwfbwa.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] >= arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqukqk55v.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpqukqk55v.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqukqk55v.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqukqk55v.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] &gt;= arr[i+1]\n         \
    \   return i\n        end\n    end\n    return -1\nend\n</code>\nI am trying to\
    \ test this function using the following code:\n<code>using Test\nusing Test\n\
    \n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpxht_519z.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpxht_519z.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpg_ohj4a4.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpg_ohj4a4.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg_ohj4a4.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg_ohj4a4.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsxwfz5ki.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpsxwfz5ki.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsxwfz5ki.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsxwfz5ki.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmps21h29eh.jl:26\\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\\n   Evaluated: 2 == 4\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmps21h29eh.jl:26\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmps21h29eh.jl:22\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    4     1      5\\n'"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpe1hek5dk.jl:26\\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\\n   Evaluated: 2 == 4\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpe1hek5dk.jl:26\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpe1hek5dk.jl:22\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    4     1      5\\n'"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmparmm_yh_.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmparmm_yh_.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmparmm_yh_.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmparmm_yh_.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8crtcw7e.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp8crtcw7e.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8crtcw7e.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8crtcw7e.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzs1hnz01.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpzs1hnz01.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzs1hnz01.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzs1hnz01.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2sy67jm9.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp2sy67jm9.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2sy67jm9.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2sy67jm9.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdrm4f_is.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpdrm4f_is.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdrm4f_is.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdrm4f_is.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpg_hqtejr.jl:26\\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\\n   Evaluated: 2 == 4\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpg_hqtejr.jl:26\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpg_hqtejr.jl:22\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpi0_ud6bl.jl:18\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 4, 3, 5]) == 3\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr)\
    \ where T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] can_arrange(::Array{Int64,1})\
    \ at /tmp/tmpi0_ud6bl.jl:12\n   [2] top-level scope at /tmp/tmpi0_ud6bl.jl:18\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpi0_ud6bl.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpi0_ud6bl.jl:19\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 4, 5]) == -1\n  MethodError: Cannot `convert` an object of type Nothing to\
    \ an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number) where\
    \ T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] can_arrange(::Array{Int64,1})\
    \ at /tmp/tmpi0_ud6bl.jl:12\n   [2] top-level scope at /tmp/tmpi0_ud6bl.jl:19\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpi0_ud6bl.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpi0_ud6bl.jl:20\n  Test threw exception\n  Expression: candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] can_arrange(::Array{Int64,1})\
    \ at /tmp/tmpi0_ud6bl.jl:12\n   [2] top-level scope at /tmp/tmpi0_ud6bl.jl:20\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpi0_ud6bl.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpi0_ud6bl.jl:21\n  Test threw exception\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] can_arrange(::Array{Int64,1})\
    \ at /tmp/tmpi0_ud6bl.jl:12\n   [2] top-level scope at /tmp/tmpi0_ud6bl.jl:21\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpi0_ud6bl.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpi0_ud6bl.jl:22\n  Test threw exception\n  Expression: candidate(Vector{Int64}([]))\
    \ == -1\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number) where\
    \ T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] can_arrange(::Array{Int64,1})\
    \ at /tmp/tmpi0_ud6bl.jl:12\n   [2] top-level scope at /tmp/tmpi0_ud6bl.jl:22\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpi0_ud6bl.jl:17\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi0_ud6bl.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    n = length(arr)\n    if n == 1\n        return -1\n    end\n    for i\
    \ in 1:n-1\n        if arr[i] >= arr[i+1]\n            return i\n        end\n\
    \    end\n    return -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2d_u59ae.jl:30\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp2d_u59ae.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2d_u59ae.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2d_u59ae.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq3gx96_n.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpq3gx96_n.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq3gx96_n.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq3gx96_n.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    if length(arr) == 1\n        return -1\n    end\n    for i in 1:length(arr)-1\n\
    \        if arr[i] > arr[i+1]\n            return i\n        end\n    end\n  \
    \  return -1\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t\
    @test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpux6jv2nk.jl:29\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpux6jv2nk.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpux6jv2nk.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpux6jv2nk.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt6uh0yfg.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpt6uh0yfg.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt6uh0yfg.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt6uh0yfg.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    n = length(arr)\n    for i in 1:n-1\n        if arr[i] > arr[i+1]\n  \
    \          return i\n        end\n    end\n    return -1\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz7grwiox.jl:27\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpz7grwiox.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpz7grwiox.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz7grwiox.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    n = length(arr)\n    for i in 1:n-1\n        if arr[i] > arr[i+1]\n  \
    \          return i\n        end\n    end\n    return -1\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpatapcmv2.jl:27\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpatapcmv2.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpatapcmv2.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpatapcmv2.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpufxm7ppe.jl:18\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 4, 3, 5]) == 3\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Ptr) where T<:Integer at pointer.jl:23\\n    ...\\\
    n  Stacktrace:\\n   [1] can_arrange(::Array{Int64,1}) at /tmp/tmpufxm7ppe.jl:12\\\
    n   [2] top-level scope at /tmp/tmpufxm7ppe.jl:18\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpufxm7ppe.jl:17\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpufxm7ppe.jl:19\\n  Test threw exception\\n  Expression: candidate([1,\
    \ 2, 4, 5]) == -1\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\\n    ...\\n  Stacktrace:\\n   [1] can_arrange(::Array{Int64,1})\
    \ at /tmp/tmpufxm7ppe.jl:12\\n   [2] top-level scope at /tmp/tmpufxm7ppe.jl:19\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpufxm7ppe.jl:17\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpufxm7ppe.jl:20\\n  Test threw exception\\n  Expression: candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\\n    ...\\n  Stacktrace:\\n   [1] can_arrange(::Array{Int64,1})\
    \ at /tmp/tmpufxm7ppe.jl:12\\n   [2] top-level scope at /tmp/tmpufxm7ppe.jl:20\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpufxm7ppe.jl:17\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpufxm7ppe.jl:21\\n  Test threw exception\\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\\n    ...\\n  Stacktrace:\\n   [1] can_arrange(::Array{Int64,1})\
    \ at /tmp/tmpufxm7ppe.jl:12\\n   [2] top-level scope at /tmp/tmpufxm7ppe.jl:21\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpufxm7ppe.jl:17\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpufxm7ppe.jl:22\\n  Test threw exception\\n  Expression: candidate(Vector{Int64}([]))\
    \ == -1\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where\
    \ T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at pointer.jl:23\\n    ...\\n  Stacktrace:\\n   [1] can_arrange(::Array{Int64,1})\
    \ at /tmp/tmpufxm7ppe.jl:12\\n   [2] top-level scope at /tmp/tmpufxm7ppe.jl:22\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpufxm7ppe.jl:17\\n  \\nTest Summary: | Error\
    \  Total\\ntest set      |     5      5\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcgt7b4ay.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpcgt7b4ay.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcgt7b4ay.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcgt7b4ay.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    n = length(arr)\n    for i in 1:n-1\n        if arr[i] > arr[i+1]\n  \
    \          return i\n        end\n    end\n    return -1\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptmey0ozb.jl:27\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmptmey0ozb.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptmey0ozb.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptmey0ozb.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpg0duck83.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpg0duck83.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg0duck83.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg0duck83.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_y6z56mu.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp_y6z56mu.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_y6z56mu.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_y6z56mu.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprqa0zzqp.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmprqa0zzqp.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprqa0zzqp.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprqa0zzqp.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1rqd6bdg.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp1rqd6bdg.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1rqd6bdg.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1rqd6bdg.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpajr7whg_.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpajr7whg_.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpajr7whg_.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpajr7whg_.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] <= arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbs8v8lrn.jl:23\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: 1 == 3\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpbs8v8lrn.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbs8v8lrn.jl:22\ntest set: Test Failed at /tmp/tmpbs8v8lrn.jl:24\n\
    \  Expression: candidate([1, 2, 4, 5]) == -1\n   Evaluated: 1 == -1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbs8v8lrn.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbs8v8lrn.jl:22\ntest set: Test Failed at /tmp/tmpbs8v8lrn.jl:25\n\
    \  Expression: candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2\n   Evaluated: 1 ==\
    \ 2\nStacktrace:\n [1] top-level scope at /tmp/tmpbs8v8lrn.jl:25\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbs8v8lrn.jl:22\ntest set: Test Failed at /tmp/tmpbs8v8lrn.jl:26\n\
    \  Expression: candidate([4, 8, 5, 7, 3]) == 4\n   Evaluated: 1 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbs8v8lrn.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbs8v8lrn.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbs8v8lrn.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps5rnki2_.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmps5rnki2_.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps5rnki2_.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps5rnki2_.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] >= arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt5_q6atl.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpt5_q6atl.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt5_q6atl.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt5_q6atl.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] &gt;= arr[i+1]\n         \
    \   return i\n        end\n    end\n    return -1\nend\n</code>\n\nusing Test\n\
    \n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp1vq938dx.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp1vq938dx.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] &gt;= arr[i+1]\n         \
    \   return i\n        end\n    end\n    return -1\nend\n</code>\n\nusing Test\n\
    \n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpj_n4f28_.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpj_n4f28_.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] &gt;= arr[i+1]\n         \
    \   return i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\
    \t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8,\
    \ 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpnfnkt5rf.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpnfnkt5rf.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpvt4who51.jl:26\\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\\n   Evaluated: 2 == 4\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpvt4who51.jl:26\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpvt4who51.jl:22\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    4     1      5\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp67hgtbwh.jl:26\\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\\n   Evaluated: 2 == 4\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmp67hgtbwh.jl:26\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp67hgtbwh.jl:22\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    4     1      5\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpeu2szxdr.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpeu2szxdr.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpeu2szxdr.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeu2szxdr.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    n = length(arr)\n    for i in 1:n-1\n        if arr[i] > arr[i+1]\n  \
    \          return i\n        end\n    end\n    return -1\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptaf4y5ql.jl:27\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmptaf4y5ql.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptaf4y5ql.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptaf4y5ql.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprbtg6s8h.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmprbtg6s8h.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprbtg6s8h.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprbtg6s8h.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpasue0tkz.jl:26\\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\\n   Evaluated: 2 == 4\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpasue0tkz.jl:26\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpasue0tkz.jl:22\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    4     1      5\\n'"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] &gt;= arr[i+1]\n         \
    \   return i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\
    \t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8,\
    \ 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp537449qa.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp537449qa.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpeko9k7t9.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpeko9k7t9.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpeko9k7t9.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeko9k7t9.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjed633to.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpjed633to.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjed633to.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjed633to.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7maq826g.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp7maq826g.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7maq826g.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7maq826g.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] >= arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpx3tuj5c3.jl:26\\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\\n   Evaluated: 2 == 4\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpx3tuj5c3.jl:26\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpx3tuj5c3.jl:22\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    4     1      5\\n'"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmpx3tuj5c3.jl:20\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1r453isc.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp1r453isc.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1r453isc.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1r453isc.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxnucgec8.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpxnucgec8.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxnucgec8.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxnucgec8.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6qjwtfjy.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp6qjwtfjy.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6qjwtfjy.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6qjwtfjy.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    # your code here\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpds9j2e8m.jl:19\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: -1 == 3\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpds9j2e8m.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpds9j2e8m.jl:18\ntest set: Test Failed at /tmp/tmpds9j2e8m.jl:21\n\
    \  Expression: candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2\n   Evaluated: -1\
    \ == 2\nStacktrace:\n [1] top-level scope at /tmp/tmpds9j2e8m.jl:21\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpds9j2e8m.jl:18\ntest set: Test Failed at /tmp/tmpds9j2e8m.jl:22\n\
    \  Expression: candidate([4, 8, 5, 7, 3]) == 4\n   Evaluated: -1 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpds9j2e8m.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpds9j2e8m.jl:18\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpds9j2e8m.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpezxisi6g.jl:26\\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\\n   Evaluated: 2 == 4\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpezxisi6g.jl:26\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpezxisi6g.jl:22\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvl1_rvc_.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpvl1_rvc_.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvl1_rvc_.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvl1_rvc_.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpheduwx_u.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpheduwx_u.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpheduwx_u.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpheduwx_u.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] &gt;= arr[i+1]\n         \
    \   return i\n        end\n    end\n    return -1\nend\n</code>\n\nusing Test\n\
    \n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpi8lwm63f.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpi8lwm63f.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    # your code here\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp__svdgl_.jl:19\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: -1 == 3\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp__svdgl_.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp__svdgl_.jl:18\ntest set: Test Failed at /tmp/tmp__svdgl_.jl:21\n\
    \  Expression: candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2\n   Evaluated: -1\
    \ == 2\nStacktrace:\n [1] top-level scope at /tmp/tmp__svdgl_.jl:21\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp__svdgl_.jl:18\ntest set: Test Failed at /tmp/tmp__svdgl_.jl:22\n\
    \  Expression: candidate([4, 8, 5, 7, 3]) == 4\n   Evaluated: -1 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp__svdgl_.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp__svdgl_.jl:18\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp__svdgl_.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgiqv061v.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpgiqv061v.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgiqv061v.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgiqv061v.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpcr7tbt6w.jl:26\\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\\n   Evaluated: 2 == 4\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpcr7tbt6w.jl:26\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpcr7tbt6w.jl:22\\nTest Summary: | Pass  Fail \
    \ Total\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2ymi_ukw.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp2ymi_ukw.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2ymi_ukw.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2ymi_ukw.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    # TODO: Implement the function\n    return -1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\
    \t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8,\
    \ 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp3v89v6ff.jl:19\\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\\n   Evaluated: -1 == 3\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmp3v89v6ff.jl:19\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp3v89v6ff.jl:18\\ntest set: Test Failed at /tmp/tmp3v89v6ff.jl:21\\\
    n  Expression: candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2\\n   Evaluated: -1\
    \ == 2\\nStacktrace:\\n [1] top-level scope at /tmp/tmp3v89v6ff.jl:21\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp3v89v6ff.jl:18\\ntest set: Test Failed at /tmp/tmp3v89v6ff.jl:22\\\
    n  Expression: candidate([4, 8, 5, 7, 3]) == 4\\n   Evaluated: -1 == 4\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp3v89v6ff.jl:22\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp3v89v6ff.jl:18\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    2     3      5\\n'"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgtm3ar54.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpgtm3ar54.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgtm3ar54.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgtm3ar54.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5vafj1gr.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp5vafj1gr.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5vafj1gr.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5vafj1gr.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph3ragxox.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmph3ragxox.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph3ragxox.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph3ragxox.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4rrk74oa.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp4rrk74oa.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4rrk74oa.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4rrk74oa.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkcltwaxy.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpkcltwaxy.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkcltwaxy.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkcltwaxy.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    n = length(arr)\n    for i in 1:n-1\n        if arr[i] > arr[i+1]\n  \
    \          return i\n        end\n    end\n    return -1\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp83grofgc.jl:27\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp83grofgc.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp83grofgc.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp83grofgc.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmphd5_km7b.jl:26\\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\\n   Evaluated: 2 == 4\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmphd5_km7b.jl:26\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmphd5_km7b.jl:22\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    4     1      5\\n'"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmphd5_km7b.jl:20\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] &gt;= arr[i+1]\n         \
    \   return i\n        end\n    end\n    return -1\nend\n</code>\n\nusing Test\n\
    \n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpik8b3l7l.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpik8b3l7l.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7c_ymqv6.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp7c_ymqv6.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7c_ymqv6.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7c_ymqv6.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] &gt;= arr[i+1]\n         \
    \   return i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\
    \t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8,\
    \ 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpt4pieyck.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpt4pieyck.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwpsquh30.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpwpsquh30.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwpsquh30.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwpsquh30.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy27gdvpa.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpy27gdvpa.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy27gdvpa.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy27gdvpa.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpex87nudp.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpex87nudp.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpex87nudp.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpex87nudp.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8t0s1n5j.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp8t0s1n5j.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8t0s1n5j.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8t0s1n5j.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] >= arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8u0k5hhf.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp8u0k5hhf.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8u0k5hhf.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8u0k5hhf.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpovrzkrep.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpovrzkrep.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpovrzkrep.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpovrzkrep.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpf5pzzh_8.jl:26\\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\\n   Evaluated: 2 == 4\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpf5pzzh_8.jl:26\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpf5pzzh_8.jl:22\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    4     1      5\\n'"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmpf5pzzh_8.jl:20\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxjaocnv8.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpxjaocnv8.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxjaocnv8.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxjaocnv8.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i = length(arr):-1:2\n        if arr[i] < arr[i-1]\n            return\
    \ i-1\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsg5rgr9x.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpsg5rgr9x.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsg5rgr9x.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsg5rgr9x.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    # TODO: Implement me!\n    return -1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzgqnjo8p.jl:19\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: -1 == 3\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpzgqnjo8p.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzgqnjo8p.jl:18\ntest set: Test Failed at /tmp/tmpzgqnjo8p.jl:21\n\
    \  Expression: candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2\n   Evaluated: -1\
    \ == 2\nStacktrace:\n [1] top-level scope at /tmp/tmpzgqnjo8p.jl:21\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzgqnjo8p.jl:18\ntest set: Test Failed at /tmp/tmpzgqnjo8p.jl:22\n\
    \  Expression: candidate([4, 8, 5, 7, 3]) == 4\n   Evaluated: -1 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzgqnjo8p.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzgqnjo8p.jl:18\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzgqnjo8p.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    n = length(arr)\n    for i in 1:n-1\n        if arr[i] >= arr[i+1]\n \
    \           return i\n        end\n    end\n    return -1\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpajtyc1ny.jl:27\\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\\n   Evaluated: 2 == 4\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpajtyc1ny.jl:27\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpajtyc1ny.jl:23\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    4     1      5\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] &gt;= arr[i+1]\n         \
    \   return i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\
    \t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8,\
    \ 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp80_zfhiu.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp80_zfhiu.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp63o89g4w.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp63o89g4w.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp63o89g4w.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp63o89g4w.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphuc1xtf3.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmphuc1xtf3.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphuc1xtf3.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphuc1xtf3.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_mf3mkh9.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp_mf3mkh9.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_mf3mkh9.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_mf3mkh9.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\
    \t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\
    \t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8,\
    \ 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpuuka6qfq.jl:18\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 4, 3, 5]) == 3\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr)\
    \ where T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] can_arrange(::Array{Int64,1})\
    \ at /tmp/tmpuuka6qfq.jl:12\n   [2] top-level scope at /tmp/tmpuuka6qfq.jl:18\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpuuka6qfq.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpuuka6qfq.jl:19\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 4, 5]) == -1\n  MethodError: Cannot `convert` an object of type Nothing to\
    \ an object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number) where\
    \ T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] can_arrange(::Array{Int64,1})\
    \ at /tmp/tmpuuka6qfq.jl:12\n   [2] top-level scope at /tmp/tmpuuka6qfq.jl:19\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpuuka6qfq.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpuuka6qfq.jl:20\n  Test threw exception\n  Expression: candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] can_arrange(::Array{Int64,1})\
    \ at /tmp/tmpuuka6qfq.jl:12\n   [2] top-level scope at /tmp/tmpuuka6qfq.jl:20\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpuuka6qfq.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpuuka6qfq.jl:21\n  Test threw exception\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] can_arrange(::Array{Int64,1})\
    \ at /tmp/tmpuuka6qfq.jl:12\n   [2] top-level scope at /tmp/tmpuuka6qfq.jl:21\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpuuka6qfq.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpuuka6qfq.jl:22\n  Test threw exception\n  Expression: candidate(Vector{Int64}([]))\
    \ == -1\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number) where\
    \ T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] can_arrange(::Array{Int64,1})\
    \ at /tmp/tmpuuka6qfq.jl:12\n   [2] top-level scope at /tmp/tmpuuka6qfq.jl:22\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpuuka6qfq.jl:17\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuuka6qfq.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] < arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppfho9sj_.jl:23\n  Expression: candidate([1,\
    \ 2, 4, 3, 5]) == 3\n   Evaluated: 1 == 3\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmppfho9sj_.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppfho9sj_.jl:22\ntest set: Test Failed at /tmp/tmppfho9sj_.jl:24\n\
    \  Expression: candidate([1, 2, 4, 5]) == -1\n   Evaluated: 1 == -1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppfho9sj_.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppfho9sj_.jl:22\ntest set: Test Failed at /tmp/tmppfho9sj_.jl:25\n\
    \  Expression: candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2\n   Evaluated: 1 ==\
    \ 2\nStacktrace:\n [1] top-level scope at /tmp/tmppfho9sj_.jl:25\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppfho9sj_.jl:22\ntest set: Test Failed at /tmp/tmppfho9sj_.jl:26\n\
    \  Expression: candidate([4, 8, 5, 7, 3]) == 4\n   Evaluated: 1 == 4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppfho9sj_.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppfho9sj_.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppfho9sj_.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    n = length(arr)\n    for i in 1:n-1\n        if arr[i] > arr[i+1]\n  \
    \          return i\n        end\n    end\n    return -1\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgxbpguir.jl:27\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpgxbpguir.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgxbpguir.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgxbpguir.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpgj405809.jl:26\\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\\n   Evaluated: 2 == 4\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpgj405809.jl:26\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpgj405809.jl:22\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    4     1      5\\n'"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmplgl31cwv.jl:26\\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\\n   Evaluated: 2 == 4\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmplgl31cwv.jl:26\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmplgl31cwv.jl:22\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfa7zdj15.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpfa7zdj15.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfa7zdj15.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfa7zdj15.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps0wze4az.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmps0wze4az.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps0wze4az.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps0wze4az.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprsacbilc.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmprsacbilc.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprsacbilc.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprsacbilc.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    n = length(arr)\n    for i in 1:n-1\n        if arr[i] > arr[i+1]\n  \
    \          return i\n        end\n    end\n    return -1\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppa_e8x56.jl:27\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmppa_e8x56.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppa_e8x56.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppa_e8x56.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp717jdfj1.jl:26\\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\\n   Evaluated: 2 == 4\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmp717jdfj1.jl:26\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp717jdfj1.jl:22\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    4     1      5\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp75ju261e.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp75ju261e.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp75ju261e.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp75ju261e.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz0m9h69h.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpz0m9h69h.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpz0m9h69h.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz0m9h69h.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] &gt;= arr[i+1]\n         \
    \   return i\n        end\n    end\n    return -1\nend\n</code>\nI am getting\
    \ the following error:\n<code>ERROR: LoadError: MethodError: no method matching\
    \ can_arrange(::Array{Int64,1})\n</code>\nI am not sure what is wrong with my\
    \ code.\nusing Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpxc_j4al7.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpxc_j4al7.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] >= arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_kltmpgk.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp_kltmpgk.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_kltmpgk.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_kltmpgk.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpceqal5v5.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpceqal5v5.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpceqal5v5.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpceqal5v5.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_2r6j9m0.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp_2r6j9m0.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_2r6j9m0.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_2r6j9m0.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph_ik1g45.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmph_ik1g45.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph_ik1g45.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph_ik1g45.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    n = length(arr)\n    for i in 1:n-1\n        if arr[i] >= arr[i+1]\n \
    \           return i\n        end\n    end\n    return -1\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5])\
    \ == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5,\
    \ 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([]))\
    \ == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqc_xosfr.jl:27\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpqc_xosfr.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqc_xosfr.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqc_xosfr.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5mxw9lhg.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp5mxw9lhg.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5mxw9lhg.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5mxw9lhg.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqd3t56pz.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpqd3t56pz.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqd3t56pz.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqd3t56pz.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_hmhgwv3.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp_hmhgwv3.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_hmhgwv3.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_hmhgwv3.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpexm8mkyd.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpexm8mkyd.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpexm8mkyd.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpexm8mkyd.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3mdpr08o.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp3mdpr08o.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3mdpr08o.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3mdpr08o.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    for i in 1:length(arr)-1\n        if arr[i] > arr[i+1]\n            return\
    \ i\n        end\n    end\n    return -1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = can_arrange;\n\t@test(candidate([1, 2, 4, 3, 5]) == 3)\n\t@test(candidate([1,\
    \ 2, 4, 5]) == -1)\n\t@test(candidate([1, 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t\
    @test(candidate([4, 8, 5, 7, 3]) == 4)\n\t@test(candidate(Vector{Int64}([])) ==\
    \ -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz6gomma3.jl:26\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpz6gomma3.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpz6gomma3.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz6gomma3.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Create a function which returns the largest index of an element\
    \ which\n    is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5])\
    \ = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64\
    \ \n    # Write your code here\n    for i in 1:length(arr)-1\n        if arr[i]\
    \ > arr[i+1]\n            return i\n        end\n    end\n    return -1\nend\n\
    using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
    \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
    @test(candidate(Vector{Int64}([])) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprv35mj70.jl:27\n  Expression: candidate([4,\
    \ 8, 5, 7, 3]) == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmprv35mj70.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprv35mj70.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprv35mj70.jl:21\n"
  exit_code: 1
  status: SyntaxError
