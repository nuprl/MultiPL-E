name: HumanEval_152_compare
language: julia
results:
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game-guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game - guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game-guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game - guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game - guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game - guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game-guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game - guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game-guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game - guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game - guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game-guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ [abs(game[i] - guess[i]) for i in 1:length(game)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game - guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game - guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game - guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game - guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game - guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game - guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game - guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game - guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ [abs(game[i] - guess[i]) for i in 1:length(game)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    diff\
    \ = abs.(game .- guess)\n    return diff\nend\nusing Test\n\n@testset begin\n\n\
    candidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\
    \ == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2,\
    \ 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    diff\
    \ = abs.(game .- guess)\n    return diff\nend\nusing Test\n\n@testset begin\n\n\
    candidate = compare;\n\t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\
    \ == [0, 0, 0, 0, 3, 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0,\
    \ 0]) == [0, 0, 0, 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2,\
    \ 4, 6])\n\t@test(candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game-guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game - guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game - guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game-guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game - guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game - guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game - guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game - guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game - guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game - guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game - guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game - guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game - guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game-guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game - guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game-guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game - guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game - guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game-guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game - guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game - guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game - guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game-guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game-guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game - guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game - guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game - guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game - guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game - guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game - guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game - guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game-guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game - guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game-guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game-guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game - guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game-guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game-guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game - guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game - guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game .- guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"I think we all remember that feeling when the result of some long-awaited\n\
    \    event is finally known. The feelings and thoughts you have at that moment\
    \ are\n    definitely worth noting down and comparing.\n    Your task is to determine\
    \ if a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\
    \    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\nfunction\
    \ compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64} \n    return\
    \ abs.(game-guess)\nend\nusing Test\n\n@testset begin\n\ncandidate = compare;\n\
    \t@test(candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3])\n\t@test(candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0])\n\t@test(candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6])\n\t@test(candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
