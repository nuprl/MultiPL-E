name: HumanEval_59_largest_prime_factor
language: julia
prompt: "\"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  \    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n\
  \    2\n    \"\"\"\nfunction largest_prime_factor(n::Int64)::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = largest_prime_factor;\n\t@test(candidate(15)\
  \ == 5)\n\t@test(candidate(27) == 3)\n\t@test(candidate(63) == 7)\n\t@test(candidate(330)\
  \ == 11)\n\t@test(candidate(13195) == 29)\nend\n"
completions: ["    for i in 2:n\n        if n % i == 0\n            return largest_prime_factor(n/i)\n\
    \        end\n    end\n    return n\nend", "    if n <= 1\n        return 0\n\
    \    end\n    if isprime(n)\n        return n\n    end\n    for i in primes(n)\n\
    \        if n % i == 0\n            return largest_prime_factor(n/i)\n       \
    \ end\n    end\nend", "    for i in 2:n\n        if n % i == 0\n            return\
    \ largest_prime_factor(n / i)\n        end\n    end\n    return n\nend", "   \
    \ for i in primes(n)\n        if n % i == 0\n            return i\n        end\n\
    \    end\nend", "    for i in 2:n\n        if n % i == 0\n            return largest_prime_factor(n/i)\n\
    \        end\n    end\n    return n\nend", "    # Initialize a list of primes\n\
    \    primes = [2]\n    # Initialize a list of factors\n    factors = []\n    #\
    \ Initialize a list of prime factors\n    prime_factors = []\n    # Initialize\
    \ a counter\n    i = 1\n    # Initialize a variable to store the largest prime\
    \ factor\n    largest_prime_factor = 0\n    # Initialize a variable to store the\
    \ largest prime factor\n    largest_prime_factor = 0\n    # Initialize a variable\
    \ to store the current prime\n    current_prime = 0\n    # Initialize a variable\
    \ to store the current factor\n    current_factor = 0\n    # Initialize a variable\
    \ to store the current prime factor\n    current_prime_factor = 0\n    # Initialize\
    \ a variable to store the current number\n    current_number = n\n    # Initialize\
    \ a variable to store the current number\n    current_number = n\n    # Initialize\
    \ a variable to store the current number\n    current_number = n\n    # Initialize\
    \ a variable to store the current number\n    current_number = n\n    # Initialize\
    \ a variable to store the current number\n    current_number = n\n    # Initialize\
    \ a variable to store the current number\n    current_number = n\n    # Initialize\
    \ a variable to store the current number\n    current_number = n\n    # Initialize\
    \ a variable to store the current number\n    current_number = n\n    # Initialize\
    \ a variable to store the current number\n    current_number = n\n    # Initialize\
    \ a variable to store the current number\n    current_number = n\n    # Initialize\
    \ a variable to store the current number\n    current_number = n\n    # Initialize\
    \ a variable to store the current number\n    current_number = n\n    # Initialize\
    \ a variable to store the current number\n    current_number = n\n    # Initialize\
    \ a variable to store the current number\n    current_number = n\n    # Initialize\
    \ a variable to store the current number\n    current_number = n\n    # Initialize\
    \ a variable to store the current number\n    current_number = n\n    # Initialize\
    \ a variable to store the current number\n    current_number = n\n    # Initialize\
    \ a variable to store the current number\n    current_number = n\n    # Initial",
  "    # Initialize the largest prime factor to 2\n    largest_prime_factor = 2\n\
    \    # Initialize the factor to 2\n    factor = 2\n    # While the factor is less\
    \ than the square root of n\n    while factor <= sqrt(n)\n        # If n is divisible\
    \ by the factor\n        if n % factor == 0\n            # Set n to n divided\
    \ by the factor\n            n = n / factor\n            # Set the largest prime\
    \ factor to the factor\n            largest_prime_factor = factor\n        else\n\
    \            # Increment the factor by 1\n            factor += 1\n        end\n\
    \    end\n    # Return the largest prime factor\n    return largest_prime_factor\n\
    end", "    # TODO: Implement me\n    return 0\nend", "    for i in 2:n\n     \
    \   if n % i == 0\n            return largest_prime_factor(n/i)\n        end\n\
    \    end\n    return n\nend", "    for i in 2:n\n        if n % i == 0\n     \
    \       return largest_prime_factor(n/i)\n        end\n    end\n    return n\n\
    end", "    for i in 2:n\n        if n % i == 0\n            return largest_prime_factor(n/i)\n\
    \        end\n    end\n    return n\nend", "    for i in primes(n)\n        if\
    \ n % i == 0\n            return i\n        end\n    end\nend", "    # YOUR CODE\
    \ HERE\nend", "    prime_factors = []\n    factor = 2\n    while n > 1\n     \
    \   while n % factor == 0\n            push!(prime_factors, factor)\n        \
    \    n /= factor\n        end\n        factor += 1\n    end\n    return prime_factors[end]\n\
    end", "    # your code here\nend", "    # Find the largest prime factor of n.\n\
    \    # Assume n > 1 and is not a prime.\n    #\n    # We will use the fact that\
    \ every number n can be written as a product of primes.\n    # We will use the\
    \ fact that the largest prime factor of n is less than or equal to sqrt(n).\n\
    \    # We will use the fact that if n is not prime, then it has a prime factor\
    \ less than or equal to sqrt(n).\n    # We will use the fact that if n is not\
    \ prime, then it has a prime factor less than or equal to sqrt(n).\n    # We will\
    \ use the fact that if n is not prime, then it has a prime factor less than or\
    \ equal to sqrt(n).\n    # We will use the fact that if n is not prime, then it\
    \ has a prime factor less than or equal to sqrt(n).\n    # We will use the fact\
    \ that if n is not prime, then it has a prime factor less than or equal to sqrt(n).\n\
    \    # We will use the fact that if n is not prime, then it has a prime factor\
    \ less than or equal to sqrt(n).\n    # We will use the fact that if n is not\
    \ prime, then it has a prime factor less than or equal to sqrt(n).\n    # We will\
    \ use the fact that if n is not prime, then it has a prime factor less than or\
    \ equal to sqrt(n).\n    # We will use the fact that if n is not prime, then it\
    \ has a prime factor less than or equal to sqrt(n).\n    # We will use the fact\
    \ that if n is not prime, then it has a prime factor less than or equal to sqrt(n).\n\
    \    # We will use the fact that if n is not prime, then it has a prime factor\
    \ less than or equal to sqrt(n).\n    # We will use the fact that if n is not\
    \ prime, then it has a prime factor less than or equal to sqrt(n).\n    # We will\
    \ use the fact that if n is not prime, then it has a prime factor less than or\
    \ equal to sqrt(n).\n    # We will use the fact that if n is not prime, then it\
    \ has a prime factor less than or equal to sqrt(n).\n   ", "    # YOUR CODE HERE\n\
    end\n ", "    for i in primes(n)\n        if n % i == 0\n            return i\n\
    \        end\n    end\nend", "    for i in 2:n \n        if n % i == 0 \n    \
    \        return largest_prime_factor(n/i)\n        end\n    end\n    return n\n\
    end", "    for i in primes(n)\n        if n % i == 0\n            return i\n \
    \       end\n    end\nend", "    i = 2\n    while i <= n\n        if n % i ==\
    \ 0\n            n /= i\n        else\n            i += 1\n        end\n    end\n\
    \    return i\nend", "    for i in 2:n\n        if n % i == 0\n            return\
    \ largest_prime_factor(n/i)\n        end\n    end\n    return n\nend", "    i\
    \ = 2\n    while i <= n\n        if n % i == 0\n            n /= i\n        else\n\
    \            i += 1\n        end\n    end\n    return i\nend", "    # YOUR CODE\
    \ HERE\nend", "    for i in primes(n)\n        if n % i == 0\n            return\
    \ i\n        end\n    end\nend", "    if n == 2\n        return 2\n    end\n \
    \   if n % 2 == 0\n        return largest_prime_factor(n/2)\n    end\n    for\
    \ i in 3:2:floor(Int64, sqrt(n))\n        if n % i == 0\n            return largest_prime_factor(n/i)\n\
    \        end\n    end\n    return n\nend", "    # TODO: Implement me!\n    return\
    \ 0\nend", "    # TODO: Write your code here\n    return 0\nend", "    factor\
    \ = 2\n    while n > 1\n        while n % factor == 0\n            n /= factor\n\
    \        end\n        factor += 1\n    end\n    return factor - 1\nend", "   \
    \ i = 2\n    while i <= n\n        if n % i == 0\n            n /= i\n       \
    \ else\n            i += 1\n        end\n    end\n    return i\nend", "    # your\
    \ code here\nend", "    for i in 2:n \n        if n % i == 0 \n            return\
    \ largest_prime_factor(n / i)\n        end\n    end\n    return n\nend", "   \
    \ for i in 2:n\n        if n % i == 0\n            return largest_prime_factor(n\
    \ \xF7 i)\n        end\n    end\n    return n\nend", "    for i in 2:n\n     \
    \   if n % i == 0\n            return largest_prime_factor(n/i)\n        end\n\
    \    end\n    return n\nend", "    # Initialize the largest prime factor to 1\n\
    \    largest_prime_factor = 1\n    # Initialize the divisor to 2\n    divisor\
    \ = 2\n    # While n is greater than 1\n    while n > 1\n        # If n is divisible\
    \ by divisor\n        if n % divisor == 0\n            # Update the largest prime\
    \ factor\n            largest_prime_factor = divisor\n            # Update n\n\
    \            n = n / divisor\n        else\n            # Increment the divisor\n\
    \            divisor = divisor + 1\n        end\n    end\n    # Return the largest\
    \ prime factor\n    return largest_prime_factor\nend", "    for i in 2:n\n   \
    \     if n % i == 0\n            return largest_prime_factor(n / i)\n        end\n\
    \    end\n    return n\nend", "    for i in 2:n\n        if n % i == 0\n     \
    \       return largest_prime_factor(n/i)\n        end\n    end\n    return n\n\
    end", "    if n == 2\n        return 2\n    end\n    for i in 2:n\n        if\
    \ n % i == 0\n            return largest_prime_factor(n/i)\n        end\n    end\n\
    end", "    for i in 2:n\n        if is_prime(i) && n % i == 0\n            return\
    \ i\n        end\n    end\nend", "    # YOUR CODE HERE\n    return 0\nend", " \
    \   # YOUR CODE HERE\nend", "    # YOUR CODE HERE\n    return 0\nend", "    for\
    \ i in 2:n\n        if n % i == 0\n            return largest_prime_factor(n/i)\n\
    \        end\n    end\n    return n\nend", "    # YOUR CODE HERE\n    return 0\n\
    end", "    for i in 2:n\n        if n % i == 0\n            return largest_prime_factor(n/i)\n\
    \        end\n    end\n    return n\nend", "    for i in 2:n\n        if n % i\
    \ == 0\n            return largest_prime_factor(n/i)\n        end\n    end\n \
    \   return n\nend", "    # TODO: Write this function\n    return 0\nend", "  \
    \  # TODO: Fill in this function\n    return 0\nend", "    for i in primes(n)\n\
    \        if n % i == 0\n            return i\n        end\n    end\nend", "  \
    \  for i in 2:n\n        if n % i == 0\n            return largest_prime_factor(n/i)\n\
    \        end\n    end\n    return n\nend", "    # YOUR CODE HERE\nend", "    #\
    \ YOUR CODE HERE\nend", "    i = 2\n    while i <= n\n        if n % i == 0\n\
    \            n /= i\n        else\n            i += 1\n        end\n    end\n\
    \    return i\nend", "    if n == 1\n        return 1\n    end\n    for i in 2:n\n\
    \        if n % i == 0\n            return largest_prime_factor(n/i)\n       \
    \ end\n    end\nend", "    for i in 2:n\n        if n % i == 0\n            return\
    \ largest_prime_factor(n/i)\n        end\n    end\n    return n\nend", "    i\
    \ = 2\n    while i <= n\n        if n % i == 0\n            n /= i\n        else\n\
    \            i += 1\n        end\n    end\n    return i\nend", "    # Initialize\
    \ the largest prime factor to 1\n    largest_prime_factor = 1\n    # Initialize\
    \ the divisor to 2\n    divisor = 2\n    # While n is greater than 1\n    while\
    \ n > 1\n        # If n is divisible by divisor\n        if n % divisor == 0\n\
    \            # Update n to be n divided by divisor\n            n = n / divisor\n\
    \            # Update the largest prime factor to be divisor\n            largest_prime_factor\
    \ = divisor\n        else\n            # Increment the divisor by 1\n        \
    \    divisor = divisor + 1\n        end\n    end\n    # Return the largest prime\
    \ factor\n    return largest_prime_factor\nend", "    # TODO: implement this function\n\
    \    return 0\nend", "    for i in 2:n\n        if n % i == 0\n            return\
    \ largest_prime_factor(n/i)\n        end\n    end\n    return n\nend", "    if\
    \ n == 2\n        return 2\n    end\n    for i in 2:n\n        if n % i == 0\n\
    \            return largest_prime_factor(n / i)\n        end\n    end\nend", " \
    \   for i in 2:n\n        if n % i == 0\n            return largest_prime_factor(n/i)\n\
    \        end\n    end\n    return n\nend", "    if n <= 1\n        return 0\n\
    \    end\n    if isprime(n)\n        return n\n    end\n    for i in 2:n\n   \
    \     if n % i == 0\n            return largest_prime_factor(n / i)\n        end\n\
    \    end\nend", "    for i in primes(n)\n        if n % i == 0\n            return\
    \ i\n        end\n    end\nend", "    # YOUR CODE HERE\n    return 0\nend", " \
    \   # your code here\nend", "    factors = prime_factors(n)\n    return factors[end]\n\
    end", "    for i in primes(n)\n        if n % i == 0\n            return i\n \
    \       end\n    end\nend", "    # TODO: implement this function\n    return 0\n\
    end", "    for i in 2:n\n        if n % i == 0\n            return largest_prime_factor(n/i)\n\
    \        end\n    end\n    return n\nend", "    p = 2\n    while p*p <= n\n  \
    \      while n % p == 0\n            n = n / p\n        end\n        p = p + 1\n\
    \    end\n    return n\nend", "    for i in 2:n\n        if n % i == 0\n     \
    \       return largest_prime_factor(n/i)\n        end\n    end\n    return n\n\
    end", "    if n % 2 == 0\n        return largest_prime_factor(n/2)\n    end\n\
    \    for i in 3:2:floor(Int64,sqrt(n))\n        if n % i == 0\n            return\
    \ largest_prime_factor(n/i)\n        end\n    end\n    return n\nend", "    #\
    \ your code here\nend", "    for i in primes(n)\n        if n % i == 0\n     \
    \       return i\n        end\n    end\nend", "    for i in 2:n\n        if n\
    \ % i == 0\n            return largest_prime_factor(n / i)\n        end\n    end\n\
    \    return n\nend", "    # YOUR CODE HERE\nend", "    if n == 1\n        return\
    \ 1\n    end\n    for i in 2:n\n        if n % i == 0\n            return largest_prime_factor(n/i)\n\
    \        end\n    end\nend", "    # TODO: implement this function\n    return\
    \ 0\nend", "    for i in primes(n)\n        if n % i == 0\n            return\
    \ i\n        end\n    end\nend", "    # YOUR CODE HERE\n    return 0\nend", " \
    \   for i in 2:n\n        if is_prime(i) && n % i == 0\n            return i\n\
    \        end\n    end\nend", "    # YOUR CODE HERE\nend", "    # YOUR CODE HERE\n\
    end", "    i = 2\n    while i <= n\n        if n % i == 0\n            n /= i\n\
    \        else\n            i += 1\n        end\n    end\n    return i\nend", " \
    \   # Your code here\nend", "    for i in 2:n\n        if n % i == 0\n       \
    \     return largest_prime_factor(n/i)\n        end\n    end\n    return n\nend",
  "    for i in 2:n\n        if n % i == 0\n            return largest_prime_factor(n/i)\n\
    \        end\n    end\n    return n\nend", "    # We know that n is not a prime,\
    \ so it must have a prime factor less than or equal to sqrt(n).\n    # We can\
    \ use this to reduce the search space.\n    for i in primes(Int64(ceil(sqrt(n))))\n\
    \        if n % i == 0\n            return i\n        end\n    end\nend", "  \
    \  for i in primes(n)\n        if n % i == 0\n            return i\n        end\n\
    \    end\nend", "    for i in 2:n\n        if n % i == 0\n            return largest_prime_factor(n/i)\n\
    \        end\n    end\n    return n\nend", "    # Initialize the largest prime\
    \ factor to 1\n    largest_prime_factor = 1\n    # Initialize the divisor to 2\n\
    \    divisor = 2\n    # While n is greater than 1\n    while n > 1\n        #\
    \ If n is divisible by divisor\n        if n % divisor == 0\n            # Set\
    \ n to n divided by divisor\n            n = n / divisor\n            # Set the\
    \ largest prime factor to divisor\n            largest_prime_factor = divisor\n\
    \        else\n            # Increment the divisor by 1\n            divisor +=\
    \ 1\n        end\n    end\n    # Return the largest prime factor\n    return largest_prime_factor\n\
    end", "    # We only need to check up to the square root of n\n    for i in 2:floor(Int64,\
    \ sqrt(n))\n        if n % i == 0\n            # If i is a factor of n, then n/i\
    \ is also a factor of n\n            return max(largest_prime_factor(i), largest_prime_factor(n/i))\n\
    \        end\n    end\n    # If n is prime, then it is its own largest prime factor\n\
    \    return n\nend", "    p = 2\n    while n > p\n        if n % p == 0\n    \
    \        n = n / p\n        else\n            p += 1\n        end\n    end\n \
    \   return p\nend", "    # your code here\nend", "    i = 2\n    while i <= n\n\
    \        if n % i == 0\n            n /= i\n        else\n            i += 1\n\
    \        end\n    end\n    return i\nend", "    # YOUR CODE HERE\nend", "    #\
    \ YOUR CODE HERE\n    return 0\nend", "    for i in 2:n\n        if n % i == 0\n\
    \            return largest_prime_factor(n/i)\n        end\n    end\n    return\
    \ n\nend", "    i = 2\n    while i <= n\n        if n % i == 0\n            n\
    \ /= i\n        else\n            i += 1\n        end\n    end\n    return i\n\
    end", "    if n == 1\n        return 1\n    end\n    for i in 2:n\n        if\
    \ n % i == 0\n            return largest_prime_factor(n/i)\n        end\n    end\n\
    end", "    factor = 2\n    while n > 1\n        while n % factor == 0\n      \
    \      n /= factor\n        end\n        factor += 1\n    end\n    return factor\
    \ - 1\nend", "    # TODO: implement this function\n    return 0\nend", "    for\
    \ i in 2:n\n        if n % i == 0\n            return largest_prime_factor(n/i)\n\
    \        end\n    end\n    return n\nend", "    if n == 2\n        return 2\n\
    \    end\n    for i in 2:n-1\n        if n % i == 0\n            return largest_prime_factor(n/i)\n\
    \        end\n    end\nend", "    # YOUR CODE HERE\nend", "    # TODO: Fill in\
    \ this function\n    return 0\nend", "    for i in primes(n)\n        if n % i\
    \ == 0\n            return i\n        end\n    end\nend", "    for i in 2:n\n\
    \        if n % i == 0\n            return largest_prime_factor(n/i)\n       \
    \ end\n    end\n    return n\nend", "    for i in primes(n)\n        if n % i\
    \ == 0\n            return i\n        end\n    end\nend", "    for i in 2:n\n\
    \        if n % i == 0\n            return largest_prime_factor(n/i)\n       \
    \ end\n    end\n    return n\nend", "    for i in primes(n)\n        if n % i\
    \ == 0\n            return i\n        end\n    end\nend", "    i = 2\n    while\
    \ i <= n\n        if n % i == 0\n            n /= i\n        else\n          \
    \  i += 1\n        end\n    end\n    return i\nend", "    # TODO: write your code\
    \ here\n    return 0\nend", "    # TODO: Write your code here\n    return 0\n\
    end", "    for i in 2:n\n        if n % i == 0\n            return largest_prime_factor(n/i)\n\
    \        end\n    end\n    return n\nend", "    for i in 2:n\n        if n % i\
    \ == 0\n            return largest_prime_factor(n/i)\n        end\n    end\n \
    \   return n\nend", "    # your code here\nend", "    # your code here\nend",
  "    for i in 2:n\n        if n % i == 0\n            return largest_prime_factor(n/i)\n\
    \        end\n    end\n    return n\nend", "    for i in 2:n\n        if n % i\
    \ == 0\n            return largest_prime_factor(n / i)\n        end\n    end\n\
    \    return n\nend", "    # YOUR CODE HERE\n    return 0\nend", "    # your code\
    \ here\nend", "    i = 2\n    while i <= n\n        if n % i == 0\n          \
    \  n /= i\n        else\n            i += 1\n        end\n    end\n    return\
    \ i\nend", "    for i in primes(n)\n        if n % i == 0\n            return\
    \ i\n        end\n    end\nend", "    for i in 2:n\n        if n % i == 0\n  \
    \          return largest_prime_factor(n/i)\n        end\n    end\n    return\
    \ n\nend", "    for i in 2:n\n        if n % i == 0\n            return largest_prime_factor(n/i)\n\
    \        end\n    end\n    return n\nend", "    # YOUR CODE HERE\nend", "    #\
    \ YOUR CODE HERE\nend", "    if n == 2\n        return 2\n    end\n    for i in\
    \ 2:n-1\n        if n % i == 0\n            return largest_prime_factor(n/i)\n\
    \        end\n    end\nend", "    for i in 2:n\n        if n % i == 0\n      \
    \      return largest_prime_factor(n/i)\n        end\n    end\n    return n\n\
    end", "    # YOUR CODE HERE\nend", "    if n < 2\n        return 0\n    end\n\
    \    if isprime(n)\n        return n\n    end\n    for i in primes(n)\n      \
    \  if n % i == 0\n            return largest_prime_factor(n / i)\n        end\n\
    \    end\nend", "    for i in 2:n\n        if n % i == 0\n            return largest_prime_factor(n/i)\n\
    \        end\n    end\n    return n\nend", "    for i in 2:n\n        if n % i\
    \ == 0\n            return largest_prime_factor(n/i)\n        end\n    end\n \
    \   return n\nend", "    i = 2\n    while i <= n\n        if n % i == 0\n    \
    \        n /= i\n        else\n            i += 1\n        end\n    end\n    return\
    \ i\nend", "    # TODO: Implement this function\n    return 0\nend", "    for\
    \ i in primes(n)\n        if n % i == 0\n            return i\n        end\n \
    \   end\nend", "    i = 2\n    while i <= n\n        if n % i == 0\n         \
    \   n /= i\n        else\n            i += 1\n        end\n    end\n    return\
    \ i\nend", "    # TODO: Write this function\nend", "    # YOUR CODE HERE\nend",
  "    for i in 2:n\n        if n % i == 0\n            return largest_prime_factor(n/i)\n\
    \        end\n    end\n    return n\nend", "    factor = 2\n    while n > 1\n\
    \        while n % factor == 0\n            n /= factor\n        end\n       \
    \ factor += 1\n    end\n    return factor - 1\nend", "    for i in 2:n\n     \
    \   if n % i == 0\n            return largest_prime_factor(n/i)\n        end\n\
    \    end\n    return n\nend", "    for i in 2:n\n        if n % i == 0\n     \
    \       return largest_prime_factor(n / i)\n        end\n    end\n    return n\n\
    end", "    # TODO: implement me\n    return 0\nend", "    i = 2\n    while i <=\
    \ n\n        if n % i == 0\n            n /= i\n        else\n            i +=\
    \ 1\n        end\n    end\n    return i\nend", "    for i in 2:n\n        if n\
    \ % i == 0\n            return largest_prime_factor(n/i)\n        end\n    end\n\
    \    return n\nend", "    # your code here\n    return 0\nend", "    # YOUR CODE\
    \ HERE\nend", "    # YOUR CODE HERE\nend", "    for i in 2:n\n        if n % i\
    \ == 0\n            return largest_prime_factor(n/i)\n        end\n    end\n \
    \   return n\nend", "    # your code here\nend", "    p = 2\n    while n > p\n\
    \        if n % p == 0\n            n = n / p\n        else\n            p +=\
    \ 1\n        end\n    end\n    return p\nend", "    for i in 2:n\n        if n\
    \ % i == 0\n            return largest_prime_factor(n/i)\n        end\n    end\n\
    \    return n\nend", "    for i in 2:n\n        if n % i == 0\n            return\
    \ largest_prime_factor(n/i)\n        end\n    end\n    return n\nend", "    #\
    \ TODO: implement this function\n    return 0\nend", "    i = 2\n    while i <=\
    \ n\n        if n % i == 0\n            n /= i\n        else\n            i +=\
    \ 1\n        end\n    end\n    return i\nend", "    for i in 2:n\n        if n\
    \ % i == 0\n            return largest_prime_factor(n / i)\n        end\n    end\n\
    \    return n\nend", "    # TODO: Write your code here\n    return 0\nend", " \
    \   if n < 2\n        return 0\n    end\n    if isprime(n)\n        return n\n\
    \    end\n    for i in 2:n\n        if n % i == 0\n            return largest_prime_factor(n/i)\n\
    \        end\n    end\nend", "    largest_prime = 1\n    for i in 2:n\n      \
    \  if n % i == 0\n            largest_prime = i\n            n = n / i\n     \
    \   end\n    end\n    return largest_prime\nend", "    # YOUR CODE HERE\nend",
  "    for i in 2:n\n        if n % i == 0\n            return largest_prime_factor(n/i)\n\
    \        end\n    end\n    return n\nend", "    # TODO: implement this function\n\
    end", "    if n == 2\n        return 2\n    end\n    for i in 2:n\n        if\
    \ n % i == 0\n            return largest_prime_factor(n / i)\n        end\n  \
    \  end\nend", "    for i in 2:n\n        if n % i == 0\n            return largest_prime_factor(n/i)\n\
    \        end\n    end\n    return n\nend", "    if n == 1\n        return 1\n\
    \    end\n    for i in 2:n\n        if n % i == 0\n            return largest_prime_factor(n/i)\n\
    \        end\n    end\nend", "    for i in 2:n\n        if n % i == 0\n      \
    \      return largest_prime_factor(n/i)\n        end\n    end\n    return n\n\
    end", "    # TODO: implement this function\n    return 0\nend", "    for i in\
    \ primes(n)\n        if n % i == 0\n            return i\n        end\n    end\n\
    end", "    for i in primes(n)\n        if n % i == 0\n            return i\n \
    \       end\n    end\nend", "    for i in 2:n\n        if n % i == 0\n       \
    \     return largest_prime_factor(n/i)\n        end\n    end\n    return n\nend",
  "    for i in primes(n)\n        if n % i == 0\n            return i\n        end\n\
    \    end\nend", "    # your code here\nend", "    # your code here\nend", "  \
    \  p = 2\n    while n % p != 0\n        p += 1\n    end\n    if n == p\n     \
    \   return n\n    else\n        return largest_prime_factor(n / p)\n    end\n\
    end", "    for i in primes(n)\n        if n % i == 0\n            return i\n \
    \       end\n    end\nend", "    for i in primes(n)\n        if n % i == 0\n \
    \           return i\n        end\n    end\nend", "    for i in 2:n\n        if\
    \ n % i == 0\n            return largest_prime_factor(n/i)\n        end\n    end\n\
    \    return n\nend", "    for i in 2:n \n        if n % i == 0 \n            return\
    \ largest_prime_factor(n/i)\n        end\n    end\n    return n\nend", "    for\
    \ i in 2:n\n        if n % i == 0\n            return largest_prime_factor(n/i)\n\
    \        end\n    end\n    return n\nend", "    # TODO: Write your code here\n\
    \    return 0\nend", "    for i in 2:n\n        if n % i == 0\n            return\
    \ largest_prime_factor(n/i)\n        end\n    end\n    return n\nend", "    for\
    \ i in 2:n\n        if n % i == 0\n            return largest_prime_factor(n/i)\n\
    \        end\n    end\n    return n\nend", "    if n == 2\n        return 2\n\
    \    end\n    i = 2\n    while i <= n\n        if n % i == 0\n            n =\
    \ n / i\n        else\n            i += 1\n        end\n    end\n    return i\n\
    end", "    for i in primes(n)\n        if n % i == 0\n            return i\n \
    \       end\n    end\nend", "    if n == 1\n        return 1\n    end\n    if\
    \ isprime(n)\n        return n\n    end\n    for i in 2:n\n        if n % i ==\
    \ 0\n            return largest_prime_factor(n/i)\n        end\n    end\nend",
  "    # TODO: Implement me!\n    return 0\nend", "    # your code here\nend", " \
    \   if n == 1\n        return 1\n    end\n    i = 2\n    while i <= n\n      \
    \  if n % i == 0\n            return largest_prime_factor(n/i)\n        end\n\
    \        i += 1\n    end\nend", "    # TODO: Implement this function\n    return\
    \ 0\nend", "    for i in primes(n)\n        if n % i == 0\n            return\
    \ i\n        end\n    end\nend", "    # if n is prime, return n\n    if isprime(n)\n\
    \        return n\n    end\n    # if n is even, return 2\n    if n % 2 == 0\n\
    \        return 2\n    end\n    # if n is odd, find the largest prime factor of\
    \ n\n    for i in 3:2:floor(sqrt(n))\n        if n % i == 0\n            if isprime(i)\n\
    \                return i\n            end\n        end\n    end\nend", "    for\
    \ i in reverse(2:floor(Int64, sqrt(n)))\n        if n % i == 0 && isprime(i)\n\
    \            return i\n        end\n    end\nend", "    for i in primes(n)\n \
    \       if n % i == 0\n            return i\n        end\n    end\nend", "   \
    \ # TODO: implement this function\n    return 0\nend", "    for i in primes(n)\n\
    \        if n % i == 0\n            return i\n        end\n    end\nend", "  \
    \  for i in 2:n\n        if n % i == 0\n            return largest_prime_factor(n/i)\n\
    \        end\n    end\n    return n\nend", "    for i in 2:n\n        if n % i\
    \ == 0\n            return largest_prime_factor(n / i)\n        end\n    end\n\
    \    return n\nend", "    for i in primes(n)\n        if n % i == 0\n        \
    \    return i\n        end\n    end\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
