name: HumanEval_44_change_base
language: julia
results:
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient > 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    # check if base is less than 10\n    if base < 10\n\
    \        # convert to string\n        return string(x, base=base)\n    else\n\
    \        error(\"Base must be less than 10\")\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x < base\n        return string(x)\n    else\n\
    \        return change_base(x \xF7 base, base) * string(x % base)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient > 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x < base\n        return string(x)\n    else\n\
    \        return change_base(x \xF7 base, base) * string(x % base)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    result = \"\"\n    while x > 0\n        result =\
    \ string(x % base) * result\n        x = x \xF7 base\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x < base\n        return string(x)\n    else\n\
    \        return change_base(div(x, base), base) * string(mod(x, base))\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x < base\n        return string(x)\n    else\n\
    \        return change_base(x \xF7 base, base) * string(x % base)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient > 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x < base\n        return string(x)\n    else\n\
    \        return change_base(div(x, base), base) * string(mod(x, base))\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    if\
    \ x < 0\n        return \"-\" * change_base(-x, base)\n    end\n    result = \"\
    \"\n    while x > 0\n        result = string(x % base) * result\n        x = x\
    \ \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = div(x, base)\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x < base\n        return string(x)\n    else\n\
    \        return change_base(div(x, base), base) * string(mod(x, base))\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient > 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x < base\n        return string(x)\n    else\n\
    \        return change_base(div(x, base), base) * string(mod(x, base))\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    if\
    \ x < 0\n        return \"-\" * change_base(-x, base)\n    end\n    result = \"\
    \"\n    while x != 0\n        result = string(x % base) * result\n        x =\
    \ x \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x < base\n        return string(x)\n    else\n\
    \        return change_base(x \xF7 base, base) * string(x % base)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base > 10\n        println(\"base numbers are\
    \ less than 10\")\n        return\n    end\n    if x < base\n        return string(x)\n\
    \    end\n    return change_base(div(x, base), base) * string(rem(x, base))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x < base\n        return string(x)\n    else\n\
    \        return change_base(x \xF7 base, base) * string(x % base)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base > 10\n        println(\"base numbers are\
    \ less than 10\")\n        return\n    end\n    if x == 0\n        return \"0\"\
    \n    end\n    result = \"\"\n    while x > 0\n        result = string(x % base)\
    \ * result\n        x = x \xF7 base\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\"\
    )\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\"\
    )\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\"\
    )\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t\
    @test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5,\
    \ 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) ==\
    \ \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x != 0\n        result = string(x % base) * result\n     \
    \   x = x \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    result = \"\"\n    while x > 0\n        result =\
    \ string(x % base) * result\n        x = x \xF7 base\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    res\
    \ = \"\"\n    while x > 0\n        res = string(x % base) * res\n        x = x\
    \ \xF7 base\n    end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    result = \"\"\n    while x > 0\n        result =\
    \ string(x % base) * result\n        x = x \xF7 base\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x < base\n        return string(x)\n    else\n\
    \        return change_base(div(x, base), base) * string(mod(x, base))\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x < base\n        return string(x)\n    else\n\
    \        return change_base(x \xF7 base, base) * string(x % base)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient > 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    res\
    \ = \"\"\n    while x > 0\n        res = string(x % base) * res\n        x = x\
    \ \xF7 base\n    end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x < base\n        return string(x)\n    else\n\
    \        return change_base(div(x, base), base) * string(mod(x, base))\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    res\
    \ = \"\"\n    while x > 0\n        res = string(x % base) * res\n        x = x\
    \ \xF7 base\n    end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient != 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x < base\n        return string(x)\n    else\n\
    \        return change_base(x \xF7 base, base) * string(x % base)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient > 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x < base\n        return string(x)\n    else\n\
    \        return change_base(div(x, base), base) * string(mod(x, base))\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x != 0\n        result = string(x % base) * result\n     \
    \   x = x \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    if\
    \ x < 0\n        return \"-\" * change_base(-x, base)\n    end\n    result = \"\
    \"\n    while x > 0\n        result = string(x % base) * result\n        x = x\
    \ \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x < base\n        return string(x)\n    else\n\
    \        return change_base(div(x, base), base) * string(mod(x, base))\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x < base\n        return string(x)\n    else\n\
    \        return change_base(x \xF7 base, base) * string(x % base)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient > 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient > 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x != 0\n        result = string(x % base) * result\n     \
    \   x = div(x, base)\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient > 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    if\
    \ x < 0\n        return \"-\" * change_base(-x, base)\n    end\n    result = \"\
    \"\n    while x > 0\n        result = string(x % base) * result\n        x = x\
    \ \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x < base\n        return string(x)\n    else\n\
    \        return change_base(x \xF7 base, base) * string(x % base)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient != 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient != 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient != 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient > 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient != 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    if\
    \ x < 0\n        return \"-\" * change_base(-x, base)\n    end\n    digits = \"\
    0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    result = \"\"\n    while x > 0\n \
    \       result = digits[x % base + 1] * result\n        x = x \xF7 base\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    # your code here\n    return \"\"\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\"\
    )\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\"\
    )\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\"\
    )\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t\
    @test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5,\
    \ 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) ==\
    \ \"7\")\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmph_prza8s.jl:20\\n  Expression: candidate(8,\
    \ 3) == \"22\"\\n   Evaluated: \"\" == \"22\"\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmph_prza8s.jl:20\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmph_prza8s.jl:19\\ntest set: Test Failed at /tmp/tmph_prza8s.jl:21\\\
    n  Expression: candidate(9, 3) == \"100\"\\n   Evaluated: \"\" == \"100\"\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmph_prza8s.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmph_prza8s.jl:19\\ntest set: Test Failed at /tmp/tmph_prza8s.jl:22\\\
    n  Expression: candidate(234, 2) == \"11101010\"\\n   Evaluated: \"\" == \"11101010\"\
    \\nStacktrace:\\n [1] top-level scope at /tmp/tmph_prza8s.jl:22\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmph_prza8s.jl:19\\ntest set: Test Failed at /tmp/tmph_prza8s.jl:23\\\
    n  Expression: candidate(16, 2) == \"10000\"\\n   Evaluated: \"\" == \"10000\"\
    \\nStacktrace:\\n [1] top-level scope at /tmp/tmph_prza8s.jl:23\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmph_prza8s.jl:19\\ntest set: Test Failed at /tmp/tmph_prza8s.jl:24\\\
    n  Expression: candidate(8, 2) == \"1000\"\\n   Evaluated: \"\" == \"1000\"\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmph_prza8s.jl:24\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmph_prza8s.jl:19\\ntest set: Test Failed at /tmp/tmph_prza8s.jl:25\\\
    n  Expression: candidate(7, 2) == \"111\"\\n   Evaluated: \"\" == \"111\"\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmph_prza8s.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmph_prza8s.jl:19\\ntest set: Test Failed at /tmp/tmph_prza8s.jl:26\\\
    n  Expression: candidate(2, 3) == \"2\"\\n   Evaluated: \"\" == \"2\"\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmph_prza8s.jl:26\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmph_prza8s.jl:19\\ntest set: Test Failed at /tmp/tmph_prza8s.jl:27\\\
    n  Expression: candidate(3, 4) == \"3\"\\n   Evaluated: \"\" == \"3\"\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmph_prza8s.jl:27\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmph_prza8s.jl:19\\ntest set: Test Failed at /tmp/tmph_prza8s.jl:28\\\
    n  Expression: candidate(4, 5) == \"4\"\\n   Evaluated: \"\" == \"4\"\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmph_prza8s.jl:28\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmph_prza8s.jl:19\\ntest set: Test Failed at /tmp/tmph_prza8s.jl:29\\\
    n  Expression: candidate(5, 6) == \"5\"\\n   Evaluated: \"\" == \"5\"\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmph_prza8s.jl:29\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmph_prza8s.jl:19\\ntest set: Test Failed at /tmp/tmph_prza8s.jl:30\\\
    n  Expression: candidate(6, 7) == \"6\"\\n   Evaluated: \"\" == \"6\"\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmph_prza8s.jl:30\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmph_prza8s.jl:19\\ntest set: Test Failed at /tmp/tmph_prza8s.jl:31\\\
    n  Expression: candidate(7, 8) == \"7\"\\n   Evaluated: \"\" == \"7\"\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmph_prza8s.jl:31\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmph_prza8s.jl:19\\nTest Summary: | Fail  Total\\\
    ntest set      |   12     12\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x < base\n        return string(x)\n    else\n\
    \        return change_base(div(x, base), base) * string(rem(x, base))\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient > 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x < base\n        return string(x)\n    else\n\
    \        return change_base(x \xF7 base, base) * string(x % base)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    result = \"\"\n    while x > 0\n        result =\
    \ string(x % base) * result\n        x = x \xF7 base\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x != 0\n        result = string(x % base) * result\n     \
    \   x = x \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    res\
    \ = \"\"\n    while x > 0\n        res = string(x % base) * res\n        x = x\
    \ \xF7 base\n    end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    result = \"\"\n    while x > 0\n        result =\
    \ string(x % base) * result\n        x = x \xF7 base\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient > 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient > 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient > 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient > 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient > 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient != 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient > 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient != 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient > 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x != 0\n        result = string(x % base) * result\n     \
    \   x = x \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient != 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    s =\
    \ \"\"\n    while x > 0\n        s = string(x % base) * s\n        x = x \xF7\
    \ base\n    end\n    return s\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    x_str\
    \ = \"\"\n    while x > 0\n        x_str = string(x % base) * x_str\n        x\
    \ = x \xF7 base\n    end\n    return x_str\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x < base\n        return string(x)\n    else\n\
    \        return change_base(x \xF7 base, base) * string(x % base)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient, remainder = divrem(x, base)\n    if quotient\
    \ == 0\n        return string(remainder)\n    else\n        return change_base(quotient,\
    \ base) * string(remainder)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    result = \"\"\n    while x > 0\n        result =\
    \ string(x % base) * result\n        x = x \xF7 base\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x < base\n        return string(x)\n    else\n\
    \        return change_base(x \xF7 base, base) * string(x % base)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient > 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient > 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient != 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient != 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp0mzwuabo.jl:19\\n  Test threw\
    \ exception\\n  Expression: candidate(8, 3) == \"22\"\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:209\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T at essentials.jl:171\\n  Stacktrace:\\n   [1] change_base(::Int64, ::Int64)\
    \ at /tmp/tmp0mzwuabo.jl:13\\n   [2] top-level scope at /tmp/tmp0mzwuabo.jl:19\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp0mzwuabo.jl:18\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp0mzwuabo.jl:20\\n  Test threw exception\\n  Expression: candidate(9,\
    \ 3) == \"100\"\\n  MethodError: Cannot `convert` an object of type Nothing to\
    \ an object of type String\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:209\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T at essentials.jl:171\\n  Stacktrace:\\\
    n   [1] change_base(::Int64, ::Int64) at /tmp/tmp0mzwuabo.jl:13\\n   [2] top-level\
    \ scope at /tmp/tmp0mzwuabo.jl:20\\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp0mzwuabo.jl:18\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp0mzwuabo.jl:21\\n  Test threw exception\\n  Expression: candidate(234,\
    \ 2) == \"11101010\"\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type String\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:209\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T at essentials.jl:171\\n  Stacktrace:\\\
    n   [1] change_base(::Int64, ::Int64) at /tmp/tmp0mzwuabo.jl:13\\n   [2] top-level\
    \ scope at /tmp/tmp0mzwuabo.jl:21\\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp0mzwuabo.jl:18\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp0mzwuabo.jl:22\\n  Test threw exception\\n  Expression: candidate(16,\
    \ 2) == \"10000\"\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type String\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:209\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T at essentials.jl:171\\n  Stacktrace:\\\
    n   [1] change_base(::Int64, ::Int64) at /tmp/tmp0mzwuabo.jl:13\\n   [2] top-level\
    \ scope at /tmp/tmp0mzwuabo.jl:22\\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp0mzwuabo.jl:18\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp0mzwuabo.jl:23\\n  Test threw exception\\n  Expression: candidate(8,\
    \ 2) == \"1000\"\\n  MethodError: Cannot `convert` an object of type Nothing to\
    \ an object of type String\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:209\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T at essentials.jl:171\\n  Stacktrace:\\\
    n   [1] change_base(::Int64, ::Int64) at /tmp/tmp0mzwuabo.jl:13\\n   [2] top-level\
    \ scope at /tmp/tmp0mzwuabo.jl:23\\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp0mzwuabo.jl:18\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp0mzwuabo.jl:24\\n  Test threw exception\\n  Expression: candidate(7,\
    \ 2) == \"111\"\\n  MethodError: Cannot `convert` an object of type Nothing to\
    \ an object of type String\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:209\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T at essentials.jl:171\\n  Stacktrace:\\\
    n   [1] change_base(::Int64, ::Int64) at /tmp/tmp0mzwuabo.jl:13\\n   [2] top-level\
    \ scope at /tmp/tmp0mzwuabo.jl:24\\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp0mzwuabo.jl:18\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp0mzwuabo.jl:25\\n  Test threw exception\\n  Expression: candidate(2,\
    \ 3) == \"2\"\\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type String\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:209\\n    convert(::Type{T}, !Matched::AbstractString)\
    \ where T<:AbstractString at strings/basic.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T at essentials.jl:171\\n  Stacktrace:\\n   [1] change_base(::Int64, ::Int64)\
    \ at /tmp/tmp0mzwuabo.jl:13\\n   [2] top-level scope at /tmp/tmp0mzwuabo.jl:25\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp0mzwuabo.jl:18\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp0mzwuabo.jl:26\\n  Test threw exception\\n  Expression: candidate(3,\
    \ 4) == \"3\"\\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type String\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:209\\n    convert(::Type{T}, !Matched::AbstractString)\
    \ where T<:AbstractString at strings/basic.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T at essentials.jl:171\\n  Stacktrace:\\n   [1] change_base(::Int64, ::Int64)\
    \ at /tmp/tmp0mzwuabo.jl:13\\n   [2] top-level scope at /tmp/tmp0mzwuabo.jl:26\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp0mzwuabo.jl:18\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp0mzwuabo.jl:27\\n  Test threw exception\\n  Expression: candidate(4,\
    \ 5) == \"4\"\\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type String\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:209\\n    convert(::Type{T}, !Matched::AbstractString)\
    \ where T<:AbstractString at strings/basic.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T at essentials.jl:171\\n  Stacktrace:\\n   [1] change_base(::Int64, ::Int64)\
    \ at /tmp/tmp0mzwuabo.jl:13\\n   [2] top-level scope at /tmp/tmp0mzwuabo.jl:27\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp0mzwuabo.jl:18\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp0mzwuabo.jl:28\\n  Test threw exception\\n  Expression: candidate(5,\
    \ 6) == \"5\"\\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type String\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:209\\n    convert(::Type{T}, !Matched::AbstractString)\
    \ where T<:AbstractString at strings/basic.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T at essentials.jl:171\\n  Stacktrace:\\n   [1] change_base(::Int64, ::Int64)\
    \ at /tmp/tmp0mzwuabo.jl:13\\n   [2] top-level scope at /tmp/tmp0mzwuabo.jl:28\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp0mzwuabo.jl:18\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp0mzwuabo.jl:29\\n  Test threw exception\\n  Expression: candidate(6,\
    \ 7) == \"6\"\\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type String\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:209\\n    convert(::Type{T}, !Matched::AbstractString)\
    \ where T<:AbstractString at strings/basic.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T at essentials.jl:171\\n  Stacktrace:\\n   [1] change_base(::Int64, ::Int64)\
    \ at /tmp/tmp0mzwuabo.jl:13\\n   [2] top-level scope at /tmp/tmp0mzwuabo.jl:29\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp0mzwuabo.jl:18\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp0mzwuabo.jl:30\\n  Test threw exception\\n  Expression: candidate(7,\
    \ 8) == \"7\"\\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type String\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:209\\n    convert(::Type{T}, !Matched::AbstractString)\
    \ where T<:AbstractString at strings/basic.jl:210\\n    convert(::Type{T}, !Matched::T)\
    \ where T at essentials.jl:171\\n  Stacktrace:\\n   [1] change_base(::Int64, ::Int64)\
    \ at /tmp/tmp0mzwuabo.jl:13\\n   [2] top-level scope at /tmp/tmp0mzwuabo.jl:30\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp0mzwuabo.jl:18\\n  \\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient > 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient > 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x < base\n        return string(x)\n    else\n\
    \        return change_base(x \xF7 base, base) * string(x % base)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient > 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient != 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient > 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient > 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x < base\n        return string(x)\n    else\n\
    \        return change_base(x \xF7 base, base) * string(x % base)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    res\
    \ = \"\"\n    while x > 0\n        res = string(x % base) * res\n        x = x\
    \ \xF7 base\n    end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient > 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x != 0\n        result = string(x % base) * result\n     \
    \   x = x \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base > 10\n        error(\"base numbers are less\
    \ than 10\")\n    end\n    if x < 0\n        error(\"input number must be positive\"\
    )\n    end\n    if x == 0\n        return \"0\"\n    end\n    result = \"\"\n\
    \    while x > 0\n        result = string(x % base) * result\n        x = x \xF7\
    \ base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient > 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        push!(result, remainder)\n    end\n    return\
    \ reverse(result)\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjhg57lhc.jl:27\n  Test threw exception\n\
    \  Expression: candidate(8, 3) == \"22\"\n  MethodError: no method matching push!(::String,\
    \ ::Int64)\n  Closest candidates are:\n    push!(::Any, ::Any, !Matched::Any)\
    \ at abstractarray.jl:2158\n    push!(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at abstractarray.jl:2159\n    push!(!Matched::Array{Any,1}, ::Any) at array.jl:920\n\
    \    ...\n  Stacktrace:\n   [1] change_base(::Int64, ::Int64) at /tmp/tmpjhg57lhc.jl:18\n\
    \   [2] top-level scope at /tmp/tmpjhg57lhc.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpjhg57lhc.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmpjhg57lhc.jl:28\n  Test threw exception\n  Expression: candidate(9,\
    \ 3) == \"100\"\n  MethodError: no method matching push!(::String, ::Int64)\n\
    \  Closest candidates are:\n    push!(::Any, ::Any, !Matched::Any) at abstractarray.jl:2158\n\
    \    push!(::Any, ::Any, !Matched::Any, !Matched::Any...) at abstractarray.jl:2159\n\
    \    push!(!Matched::Array{Any,1}, ::Any) at array.jl:920\n    ...\n  Stacktrace:\n\
    \   [1] change_base(::Int64, ::Int64) at /tmp/tmpjhg57lhc.jl:18\n   [2] top-level\
    \ scope at /tmp/tmpjhg57lhc.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpjhg57lhc.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmpjhg57lhc.jl:29\n  Test threw exception\n  Expression: candidate(234,\
    \ 2) == \"11101010\"\n  MethodError: no method matching push!(::String, ::Int64)\n\
    \  Closest candidates are:\n    push!(::Any, ::Any, !Matched::Any) at abstractarray.jl:2158\n\
    \    push!(::Any, ::Any, !Matched::Any, !Matched::Any...) at abstractarray.jl:2159\n\
    \    push!(!Matched::Array{Any,1}, ::Any) at array.jl:920\n    ...\n  Stacktrace:\n\
    \   [1] change_base(::Int64, ::Int64) at /tmp/tmpjhg57lhc.jl:18\n   [2] top-level\
    \ scope at /tmp/tmpjhg57lhc.jl:29\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpjhg57lhc.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmpjhg57lhc.jl:30\n  Test threw exception\n  Expression: candidate(16,\
    \ 2) == \"10000\"\n  MethodError: no method matching push!(::String, ::Int64)\n\
    \  Closest candidates are:\n    push!(::Any, ::Any, !Matched::Any) at abstractarray.jl:2158\n\
    \    push!(::Any, ::Any, !Matched::Any, !Matched::Any...) at abstractarray.jl:2159\n\
    \    push!(!Matched::Array{Any,1}, ::Any) at array.jl:920\n    ...\n  Stacktrace:\n\
    \   [1] change_base(::Int64, ::Int64) at /tmp/tmpjhg57lhc.jl:18\n   [2] top-level\
    \ scope at /tmp/tmpjhg57lhc.jl:30\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpjhg57lhc.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmpjhg57lhc.jl:31\n  Test threw exception\n  Expression: candidate(8,\
    \ 2) == \"1000\"\n  MethodError: no method matching push!(::String, ::Int64)\n\
    \  Closest candidates are:\n    push!(::Any, ::Any, !Matched::Any) at abstractarray.jl:2158\n\
    \    push!(::Any, ::Any, !Matched::Any, !Matched::Any...) at abstractarray.jl:2159\n\
    \    push!(!Matched::Array{Any,1}, ::Any) at array.jl:920\n    ...\n  Stacktrace:\n\
    \   [1] change_base(::Int64, ::Int64) at /tmp/tmpjhg57lhc.jl:18\n   [2] top-level\
    \ scope at /tmp/tmpjhg57lhc.jl:31\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpjhg57lhc.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmpjhg57lhc.jl:32\n  Test threw exception\n  Expression: candidate(7,\
    \ 2) == \"111\"\n  MethodError: no method matching push!(::String, ::Int64)\n\
    \  Closest candidates are:\n    push!(::Any, ::Any, !Matched::Any) at abstractarray.jl:2158\n\
    \    push!(::Any, ::Any, !Matched::Any, !Matched::Any...) at abstractarray.jl:2159\n\
    \    push!(!Matched::Array{Any,1}, ::Any) at array.jl:920\n    ...\n  Stacktrace:\n\
    \   [1] change_base(::Int64, ::Int64) at /tmp/tmpjhg57lhc.jl:18\n   [2] top-level\
    \ scope at /tmp/tmpjhg57lhc.jl:32\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpjhg57lhc.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmpjhg57lhc.jl:33\n  Test threw exception\n  Expression: candidate(2,\
    \ 3) == \"2\"\n  MethodError: no method matching push!(::String, ::Int64)\n  Closest\
    \ candidates are:\n    push!(::Any, ::Any, !Matched::Any) at abstractarray.jl:2158\n\
    \    push!(::Any, ::Any, !Matched::Any, !Matched::Any...) at abstractarray.jl:2159\n\
    \    push!(!Matched::Array{Any,1}, ::Any) at array.jl:920\n    ...\n  Stacktrace:\n\
    \   [1] change_base(::Int64, ::Int64) at /tmp/tmpjhg57lhc.jl:18\n   [2] top-level\
    \ scope at /tmp/tmpjhg57lhc.jl:33\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpjhg57lhc.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmpjhg57lhc.jl:34\n  Test threw exception\n  Expression: candidate(3,\
    \ 4) == \"3\"\n  MethodError: no method matching push!(::String, ::Int64)\n  Closest\
    \ candidates are:\n    push!(::Any, ::Any, !Matched::Any) at abstractarray.jl:2158\n\
    \    push!(::Any, ::Any, !Matched::Any, !Matched::Any...) at abstractarray.jl:2159\n\
    \    push!(!Matched::Array{Any,1}, ::Any) at array.jl:920\n    ...\n  Stacktrace:\n\
    \   [1] change_base(::Int64, ::Int64) at /tmp/tmpjhg57lhc.jl:18\n   [2] top-level\
    \ scope at /tmp/tmpjhg57lhc.jl:34\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpjhg57lhc.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmpjhg57lhc.jl:35\n  Test threw exception\n  Expression: candidate(4,\
    \ 5) == \"4\"\n  MethodError: no method matching push!(::String, ::Int64)\n  Closest\
    \ candidates are:\n    push!(::Any, ::Any, !Matched::Any) at abstractarray.jl:2158\n\
    \    push!(::Any, ::Any, !Matched::Any, !Matched::Any...) at abstractarray.jl:2159\n\
    \    push!(!Matched::Array{Any,1}, ::Any) at array.jl:920\n    ...\n  Stacktrace:\n\
    \   [1] change_base(::Int64, ::Int64) at /tmp/tmpjhg57lhc.jl:18\n   [2] top-level\
    \ scope at /tmp/tmpjhg57lhc.jl:35\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpjhg57lhc.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmpjhg57lhc.jl:36\n  Test threw exception\n  Expression: candidate(5,\
    \ 6) == \"5\"\n  MethodError: no method matching push!(::String, ::Int64)\n  Closest\
    \ candidates are:\n    push!(::Any, ::Any, !Matched::Any) at abstractarray.jl:2158\n\
    \    push!(::Any, ::Any, !Matched::Any, !Matched::Any...) at abstractarray.jl:2159\n\
    \    push!(!Matched::Array{Any,1}, ::Any) at array.jl:920\n    ...\n  Stacktrace:\n\
    \   [1] change_base(::Int64, ::Int64) at /tmp/tmpjhg57lhc.jl:18\n   [2] top-level\
    \ scope at /tmp/tmpjhg57lhc.jl:36\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpjhg57lhc.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmpjhg57lhc.jl:37\n  Test threw exception\n  Expression: candidate(6,\
    \ 7) == \"6\"\n  MethodError: no method matching push!(::String, ::Int64)\n  Closest\
    \ candidates are:\n    push!(::Any, ::Any, !Matched::Any) at abstractarray.jl:2158\n\
    \    push!(::Any, ::Any, !Matched::Any, !Matched::Any...) at abstractarray.jl:2159\n\
    \    push!(!Matched::Array{Any,1}, ::Any) at array.jl:920\n    ...\n  Stacktrace:\n\
    \   [1] change_base(::Int64, ::Int64) at /tmp/tmpjhg57lhc.jl:18\n   [2] top-level\
    \ scope at /tmp/tmpjhg57lhc.jl:37\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpjhg57lhc.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmpjhg57lhc.jl:38\n  Test threw exception\n  Expression: candidate(7,\
    \ 8) == \"7\"\n  MethodError: no method matching push!(::String, ::Int64)\n  Closest\
    \ candidates are:\n    push!(::Any, ::Any, !Matched::Any) at abstractarray.jl:2158\n\
    \    push!(::Any, ::Any, !Matched::Any, !Matched::Any...) at abstractarray.jl:2159\n\
    \    push!(!Matched::Array{Any,1}, ::Any) at array.jl:920\n    ...\n  Stacktrace:\n\
    \   [1] change_base(::Int64, ::Int64) at /tmp/tmpjhg57lhc.jl:18\n   [2] top-level\
    \ scope at /tmp/tmpjhg57lhc.jl:38\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpjhg57lhc.jl:26\n  \nTest Summary: | Error \
    \ Total\ntest set      |    12     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjhg57lhc.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient > 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient != 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient != 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient > 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient != 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient > 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    result = \"\"\n    while x > 0\n        result =\
    \ string(x % base) * result\n        x = x \xF7 base\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient > 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        push!(result, remainder)\n    end\n    return\
    \ reverse(result)\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp19dhyd19.jl:27\n  Test threw exception\n\
    \  Expression: candidate(8, 3) == \"22\"\n  MethodError: no method matching push!(::String,\
    \ ::Int64)\n  Closest candidates are:\n    push!(::Any, ::Any, !Matched::Any)\
    \ at abstractarray.jl:2158\n    push!(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at abstractarray.jl:2159\n    push!(!Matched::Array{Any,1}, ::Any) at array.jl:920\n\
    \    ...\n  Stacktrace:\n   [1] change_base(::Int64, ::Int64) at /tmp/tmp19dhyd19.jl:18\n\
    \   [2] top-level scope at /tmp/tmp19dhyd19.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp19dhyd19.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmp19dhyd19.jl:28\n  Test threw exception\n  Expression: candidate(9,\
    \ 3) == \"100\"\n  MethodError: no method matching push!(::String, ::Int64)\n\
    \  Closest candidates are:\n    push!(::Any, ::Any, !Matched::Any) at abstractarray.jl:2158\n\
    \    push!(::Any, ::Any, !Matched::Any, !Matched::Any...) at abstractarray.jl:2159\n\
    \    push!(!Matched::Array{Any,1}, ::Any) at array.jl:920\n    ...\n  Stacktrace:\n\
    \   [1] change_base(::Int64, ::Int64) at /tmp/tmp19dhyd19.jl:18\n   [2] top-level\
    \ scope at /tmp/tmp19dhyd19.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp19dhyd19.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmp19dhyd19.jl:29\n  Test threw exception\n  Expression: candidate(234,\
    \ 2) == \"11101010\"\n  MethodError: no method matching push!(::String, ::Int64)\n\
    \  Closest candidates are:\n    push!(::Any, ::Any, !Matched::Any) at abstractarray.jl:2158\n\
    \    push!(::Any, ::Any, !Matched::Any, !Matched::Any...) at abstractarray.jl:2159\n\
    \    push!(!Matched::Array{Any,1}, ::Any) at array.jl:920\n    ...\n  Stacktrace:\n\
    \   [1] change_base(::Int64, ::Int64) at /tmp/tmp19dhyd19.jl:18\n   [2] top-level\
    \ scope at /tmp/tmp19dhyd19.jl:29\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp19dhyd19.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmp19dhyd19.jl:30\n  Test threw exception\n  Expression: candidate(16,\
    \ 2) == \"10000\"\n  MethodError: no method matching push!(::String, ::Int64)\n\
    \  Closest candidates are:\n    push!(::Any, ::Any, !Matched::Any) at abstractarray.jl:2158\n\
    \    push!(::Any, ::Any, !Matched::Any, !Matched::Any...) at abstractarray.jl:2159\n\
    \    push!(!Matched::Array{Any,1}, ::Any) at array.jl:920\n    ...\n  Stacktrace:\n\
    \   [1] change_base(::Int64, ::Int64) at /tmp/tmp19dhyd19.jl:18\n   [2] top-level\
    \ scope at /tmp/tmp19dhyd19.jl:30\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp19dhyd19.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmp19dhyd19.jl:31\n  Test threw exception\n  Expression: candidate(8,\
    \ 2) == \"1000\"\n  MethodError: no method matching push!(::String, ::Int64)\n\
    \  Closest candidates are:\n    push!(::Any, ::Any, !Matched::Any) at abstractarray.jl:2158\n\
    \    push!(::Any, ::Any, !Matched::Any, !Matched::Any...) at abstractarray.jl:2159\n\
    \    push!(!Matched::Array{Any,1}, ::Any) at array.jl:920\n    ...\n  Stacktrace:\n\
    \   [1] change_base(::Int64, ::Int64) at /tmp/tmp19dhyd19.jl:18\n   [2] top-level\
    \ scope at /tmp/tmp19dhyd19.jl:31\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp19dhyd19.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmp19dhyd19.jl:32\n  Test threw exception\n  Expression: candidate(7,\
    \ 2) == \"111\"\n  MethodError: no method matching push!(::String, ::Int64)\n\
    \  Closest candidates are:\n    push!(::Any, ::Any, !Matched::Any) at abstractarray.jl:2158\n\
    \    push!(::Any, ::Any, !Matched::Any, !Matched::Any...) at abstractarray.jl:2159\n\
    \    push!(!Matched::Array{Any,1}, ::Any) at array.jl:920\n    ...\n  Stacktrace:\n\
    \   [1] change_base(::Int64, ::Int64) at /tmp/tmp19dhyd19.jl:18\n   [2] top-level\
    \ scope at /tmp/tmp19dhyd19.jl:32\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp19dhyd19.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmp19dhyd19.jl:33\n  Test threw exception\n  Expression: candidate(2,\
    \ 3) == \"2\"\n  MethodError: no method matching push!(::String, ::Int64)\n  Closest\
    \ candidates are:\n    push!(::Any, ::Any, !Matched::Any) at abstractarray.jl:2158\n\
    \    push!(::Any, ::Any, !Matched::Any, !Matched::Any...) at abstractarray.jl:2159\n\
    \    push!(!Matched::Array{Any,1}, ::Any) at array.jl:920\n    ...\n  Stacktrace:\n\
    \   [1] change_base(::Int64, ::Int64) at /tmp/tmp19dhyd19.jl:18\n   [2] top-level\
    \ scope at /tmp/tmp19dhyd19.jl:33\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp19dhyd19.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmp19dhyd19.jl:34\n  Test threw exception\n  Expression: candidate(3,\
    \ 4) == \"3\"\n  MethodError: no method matching push!(::String, ::Int64)\n  Closest\
    \ candidates are:\n    push!(::Any, ::Any, !Matched::Any) at abstractarray.jl:2158\n\
    \    push!(::Any, ::Any, !Matched::Any, !Matched::Any...) at abstractarray.jl:2159\n\
    \    push!(!Matched::Array{Any,1}, ::Any) at array.jl:920\n    ...\n  Stacktrace:\n\
    \   [1] change_base(::Int64, ::Int64) at /tmp/tmp19dhyd19.jl:18\n   [2] top-level\
    \ scope at /tmp/tmp19dhyd19.jl:34\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp19dhyd19.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmp19dhyd19.jl:35\n  Test threw exception\n  Expression: candidate(4,\
    \ 5) == \"4\"\n  MethodError: no method matching push!(::String, ::Int64)\n  Closest\
    \ candidates are:\n    push!(::Any, ::Any, !Matched::Any) at abstractarray.jl:2158\n\
    \    push!(::Any, ::Any, !Matched::Any, !Matched::Any...) at abstractarray.jl:2159\n\
    \    push!(!Matched::Array{Any,1}, ::Any) at array.jl:920\n    ...\n  Stacktrace:\n\
    \   [1] change_base(::Int64, ::Int64) at /tmp/tmp19dhyd19.jl:18\n   [2] top-level\
    \ scope at /tmp/tmp19dhyd19.jl:35\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp19dhyd19.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmp19dhyd19.jl:36\n  Test threw exception\n  Expression: candidate(5,\
    \ 6) == \"5\"\n  MethodError: no method matching push!(::String, ::Int64)\n  Closest\
    \ candidates are:\n    push!(::Any, ::Any, !Matched::Any) at abstractarray.jl:2158\n\
    \    push!(::Any, ::Any, !Matched::Any, !Matched::Any...) at abstractarray.jl:2159\n\
    \    push!(!Matched::Array{Any,1}, ::Any) at array.jl:920\n    ...\n  Stacktrace:\n\
    \   [1] change_base(::Int64, ::Int64) at /tmp/tmp19dhyd19.jl:18\n   [2] top-level\
    \ scope at /tmp/tmp19dhyd19.jl:36\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp19dhyd19.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmp19dhyd19.jl:37\n  Test threw exception\n  Expression: candidate(6,\
    \ 7) == \"6\"\n  MethodError: no method matching push!(::String, ::Int64)\n  Closest\
    \ candidates are:\n    push!(::Any, ::Any, !Matched::Any) at abstractarray.jl:2158\n\
    \    push!(::Any, ::Any, !Matched::Any, !Matched::Any...) at abstractarray.jl:2159\n\
    \    push!(!Matched::Array{Any,1}, ::Any) at array.jl:920\n    ...\n  Stacktrace:\n\
    \   [1] change_base(::Int64, ::Int64) at /tmp/tmp19dhyd19.jl:18\n   [2] top-level\
    \ scope at /tmp/tmp19dhyd19.jl:37\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp19dhyd19.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmp19dhyd19.jl:38\n  Test threw exception\n  Expression: candidate(7,\
    \ 8) == \"7\"\n  MethodError: no method matching push!(::String, ::Int64)\n  Closest\
    \ candidates are:\n    push!(::Any, ::Any, !Matched::Any) at abstractarray.jl:2158\n\
    \    push!(::Any, ::Any, !Matched::Any, !Matched::Any...) at abstractarray.jl:2159\n\
    \    push!(!Matched::Array{Any,1}, ::Any) at array.jl:920\n    ...\n  Stacktrace:\n\
    \   [1] change_base(::Int64, ::Int64) at /tmp/tmp19dhyd19.jl:18\n   [2] top-level\
    \ scope at /tmp/tmp19dhyd19.jl:38\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp19dhyd19.jl:26\n  \nTest Summary: | Error \
    \ Total\ntest set      |    12     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp19dhyd19.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient > 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    res\
    \ = \"\"\n    while x > 0\n        res = string(x % base) * res\n        x = x\
    \ \xF7 base\n    end\n    return res\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient != 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient != 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient != 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient > 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient > 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient != 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient > 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient > 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient > 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    if\
    \ x < 0\n        return \"-\" * change_base(-x, base)\n    end\n    result = \"\
    \"\n    while x > 0\n        result = string(x % base) * result\n        x = x\
    \ \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x < base\n        return string(x)\n    else\n\
    \        return change_base(div(x, base), base) * string(mod(x, base))\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient > 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient != 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x < base\n        return string(x)\n    else\n\
    \        return change_base(x \xF7 base, base) * string(x % base)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient > 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    result = \"\"\n    while x > 0\n        result =\
    \ string(x % base) * result\n        x = x \xF7 base\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x < base\n        return string(x)\n    else\n\
    \        return change_base(x \xF7 base, base) * string(x % base)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient != 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient > 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient > 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient > 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        push!(result, remainder)\n    end\n    return\
    \ reverse(result)\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqynclewj.jl:27\n  Test threw exception\n\
    \  Expression: candidate(8, 3) == \"22\"\n  MethodError: no method matching push!(::String,\
    \ ::Int64)\n  Closest candidates are:\n    push!(::Any, ::Any, !Matched::Any)\
    \ at abstractarray.jl:2158\n    push!(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at abstractarray.jl:2159\n    push!(!Matched::Array{Any,1}, ::Any) at array.jl:920\n\
    \    ...\n  Stacktrace:\n   [1] change_base(::Int64, ::Int64) at /tmp/tmpqynclewj.jl:18\n\
    \   [2] top-level scope at /tmp/tmpqynclewj.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqynclewj.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmpqynclewj.jl:28\n  Test threw exception\n  Expression: candidate(9,\
    \ 3) == \"100\"\n  MethodError: no method matching push!(::String, ::Int64)\n\
    \  Closest candidates are:\n    push!(::Any, ::Any, !Matched::Any) at abstractarray.jl:2158\n\
    \    push!(::Any, ::Any, !Matched::Any, !Matched::Any...) at abstractarray.jl:2159\n\
    \    push!(!Matched::Array{Any,1}, ::Any) at array.jl:920\n    ...\n  Stacktrace:\n\
    \   [1] change_base(::Int64, ::Int64) at /tmp/tmpqynclewj.jl:18\n   [2] top-level\
    \ scope at /tmp/tmpqynclewj.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqynclewj.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmpqynclewj.jl:29\n  Test threw exception\n  Expression: candidate(234,\
    \ 2) == \"11101010\"\n  MethodError: no method matching push!(::String, ::Int64)\n\
    \  Closest candidates are:\n    push!(::Any, ::Any, !Matched::Any) at abstractarray.jl:2158\n\
    \    push!(::Any, ::Any, !Matched::Any, !Matched::Any...) at abstractarray.jl:2159\n\
    \    push!(!Matched::Array{Any,1}, ::Any) at array.jl:920\n    ...\n  Stacktrace:\n\
    \   [1] change_base(::Int64, ::Int64) at /tmp/tmpqynclewj.jl:18\n   [2] top-level\
    \ scope at /tmp/tmpqynclewj.jl:29\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqynclewj.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmpqynclewj.jl:30\n  Test threw exception\n  Expression: candidate(16,\
    \ 2) == \"10000\"\n  MethodError: no method matching push!(::String, ::Int64)\n\
    \  Closest candidates are:\n    push!(::Any, ::Any, !Matched::Any) at abstractarray.jl:2158\n\
    \    push!(::Any, ::Any, !Matched::Any, !Matched::Any...) at abstractarray.jl:2159\n\
    \    push!(!Matched::Array{Any,1}, ::Any) at array.jl:920\n    ...\n  Stacktrace:\n\
    \   [1] change_base(::Int64, ::Int64) at /tmp/tmpqynclewj.jl:18\n   [2] top-level\
    \ scope at /tmp/tmpqynclewj.jl:30\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqynclewj.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmpqynclewj.jl:31\n  Test threw exception\n  Expression: candidate(8,\
    \ 2) == \"1000\"\n  MethodError: no method matching push!(::String, ::Int64)\n\
    \  Closest candidates are:\n    push!(::Any, ::Any, !Matched::Any) at abstractarray.jl:2158\n\
    \    push!(::Any, ::Any, !Matched::Any, !Matched::Any...) at abstractarray.jl:2159\n\
    \    push!(!Matched::Array{Any,1}, ::Any) at array.jl:920\n    ...\n  Stacktrace:\n\
    \   [1] change_base(::Int64, ::Int64) at /tmp/tmpqynclewj.jl:18\n   [2] top-level\
    \ scope at /tmp/tmpqynclewj.jl:31\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqynclewj.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmpqynclewj.jl:32\n  Test threw exception\n  Expression: candidate(7,\
    \ 2) == \"111\"\n  MethodError: no method matching push!(::String, ::Int64)\n\
    \  Closest candidates are:\n    push!(::Any, ::Any, !Matched::Any) at abstractarray.jl:2158\n\
    \    push!(::Any, ::Any, !Matched::Any, !Matched::Any...) at abstractarray.jl:2159\n\
    \    push!(!Matched::Array{Any,1}, ::Any) at array.jl:920\n    ...\n  Stacktrace:\n\
    \   [1] change_base(::Int64, ::Int64) at /tmp/tmpqynclewj.jl:18\n   [2] top-level\
    \ scope at /tmp/tmpqynclewj.jl:32\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqynclewj.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmpqynclewj.jl:33\n  Test threw exception\n  Expression: candidate(2,\
    \ 3) == \"2\"\n  MethodError: no method matching push!(::String, ::Int64)\n  Closest\
    \ candidates are:\n    push!(::Any, ::Any, !Matched::Any) at abstractarray.jl:2158\n\
    \    push!(::Any, ::Any, !Matched::Any, !Matched::Any...) at abstractarray.jl:2159\n\
    \    push!(!Matched::Array{Any,1}, ::Any) at array.jl:920\n    ...\n  Stacktrace:\n\
    \   [1] change_base(::Int64, ::Int64) at /tmp/tmpqynclewj.jl:18\n   [2] top-level\
    \ scope at /tmp/tmpqynclewj.jl:33\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqynclewj.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmpqynclewj.jl:34\n  Test threw exception\n  Expression: candidate(3,\
    \ 4) == \"3\"\n  MethodError: no method matching push!(::String, ::Int64)\n  Closest\
    \ candidates are:\n    push!(::Any, ::Any, !Matched::Any) at abstractarray.jl:2158\n\
    \    push!(::Any, ::Any, !Matched::Any, !Matched::Any...) at abstractarray.jl:2159\n\
    \    push!(!Matched::Array{Any,1}, ::Any) at array.jl:920\n    ...\n  Stacktrace:\n\
    \   [1] change_base(::Int64, ::Int64) at /tmp/tmpqynclewj.jl:18\n   [2] top-level\
    \ scope at /tmp/tmpqynclewj.jl:34\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqynclewj.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmpqynclewj.jl:35\n  Test threw exception\n  Expression: candidate(4,\
    \ 5) == \"4\"\n  MethodError: no method matching push!(::String, ::Int64)\n  Closest\
    \ candidates are:\n    push!(::Any, ::Any, !Matched::Any) at abstractarray.jl:2158\n\
    \    push!(::Any, ::Any, !Matched::Any, !Matched::Any...) at abstractarray.jl:2159\n\
    \    push!(!Matched::Array{Any,1}, ::Any) at array.jl:920\n    ...\n  Stacktrace:\n\
    \   [1] change_base(::Int64, ::Int64) at /tmp/tmpqynclewj.jl:18\n   [2] top-level\
    \ scope at /tmp/tmpqynclewj.jl:35\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqynclewj.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmpqynclewj.jl:36\n  Test threw exception\n  Expression: candidate(5,\
    \ 6) == \"5\"\n  MethodError: no method matching push!(::String, ::Int64)\n  Closest\
    \ candidates are:\n    push!(::Any, ::Any, !Matched::Any) at abstractarray.jl:2158\n\
    \    push!(::Any, ::Any, !Matched::Any, !Matched::Any...) at abstractarray.jl:2159\n\
    \    push!(!Matched::Array{Any,1}, ::Any) at array.jl:920\n    ...\n  Stacktrace:\n\
    \   [1] change_base(::Int64, ::Int64) at /tmp/tmpqynclewj.jl:18\n   [2] top-level\
    \ scope at /tmp/tmpqynclewj.jl:36\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqynclewj.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmpqynclewj.jl:37\n  Test threw exception\n  Expression: candidate(6,\
    \ 7) == \"6\"\n  MethodError: no method matching push!(::String, ::Int64)\n  Closest\
    \ candidates are:\n    push!(::Any, ::Any, !Matched::Any) at abstractarray.jl:2158\n\
    \    push!(::Any, ::Any, !Matched::Any, !Matched::Any...) at abstractarray.jl:2159\n\
    \    push!(!Matched::Array{Any,1}, ::Any) at array.jl:920\n    ...\n  Stacktrace:\n\
    \   [1] change_base(::Int64, ::Int64) at /tmp/tmpqynclewj.jl:18\n   [2] top-level\
    \ scope at /tmp/tmpqynclewj.jl:37\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqynclewj.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmpqynclewj.jl:38\n  Test threw exception\n  Expression: candidate(7,\
    \ 8) == \"7\"\n  MethodError: no method matching push!(::String, ::Int64)\n  Closest\
    \ candidates are:\n    push!(::Any, ::Any, !Matched::Any) at abstractarray.jl:2158\n\
    \    push!(::Any, ::Any, !Matched::Any, !Matched::Any...) at abstractarray.jl:2159\n\
    \    push!(!Matched::Array{Any,1}, ::Any) at array.jl:920\n    ...\n  Stacktrace:\n\
    \   [1] change_base(::Int64, ::Int64) at /tmp/tmpqynclewj.jl:18\n   [2] top-level\
    \ scope at /tmp/tmpqynclewj.jl:38\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqynclewj.jl:26\n  \nTest Summary: | Error \
    \ Total\ntest set      |    12     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqynclewj.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient != 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient > 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient > 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient > 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient != 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3q22_alk.jl:19\n  Test threw exception\n\
    \  Expression: candidate(8, 3) == \"22\"\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\n  Closest candidates are:\n   \
    \ convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:209\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:210\n\
    \    convert(::Type{T}, !Matched::T) where T at essentials.jl:171\n  Stacktrace:\n\
    \   [1] change_base(::Int64, ::Int64) at /tmp/tmp3q22_alk.jl:13\n   [2] top-level\
    \ scope at /tmp/tmp3q22_alk.jl:19\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3q22_alk.jl:18\n  \ntest set: Error During\
    \ Test at /tmp/tmp3q22_alk.jl:20\n  Test threw exception\n  Expression: candidate(9,\
    \ 3) == \"100\"\n  MethodError: Cannot `convert` an object of type Nothing to\
    \ an object of type String\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:209\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:210\n\
    \    convert(::Type{T}, !Matched::T) where T at essentials.jl:171\n  Stacktrace:\n\
    \   [1] change_base(::Int64, ::Int64) at /tmp/tmp3q22_alk.jl:13\n   [2] top-level\
    \ scope at /tmp/tmp3q22_alk.jl:20\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3q22_alk.jl:18\n  \ntest set: Error During\
    \ Test at /tmp/tmp3q22_alk.jl:21\n  Test threw exception\n  Expression: candidate(234,\
    \ 2) == \"11101010\"\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type String\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:209\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:210\n\
    \    convert(::Type{T}, !Matched::T) where T at essentials.jl:171\n  Stacktrace:\n\
    \   [1] change_base(::Int64, ::Int64) at /tmp/tmp3q22_alk.jl:13\n   [2] top-level\
    \ scope at /tmp/tmp3q22_alk.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3q22_alk.jl:18\n  \ntest set: Error During\
    \ Test at /tmp/tmp3q22_alk.jl:22\n  Test threw exception\n  Expression: candidate(16,\
    \ 2) == \"10000\"\n  MethodError: Cannot `convert` an object of type Nothing to\
    \ an object of type String\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:209\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:210\n\
    \    convert(::Type{T}, !Matched::T) where T at essentials.jl:171\n  Stacktrace:\n\
    \   [1] change_base(::Int64, ::Int64) at /tmp/tmp3q22_alk.jl:13\n   [2] top-level\
    \ scope at /tmp/tmp3q22_alk.jl:22\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3q22_alk.jl:18\n  \ntest set: Error During\
    \ Test at /tmp/tmp3q22_alk.jl:23\n  Test threw exception\n  Expression: candidate(8,\
    \ 2) == \"1000\"\n  MethodError: Cannot `convert` an object of type Nothing to\
    \ an object of type String\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:209\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:210\n\
    \    convert(::Type{T}, !Matched::T) where T at essentials.jl:171\n  Stacktrace:\n\
    \   [1] change_base(::Int64, ::Int64) at /tmp/tmp3q22_alk.jl:13\n   [2] top-level\
    \ scope at /tmp/tmp3q22_alk.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3q22_alk.jl:18\n  \ntest set: Error During\
    \ Test at /tmp/tmp3q22_alk.jl:24\n  Test threw exception\n  Expression: candidate(7,\
    \ 2) == \"111\"\n  MethodError: Cannot `convert` an object of type Nothing to\
    \ an object of type String\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:209\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:210\n\
    \    convert(::Type{T}, !Matched::T) where T at essentials.jl:171\n  Stacktrace:\n\
    \   [1] change_base(::Int64, ::Int64) at /tmp/tmp3q22_alk.jl:13\n   [2] top-level\
    \ scope at /tmp/tmp3q22_alk.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3q22_alk.jl:18\n  \ntest set: Error During\
    \ Test at /tmp/tmp3q22_alk.jl:25\n  Test threw exception\n  Expression: candidate(2,\
    \ 3) == \"2\"\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type String\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:209\n    convert(::Type{T}, !Matched::AbstractString)\
    \ where T<:AbstractString at strings/basic.jl:210\n    convert(::Type{T}, !Matched::T)\
    \ where T at essentials.jl:171\n  Stacktrace:\n   [1] change_base(::Int64, ::Int64)\
    \ at /tmp/tmp3q22_alk.jl:13\n   [2] top-level scope at /tmp/tmp3q22_alk.jl:25\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3q22_alk.jl:18\n  \ntest set: Error During\
    \ Test at /tmp/tmp3q22_alk.jl:26\n  Test threw exception\n  Expression: candidate(3,\
    \ 4) == \"3\"\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type String\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:209\n    convert(::Type{T}, !Matched::AbstractString)\
    \ where T<:AbstractString at strings/basic.jl:210\n    convert(::Type{T}, !Matched::T)\
    \ where T at essentials.jl:171\n  Stacktrace:\n   [1] change_base(::Int64, ::Int64)\
    \ at /tmp/tmp3q22_alk.jl:13\n   [2] top-level scope at /tmp/tmp3q22_alk.jl:26\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3q22_alk.jl:18\n  \ntest set: Error During\
    \ Test at /tmp/tmp3q22_alk.jl:27\n  Test threw exception\n  Expression: candidate(4,\
    \ 5) == \"4\"\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type String\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:209\n    convert(::Type{T}, !Matched::AbstractString)\
    \ where T<:AbstractString at strings/basic.jl:210\n    convert(::Type{T}, !Matched::T)\
    \ where T at essentials.jl:171\n  Stacktrace:\n   [1] change_base(::Int64, ::Int64)\
    \ at /tmp/tmp3q22_alk.jl:13\n   [2] top-level scope at /tmp/tmp3q22_alk.jl:27\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3q22_alk.jl:18\n  \ntest set: Error During\
    \ Test at /tmp/tmp3q22_alk.jl:28\n  Test threw exception\n  Expression: candidate(5,\
    \ 6) == \"5\"\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type String\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:209\n    convert(::Type{T}, !Matched::AbstractString)\
    \ where T<:AbstractString at strings/basic.jl:210\n    convert(::Type{T}, !Matched::T)\
    \ where T at essentials.jl:171\n  Stacktrace:\n   [1] change_base(::Int64, ::Int64)\
    \ at /tmp/tmp3q22_alk.jl:13\n   [2] top-level scope at /tmp/tmp3q22_alk.jl:28\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3q22_alk.jl:18\n  \ntest set: Error During\
    \ Test at /tmp/tmp3q22_alk.jl:29\n  Test threw exception\n  Expression: candidate(6,\
    \ 7) == \"6\"\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type String\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:209\n    convert(::Type{T}, !Matched::AbstractString)\
    \ where T<:AbstractString at strings/basic.jl:210\n    convert(::Type{T}, !Matched::T)\
    \ where T at essentials.jl:171\n  Stacktrace:\n   [1] change_base(::Int64, ::Int64)\
    \ at /tmp/tmp3q22_alk.jl:13\n   [2] top-level scope at /tmp/tmp3q22_alk.jl:29\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3q22_alk.jl:18\n  \ntest set: Error During\
    \ Test at /tmp/tmp3q22_alk.jl:30\n  Test threw exception\n  Expression: candidate(7,\
    \ 8) == \"7\"\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type String\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:AbstractString at strings/basic.jl:209\n    convert(::Type{T}, !Matched::AbstractString)\
    \ where T<:AbstractString at strings/basic.jl:210\n    convert(::Type{T}, !Matched::T)\
    \ where T at essentials.jl:171\n  Stacktrace:\n   [1] change_base(::Int64, ::Int64)\
    \ at /tmp/tmp3q22_alk.jl:13\n   [2] top-level scope at /tmp/tmp3q22_alk.jl:30\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3q22_alk.jl:18\n  \nTest Summary: | Error \
    \ Total\ntest set      |    12     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3q22_alk.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient > 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient != 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient > 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    if\
    \ x < 0\n        return \"-\" * change_base(-x, base)\n    end\n    result = \"\
    \"\n    while x > 0\n        result = string(x % base) * result\n        x = x\
    \ \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient != 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    result = \"\"\n    while x > 0\n        result =\
    \ string(x % base) * result\n        x = x \xF7 base\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient != 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x < base\n        return string(x)\n    else\n\
    \        return change_base(x \xF7 base, base) * string(x % base)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if x == 0\n        return \"0\"\n    end\n    result\
    \ = \"\"\n    while x > 0\n        result = string(x % base) * result\n      \
    \  x = x \xF7 base\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient > 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient > 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient != 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    result = \"\"\n    while x > 0\n        result =\
    \ string(x % base) * result\n        x = x \xF7 base\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient > 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    quotient = x\n    remainder = 0\n    result = \"\"\
    \n    while quotient != 0\n        remainder = quotient % base\n        quotient\
    \ = quotient \xF7 base\n        result = string(remainder) * result\n    end\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
