name: HumanEval_74_total_match
language: julia
results:
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 || length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == length(lst2)\n    \
    \    return lst1\n    end\n    if length(lst1) > length(lst2)\n        return\
    \ lst2\n    end\n    return lst1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmphsqsvke6.jl:32\\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmphsqsvke6.jl:32\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmphsqsvke6.jl:30\\ntest set: Test Failed at /tmp/tmphsqsvke6.jl:35\\\
    n  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmphsqsvke6.jl:35\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmphsqsvke6.jl:30\\ntest set: Test Failed at /tmp/tmphsqsvke6.jl:36\\\
    n  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\",\
    \ \"hi\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmphsqsvke6.jl:36\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmphsqsvke6.jl:30\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total += length(i)\n\
    \    end\n    for i in lst2\n        lst2_total += length(i)\n    end\n    if\
    \ lst1_total < lst2_total\n        return lst1\n    elseif lst1_total > lst2_total\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpk3leo4o5.jl:52\\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\\n   Evaluated: [\"this\"] == String[]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpk3leo4o5.jl:52\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpk3leo4o5.jl:44\\ntest set: Test Failed at /tmp/tmpk3leo4o5.jl:53\\\
    n  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\\\
    n   Evaluated: [\"this\"] == String[]\\nStacktrace:\\n [1] top-level scope at\
    \ /tmp/tmpk3leo4o5.jl:53\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpk3leo4o5.jl:44\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    7     2      9\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) == 0\n        return\
    \ lst2\n    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn_jt7eqq.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpn_jt7eqq.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn_jt7eqq.jl:38\ntest set: Test Failed at /tmp/tmpn_jt7eqq.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpn_jt7eqq.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn_jt7eqq.jl:38\ntest set: Test Failed at /tmp/tmpn_jt7eqq.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpn_jt7eqq.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn_jt7eqq.jl:38\ntest set: Test Failed at /tmp/tmpn_jt7eqq.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpn_jt7eqq.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn_jt7eqq.jl:38\ntest set: Test Failed at /tmp/tmpn_jt7eqq.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpn_jt7eqq.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn_jt7eqq.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn_jt7eqq.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpte5z7gby.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpte5z7gby.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpte5z7gby.jl:38\ntest set: Test Failed at /tmp/tmpte5z7gby.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpte5z7gby.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpte5z7gby.jl:38\ntest set: Test Failed at /tmp/tmpte5z7gby.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpte5z7gby.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpte5z7gby.jl:38\ntest set: Test Failed at /tmp/tmpte5z7gby.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpte5z7gby.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpte5z7gby.jl:38\ntest set: Test Failed at /tmp/tmpte5z7gby.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpte5z7gby.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpte5z7gby.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpte5z7gby.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total += length(i)\n\
    \    end\n    for i in lst2\n        lst2_total += length(i)\n    end\n    if\
    \ lst1_total < lst2_total\n        return lst1\n    elseif lst1_total > lst2_total\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphbucij7q.jl:52\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphbucij7q.jl:52\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphbucij7q.jl:44\ntest set: Test Failed at /tmp/tmphbucij7q.jl:53\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmphbucij7q.jl:53\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphbucij7q.jl:44\nTest Summary: | Pass  Fail  Total\n\
    test set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphbucij7q.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total += length(i)\n\
    \    end\n    for i in lst2\n        lst2_total += length(i)\n    end\n    if\
    \ lst1_total < lst2_total\n        return lst1\n    elseif lst1_total > lst2_total\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbck5cknx.jl:52\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbck5cknx.jl:52\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbck5cknx.jl:44\ntest set: Test Failed at /tmp/tmpbck5cknx.jl:53\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpbck5cknx.jl:53\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbck5cknx.jl:44\nTest Summary: | Pass  Fail  Total\n\
    test set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbck5cknx.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    return lst2\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp08izs61.jl:35\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpp08izs61.jl:35\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp08izs61.jl:33\ntest set: Test Failed at /tmp/tmpp08izs61.jl:38\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpp08izs61.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp08izs61.jl:33\ntest set: Test Failed at /tmp/tmpp08izs61.jl:39\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpp08izs61.jl:39\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp08izs61.jl:33\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp08izs61.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) == 0\n        return\
    \ lst2\n    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmawfhhok.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpmawfhhok.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmawfhhok.jl:38\ntest set: Test Failed at /tmp/tmpmawfhhok.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpmawfhhok.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmawfhhok.jl:38\ntest set: Test Failed at /tmp/tmpmawfhhok.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpmawfhhok.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmawfhhok.jl:38\ntest set: Test Failed at /tmp/tmpmawfhhok.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpmawfhhok.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmawfhhok.jl:38\ntest set: Test Failed at /tmp/tmpmawfhhok.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpmawfhhok.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmawfhhok.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmawfhhok.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph_7kn86u.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmph_7kn86u.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph_7kn86u.jl:38\ntest set: Test Failed at /tmp/tmph_7kn86u.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmph_7kn86u.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph_7kn86u.jl:38\ntest set: Test Failed at /tmp/tmph_7kn86u.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmph_7kn86u.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph_7kn86u.jl:38\ntest set: Test Failed at /tmp/tmph_7kn86u.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmph_7kn86u.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph_7kn86u.jl:38\ntest set: Test Failed at /tmp/tmph_7kn86u.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmph_7kn86u.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph_7kn86u.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph_7kn86u.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    if length(lst2) < length(lst1)\n\
    \        return lst2\n    end\n    if length(lst1) == length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvjs2ymw_.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpvjs2ymw_.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvjs2ymw_.jl:38\ntest set: Test Failed at /tmp/tmpvjs2ymw_.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpvjs2ymw_.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvjs2ymw_.jl:38\ntest set: Test Failed at /tmp/tmpvjs2ymw_.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpvjs2ymw_.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvjs2ymw_.jl:38\ntest set: Test Failed at /tmp/tmpvjs2ymw_.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpvjs2ymw_.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvjs2ymw_.jl:38\ntest set: Test Failed at /tmp/tmpvjs2ymw_.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpvjs2ymw_.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvjs2ymw_.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvjs2ymw_.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\n    return lst2\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphhka8qtf.jl:38\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmphhka8qtf.jl:38\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphhka8qtf.jl:36\ntest set: Test Failed at /tmp/tmphhka8qtf.jl:41\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmphhka8qtf.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphhka8qtf.jl:36\ntest set: Test Failed at /tmp/tmphhka8qtf.jl:42\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmphhka8qtf.jl:42\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphhka8qtf.jl:36\ntest set: Test Failed at /tmp/tmphhka8qtf.jl:44\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmphhka8qtf.jl:44\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphhka8qtf.jl:36\ntest set: Test Failed at /tmp/tmphhka8qtf.jl:45\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmphhka8qtf.jl:45\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphhka8qtf.jl:36\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphhka8qtf.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    return lst1\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpci0ozayr.jl:35\\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpci0ozayr.jl:35\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpci0ozayr.jl:33\\ntest set: Test Failed at /tmp/tmpci0ozayr.jl:38\\\
    n  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpci0ozayr.jl:38\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpci0ozayr.jl:33\\ntest set: Test Failed at /tmp/tmpci0ozayr.jl:39\\\
    n  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\",\
    \ \"hi\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpci0ozayr.jl:39\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpci0ozayr.jl:33\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\n    if length(lst1) == length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj88dcb9y.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpj88dcb9y.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj88dcb9y.jl:38\ntest set: Test Failed at /tmp/tmpj88dcb9y.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpj88dcb9y.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj88dcb9y.jl:38\ntest set: Test Failed at /tmp/tmpj88dcb9y.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpj88dcb9y.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj88dcb9y.jl:38\ntest set: Test Failed at /tmp/tmpj88dcb9y.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpj88dcb9y.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj88dcb9y.jl:38\ntest set: Test Failed at /tmp/tmpj88dcb9y.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpj88dcb9y.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj88dcb9y.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj88dcb9y.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    lst1_len = sum([length(x) for x\
    \ in lst1])\n    lst2_len = sum([length(x) for x in lst2])\n    if lst1_len ==\
    \ lst2_len\n        return lst1\n    elseif lst1_len < lst2_len\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    return lst2\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqan90r1c.jl:35\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpqan90r1c.jl:35\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqan90r1c.jl:33\ntest set: Test Failed at /tmp/tmpqan90r1c.jl:38\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpqan90r1c.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqan90r1c.jl:33\ntest set: Test Failed at /tmp/tmpqan90r1c.jl:39\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpqan90r1c.jl:39\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqan90r1c.jl:33\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqan90r1c.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn9wwk3qm.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpn9wwk3qm.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn9wwk3qm.jl:38\ntest set: Test Failed at /tmp/tmpn9wwk3qm.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpn9wwk3qm.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn9wwk3qm.jl:38\ntest set: Test Failed at /tmp/tmpn9wwk3qm.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpn9wwk3qm.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn9wwk3qm.jl:38\ntest set: Test Failed at /tmp/tmpn9wwk3qm.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpn9wwk3qm.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn9wwk3qm.jl:38\ntest set: Test Failed at /tmp/tmpn9wwk3qm.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpn9wwk3qm.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn9wwk3qm.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn9wwk3qm.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if sum(length.(lst1))\
    \ < sum(length.(lst2))\n        return lst1\n    elseif sum(length.(lst1)) > sum(length.(lst2))\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpc0edz4x1.jl:44\\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\\n   Evaluated: [\"this\"] == String[]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpc0edz4x1.jl:44\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpc0edz4x1.jl:36\\ntest set: Test Failed at /tmp/tmpc0edz4x1.jl:45\\\
    n  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\\\
    n   Evaluated: [\"this\"] == String[]\\nStacktrace:\\n [1] top-level scope at\
    \ /tmp/tmpc0edz4x1.jl:45\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpc0edz4x1.jl:36\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    7     2      9\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ sum(length.(lst1)) == sum(length.(lst2))\n        return lst1\n    end\n   \
    \ if sum(length.(lst1)) < sum(length.(lst2))\n        return lst1\n    end\n \
    \   return lst2\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    lst1_length = 0\n    lst2_length\
    \ = 0\n    for i in lst1\n        lst1_length += length(i)\n    end\n    for i\
    \ in lst2\n        lst2_length += length(i)\n    end\n    if lst1_length == lst2_length\n\
    \        return lst1\n    elseif lst1_length < lst2_length\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    sum1 = 0\n    sum2 = 0\n    for\
    \ i in lst1\n        sum1 += length(i)\n    end\n    for i in lst2\n        sum2\
    \ += length(i)\n    end\n    if sum1 == sum2\n        return lst1\n    elseif\
    \ sum1 < sum2\n        return lst1\n    else\n        return lst2\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) == 0\n        return\
    \ lst2\n    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    return lst2\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp322z3l8r.jl:38\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp322z3l8r.jl:38\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp322z3l8r.jl:36\ntest set: Test Failed at /tmp/tmp322z3l8r.jl:41\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp322z3l8r.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp322z3l8r.jl:36\ntest set: Test Failed at /tmp/tmp322z3l8r.jl:42\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp322z3l8r.jl:42\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp322z3l8r.jl:36\ntest set: Test Failed at /tmp/tmp322z3l8r.jl:44\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmp322z3l8r.jl:44\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp322z3l8r.jl:36\ntest set: Test Failed at /tmp/tmp322z3l8r.jl:45\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmp322z3l8r.jl:45\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp322z3l8r.jl:36\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp322z3l8r.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) < length(lst2)\n   \
    \     return lst1\n    elseif length(lst1) > length(lst2)\n        return lst2\n\
    \    else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2y18aw1f.jl:32\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp2y18aw1f.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2y18aw1f.jl:30\ntest set: Test Failed at /tmp/tmp2y18aw1f.jl:35\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp2y18aw1f.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2y18aw1f.jl:30\ntest set: Test Failed at /tmp/tmp2y18aw1f.jl:36\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp2y18aw1f.jl:36\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2y18aw1f.jl:30\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2y18aw1f.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    return lst1\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpjdv9qpnc.jl:35\\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpjdv9qpnc.jl:35\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpjdv9qpnc.jl:33\\ntest set: Test Failed at /tmp/tmpjdv9qpnc.jl:38\\\
    n  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpjdv9qpnc.jl:38\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpjdv9qpnc.jl:33\\ntest set: Test Failed at /tmp/tmpjdv9qpnc.jl:39\\\
    n  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\",\
    \ \"hi\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpjdv9qpnc.jl:39\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpjdv9qpnc.jl:33\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    return lst1\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpaoupkrpc.jl:35\\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpaoupkrpc.jl:35\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpaoupkrpc.jl:33\\ntest set: Test Failed at /tmp/tmpaoupkrpc.jl:38\\\
    n  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpaoupkrpc.jl:38\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpaoupkrpc.jl:33\\ntest set: Test Failed at /tmp/tmpaoupkrpc.jl:39\\\
    n  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\",\
    \ \"hi\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpaoupkrpc.jl:39\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpaoupkrpc.jl:33\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    6     3      9\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgm13s1w8.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpgm13s1w8.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgm13s1w8.jl:38\ntest set: Test Failed at /tmp/tmpgm13s1w8.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpgm13s1w8.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgm13s1w8.jl:38\ntest set: Test Failed at /tmp/tmpgm13s1w8.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpgm13s1w8.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgm13s1w8.jl:38\ntest set: Test Failed at /tmp/tmpgm13s1w8.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpgm13s1w8.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgm13s1w8.jl:38\ntest set: Test Failed at /tmp/tmpgm13s1w8.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpgm13s1w8.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgm13s1w8.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgm13s1w8.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) == 0\n        return\
    \ lst2\n    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    return lst2\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdz8zw0wn.jl:38\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpdz8zw0wn.jl:38\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdz8zw0wn.jl:36\ntest set: Test Failed at /tmp/tmpdz8zw0wn.jl:41\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpdz8zw0wn.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdz8zw0wn.jl:36\ntest set: Test Failed at /tmp/tmpdz8zw0wn.jl:42\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpdz8zw0wn.jl:42\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdz8zw0wn.jl:36\ntest set: Test Failed at /tmp/tmpdz8zw0wn.jl:44\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpdz8zw0wn.jl:44\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdz8zw0wn.jl:36\ntest set: Test Failed at /tmp/tmpdz8zw0wn.jl:45\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpdz8zw0wn.jl:45\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdz8zw0wn.jl:36\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdz8zw0wn.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpfh8va2is.jl:40\\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpfh8va2is.jl:40\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpfh8va2is.jl:38\\ntest set: Test Failed at /tmp/tmpfh8va2is.jl:43\\\
    n  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpfh8va2is.jl:43\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpfh8va2is.jl:38\\ntest set: Test Failed at /tmp/tmpfh8va2is.jl:44\\\
    n  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\",\
    \ \"hi\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpfh8va2is.jl:44\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpfh8va2is.jl:38\\ntest set: Test Failed at /tmp/tmpfh8va2is.jl:46\\\
    n  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\\\
    n   Evaluated: [\"this\"] == String[]\\nStacktrace:\\n [1] top-level scope at\
    \ /tmp/tmpfh8va2is.jl:46\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpfh8va2is.jl:38\\ntest set: Test Failed at /tmp/tmpfh8va2is.jl:47\\\
    n  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\\\
    n   Evaluated: [\"this\"] == String[]\\nStacktrace:\\n [1] top-level scope at\
    \ /tmp/tmpfh8va2is.jl:47\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpfh8va2is.jl:38\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    4     5      9\\n'"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    return lst1\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvm_gh928.jl:35\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpvm_gh928.jl:35\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvm_gh928.jl:33\ntest set: Test Failed at /tmp/tmpvm_gh928.jl:38\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpvm_gh928.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvm_gh928.jl:33\ntest set: Test Failed at /tmp/tmpvm_gh928.jl:39\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpvm_gh928.jl:39\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvm_gh928.jl:33\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvm_gh928.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\n    if length(lst1) == length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl1zz3kqg.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpl1zz3kqg.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl1zz3kqg.jl:38\ntest set: Test Failed at /tmp/tmpl1zz3kqg.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpl1zz3kqg.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl1zz3kqg.jl:38\ntest set: Test Failed at /tmp/tmpl1zz3kqg.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpl1zz3kqg.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl1zz3kqg.jl:38\ntest set: Test Failed at /tmp/tmpl1zz3kqg.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpl1zz3kqg.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl1zz3kqg.jl:38\ntest set: Test Failed at /tmp/tmpl1zz3kqg.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpl1zz3kqg.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl1zz3kqg.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl1zz3kqg.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    return lst2\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp22soyalq.jl:35\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp22soyalq.jl:35\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp22soyalq.jl:33\ntest set: Test Failed at /tmp/tmp22soyalq.jl:38\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp22soyalq.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp22soyalq.jl:33\ntest set: Test Failed at /tmp/tmp22soyalq.jl:39\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp22soyalq.jl:39\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp22soyalq.jl:33\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp22soyalq.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph2dr31zv.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmph2dr31zv.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph2dr31zv.jl:38\ntest set: Test Failed at /tmp/tmph2dr31zv.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmph2dr31zv.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph2dr31zv.jl:38\ntest set: Test Failed at /tmp/tmph2dr31zv.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmph2dr31zv.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph2dr31zv.jl:38\ntest set: Test Failed at /tmp/tmph2dr31zv.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmph2dr31zv.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph2dr31zv.jl:38\ntest set: Test Failed at /tmp/tmph2dr31zv.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmph2dr31zv.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph2dr31zv.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph2dr31zv.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_sum\
    \ = sum(length.(lst1))\n    lst2_sum = sum(length.(lst2))\n    if lst1_sum ==\
    \ lst2_sum\n        return lst1\n    end\n    if lst1_sum < lst2_sum\n       \
    \ return lst1\n    end\n    return lst2\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpx4g_bhb5.jl:46\\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\\n   Evaluated: [\"this\"] == String[]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpx4g_bhb5.jl:46\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpx4g_bhb5.jl:38\\ntest set: Test Failed at /tmp/tmpx4g_bhb5.jl:47\\\
    n  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\\\
    n   Evaluated: [\"this\"] == String[]\\nStacktrace:\\n [1] top-level scope at\
    \ /tmp/tmpx4g_bhb5.jl:47\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpx4g_bhb5.jl:38\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    if length(lst2) < length(lst1)\n\
    \        return lst2\n    end\n    if length(lst1) == length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsj4ufp2d.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpsj4ufp2d.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsj4ufp2d.jl:38\ntest set: Test Failed at /tmp/tmpsj4ufp2d.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpsj4ufp2d.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsj4ufp2d.jl:38\ntest set: Test Failed at /tmp/tmpsj4ufp2d.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpsj4ufp2d.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsj4ufp2d.jl:38\ntest set: Test Failed at /tmp/tmpsj4ufp2d.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpsj4ufp2d.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsj4ufp2d.jl:38\ntest set: Test Failed at /tmp/tmpsj4ufp2d.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpsj4ufp2d.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsj4ufp2d.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsj4ufp2d.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total += length(i)\n\
    \    end\n    for i in lst2\n        lst2_total += length(i)\n    end\n    if\
    \ lst1_total > lst2_total\n        return lst2\n    elseif lst1_total < lst2_total\n\
    \        return lst1\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzjxhazie.jl:52\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzjxhazie.jl:52\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzjxhazie.jl:44\ntest set: Test Failed at /tmp/tmpzjxhazie.jl:53\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpzjxhazie.jl:53\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzjxhazie.jl:44\nTest Summary: | Pass  Fail  Total\n\
    test set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzjxhazie.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphy4m3796.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmphy4m3796.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphy4m3796.jl:38\ntest set: Test Failed at /tmp/tmphy4m3796.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmphy4m3796.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphy4m3796.jl:38\ntest set: Test Failed at /tmp/tmphy4m3796.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmphy4m3796.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphy4m3796.jl:38\ntest set: Test Failed at /tmp/tmphy4m3796.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmphy4m3796.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphy4m3796.jl:38\ntest set: Test Failed at /tmp/tmphy4m3796.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmphy4m3796.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphy4m3796.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphy4m3796.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5uajn5nq.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp5uajn5nq.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5uajn5nq.jl:38\ntest set: Test Failed at /tmp/tmp5uajn5nq.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp5uajn5nq.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5uajn5nq.jl:38\ntest set: Test Failed at /tmp/tmp5uajn5nq.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp5uajn5nq.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5uajn5nq.jl:38\ntest set: Test Failed at /tmp/tmp5uajn5nq.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmp5uajn5nq.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5uajn5nq.jl:38\ntest set: Test Failed at /tmp/tmp5uajn5nq.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmp5uajn5nq.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5uajn5nq.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5uajn5nq.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    return lst1\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdg4n4ek7.jl:35\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpdg4n4ek7.jl:35\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdg4n4ek7.jl:33\ntest set: Test Failed at /tmp/tmpdg4n4ek7.jl:38\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpdg4n4ek7.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdg4n4ek7.jl:33\ntest set: Test Failed at /tmp/tmpdg4n4ek7.jl:39\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpdg4n4ek7.jl:39\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdg4n4ek7.jl:33\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdg4n4ek7.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    return lst1\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp0med0r4m.jl:35\\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp0med0r4m.jl:35\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp0med0r4m.jl:33\\ntest set: Test Failed at /tmp/tmp0med0r4m.jl:38\\\
    n  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp0med0r4m.jl:38\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp0med0r4m.jl:33\\ntest set: Test Failed at /tmp/tmp0med0r4m.jl:39\\\
    n  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\",\
    \ \"hi\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp0med0r4m.jl:39\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp0med0r4m.jl:33\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    6     3      9\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    if length(lst2) < length(lst1)\n\
    \        return lst2\n    end\n    if length(lst1) == length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpudoz1i5s.jl:40\\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpudoz1i5s.jl:40\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpudoz1i5s.jl:38\\ntest set: Test Failed at /tmp/tmpudoz1i5s.jl:43\\\
    n  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpudoz1i5s.jl:43\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpudoz1i5s.jl:38\\ntest set: Test Failed at /tmp/tmpudoz1i5s.jl:44\\\
    n  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\",\
    \ \"hi\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpudoz1i5s.jl:44\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpudoz1i5s.jl:38\\ntest set: Test Failed at /tmp/tmpudoz1i5s.jl:46\\\
    n  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\\\
    n   Evaluated: [\"this\"] == String[]\\nStacktrace:\\n [1] top-level scope at\
    \ /tmp/tmpudoz1i5s.jl:46\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpudoz1i5s.jl:38\\ntest set: Test Failed at /tmp/tmpudoz1i5s.jl:47\\\
    n  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\\\
    n   Evaluated: [\"this\"] == String[]\\nStacktrace:\\n [1] top-level scope at\
    \ /tmp/tmpudoz1i5s.jl:47\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpudoz1i5s.jl:38\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    4     5      9\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpg4syh9cf.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpg4syh9cf.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg4syh9cf.jl:38\ntest set: Test Failed at /tmp/tmpg4syh9cf.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpg4syh9cf.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg4syh9cf.jl:38\ntest set: Test Failed at /tmp/tmpg4syh9cf.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpg4syh9cf.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg4syh9cf.jl:38\ntest set: Test Failed at /tmp/tmpg4syh9cf.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpg4syh9cf.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg4syh9cf.jl:38\ntest set: Test Failed at /tmp/tmpg4syh9cf.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpg4syh9cf.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg4syh9cf.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg4syh9cf.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\n    return lst2\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwln3e6pt.jl:38\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpwln3e6pt.jl:38\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwln3e6pt.jl:36\ntest set: Test Failed at /tmp/tmpwln3e6pt.jl:41\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpwln3e6pt.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwln3e6pt.jl:36\ntest set: Test Failed at /tmp/tmpwln3e6pt.jl:42\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpwln3e6pt.jl:42\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwln3e6pt.jl:36\ntest set: Test Failed at /tmp/tmpwln3e6pt.jl:44\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpwln3e6pt.jl:44\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwln3e6pt.jl:36\ntest set: Test Failed at /tmp/tmpwln3e6pt.jl:45\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpwln3e6pt.jl:45\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwln3e6pt.jl:36\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwln3e6pt.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi_k1lz8w.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpi_k1lz8w.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi_k1lz8w.jl:38\ntest set: Test Failed at /tmp/tmpi_k1lz8w.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpi_k1lz8w.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi_k1lz8w.jl:38\ntest set: Test Failed at /tmp/tmpi_k1lz8w.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpi_k1lz8w.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi_k1lz8w.jl:38\ntest set: Test Failed at /tmp/tmpi_k1lz8w.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpi_k1lz8w.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi_k1lz8w.jl:38\ntest set: Test Failed at /tmp/tmpi_k1lz8w.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpi_k1lz8w.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi_k1lz8w.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi_k1lz8w.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if sum(length.(lst1))\
    \ < sum(length.(lst2))\n        return lst1\n    elseif sum(length.(lst1)) > sum(length.(lst2))\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf6iy71xh.jl:44\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf6iy71xh.jl:44\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpf6iy71xh.jl:36\ntest set: Test Failed at /tmp/tmpf6iy71xh.jl:45\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpf6iy71xh.jl:45\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpf6iy71xh.jl:36\nTest Summary: | Pass  Fail  Total\n\
    test set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf6iy71xh.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    if length(lst2) < length(lst1)\n\
    \        return lst2\n    end\n    if length(lst1) == length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyngiq2sm.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpyngiq2sm.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyngiq2sm.jl:38\ntest set: Test Failed at /tmp/tmpyngiq2sm.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpyngiq2sm.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyngiq2sm.jl:38\ntest set: Test Failed at /tmp/tmpyngiq2sm.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpyngiq2sm.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyngiq2sm.jl:38\ntest set: Test Failed at /tmp/tmpyngiq2sm.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpyngiq2sm.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyngiq2sm.jl:38\ntest set: Test Failed at /tmp/tmpyngiq2sm.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpyngiq2sm.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyngiq2sm.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyngiq2sm.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    return lst1\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpobf9qpub.jl:35\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpobf9qpub.jl:35\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpobf9qpub.jl:33\ntest set: Test Failed at /tmp/tmpobf9qpub.jl:38\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpobf9qpub.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpobf9qpub.jl:33\ntest set: Test Failed at /tmp/tmpobf9qpub.jl:39\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpobf9qpub.jl:39\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpobf9qpub.jl:33\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpobf9qpub.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpz89i5c59.jl:40\\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpz89i5c59.jl:40\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpz89i5c59.jl:38\\ntest set: Test Failed at /tmp/tmpz89i5c59.jl:43\\\
    n  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpz89i5c59.jl:43\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpz89i5c59.jl:38\\ntest set: Test Failed at /tmp/tmpz89i5c59.jl:44\\\
    n  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\",\
    \ \"hi\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpz89i5c59.jl:44\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpz89i5c59.jl:38\\ntest set: Test Failed at /tmp/tmpz89i5c59.jl:46\\\
    n  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\\\
    n   Evaluated: [\"this\"] == String[]\\nStacktrace:\\n [1] top-level scope at\
    \ /tmp/tmpz89i5c59.jl:46\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpz89i5c59.jl:38\\ntest set: Test Failed at /tmp/tmpz89i5c59.jl:47\\\
    n  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\\\
    n   Evaluated: [\"this\"] == String[]\\nStacktrace:\\n [1] top-level scope at\
    \ /tmp/tmpz89i5c59.jl:47\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpz89i5c59.jl:38\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    4     5      9\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) == 0\n        return\
    \ lst2\n    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if\
    \ sum(length.(lst1)) < sum(length.(lst2))\n        return lst1\n    elseif sum(length.(lst1))\
    \ > sum(length.(lst2))\n        return lst2\n    else\n        return lst1\n \
    \   end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfn35q9d1.jl:44\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfn35q9d1.jl:44\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfn35q9d1.jl:36\ntest set: Test Failed at /tmp/tmpfn35q9d1.jl:45\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpfn35q9d1.jl:45\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfn35q9d1.jl:36\nTest Summary: | Pass  Fail  Total\n\
    test set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfn35q9d1.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\n    return lst2\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3wjip9dp.jl:38\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp3wjip9dp.jl:38\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3wjip9dp.jl:36\ntest set: Test Failed at /tmp/tmp3wjip9dp.jl:41\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp3wjip9dp.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3wjip9dp.jl:36\ntest set: Test Failed at /tmp/tmp3wjip9dp.jl:42\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp3wjip9dp.jl:42\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3wjip9dp.jl:36\ntest set: Test Failed at /tmp/tmp3wjip9dp.jl:44\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmp3wjip9dp.jl:44\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3wjip9dp.jl:36\ntest set: Test Failed at /tmp/tmp3wjip9dp.jl:45\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmp3wjip9dp.jl:45\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3wjip9dp.jl:36\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3wjip9dp.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptgkku2iy.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmptgkku2iy.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptgkku2iy.jl:38\ntest set: Test Failed at /tmp/tmptgkku2iy.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmptgkku2iy.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptgkku2iy.jl:38\ntest set: Test Failed at /tmp/tmptgkku2iy.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmptgkku2iy.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptgkku2iy.jl:38\ntest set: Test Failed at /tmp/tmptgkku2iy.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmptgkku2iy.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptgkku2iy.jl:38\ntest set: Test Failed at /tmp/tmptgkku2iy.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmptgkku2iy.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptgkku2iy.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptgkku2iy.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    if length(lst2) < length(lst1)\n\
    \        return lst2\n    end\n    if length(lst1) == length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphins6j1u.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmphins6j1u.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphins6j1u.jl:38\ntest set: Test Failed at /tmp/tmphins6j1u.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmphins6j1u.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphins6j1u.jl:38\ntest set: Test Failed at /tmp/tmphins6j1u.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmphins6j1u.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphins6j1u.jl:38\ntest set: Test Failed at /tmp/tmphins6j1u.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmphins6j1u.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphins6j1u.jl:38\ntest set: Test Failed at /tmp/tmphins6j1u.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmphins6j1u.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphins6j1u.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphins6j1u.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    if length(lst2) < length(lst1)\n\
    \        return lst2\n    end\n    if length(lst1) == length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkl5mxt0t.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpkl5mxt0t.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkl5mxt0t.jl:38\ntest set: Test Failed at /tmp/tmpkl5mxt0t.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpkl5mxt0t.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkl5mxt0t.jl:38\ntest set: Test Failed at /tmp/tmpkl5mxt0t.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpkl5mxt0t.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkl5mxt0t.jl:38\ntest set: Test Failed at /tmp/tmpkl5mxt0t.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpkl5mxt0t.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkl5mxt0t.jl:38\ntest set: Test Failed at /tmp/tmpkl5mxt0t.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpkl5mxt0t.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkl5mxt0t.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkl5mxt0t.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if sum(length.(lst1))\
    \ < sum(length.(lst2))\n        return lst1\n    elseif sum(length.(lst1)) > sum(length.(lst2))\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc_cciren.jl:44\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpc_cciren.jl:44\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc_cciren.jl:36\ntest set: Test Failed at /tmp/tmpc_cciren.jl:45\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpc_cciren.jl:45\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc_cciren.jl:36\nTest Summary: | Pass  Fail  Total\n\
    test set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc_cciren.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    return lst2\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9x_9pnwd.jl:35\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp9x_9pnwd.jl:35\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9x_9pnwd.jl:33\ntest set: Test Failed at /tmp/tmp9x_9pnwd.jl:38\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp9x_9pnwd.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9x_9pnwd.jl:33\ntest set: Test Failed at /tmp/tmp9x_9pnwd.jl:39\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp9x_9pnwd.jl:39\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9x_9pnwd.jl:33\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9x_9pnwd.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzoxpo9h9.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpzoxpo9h9.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzoxpo9h9.jl:38\ntest set: Test Failed at /tmp/tmpzoxpo9h9.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpzoxpo9h9.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzoxpo9h9.jl:38\ntest set: Test Failed at /tmp/tmpzoxpo9h9.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpzoxpo9h9.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzoxpo9h9.jl:38\ntest set: Test Failed at /tmp/tmpzoxpo9h9.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpzoxpo9h9.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzoxpo9h9.jl:38\ntest set: Test Failed at /tmp/tmpzoxpo9h9.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpzoxpo9h9.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzoxpo9h9.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzoxpo9h9.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total += length(i)\n\
    \    end\n    for i in lst2\n        lst2_total += length(i)\n    end\n    if\
    \ lst1_total < lst2_total\n        return lst1\n    elseif lst1_total > lst2_total\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpflckp5zl.jl:52\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpflckp5zl.jl:52\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpflckp5zl.jl:44\ntest set: Test Failed at /tmp/tmpflckp5zl.jl:53\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpflckp5zl.jl:53\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpflckp5zl.jl:44\nTest Summary: | Pass  Fail  Total\n\
    test set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpflckp5zl.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) < length(lst2)\n   \
    \     return lst1\n    elseif length(lst1) > length(lst2)\n        return lst2\n\
    \    else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp4kpdqnkm.jl:32\\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp4kpdqnkm.jl:32\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp4kpdqnkm.jl:30\\ntest set: Test Failed at /tmp/tmp4kpdqnkm.jl:35\\\
    n  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp4kpdqnkm.jl:35\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp4kpdqnkm.jl:30\\ntest set: Test Failed at /tmp/tmp4kpdqnkm.jl:36\\\
    n  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\",\
    \ \"hi\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp4kpdqnkm.jl:36\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp4kpdqnkm.jl:30\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    6     3      9\\n'"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total += length(i)\n\
    \    end\n    for i in lst2\n        lst2_total += length(i)\n    end\n    if\
    \ lst1_total == lst2_total\n        return lst1\n    end\n    if lst1_total <\
    \ lst2_total\n        return lst1\n    end\n    return lst2\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpep2zgkh0.jl:52\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpep2zgkh0.jl:52\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpep2zgkh0.jl:44\ntest set: Test Failed at /tmp/tmpep2zgkh0.jl:53\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpep2zgkh0.jl:53\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpep2zgkh0.jl:44\nTest Summary: | Pass  Fail  Total\n\
    test set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpep2zgkh0.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7dlv6ir7.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp7dlv6ir7.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7dlv6ir7.jl:38\ntest set: Test Failed at /tmp/tmp7dlv6ir7.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp7dlv6ir7.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7dlv6ir7.jl:38\ntest set: Test Failed at /tmp/tmp7dlv6ir7.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp7dlv6ir7.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7dlv6ir7.jl:38\ntest set: Test Failed at /tmp/tmp7dlv6ir7.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmp7dlv6ir7.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7dlv6ir7.jl:38\ntest set: Test Failed at /tmp/tmp7dlv6ir7.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmp7dlv6ir7.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7dlv6ir7.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7dlv6ir7.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4ru07hhd.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp4ru07hhd.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4ru07hhd.jl:38\ntest set: Test Failed at /tmp/tmp4ru07hhd.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp4ru07hhd.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4ru07hhd.jl:38\ntest set: Test Failed at /tmp/tmp4ru07hhd.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp4ru07hhd.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4ru07hhd.jl:38\ntest set: Test Failed at /tmp/tmp4ru07hhd.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmp4ru07hhd.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4ru07hhd.jl:38\ntest set: Test Failed at /tmp/tmp4ru07hhd.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmp4ru07hhd.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4ru07hhd.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4ru07hhd.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    lst1_len = 0\n    lst2_len = 0\n\
    \    for i in lst1\n        lst1_len += length(i)\n    end\n    for i in lst2\n\
    \        lst2_len += length(i)\n    end\n    if lst1_len == lst2_len\n       \
    \ return lst1\n    elseif lst1_len < lst2_len\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total += length(i)\n\
    \    end\n    for i in lst2\n        lst2_total += length(i)\n    end\n    if\
    \ lst1_total < lst2_total\n        return lst1\n    elseif lst1_total > lst2_total\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpdwmbzz4e.jl:52\\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\\n   Evaluated: [\"this\"] == String[]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpdwmbzz4e.jl:52\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpdwmbzz4e.jl:44\\ntest set: Test Failed at /tmp/tmpdwmbzz4e.jl:53\\\
    n  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\\\
    n   Evaluated: [\"this\"] == String[]\\nStacktrace:\\n [1] top-level scope at\
    \ /tmp/tmpdwmbzz4e.jl:53\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpdwmbzz4e.jl:44\\nTest Summary: | Pass  Fail \
    \ Total\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if sum(length.(lst1))\
    \ < sum(length.(lst2))\n        return lst1\n    elseif sum(length.(lst1)) > sum(length.(lst2))\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3vvjwxp_.jl:44\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3vvjwxp_.jl:44\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3vvjwxp_.jl:36\ntest set: Test Failed at /tmp/tmp3vvjwxp_.jl:45\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmp3vvjwxp_.jl:45\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3vvjwxp_.jl:36\nTest Summary: | Pass  Fail  Total\n\
    test set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3vvjwxp_.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpy53x0l62.jl:40\\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpy53x0l62.jl:40\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpy53x0l62.jl:38\\ntest set: Test Failed at /tmp/tmpy53x0l62.jl:43\\\
    n  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpy53x0l62.jl:43\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpy53x0l62.jl:38\\ntest set: Test Failed at /tmp/tmpy53x0l62.jl:44\\\
    n  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\",\
    \ \"hi\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpy53x0l62.jl:44\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpy53x0l62.jl:38\\ntest set: Test Failed at /tmp/tmpy53x0l62.jl:46\\\
    n  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\\\
    n   Evaluated: [\"this\"] == String[]\\nStacktrace:\\n [1] top-level scope at\
    \ /tmp/tmpy53x0l62.jl:46\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpy53x0l62.jl:38\\ntest set: Test Failed at /tmp/tmpy53x0l62.jl:47\\\
    n  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\\\
    n   Evaluated: [\"this\"] == String[]\\nStacktrace:\\n [1] top-level scope at\
    \ /tmp/tmpy53x0l62.jl:47\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpy53x0l62.jl:38\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb50t9feb.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpb50t9feb.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpb50t9feb.jl:38\ntest set: Test Failed at /tmp/tmpb50t9feb.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpb50t9feb.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpb50t9feb.jl:38\ntest set: Test Failed at /tmp/tmpb50t9feb.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpb50t9feb.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpb50t9feb.jl:38\ntest set: Test Failed at /tmp/tmpb50t9feb.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpb50t9feb.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpb50t9feb.jl:38\ntest set: Test Failed at /tmp/tmpb50t9feb.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpb50t9feb.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpb50t9feb.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb50t9feb.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    if length(lst2) < length(lst1)\n\
    \        return lst2\n    end\n    if length(lst1) == length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpeuata9n9.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpeuata9n9.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpeuata9n9.jl:38\ntest set: Test Failed at /tmp/tmpeuata9n9.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpeuata9n9.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpeuata9n9.jl:38\ntest set: Test Failed at /tmp/tmpeuata9n9.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpeuata9n9.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpeuata9n9.jl:38\ntest set: Test Failed at /tmp/tmpeuata9n9.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpeuata9n9.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpeuata9n9.jl:38\ntest set: Test Failed at /tmp/tmpeuata9n9.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpeuata9n9.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpeuata9n9.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeuata9n9.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpekfzu7zc.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpekfzu7zc.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpekfzu7zc.jl:38\ntest set: Test Failed at /tmp/tmpekfzu7zc.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpekfzu7zc.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpekfzu7zc.jl:38\ntest set: Test Failed at /tmp/tmpekfzu7zc.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpekfzu7zc.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpekfzu7zc.jl:38\ntest set: Test Failed at /tmp/tmpekfzu7zc.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpekfzu7zc.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpekfzu7zc.jl:38\ntest set: Test Failed at /tmp/tmpekfzu7zc.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpekfzu7zc.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpekfzu7zc.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpekfzu7zc.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ sum(length.(lst1)) < sum(length.(lst2))\n        return lst1\n    elseif sum(length.(lst1))\
    \ > sum(length.(lst2))\n        return lst2\n    else\n        return lst1\n \
    \   end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    return lst2\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp4it484n3.jl:35\\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp4it484n3.jl:35\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp4it484n3.jl:33\\ntest set: Test Failed at /tmp/tmp4it484n3.jl:38\\\
    n  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp4it484n3.jl:38\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp4it484n3.jl:33\\ntest set: Test Failed at /tmp/tmp4it484n3.jl:39\\\
    n  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\",\
    \ \"hi\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp4it484n3.jl:39\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp4it484n3.jl:33\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    if length(lst2) < length(lst1)\n\
    \        return lst2\n    end\n    if length(lst1) == length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppgakdl1o.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmppgakdl1o.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppgakdl1o.jl:38\ntest set: Test Failed at /tmp/tmppgakdl1o.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmppgakdl1o.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppgakdl1o.jl:38\ntest set: Test Failed at /tmp/tmppgakdl1o.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmppgakdl1o.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppgakdl1o.jl:38\ntest set: Test Failed at /tmp/tmppgakdl1o.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmppgakdl1o.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppgakdl1o.jl:38\ntest set: Test Failed at /tmp/tmppgakdl1o.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmppgakdl1o.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppgakdl1o.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppgakdl1o.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) == 0\n        return\
    \ lst2\n    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppfqn1065.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmppfqn1065.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppfqn1065.jl:38\ntest set: Test Failed at /tmp/tmppfqn1065.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmppfqn1065.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppfqn1065.jl:38\ntest set: Test Failed at /tmp/tmppfqn1065.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmppfqn1065.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppfqn1065.jl:38\ntest set: Test Failed at /tmp/tmppfqn1065.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmppfqn1065.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppfqn1065.jl:38\ntest set: Test Failed at /tmp/tmppfqn1065.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmppfqn1065.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppfqn1065.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppfqn1065.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if sum(length.(lst1)) < sum(length.(lst2))\n\
    \        return lst1\n    elseif sum(length.(lst1)) > sum(length.(lst2))\n   \
    \     return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total += length(i)\n\
    \    end\n    for i in lst2\n        lst2_total += length(i)\n    end\n    if\
    \ lst1_total < lst2_total\n        return lst1\n    elseif lst1_total > lst2_total\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpii6way_u.jl:52\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpii6way_u.jl:52\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpii6way_u.jl:44\ntest set: Test Failed at /tmp/tmpii6way_u.jl:53\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpii6way_u.jl:53\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpii6way_u.jl:44\nTest Summary: | Pass  Fail  Total\n\
    test set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpii6way_u.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if sum(length.(lst1)) < sum(length.(lst2))\n\
    \        return lst1\n    elseif sum(length.(lst1)) > sum(length.(lst2))\n   \
    \     return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) < length(lst2)\n     \
    \   return lst1\n    elseif length(lst1) > length(lst2)\n        return lst2\n\
    \    else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpro4qzk1q.jl:32\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpro4qzk1q.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpro4qzk1q.jl:30\ntest set: Test Failed at /tmp/tmpro4qzk1q.jl:35\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpro4qzk1q.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpro4qzk1q.jl:30\ntest set: Test Failed at /tmp/tmpro4qzk1q.jl:36\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpro4qzk1q.jl:36\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpro4qzk1q.jl:30\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpro4qzk1q.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if sum(length.(lst1))\
    \ < sum(length.(lst2))\n        return lst1\n    elseif sum(length.(lst1)) > sum(length.(lst2))\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpweks084r.jl:44\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpweks084r.jl:44\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpweks084r.jl:36\ntest set: Test Failed at /tmp/tmpweks084r.jl:45\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpweks084r.jl:45\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpweks084r.jl:36\nTest Summary: | Pass  Fail  Total\n\
    test set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpweks084r.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total += length(i)\n\
    \    end\n    for i in lst2\n        lst2_total += length(i)\n    end\n    if\
    \ lst1_total < lst2_total\n        return lst1\n    elseif lst1_total > lst2_total\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzkpbhes7.jl:52\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzkpbhes7.jl:52\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzkpbhes7.jl:44\ntest set: Test Failed at /tmp/tmpzkpbhes7.jl:53\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpzkpbhes7.jl:53\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzkpbhes7.jl:44\nTest Summary: | Pass  Fail  Total\n\
    test set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzkpbhes7.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpnn01kvw7.jl:40\\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpnn01kvw7.jl:40\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpnn01kvw7.jl:38\\ntest set: Test Failed at /tmp/tmpnn01kvw7.jl:43\\\
    n  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpnn01kvw7.jl:43\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpnn01kvw7.jl:38\\ntest set: Test Failed at /tmp/tmpnn01kvw7.jl:44\\\
    n  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\",\
    \ \"hi\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpnn01kvw7.jl:44\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpnn01kvw7.jl:38\\ntest set: Test Failed at /tmp/tmpnn01kvw7.jl:46\\\
    n  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\\\
    n   Evaluated: [\"this\"] == String[]\\nStacktrace:\\n [1] top-level scope at\
    \ /tmp/tmpnn01kvw7.jl:46\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpnn01kvw7.jl:38\\ntest set: Test Failed at /tmp/tmpnn01kvw7.jl:47\\\
    n  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\\\
    n   Evaluated: [\"this\"] == String[]\\nStacktrace:\\n [1] top-level scope at\
    \ /tmp/tmpnn01kvw7.jl:47\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpnn01kvw7.jl:38\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    4     5      9\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ sum(length.(lst1)) < sum(length.(lst2))\n        return lst1\n    elseif sum(length.(lst1))\
    \ > sum(length.(lst2))\n        return lst2\n    else\n        return lst1\n \
    \   end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 || length(lst2)\
    \ == 0\n        return []\n    end\n    if sum(length.(lst1)) < sum(length.(lst2))\n\
    \        return lst1\n    elseif sum(length.(lst1)) > sum(length.(lst2))\n   \
    \     return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ sum(length.(lst1)) == sum(length.(lst2))\n        return lst1\n    end\n   \
    \ if sum(length.(lst1)) < sum(length.(lst2))\n        return lst1\n    end\n \
    \   return lst2\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    return lst1\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp20ks_rli.jl:35\\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp20ks_rli.jl:35\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp20ks_rli.jl:33\\ntest set: Test Failed at /tmp/tmp20ks_rli.jl:38\\\
    n  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp20ks_rli.jl:38\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp20ks_rli.jl:33\\ntest set: Test Failed at /tmp/tmp20ks_rli.jl:39\\\
    n  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\",\
    \ \"hi\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp20ks_rli.jl:39\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp20ks_rli.jl:33\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppe19q__u.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmppe19q__u.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppe19q__u.jl:38\ntest set: Test Failed at /tmp/tmppe19q__u.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmppe19q__u.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppe19q__u.jl:38\ntest set: Test Failed at /tmp/tmppe19q__u.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmppe19q__u.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppe19q__u.jl:38\ntest set: Test Failed at /tmp/tmppe19q__u.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmppe19q__u.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppe19q__u.jl:38\ntest set: Test Failed at /tmp/tmppe19q__u.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmppe19q__u.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppe19q__u.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppe19q__u.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\n    return lst2\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp38vnttq4.jl:38\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp38vnttq4.jl:38\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp38vnttq4.jl:36\ntest set: Test Failed at /tmp/tmp38vnttq4.jl:41\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp38vnttq4.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp38vnttq4.jl:36\ntest set: Test Failed at /tmp/tmp38vnttq4.jl:42\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp38vnttq4.jl:42\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp38vnttq4.jl:36\ntest set: Test Failed at /tmp/tmp38vnttq4.jl:44\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmp38vnttq4.jl:44\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp38vnttq4.jl:36\ntest set: Test Failed at /tmp/tmp38vnttq4.jl:45\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmp38vnttq4.jl:45\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp38vnttq4.jl:36\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp38vnttq4.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) == 0\n        return\
    \ lst2\n    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp91i_p10a.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp91i_p10a.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp91i_p10a.jl:38\ntest set: Test Failed at /tmp/tmp91i_p10a.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp91i_p10a.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp91i_p10a.jl:38\ntest set: Test Failed at /tmp/tmp91i_p10a.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp91i_p10a.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp91i_p10a.jl:38\ntest set: Test Failed at /tmp/tmp91i_p10a.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmp91i_p10a.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp91i_p10a.jl:38\ntest set: Test Failed at /tmp/tmp91i_p10a.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmp91i_p10a.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp91i_p10a.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp91i_p10a.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\n    return lst2\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmm5ilyd5.jl:38\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpmm5ilyd5.jl:38\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmm5ilyd5.jl:36\ntest set: Test Failed at /tmp/tmpmm5ilyd5.jl:41\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpmm5ilyd5.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmm5ilyd5.jl:36\ntest set: Test Failed at /tmp/tmpmm5ilyd5.jl:42\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpmm5ilyd5.jl:42\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmm5ilyd5.jl:36\ntest set: Test Failed at /tmp/tmpmm5ilyd5.jl:44\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpmm5ilyd5.jl:44\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmm5ilyd5.jl:36\ntest set: Test Failed at /tmp/tmpmm5ilyd5.jl:45\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpmm5ilyd5.jl:45\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmm5ilyd5.jl:36\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmm5ilyd5.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) < length(lst2)\n        return lst1\n    end\n    if length(lst2)\
    \ < length(lst1)\n        return lst2\n    end\n    if length(lst1) == length(lst2)\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprvq_9_jm.jl:37\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmprvq_9_jm.jl:37\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprvq_9_jm.jl:35\ntest set: Test Failed at /tmp/tmprvq_9_jm.jl:40\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmprvq_9_jm.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprvq_9_jm.jl:35\ntest set: Test Failed at /tmp/tmprvq_9_jm.jl:41\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmprvq_9_jm.jl:41\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprvq_9_jm.jl:35\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprvq_9_jm.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) < length(lst2)\n     \
    \   return lst1\n    elseif length(lst1) > length(lst2)\n        return lst2\n\
    \    else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_ifmo__t.jl:32\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp_ifmo__t.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_ifmo__t.jl:30\ntest set: Test Failed at /tmp/tmp_ifmo__t.jl:35\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp_ifmo__t.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_ifmo__t.jl:30\ntest set: Test Failed at /tmp/tmp_ifmo__t.jl:36\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp_ifmo__t.jl:36\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_ifmo__t.jl:30\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_ifmo__t.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsgjnk4ku.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpsgjnk4ku.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsgjnk4ku.jl:38\ntest set: Test Failed at /tmp/tmpsgjnk4ku.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpsgjnk4ku.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsgjnk4ku.jl:38\ntest set: Test Failed at /tmp/tmpsgjnk4ku.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpsgjnk4ku.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsgjnk4ku.jl:38\ntest set: Test Failed at /tmp/tmpsgjnk4ku.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpsgjnk4ku.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsgjnk4ku.jl:38\ntest set: Test Failed at /tmp/tmpsgjnk4ku.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpsgjnk4ku.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsgjnk4ku.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsgjnk4ku.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) == 0\n        return\
    \ lst2\n    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if\
    \ sum(length.(lst1)) < sum(length.(lst2))\n        return lst1\n    elseif sum(length.(lst1))\
    \ > sum(length.(lst2))\n        return lst2\n    else\n        return lst1\n \
    \   end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpraoxoc1x.jl:44\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpraoxoc1x.jl:44\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpraoxoc1x.jl:36\ntest set: Test Failed at /tmp/tmpraoxoc1x.jl:45\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpraoxoc1x.jl:45\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpraoxoc1x.jl:36\nTest Summary: | Pass  Fail  Total\n\
    test set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpraoxoc1x.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\n    return lst2\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd7q2utun.jl:38\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpd7q2utun.jl:38\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpd7q2utun.jl:36\ntest set: Test Failed at /tmp/tmpd7q2utun.jl:41\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpd7q2utun.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpd7q2utun.jl:36\ntest set: Test Failed at /tmp/tmpd7q2utun.jl:42\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpd7q2utun.jl:42\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpd7q2utun.jl:36\ntest set: Test Failed at /tmp/tmpd7q2utun.jl:44\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpd7q2utun.jl:44\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpd7q2utun.jl:36\ntest set: Test Failed at /tmp/tmpd7q2utun.jl:45\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpd7q2utun.jl:45\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpd7q2utun.jl:36\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd7q2utun.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm6zr0mq_.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpm6zr0mq_.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpm6zr0mq_.jl:38\ntest set: Test Failed at /tmp/tmpm6zr0mq_.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpm6zr0mq_.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpm6zr0mq_.jl:38\ntest set: Test Failed at /tmp/tmpm6zr0mq_.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpm6zr0mq_.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpm6zr0mq_.jl:38\ntest set: Test Failed at /tmp/tmpm6zr0mq_.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpm6zr0mq_.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpm6zr0mq_.jl:38\ntest set: Test Failed at /tmp/tmpm6zr0mq_.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpm6zr0mq_.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpm6zr0mq_.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm6zr0mq_.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total += length(i)\n\
    \    end\n    for i in lst2\n        lst2_total += length(i)\n    end\n    if\
    \ lst1_total < lst2_total\n        return lst1\n    elseif lst1_total > lst2_total\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpzfyninln.jl:52\\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\\n   Evaluated: [\"this\"] == String[]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpzfyninln.jl:52\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpzfyninln.jl:44\\ntest set: Test Failed at /tmp/tmpzfyninln.jl:53\\\
    n  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\\\
    n   Evaluated: [\"this\"] == String[]\\nStacktrace:\\n [1] top-level scope at\
    \ /tmp/tmpzfyninln.jl:53\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpzfyninln.jl:44\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    return lst1\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdn13cx7g.jl:35\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpdn13cx7g.jl:35\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdn13cx7g.jl:33\ntest set: Test Failed at /tmp/tmpdn13cx7g.jl:38\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpdn13cx7g.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdn13cx7g.jl:33\ntest set: Test Failed at /tmp/tmpdn13cx7g.jl:39\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpdn13cx7g.jl:39\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdn13cx7g.jl:33\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdn13cx7g.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr6r8ymi4.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpr6r8ymi4.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr6r8ymi4.jl:38\ntest set: Test Failed at /tmp/tmpr6r8ymi4.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpr6r8ymi4.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr6r8ymi4.jl:38\ntest set: Test Failed at /tmp/tmpr6r8ymi4.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpr6r8ymi4.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr6r8ymi4.jl:38\ntest set: Test Failed at /tmp/tmpr6r8ymi4.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpr6r8ymi4.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr6r8ymi4.jl:38\ntest set: Test Failed at /tmp/tmpr6r8ymi4.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpr6r8ymi4.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr6r8ymi4.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr6r8ymi4.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    len1 = sum([length(x) for x in lst1])\n\
    \    len2 = sum([length(x) for x in lst2])\n    if len1 == len2\n        return\
    \ lst1\n    elseif len1 < len2\n        return lst1\n    else\n        return\
    \ lst2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ sum(length.(lst1)) < sum(length.(lst2))\n        return lst1\n    elseif sum(length.(lst1))\
    \ > sum(length.(lst2))\n        return lst2\n    else\n        return lst1\n \
    \   end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpw6__1st2.jl:40\\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpw6__1st2.jl:40\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpw6__1st2.jl:38\\ntest set: Test Failed at /tmp/tmpw6__1st2.jl:43\\\
    n  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpw6__1st2.jl:43\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpw6__1st2.jl:38\\ntest set: Test Failed at /tmp/tmpw6__1st2.jl:44\\\
    n  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\",\
    \ \"hi\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpw6__1st2.jl:44\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpw6__1st2.jl:38\\ntest set: Test Failed at /tmp/tmpw6__1st2.jl:46\\\
    n  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\\\
    n   Evaluated: [\"this\"] == String[]\\nStacktrace:\\n [1] top-level scope at\
    \ /tmp/tmpw6__1st2.jl:46\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpw6__1st2.jl:38\\ntest set: Test Failed at /tmp/tmpw6__1st2.jl:47\\\
    n  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\\\
    n   Evaluated: [\"this\"] == String[]\\nStacktrace:\\n [1] top-level scope at\
    \ /tmp/tmpw6__1st2.jl:47\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpw6__1st2.jl:38\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if sum(length.(lst1))\
    \ < sum(length.(lst2))\n        return lst1\n    elseif sum(length.(lst1)) > sum(length.(lst2))\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpejbrqqc4.jl:44\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpejbrqqc4.jl:44\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpejbrqqc4.jl:36\ntest set: Test Failed at /tmp/tmpejbrqqc4.jl:45\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpejbrqqc4.jl:45\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpejbrqqc4.jl:36\nTest Summary: | Pass  Fail  Total\n\
    test set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpejbrqqc4.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    if length(lst2) < length(lst1)\n\
    \        return lst2\n    end\n    if length(lst1) == length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa49dtl58.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpa49dtl58.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa49dtl58.jl:38\ntest set: Test Failed at /tmp/tmpa49dtl58.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpa49dtl58.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa49dtl58.jl:38\ntest set: Test Failed at /tmp/tmpa49dtl58.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpa49dtl58.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa49dtl58.jl:38\ntest set: Test Failed at /tmp/tmpa49dtl58.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpa49dtl58.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa49dtl58.jl:38\ntest set: Test Failed at /tmp/tmpa49dtl58.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpa49dtl58.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa49dtl58.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa49dtl58.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1yuhun53.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp1yuhun53.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1yuhun53.jl:38\ntest set: Test Failed at /tmp/tmp1yuhun53.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp1yuhun53.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1yuhun53.jl:38\ntest set: Test Failed at /tmp/tmp1yuhun53.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp1yuhun53.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1yuhun53.jl:38\ntest set: Test Failed at /tmp/tmp1yuhun53.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmp1yuhun53.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1yuhun53.jl:38\ntest set: Test Failed at /tmp/tmp1yuhun53.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmp1yuhun53.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1yuhun53.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1yuhun53.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total += length(i)\n\
    \    end\n    for i in lst2\n        lst2_total += length(i)\n    end\n    if\
    \ lst1_total < lst2_total\n        return lst1\n    elseif lst1_total > lst2_total\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxrk3k9_7.jl:52\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxrk3k9_7.jl:52\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxrk3k9_7.jl:44\ntest set: Test Failed at /tmp/tmpxrk3k9_7.jl:53\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpxrk3k9_7.jl:53\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxrk3k9_7.jl:44\nTest Summary: | Pass  Fail  Total\n\
    test set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxrk3k9_7.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl34cby6k.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpl34cby6k.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl34cby6k.jl:38\ntest set: Test Failed at /tmp/tmpl34cby6k.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpl34cby6k.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl34cby6k.jl:38\ntest set: Test Failed at /tmp/tmpl34cby6k.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpl34cby6k.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl34cby6k.jl:38\ntest set: Test Failed at /tmp/tmpl34cby6k.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpl34cby6k.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl34cby6k.jl:38\ntest set: Test Failed at /tmp/tmpl34cby6k.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpl34cby6k.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl34cby6k.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl34cby6k.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    return lst1\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpal3djogu.jl:35\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpal3djogu.jl:35\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpal3djogu.jl:33\ntest set: Test Failed at /tmp/tmpal3djogu.jl:38\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpal3djogu.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpal3djogu.jl:33\ntest set: Test Failed at /tmp/tmpal3djogu.jl:39\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpal3djogu.jl:39\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpal3djogu.jl:33\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpal3djogu.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps5ieosic.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmps5ieosic.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps5ieosic.jl:38\ntest set: Test Failed at /tmp/tmps5ieosic.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmps5ieosic.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps5ieosic.jl:38\ntest set: Test Failed at /tmp/tmps5ieosic.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmps5ieosic.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps5ieosic.jl:38\ntest set: Test Failed at /tmp/tmps5ieosic.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmps5ieosic.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps5ieosic.jl:38\ntest set: Test Failed at /tmp/tmps5ieosic.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmps5ieosic.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps5ieosic.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps5ieosic.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) == 0\n        return\
    \ lst2\n    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if\
    \ sum(length.(lst1)) < sum(length.(lst2))\n        return lst1\n    elseif sum(length.(lst1))\
    \ > sum(length.(lst2))\n        return lst2\n    else\n        return lst1\n \
    \   end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp3l13_8hq.jl:44\\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\\n   Evaluated: [\"this\"] == String[]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp3l13_8hq.jl:44\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp3l13_8hq.jl:36\\ntest set: Test Failed at /tmp/tmp3l13_8hq.jl:45\\\
    n  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\\\
    n   Evaluated: [\"this\"] == String[]\\nStacktrace:\\n [1] top-level scope at\
    \ /tmp/tmp3l13_8hq.jl:45\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp3l13_8hq.jl:36\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp54d0d6fr.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp54d0d6fr.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp54d0d6fr.jl:38\ntest set: Test Failed at /tmp/tmp54d0d6fr.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp54d0d6fr.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp54d0d6fr.jl:38\ntest set: Test Failed at /tmp/tmp54d0d6fr.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp54d0d6fr.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp54d0d6fr.jl:38\ntest set: Test Failed at /tmp/tmp54d0d6fr.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmp54d0d6fr.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp54d0d6fr.jl:38\ntest set: Test Failed at /tmp/tmp54d0d6fr.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmp54d0d6fr.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp54d0d6fr.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp54d0d6fr.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) == 0 && length(lst2)\
    \ != 0\n        return lst2\n    end\n    if length(lst1) != 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) != 0 && length(lst2)\
    \ != 0\n        if length(lst1) < length(lst2)\n            return lst1\n    \
    \    elseif length(lst1) > length(lst2)\n            return lst2\n        else\n\
    \            return lst1\n        end\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcog182v9.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpcog182v9.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcog182v9.jl:38\ntest set: Test Failed at /tmp/tmpcog182v9.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpcog182v9.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcog182v9.jl:38\ntest set: Test Failed at /tmp/tmpcog182v9.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpcog182v9.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcog182v9.jl:38\ntest set: Test Failed at /tmp/tmpcog182v9.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpcog182v9.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcog182v9.jl:38\ntest set: Test Failed at /tmp/tmpcog182v9.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpcog182v9.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcog182v9.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcog182v9.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkzsqz8cz.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpkzsqz8cz.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkzsqz8cz.jl:38\ntest set: Test Failed at /tmp/tmpkzsqz8cz.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpkzsqz8cz.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkzsqz8cz.jl:38\ntest set: Test Failed at /tmp/tmpkzsqz8cz.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpkzsqz8cz.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkzsqz8cz.jl:38\ntest set: Test Failed at /tmp/tmpkzsqz8cz.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpkzsqz8cz.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkzsqz8cz.jl:38\ntest set: Test Failed at /tmp/tmpkzsqz8cz.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpkzsqz8cz.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkzsqz8cz.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkzsqz8cz.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpejvv7ez3.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpejvv7ez3.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpejvv7ez3.jl:38\ntest set: Test Failed at /tmp/tmpejvv7ez3.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpejvv7ez3.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpejvv7ez3.jl:38\ntest set: Test Failed at /tmp/tmpejvv7ez3.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpejvv7ez3.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpejvv7ez3.jl:38\ntest set: Test Failed at /tmp/tmpejvv7ez3.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpejvv7ez3.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpejvv7ez3.jl:38\ntest set: Test Failed at /tmp/tmpejvv7ez3.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpejvv7ez3.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpejvv7ez3.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpejvv7ez3.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    if length(lst2) < length(lst1)\n\
    \        return lst2\n    end\n    if length(lst1) == length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn82k3nyj.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpn82k3nyj.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn82k3nyj.jl:38\ntest set: Test Failed at /tmp/tmpn82k3nyj.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpn82k3nyj.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn82k3nyj.jl:38\ntest set: Test Failed at /tmp/tmpn82k3nyj.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpn82k3nyj.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn82k3nyj.jl:38\ntest set: Test Failed at /tmp/tmpn82k3nyj.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpn82k3nyj.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn82k3nyj.jl:38\ntest set: Test Failed at /tmp/tmpn82k3nyj.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpn82k3nyj.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn82k3nyj.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn82k3nyj.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) < length(lst2)\n     \
    \   return lst1\n    elseif length(lst1) > length(lst2)\n        return lst2\n\
    \    else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpas3th6t2.jl:32\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpas3th6t2.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpas3th6t2.jl:30\ntest set: Test Failed at /tmp/tmpas3th6t2.jl:35\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpas3th6t2.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpas3th6t2.jl:30\ntest set: Test Failed at /tmp/tmpas3th6t2.jl:36\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpas3th6t2.jl:36\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpas3th6t2.jl:30\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpas3th6t2.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\n    return lst2\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzsrau8al.jl:38\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpzsrau8al.jl:38\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzsrau8al.jl:36\ntest set: Test Failed at /tmp/tmpzsrau8al.jl:41\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpzsrau8al.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzsrau8al.jl:36\ntest set: Test Failed at /tmp/tmpzsrau8al.jl:42\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpzsrau8al.jl:42\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzsrau8al.jl:36\ntest set: Test Failed at /tmp/tmpzsrau8al.jl:44\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpzsrau8al.jl:44\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzsrau8al.jl:36\ntest set: Test Failed at /tmp/tmpzsrau8al.jl:45\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpzsrau8al.jl:45\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzsrau8al.jl:36\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzsrau8al.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    return lst1\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp11n9qwrb.jl:35\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp11n9qwrb.jl:35\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp11n9qwrb.jl:33\ntest set: Test Failed at /tmp/tmp11n9qwrb.jl:38\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp11n9qwrb.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp11n9qwrb.jl:33\ntest set: Test Failed at /tmp/tmp11n9qwrb.jl:39\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp11n9qwrb.jl:39\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp11n9qwrb.jl:33\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp11n9qwrb.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total += length(i)\n\
    \    end\n    for i in lst2\n        lst2_total += length(i)\n    end\n    if\
    \ lst1_total < lst2_total\n        return lst1\n    elseif lst1_total > lst2_total\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpiafceaw1.jl:52\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpiafceaw1.jl:52\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpiafceaw1.jl:44\ntest set: Test Failed at /tmp/tmpiafceaw1.jl:53\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpiafceaw1.jl:53\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpiafceaw1.jl:44\nTest Summary: | Pass  Fail  Total\n\
    test set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiafceaw1.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    lst1_total\
    \ = sum(length.(lst1))\n    lst2_total = sum(length.(lst2))\n    if lst1_total\
    \ < lst2_total\n        return lst1\n    elseif lst1_total > lst2_total\n    \
    \    return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\n    if length(lst1) == length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvf9lvct4.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpvf9lvct4.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvf9lvct4.jl:38\ntest set: Test Failed at /tmp/tmpvf9lvct4.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpvf9lvct4.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvf9lvct4.jl:38\ntest set: Test Failed at /tmp/tmpvf9lvct4.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpvf9lvct4.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvf9lvct4.jl:38\ntest set: Test Failed at /tmp/tmpvf9lvct4.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpvf9lvct4.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvf9lvct4.jl:38\ntest set: Test Failed at /tmp/tmpvf9lvct4.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpvf9lvct4.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvf9lvct4.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvf9lvct4.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    return lst1\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo_rvbrkh.jl:35\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpo_rvbrkh.jl:35\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpo_rvbrkh.jl:33\ntest set: Test Failed at /tmp/tmpo_rvbrkh.jl:38\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpo_rvbrkh.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpo_rvbrkh.jl:33\ntest set: Test Failed at /tmp/tmpo_rvbrkh.jl:39\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpo_rvbrkh.jl:39\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpo_rvbrkh.jl:33\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo_rvbrkh.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\n    return lst2\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp10zk3lpq.jl:38\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp10zk3lpq.jl:38\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp10zk3lpq.jl:36\ntest set: Test Failed at /tmp/tmp10zk3lpq.jl:41\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp10zk3lpq.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp10zk3lpq.jl:36\ntest set: Test Failed at /tmp/tmp10zk3lpq.jl:42\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp10zk3lpq.jl:42\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp10zk3lpq.jl:36\ntest set: Test Failed at /tmp/tmp10zk3lpq.jl:44\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmp10zk3lpq.jl:44\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp10zk3lpq.jl:36\ntest set: Test Failed at /tmp/tmp10zk3lpq.jl:45\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmp10zk3lpq.jl:45\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp10zk3lpq.jl:36\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp10zk3lpq.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    len1 = sum([length(x) for x in lst1])\n\
    \    len2 = sum([length(x) for x in lst2])\n    if len1 < len2\n        return\
    \ lst1\n    elseif len1 > len2\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    if length(lst2) < length(lst1)\n\
    \        return lst2\n    end\n    if length(lst1) == length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp7p6tnw45.jl:40\\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp7p6tnw45.jl:40\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp7p6tnw45.jl:38\\ntest set: Test Failed at /tmp/tmp7p6tnw45.jl:43\\\
    n  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp7p6tnw45.jl:43\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp7p6tnw45.jl:38\\ntest set: Test Failed at /tmp/tmp7p6tnw45.jl:44\\\
    n  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\",\
    \ \"hi\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp7p6tnw45.jl:44\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp7p6tnw45.jl:38\\ntest set: Test Failed at /tmp/tmp7p6tnw45.jl:46\\\
    n  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\\\
    n   Evaluated: [\"this\"] == String[]\\nStacktrace:\\n [1] top-level scope at\
    \ /tmp/tmp7p6tnw45.jl:46\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp7p6tnw45.jl:38\\ntest set: Test Failed at /tmp/tmp7p6tnw45.jl:47\\\
    n  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\\\
    n   Evaluated: [\"this\"] == String[]\\nStacktrace:\\n [1] top-level scope at\
    \ /tmp/tmp7p6tnw45.jl:47\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp7p6tnw45.jl:38\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    4     5      9\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    total_chars_lst1 = sum([length(x)\
    \ for x in lst1])\n    total_chars_lst2 = sum([length(x) for x in lst2])\n   \
    \ if total_chars_lst1 < total_chars_lst2\n        return lst1\n    elseif total_chars_lst1\
    \ > total_chars_lst2\n        return lst2\n    else\n        return lst1\n   \
    \ end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\n    return lst2\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw4m_myln.jl:38\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpw4m_myln.jl:38\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpw4m_myln.jl:36\ntest set: Test Failed at /tmp/tmpw4m_myln.jl:41\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpw4m_myln.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpw4m_myln.jl:36\ntest set: Test Failed at /tmp/tmpw4m_myln.jl:42\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpw4m_myln.jl:42\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpw4m_myln.jl:36\ntest set: Test Failed at /tmp/tmpw4m_myln.jl:44\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpw4m_myln.jl:44\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpw4m_myln.jl:36\ntest set: Test Failed at /tmp/tmpw4m_myln.jl:45\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpw4m_myln.jl:45\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpw4m_myln.jl:36\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw4m_myln.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if sum(length.(lst1))\
    \ < sum(length.(lst2))\n        return lst1\n    elseif sum(length.(lst1)) > sum(length.(lst2))\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl8ydbcqw.jl:44\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl8ydbcqw.jl:44\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl8ydbcqw.jl:36\ntest set: Test Failed at /tmp/tmpl8ydbcqw.jl:45\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpl8ydbcqw.jl:45\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl8ydbcqw.jl:36\nTest Summary: | Pass  Fail  Total\n\
    test set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl8ydbcqw.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if sum(length.(lst1))\
    \ < sum(length.(lst2))\n        return lst1\n    elseif sum(length.(lst1)) > sum(length.(lst2))\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsl5mv4as.jl:44\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsl5mv4as.jl:44\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsl5mv4as.jl:36\ntest set: Test Failed at /tmp/tmpsl5mv4as.jl:45\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpsl5mv4as.jl:45\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsl5mv4as.jl:36\nTest Summary: | Pass  Fail  Total\n\
    test set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsl5mv4as.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if sum(length.(lst1))\
    \ == sum(length.(lst2))\n        return lst1\n    end\n    if sum(length.(lst1))\
    \ < sum(length.(lst2))\n        return lst1\n    end\n    return lst2\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0qddfkzr.jl:44\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0qddfkzr.jl:44\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0qddfkzr.jl:36\ntest set: Test Failed at /tmp/tmp0qddfkzr.jl:45\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmp0qddfkzr.jl:45\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0qddfkzr.jl:36\nTest Summary: | Pass  Fail  Total\n\
    test set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0qddfkzr.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) == 0\n        return\
    \ lst2\n    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9b94xl2z.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp9b94xl2z.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9b94xl2z.jl:38\ntest set: Test Failed at /tmp/tmp9b94xl2z.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp9b94xl2z.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9b94xl2z.jl:38\ntest set: Test Failed at /tmp/tmp9b94xl2z.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp9b94xl2z.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9b94xl2z.jl:38\ntest set: Test Failed at /tmp/tmp9b94xl2z.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmp9b94xl2z.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9b94xl2z.jl:38\ntest set: Test Failed at /tmp/tmp9b94xl2z.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmp9b94xl2z.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9b94xl2z.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9b94xl2z.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    return lst1\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplo50mz80.jl:35\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmplo50mz80.jl:35\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplo50mz80.jl:33\ntest set: Test Failed at /tmp/tmplo50mz80.jl:38\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmplo50mz80.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplo50mz80.jl:33\ntest set: Test Failed at /tmp/tmplo50mz80.jl:39\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmplo50mz80.jl:39\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplo50mz80.jl:33\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplo50mz80.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total += length(i)\n\
    \    end\n    for i in lst2\n        lst2_total += length(i)\n    end\n    if\
    \ lst1_total < lst2_total\n        return lst1\n    elseif lst1_total > lst2_total\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqk5hywz_.jl:52\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqk5hywz_.jl:52\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqk5hywz_.jl:44\ntest set: Test Failed at /tmp/tmpqk5hywz_.jl:53\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpqk5hywz_.jl:53\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqk5hywz_.jl:44\nTest Summary: | Pass  Fail  Total\n\
    test set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqk5hywz_.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\n    return lst2\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvkfkk4bx.jl:38\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpvkfkk4bx.jl:38\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvkfkk4bx.jl:36\ntest set: Test Failed at /tmp/tmpvkfkk4bx.jl:41\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpvkfkk4bx.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvkfkk4bx.jl:36\ntest set: Test Failed at /tmp/tmpvkfkk4bx.jl:42\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpvkfkk4bx.jl:42\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvkfkk4bx.jl:36\ntest set: Test Failed at /tmp/tmpvkfkk4bx.jl:44\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpvkfkk4bx.jl:44\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvkfkk4bx.jl:36\ntest set: Test Failed at /tmp/tmpvkfkk4bx.jl:45\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpvkfkk4bx.jl:45\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvkfkk4bx.jl:36\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvkfkk4bx.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) < length(lst2)\n     \
    \   return lst1\n    elseif length(lst1) > length(lst2)\n        return lst2\n\
    \    else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkolr6_ha.jl:32\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpkolr6_ha.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkolr6_ha.jl:30\ntest set: Test Failed at /tmp/tmpkolr6_ha.jl:35\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpkolr6_ha.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkolr6_ha.jl:30\ntest set: Test Failed at /tmp/tmpkolr6_ha.jl:36\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpkolr6_ha.jl:36\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkolr6_ha.jl:30\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkolr6_ha.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    if length(lst2) < length(lst1)\n\
    \        return lst2\n    end\n    if length(lst1) == length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvc6yjq2n.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpvc6yjq2n.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvc6yjq2n.jl:38\ntest set: Test Failed at /tmp/tmpvc6yjq2n.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpvc6yjq2n.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvc6yjq2n.jl:38\ntest set: Test Failed at /tmp/tmpvc6yjq2n.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpvc6yjq2n.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvc6yjq2n.jl:38\ntest set: Test Failed at /tmp/tmpvc6yjq2n.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpvc6yjq2n.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvc6yjq2n.jl:38\ntest set: Test Failed at /tmp/tmpvc6yjq2n.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpvc6yjq2n.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvc6yjq2n.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvc6yjq2n.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    lst1_total = sum(length.(lst1))\n\
    \    lst2_total = sum(length.(lst2))\n    if lst1_total == lst2_total\n      \
    \  return lst1\n    elseif lst1_total < lst2_total\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    total_lst1\
    \ = 0\n    total_lst2 = 0\n    for i in lst1\n        total_lst1 += length(i)\n\
    \    end\n    for i in lst2\n        total_lst2 += length(i)\n    end\n    if\
    \ total_lst1 < total_lst2\n        return lst1\n    elseif total_lst1 > total_lst2\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvlk6en_3.jl:52\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvlk6en_3.jl:52\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvlk6en_3.jl:44\ntest set: Test Failed at /tmp/tmpvlk6en_3.jl:53\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpvlk6en_3.jl:53\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvlk6en_3.jl:44\nTest Summary: | Pass  Fail  Total\n\
    test set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvlk6en_3.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) < length(lst2)\n   \
    \     return lst1\n    elseif length(lst1) > length(lst2)\n        return lst2\n\
    \    else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgz7byyd5.jl:32\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpgz7byyd5.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgz7byyd5.jl:30\ntest set: Test Failed at /tmp/tmpgz7byyd5.jl:35\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpgz7byyd5.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgz7byyd5.jl:30\ntest set: Test Failed at /tmp/tmpgz7byyd5.jl:36\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpgz7byyd5.jl:36\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgz7byyd5.jl:30\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgz7byyd5.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) == 0\n        return\
    \ lst2\n    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if\
    \ sum(length.(lst1)) < sum(length.(lst2))\n        return lst1\n    elseif sum(length.(lst1))\
    \ > sum(length.(lst2))\n        return lst2\n    else\n        return lst1\n \
    \   end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpv6_91lcy.jl:44\\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\\n   Evaluated: [\"this\"] == String[]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpv6_91lcy.jl:44\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpv6_91lcy.jl:36\\ntest set: Test Failed at /tmp/tmpv6_91lcy.jl:45\\\
    n  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\\\
    n   Evaluated: [\"this\"] == String[]\\nStacktrace:\\n [1] top-level scope at\
    \ /tmp/tmpv6_91lcy.jl:45\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpv6_91lcy.jl:36\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    7     2      9\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) == 0\n        return\
    \ lst2\n    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpufcvlwmt.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpufcvlwmt.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpufcvlwmt.jl:38\ntest set: Test Failed at /tmp/tmpufcvlwmt.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpufcvlwmt.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpufcvlwmt.jl:38\ntest set: Test Failed at /tmp/tmpufcvlwmt.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpufcvlwmt.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpufcvlwmt.jl:38\ntest set: Test Failed at /tmp/tmpufcvlwmt.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpufcvlwmt.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpufcvlwmt.jl:38\ntest set: Test Failed at /tmp/tmpufcvlwmt.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpufcvlwmt.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpufcvlwmt.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpufcvlwmt.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    return lst1\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6btgmhkq.jl:35\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp6btgmhkq.jl:35\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6btgmhkq.jl:33\ntest set: Test Failed at /tmp/tmp6btgmhkq.jl:38\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp6btgmhkq.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6btgmhkq.jl:33\ntest set: Test Failed at /tmp/tmp6btgmhkq.jl:39\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp6btgmhkq.jl:39\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6btgmhkq.jl:33\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6btgmhkq.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ sum(length.(lst1)) < sum(length.(lst2))\n        return lst1\n    elseif sum(length.(lst1))\
    \ > sum(length.(lst2))\n        return lst2\n    else\n        return lst1\n \
    \   end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if sum(length.(lst1))\
    \ < sum(length.(lst2))\n        return lst1\n    elseif sum(length.(lst1)) > sum(length.(lst2))\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpg5hijk2v.jl:44\\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\\n   Evaluated: [\"this\"] == String[]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpg5hijk2v.jl:44\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpg5hijk2v.jl:36\\ntest set: Test Failed at /tmp/tmpg5hijk2v.jl:45\\\
    n  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\\\
    n   Evaluated: [\"this\"] == String[]\\nStacktrace:\\n [1] top-level scope at\
    \ /tmp/tmpg5hijk2v.jl:45\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpg5hijk2v.jl:36\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    7     2      9\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) < length(lst2)\n   \
    \     return lst1\n    elseif length(lst1) > length(lst2)\n        return lst2\n\
    \    else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpye_umigy.jl:32\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpye_umigy.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpye_umigy.jl:30\ntest set: Test Failed at /tmp/tmpye_umigy.jl:35\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpye_umigy.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpye_umigy.jl:30\ntest set: Test Failed at /tmp/tmpye_umigy.jl:36\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpye_umigy.jl:36\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpye_umigy.jl:30\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpye_umigy.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm2l_cwt8.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpm2l_cwt8.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpm2l_cwt8.jl:38\ntest set: Test Failed at /tmp/tmpm2l_cwt8.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpm2l_cwt8.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpm2l_cwt8.jl:38\ntest set: Test Failed at /tmp/tmpm2l_cwt8.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpm2l_cwt8.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpm2l_cwt8.jl:38\ntest set: Test Failed at /tmp/tmpm2l_cwt8.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpm2l_cwt8.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpm2l_cwt8.jl:38\ntest set: Test Failed at /tmp/tmpm2l_cwt8.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpm2l_cwt8.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpm2l_cwt8.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm2l_cwt8.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbbhi1_hz.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpbbhi1_hz.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbbhi1_hz.jl:38\ntest set: Test Failed at /tmp/tmpbbhi1_hz.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpbbhi1_hz.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbbhi1_hz.jl:38\ntest set: Test Failed at /tmp/tmpbbhi1_hz.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpbbhi1_hz.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbbhi1_hz.jl:38\ntest set: Test Failed at /tmp/tmpbbhi1_hz.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpbbhi1_hz.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbbhi1_hz.jl:38\ntest set: Test Failed at /tmp/tmpbbhi1_hz.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpbbhi1_hz.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbbhi1_hz.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbbhi1_hz.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    return lst2\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpark3fc4w.jl:35\\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpark3fc4w.jl:35\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpark3fc4w.jl:33\\ntest set: Test Failed at /tmp/tmpark3fc4w.jl:38\\\
    n  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpark3fc4w.jl:38\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpark3fc4w.jl:33\\ntest set: Test Failed at /tmp/tmpark3fc4w.jl:39\\\
    n  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\",\
    \ \"hi\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpark3fc4w.jl:39\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpark3fc4w.jl:33\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    6  '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    lst1_total = sum(length.(lst1))\n\
    \    lst2_total = sum(length.(lst2))\n    if lst1_total == lst2_total\n      \
    \  return lst1\n    elseif lst1_total < lst2_total\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\n    if length(lst1) == length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfi7z5h1s.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpfi7z5h1s.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfi7z5h1s.jl:38\ntest set: Test Failed at /tmp/tmpfi7z5h1s.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpfi7z5h1s.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfi7z5h1s.jl:38\ntest set: Test Failed at /tmp/tmpfi7z5h1s.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpfi7z5h1s.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfi7z5h1s.jl:38\ntest set: Test Failed at /tmp/tmpfi7z5h1s.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpfi7z5h1s.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfi7z5h1s.jl:38\ntest set: Test Failed at /tmp/tmpfi7z5h1s.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpfi7z5h1s.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfi7z5h1s.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfi7z5h1s.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6hlr6q6i.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp6hlr6q6i.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6hlr6q6i.jl:38\ntest set: Test Failed at /tmp/tmp6hlr6q6i.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp6hlr6q6i.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6hlr6q6i.jl:38\ntest set: Test Failed at /tmp/tmp6hlr6q6i.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp6hlr6q6i.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6hlr6q6i.jl:38\ntest set: Test Failed at /tmp/tmp6hlr6q6i.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmp6hlr6q6i.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6hlr6q6i.jl:38\ntest set: Test Failed at /tmp/tmp6hlr6q6i.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmp6hlr6q6i.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6hlr6q6i.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6hlr6q6i.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\n    return lst1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpkk2ofouu.jl:38\\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpkk2ofouu.jl:38\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpkk2ofouu.jl:36\\ntest set: Test Failed at /tmp/tmpkk2ofouu.jl:41\\\
    n  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpkk2ofouu.jl:41\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpkk2ofouu.jl:36\\ntest set: Test Failed at /tmp/tmpkk2ofouu.jl:42\\\
    n  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\",\
    \ \"hi\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpkk2ofouu.jl:42\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpkk2ofouu.jl:36\\ntest set: Test Failed at /tmp/tmpkk2ofouu.jl:44\\\
    n  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\\\
    n   Evaluated: [\"this\"] == String[]\\nStacktrace:\\n [1] top-level scope at\
    \ /tmp/tmpkk2ofouu.jl:44\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpkk2ofouu.jl:36\\ntest set: Test Failed at /tmp/tmpkk2ofouu.jl:45\\\
    n  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\\\
    n   Evaluated: [\"this\"] == String[]\\nStacktrace:\\n [1] top-level scope at\
    \ /tmp/tmpkk2ofouu.jl:45\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpkk2ofouu.jl:36\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    4     5      9\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    lst1_total = sum(length.(lst1))\n\
    \    lst2_total = sum(length.(lst2))\n    if lst1_total == lst2_total\n      \
    \  return lst1\n    elseif lst1_total < lst2_total\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if sum(length.(lst1)) < sum(length.(lst2))\n\
    \        return lst1\n    elseif sum(length.(lst1)) > sum(length.(lst2))\n   \
    \     return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    total_chars_lst1\
    \ = 0\n    total_chars_lst2 = 0\n    for i in lst1\n        total_chars_lst1 +=\
    \ length(i)\n    end\n    for i in lst2\n        total_chars_lst2 += length(i)\n\
    \    end\n    if total_chars_lst1 < total_chars_lst2\n        return lst1\n  \
    \  elseif total_chars_lst1 > total_chars_lst2\n        return lst2\n    else\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjbvjg00m.jl:52\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjbvjg00m.jl:52\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjbvjg00m.jl:44\ntest set: Test Failed at /tmp/tmpjbvjg00m.jl:53\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpjbvjg00m.jl:53\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjbvjg00m.jl:44\nTest Summary: | Pass  Fail  Total\n\
    test set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjbvjg00m.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl5ug7qg0.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpl5ug7qg0.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl5ug7qg0.jl:38\ntest set: Test Failed at /tmp/tmpl5ug7qg0.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpl5ug7qg0.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl5ug7qg0.jl:38\ntest set: Test Failed at /tmp/tmpl5ug7qg0.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpl5ug7qg0.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl5ug7qg0.jl:38\ntest set: Test Failed at /tmp/tmpl5ug7qg0.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpl5ug7qg0.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl5ug7qg0.jl:38\ntest set: Test Failed at /tmp/tmpl5ug7qg0.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpl5ug7qg0.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl5ug7qg0.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl5ug7qg0.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp116t2qxc.jl:40\\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp116t2qxc.jl:40\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp116t2qxc.jl:38\\ntest set: Test Failed at /tmp/tmp116t2qxc.jl:43\\\
    n  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp116t2qxc.jl:43\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp116t2qxc.jl:38\\ntest set: Test Failed at /tmp/tmp116t2qxc.jl:44\\\
    n  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\",\
    \ \"hi\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp116t2qxc.jl:44\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp116t2qxc.jl:38\\ntest set: Test Failed at /tmp/tmp116t2qxc.jl:46\\\
    n  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\\\
    n   Evaluated: [\"this\"] == String[]\\nStacktrace:\\n [1] top-level scope at\
    \ /tmp/tmp116t2qxc.jl:46\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp116t2qxc.jl:38\\ntest set: Test Failed at /tmp/tmp116t2qxc.jl:47\\\
    n  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\\\
    n   Evaluated: [\"this\"] == String[]\\nStacktrace:\\n [1] top-level scope at\
    \ /tmp/tmp116t2qxc.jl:47\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp116t2qxc.jl:38\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) == 0\n        return\
    \ lst2\n    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if\
    \ length(lst1) > length(lst2)\n        return lst2\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    if length(lst1) == length(lst2)\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9g3quxri.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp9g3quxri.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9g3quxri.jl:38\ntest set: Test Failed at /tmp/tmp9g3quxri.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp9g3quxri.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9g3quxri.jl:38\ntest set: Test Failed at /tmp/tmp9g3quxri.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp9g3quxri.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9g3quxri.jl:38\ntest set: Test Failed at /tmp/tmp9g3quxri.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmp9g3quxri.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9g3quxri.jl:38\ntest set: Test Failed at /tmp/tmp9g3quxri.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmp9g3quxri.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9g3quxri.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9g3quxri.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\n    return lst2\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9twr7viq.jl:38\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp9twr7viq.jl:38\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9twr7viq.jl:36\ntest set: Test Failed at /tmp/tmp9twr7viq.jl:41\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp9twr7viq.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9twr7viq.jl:36\ntest set: Test Failed at /tmp/tmp9twr7viq.jl:42\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp9twr7viq.jl:42\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9twr7viq.jl:36\ntest set: Test Failed at /tmp/tmp9twr7viq.jl:44\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmp9twr7viq.jl:44\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9twr7viq.jl:36\ntest set: Test Failed at /tmp/tmp9twr7viq.jl:45\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmp9twr7viq.jl:45\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9twr7viq.jl:36\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9twr7viq.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp8dij4ltj.jl:40\\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp8dij4ltj.jl:40\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp8dij4ltj.jl:38\\ntest set: Test Failed at /tmp/tmp8dij4ltj.jl:43\\\
    n  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp8dij4ltj.jl:43\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp8dij4ltj.jl:38\\ntest set: Test Failed at /tmp/tmp8dij4ltj.jl:44\\\
    n  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\",\
    \ \"hi\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp8dij4ltj.jl:44\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp8dij4ltj.jl:38\\ntest set: Test Failed at /tmp/tmp8dij4ltj.jl:46\\\
    n  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\\\
    n   Evaluated: [\"this\"] == String[]\\nStacktrace:\\n [1] top-level scope at\
    \ /tmp/tmp8dij4ltj.jl:46\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp8dij4ltj.jl:38\\ntest set: Test Failed at /tmp/tmp8dij4ltj.jl:47\\\
    n  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\\\
    n   Evaluated: [\"this\"] == String[]\\nStacktrace:\\n [1] top-level scope at\
    \ /tmp/tmp8dij4ltj.jl:47\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp8dij4ltj.jl:38\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    4     5      9\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    lst1_len = sum([length(i) for i\
    \ in lst1])\n    lst2_len = sum([length(i) for i in lst2])\n    if lst1_len <\
    \ lst2_len\n        return lst1\n    elseif lst1_len > lst2_len\n        return\
    \ lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\n    return lst2\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpz__znfyr.jl:38\\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpz__znfyr.jl:38\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpz__znfyr.jl:36\\ntest set: Test Failed at /tmp/tmpz__znfyr.jl:41\\\
    n  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpz__znfyr.jl:41\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpz__znfyr.jl:36\\ntest set: Test Failed at /tmp/tmpz__znfyr.jl:42\\\
    n  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\",\
    \ \"hi\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpz__znfyr.jl:42\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpz__znfyr.jl:36\\ntest set: Test Failed at /tmp/tmpz__znfyr.jl:44\\\
    n  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\\\
    n   Evaluated: [\"this\"] == String[]\\nStacktrace:\\n [1] top-level scope at\
    \ /tmp/tmpz__znfyr.jl:44\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpz__znfyr.jl:36\\ntest set: Test Failed at /tmp/tmpz__znfyr.jl:45\\\
    n  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\\\
    n   Evaluated: [\"this\"] == String[]\\nStacktrace:\\n [1] top-level scope at\
    \ /tmp/tmpz__znfyr.jl:45\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpz__znfyr.jl:36\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    4     5      9\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2eui10lr.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp2eui10lr.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2eui10lr.jl:38\ntest set: Test Failed at /tmp/tmp2eui10lr.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp2eui10lr.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2eui10lr.jl:38\ntest set: Test Failed at /tmp/tmp2eui10lr.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp2eui10lr.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2eui10lr.jl:38\ntest set: Test Failed at /tmp/tmp2eui10lr.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmp2eui10lr.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2eui10lr.jl:38\ntest set: Test Failed at /tmp/tmp2eui10lr.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmp2eui10lr.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2eui10lr.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2eui10lr.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) < length(lst2)\n   \
    \     return lst1\n    elseif length(lst1) > length(lst2)\n        return lst2\n\
    \    else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzlrqm3wq.jl:32\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpzlrqm3wq.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzlrqm3wq.jl:30\ntest set: Test Failed at /tmp/tmpzlrqm3wq.jl:35\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpzlrqm3wq.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzlrqm3wq.jl:30\ntest set: Test Failed at /tmp/tmpzlrqm3wq.jl:36\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpzlrqm3wq.jl:36\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzlrqm3wq.jl:30\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzlrqm3wq.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2ebvb1w_.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp2ebvb1w_.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2ebvb1w_.jl:38\ntest set: Test Failed at /tmp/tmp2ebvb1w_.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp2ebvb1w_.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2ebvb1w_.jl:38\ntest set: Test Failed at /tmp/tmp2ebvb1w_.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp2ebvb1w_.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2ebvb1w_.jl:38\ntest set: Test Failed at /tmp/tmp2ebvb1w_.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmp2ebvb1w_.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2ebvb1w_.jl:38\ntest set: Test Failed at /tmp/tmp2ebvb1w_.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmp2ebvb1w_.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2ebvb1w_.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2ebvb1w_.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if sum(length.(lst1))\
    \ < sum(length.(lst2))\n        return lst1\n    elseif sum(length.(lst1)) > sum(length.(lst2))\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnj2sf52i.jl:44\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnj2sf52i.jl:44\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnj2sf52i.jl:36\ntest set: Test Failed at /tmp/tmpnj2sf52i.jl:45\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpnj2sf52i.jl:45\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnj2sf52i.jl:36\nTest Summary: | Pass  Fail  Total\n\
    test set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnj2sf52i.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) < length(lst2)\n     \
    \   return lst1\n    elseif length(lst1) > length(lst2)\n        return lst2\n\
    \    else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpugq2y2y1.jl:32\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpugq2y2y1.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpugq2y2y1.jl:30\ntest set: Test Failed at /tmp/tmpugq2y2y1.jl:35\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpugq2y2y1.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpugq2y2y1.jl:30\ntest set: Test Failed at /tmp/tmpugq2y2y1.jl:36\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpugq2y2y1.jl:36\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpugq2y2y1.jl:30\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpugq2y2y1.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    return lst2\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4pljep2p.jl:35\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp4pljep2p.jl:35\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4pljep2p.jl:33\ntest set: Test Failed at /tmp/tmp4pljep2p.jl:38\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp4pljep2p.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4pljep2p.jl:33\ntest set: Test Failed at /tmp/tmp4pljep2p.jl:39\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp4pljep2p.jl:39\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4pljep2p.jl:33\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4pljep2p.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa0fysnby.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpa0fysnby.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa0fysnby.jl:38\ntest set: Test Failed at /tmp/tmpa0fysnby.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpa0fysnby.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa0fysnby.jl:38\ntest set: Test Failed at /tmp/tmpa0fysnby.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpa0fysnby.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa0fysnby.jl:38\ntest set: Test Failed at /tmp/tmpa0fysnby.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpa0fysnby.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa0fysnby.jl:38\ntest set: Test Failed at /tmp/tmpa0fysnby.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpa0fysnby.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa0fysnby.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa0fysnby.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\n    return lst2\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplsyx4gzu.jl:38\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmplsyx4gzu.jl:38\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplsyx4gzu.jl:36\ntest set: Test Failed at /tmp/tmplsyx4gzu.jl:41\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmplsyx4gzu.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplsyx4gzu.jl:36\ntest set: Test Failed at /tmp/tmplsyx4gzu.jl:42\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmplsyx4gzu.jl:42\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplsyx4gzu.jl:36\ntest set: Test Failed at /tmp/tmplsyx4gzu.jl:44\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmplsyx4gzu.jl:44\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplsyx4gzu.jl:36\ntest set: Test Failed at /tmp/tmplsyx4gzu.jl:45\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmplsyx4gzu.jl:45\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplsyx4gzu.jl:36\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplsyx4gzu.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if sum(length.(lst1))\
    \ < sum(length.(lst2))\n        return lst1\n    elseif sum(length.(lst1)) > sum(length.(lst2))\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn8youu6r.jl:44\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn8youu6r.jl:44\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn8youu6r.jl:36\ntest set: Test Failed at /tmp/tmpn8youu6r.jl:45\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpn8youu6r.jl:45\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn8youu6r.jl:36\nTest Summary: | Pass  Fail  Total\n\
    test set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn8youu6r.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    lst1_total = sum(length.(lst1))\n\
    \    lst2_total = sum(length.(lst2))\n    if lst1_total == lst2_total\n      \
    \  return lst1\n    elseif lst1_total < lst2_total\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    if length(lst2) < length(lst1)\n\
    \        return lst2\n    end\n    if length(lst1) == length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwl5ojquy.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpwl5ojquy.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwl5ojquy.jl:38\ntest set: Test Failed at /tmp/tmpwl5ojquy.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpwl5ojquy.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwl5ojquy.jl:38\ntest set: Test Failed at /tmp/tmpwl5ojquy.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpwl5ojquy.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwl5ojquy.jl:38\ntest set: Test Failed at /tmp/tmpwl5ojquy.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpwl5ojquy.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwl5ojquy.jl:38\ntest set: Test Failed at /tmp/tmpwl5ojquy.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpwl5ojquy.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwl5ojquy.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwl5ojquy.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total += length(i)\n\
    \    end\n    for i in lst2\n        lst2_total += length(i)\n    end\n    if\
    \ lst1_total < lst2_total\n        return lst1\n    elseif lst1_total > lst2_total\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp29xr882r.jl:52\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp29xr882r.jl:52\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp29xr882r.jl:44\ntest set: Test Failed at /tmp/tmp29xr882r.jl:53\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmp29xr882r.jl:53\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp29xr882r.jl:44\nTest Summary: | Pass  Fail  Total\n\
    test set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp29xr882r.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) == 0\n        return\
    \ lst2\n    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq72wx7cg.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpq72wx7cg.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq72wx7cg.jl:38\ntest set: Test Failed at /tmp/tmpq72wx7cg.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpq72wx7cg.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq72wx7cg.jl:38\ntest set: Test Failed at /tmp/tmpq72wx7cg.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpq72wx7cg.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq72wx7cg.jl:38\ntest set: Test Failed at /tmp/tmpq72wx7cg.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpq72wx7cg.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq72wx7cg.jl:38\ntest set: Test Failed at /tmp/tmpq72wx7cg.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpq72wx7cg.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq72wx7cg.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq72wx7cg.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if sum(length.(lst1))\
    \ < sum(length.(lst2))\n        return lst1\n    elseif sum(length.(lst1)) > sum(length.(lst2))\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpczlbwi8i.jl:44\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpczlbwi8i.jl:44\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpczlbwi8i.jl:36\ntest set: Test Failed at /tmp/tmpczlbwi8i.jl:45\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpczlbwi8i.jl:45\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpczlbwi8i.jl:36\nTest Summary: | Pass  Fail  Total\n\
    test set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpczlbwi8i.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp3f6ta8t5.jl:40\\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp3f6ta8t5.jl:40\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp3f6ta8t5.jl:38\\ntest set: Test Failed at /tmp/tmp3f6ta8t5.jl:43\\\
    n  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp3f6ta8t5.jl:43\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp3f6ta8t5.jl:38\\ntest set: Test Failed at /tmp/tmp3f6ta8t5.jl:44\\\
    n  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\",\
    \ \"hi\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp3f6ta8t5.jl:44\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp3f6ta8t5.jl:38\\ntest set: Test Failed at /tmp/tmp3f6ta8t5.jl:46\\\
    n  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\\\
    n   Evaluated: [\"this\"] == String[]\\nStacktrace:\\n [1] top-level scope at\
    \ /tmp/tmp3f6ta8t5.jl:46\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp3f6ta8t5.jl:38\\ntest set: Test Failed at /tmp/tmp3f6ta8t5.jl:47\\\
    n  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\\\
    n   Evaluated: [\"this\"] == String[]\\nStacktrace:\\n [1] top-level scope at\
    \ /tmp/tmp3f6ta8t5.jl:47\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp3f6ta8t5.jl:38\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    sum1 = 0\n\
    \    sum2 = 0\n    for i in lst1\n        sum1 += length(i)\n    end\n    for\
    \ i in lst2\n        sum2 += length(i)\n    end\n    if sum1 > sum2\n        return\
    \ lst2\n    elseif sum1 < sum2\n        return lst1\n    else\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptdjgsdx3.jl:52\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptdjgsdx3.jl:52\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptdjgsdx3.jl:44\ntest set: Test Failed at /tmp/tmptdjgsdx3.jl:53\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmptdjgsdx3.jl:53\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptdjgsdx3.jl:44\nTest Summary: | Pass  Fail  Total\n\
    test set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptdjgsdx3.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    if length(lst2) < length(lst1)\n\
    \        return lst2\n    end\n    if length(lst1) == length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwof1aqnq.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpwof1aqnq.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwof1aqnq.jl:38\ntest set: Test Failed at /tmp/tmpwof1aqnq.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpwof1aqnq.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwof1aqnq.jl:38\ntest set: Test Failed at /tmp/tmpwof1aqnq.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpwof1aqnq.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwof1aqnq.jl:38\ntest set: Test Failed at /tmp/tmpwof1aqnq.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpwof1aqnq.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwof1aqnq.jl:38\ntest set: Test Failed at /tmp/tmpwof1aqnq.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpwof1aqnq.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwof1aqnq.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwof1aqnq.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    lst1_len = sum([length(x) for x\
    \ in lst1])\n    lst2_len = sum([length(x) for x in lst2])\n    if lst1_len ==\
    \ lst2_len\n        return lst1\n    elseif lst1_len < lst2_len\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) == 0\n        return\
    \ lst2\n    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcrrv7qfm.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpcrrv7qfm.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcrrv7qfm.jl:38\ntest set: Test Failed at /tmp/tmpcrrv7qfm.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpcrrv7qfm.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcrrv7qfm.jl:38\ntest set: Test Failed at /tmp/tmpcrrv7qfm.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpcrrv7qfm.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcrrv7qfm.jl:38\ntest set: Test Failed at /tmp/tmpcrrv7qfm.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpcrrv7qfm.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcrrv7qfm.jl:38\ntest set: Test Failed at /tmp/tmpcrrv7qfm.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpcrrv7qfm.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcrrv7qfm.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcrrv7qfm.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpg7xx899a.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpg7xx899a.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg7xx899a.jl:38\ntest set: Test Failed at /tmp/tmpg7xx899a.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpg7xx899a.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg7xx899a.jl:38\ntest set: Test Failed at /tmp/tmpg7xx899a.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpg7xx899a.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg7xx899a.jl:38\ntest set: Test Failed at /tmp/tmpg7xx899a.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpg7xx899a.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg7xx899a.jl:38\ntest set: Test Failed at /tmp/tmpg7xx899a.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpg7xx899a.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg7xx899a.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg7xx899a.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    return lst1\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpcvqtbf4d.jl:35\\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpcvqtbf4d.jl:35\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpcvqtbf4d.jl:33\\ntest set: Test Failed at /tmp/tmpcvqtbf4d.jl:38\\\
    n  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpcvqtbf4d.jl:38\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpcvqtbf4d.jl:33\\ntest set: Test Failed at /tmp/tmpcvqtbf4d.jl:39\\\
    n  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\",\
    \ \"hi\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpcvqtbf4d.jl:39\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpcvqtbf4d.jl:33\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    6     3      9\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy2d3i79n.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpy2d3i79n.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy2d3i79n.jl:38\ntest set: Test Failed at /tmp/tmpy2d3i79n.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpy2d3i79n.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy2d3i79n.jl:38\ntest set: Test Failed at /tmp/tmpy2d3i79n.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpy2d3i79n.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy2d3i79n.jl:38\ntest set: Test Failed at /tmp/tmpy2d3i79n.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpy2d3i79n.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy2d3i79n.jl:38\ntest set: Test Failed at /tmp/tmpy2d3i79n.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpy2d3i79n.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy2d3i79n.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy2d3i79n.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) == 0\n        return\
    \ lst2\n    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if\
    \ length(lst1) < length(lst2)\n        return lst1\n    end\n    if length(lst2)\
    \ < length(lst1)\n        return lst2\n    end\n    if length(lst1) == length(lst2)\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsle0pryv.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpsle0pryv.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsle0pryv.jl:38\ntest set: Test Failed at /tmp/tmpsle0pryv.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpsle0pryv.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsle0pryv.jl:38\ntest set: Test Failed at /tmp/tmpsle0pryv.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpsle0pryv.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsle0pryv.jl:38\ntest set: Test Failed at /tmp/tmpsle0pryv.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpsle0pryv.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsle0pryv.jl:38\ntest set: Test Failed at /tmp/tmpsle0pryv.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpsle0pryv.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsle0pryv.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsle0pryv.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ < length(lst2)\n        return lst1\n    end\n    if length(lst2) < length(lst1)\n\
    \        return lst2\n    end\n    if length(lst1) == length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpofxizqan.jl:40\\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpofxizqan.jl:40\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpofxizqan.jl:38\\ntest set: Test Failed at /tmp/tmpofxizqan.jl:43\\\
    n  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpofxizqan.jl:43\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpofxizqan.jl:38\\ntest set: Test Failed at /tmp/tmpofxizqan.jl:44\\\
    n  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\",\
    \ \"hi\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpofxizqan.jl:44\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpofxizqan.jl:38\\ntest set: Test Failed at /tmp/tmpofxizqan.jl:46\\\
    n  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\\\
    n   Evaluated: [\"this\"] == String[]\\nStacktrace:\\n [1] top-level scope at\
    \ /tmp/tmpofxizqan.jl:46\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpofxizqan.jl:38\\ntest set: Test Failed at /tmp/tmpofxizqan.jl:47\\\
    n  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\\\
    n   Evaluated: [\"this\"] == String[]\\nStacktrace:\\n [1] top-level scope at\
    \ /tmp/tmpofxizqan.jl:47\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpofxizqan.jl:38\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    4     5      9\\n'"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmpofxizqan.jl:36\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    l1 = length(lst1)\n    l2 = length(lst2)\n\
    \    if l1 == 0 && l2 == 0\n        return []\n    end\n    if l1 == 0\n     \
    \   return lst2\n    end\n    if l2 == 0\n        return lst1\n    end\n    if\
    \ l1 == l2\n        return lst1\n    end\n    if l1 > l2\n        return lst2\n\
    \    end\n    return lst1\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplmsfomh3.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmplmsfomh3.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplmsfomh3.jl:38\ntest set: Test Failed at /tmp/tmplmsfomh3.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmplmsfomh3.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplmsfomh3.jl:38\ntest set: Test Failed at /tmp/tmplmsfomh3.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmplmsfomh3.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplmsfomh3.jl:38\ntest set: Test Failed at /tmp/tmplmsfomh3.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmplmsfomh3.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplmsfomh3.jl:38\ntest set: Test Failed at /tmp/tmplmsfomh3.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmplmsfomh3.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplmsfomh3.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplmsfomh3.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7axuoklp.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp7axuoklp.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7axuoklp.jl:38\ntest set: Test Failed at /tmp/tmp7axuoklp.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp7axuoklp.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7axuoklp.jl:38\ntest set: Test Failed at /tmp/tmp7axuoklp.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp7axuoklp.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7axuoklp.jl:38\ntest set: Test Failed at /tmp/tmp7axuoklp.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmp7axuoklp.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7axuoklp.jl:38\ntest set: Test Failed at /tmp/tmp7axuoklp.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmp7axuoklp.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7axuoklp.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7axuoklp.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) < length(lst2)\n     \
    \   return lst1\n    elseif length(lst1) > length(lst2)\n        return lst2\n\
    \    else\n        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa0f4062b.jl:32\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpa0f4062b.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa0f4062b.jl:30\ntest set: Test Failed at /tmp/tmpa0f4062b.jl:35\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpa0f4062b.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa0f4062b.jl:30\ntest set: Test Failed at /tmp/tmpa0f4062b.jl:36\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpa0f4062b.jl:36\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa0f4062b.jl:30\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa0f4062b.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total += length(i)\n\
    \    end\n    for i in lst2\n        lst2_total += length(i)\n    end\n    if\
    \ lst1_total < lst2_total\n        return lst1\n    elseif lst1_total > lst2_total\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpshx6vq_s.jl:52\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpshx6vq_s.jl:52\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpshx6vq_s.jl:44\ntest set: Test Failed at /tmp/tmpshx6vq_s.jl:53\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpshx6vq_s.jl:53\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpshx6vq_s.jl:44\nTest Summary: | Pass  Fail  Total\n\
    test set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpshx6vq_s.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph0yp4pxk.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmph0yp4pxk.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph0yp4pxk.jl:38\ntest set: Test Failed at /tmp/tmph0yp4pxk.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmph0yp4pxk.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph0yp4pxk.jl:38\ntest set: Test Failed at /tmp/tmph0yp4pxk.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmph0yp4pxk.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph0yp4pxk.jl:38\ntest set: Test Failed at /tmp/tmph0yp4pxk.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmph0yp4pxk.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph0yp4pxk.jl:38\ntest set: Test Failed at /tmp/tmph0yp4pxk.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmph0yp4pxk.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph0yp4pxk.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph0yp4pxk.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total += length(i)\n\
    \    end\n    for i in lst2\n        lst2_total += length(i)\n    end\n    if\
    \ lst1_total < lst2_total\n        return lst1\n    elseif lst1_total > lst2_total\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7qjzloaz.jl:52\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7qjzloaz.jl:52\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7qjzloaz.jl:44\ntest set: Test Failed at /tmp/tmp7qjzloaz.jl:53\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmp7qjzloaz.jl:53\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7qjzloaz.jl:44\nTest Summary: | Pass  Fail  Total\n\
    test set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7qjzloaz.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    lst1_sum = sum(length.(lst1))\n\
    \    lst2_sum = sum(length.(lst2))\n    if lst1_sum == lst2_sum\n        return\
    \ lst1\n    elseif lst1_sum < lst2_sum\n        return lst1\n    else\n      \
    \  return lst2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if sum(length.(lst1))\
    \ < sum(length.(lst2))\n        return lst1\n    elseif sum(length.(lst1)) > sum(length.(lst2))\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2biug_hc.jl:44\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2biug_hc.jl:44\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2biug_hc.jl:36\ntest set: Test Failed at /tmp/tmp2biug_hc.jl:45\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmp2biug_hc.jl:45\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2biug_hc.jl:36\nTest Summary: | Pass  Fail  Total\n\
    test set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2biug_hc.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    lst1_total\
    \ = 0\n    lst2_total = 0\n    for i in lst1\n        lst1_total += length(i)\n\
    \    end\n    for i in lst2\n        lst2_total += length(i)\n    end\n    if\
    \ lst1_total < lst2_total\n        return lst1\n    elseif lst1_total > lst2_total\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    return lst1\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyguxzatg.jl:35\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpyguxzatg.jl:35\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyguxzatg.jl:33\ntest set: Test Failed at /tmp/tmpyguxzatg.jl:38\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpyguxzatg.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyguxzatg.jl:33\ntest set: Test Failed at /tmp/tmpyguxzatg.jl:39\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpyguxzatg.jl:39\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyguxzatg.jl:33\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyguxzatg.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\n    return lst2\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx6e3_45j.jl:38\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpx6e3_45j.jl:38\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx6e3_45j.jl:36\ntest set: Test Failed at /tmp/tmpx6e3_45j.jl:41\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpx6e3_45j.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx6e3_45j.jl:36\ntest set: Test Failed at /tmp/tmpx6e3_45j.jl:42\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpx6e3_45j.jl:42\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx6e3_45j.jl:36\ntest set: Test Failed at /tmp/tmpx6e3_45j.jl:44\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpx6e3_45j.jl:44\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx6e3_45j.jl:36\ntest set: Test Failed at /tmp/tmpx6e3_45j.jl:45\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpx6e3_45j.jl:45\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx6e3_45j.jl:36\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx6e3_45j.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptxzy4zi3.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmptxzy4zi3.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptxzy4zi3.jl:38\ntest set: Test Failed at /tmp/tmptxzy4zi3.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmptxzy4zi3.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptxzy4zi3.jl:38\ntest set: Test Failed at /tmp/tmptxzy4zi3.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmptxzy4zi3.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptxzy4zi3.jl:38\ntest set: Test Failed at /tmp/tmptxzy4zi3.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmptxzy4zi3.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptxzy4zi3.jl:38\ntest set: Test Failed at /tmp/tmptxzy4zi3.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmptxzy4zi3.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptxzy4zi3.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptxzy4zi3.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxb_0x_2r.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpxb_0x_2r.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxb_0x_2r.jl:38\ntest set: Test Failed at /tmp/tmpxb_0x_2r.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpxb_0x_2r.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxb_0x_2r.jl:38\ntest set: Test Failed at /tmp/tmpxb_0x_2r.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpxb_0x_2r.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxb_0x_2r.jl:38\ntest set: Test Failed at /tmp/tmpxb_0x_2r.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpxb_0x_2r.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxb_0x_2r.jl:38\ntest set: Test Failed at /tmp/tmpxb_0x_2r.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpxb_0x_2r.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxb_0x_2r.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxb_0x_2r.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if length(lst1)\
    \ == length(lst2)\n        return lst1\n    end\n    if length(lst1) > length(lst2)\n\
    \        return lst2\n    end\n    if length(lst1) < length(lst2)\n        return\
    \ lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps16ca1u_.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmps16ca1u_.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps16ca1u_.jl:38\ntest set: Test Failed at /tmp/tmps16ca1u_.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmps16ca1u_.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps16ca1u_.jl:38\ntest set: Test Failed at /tmp/tmps16ca1u_.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmps16ca1u_.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps16ca1u_.jl:38\ntest set: Test Failed at /tmp/tmps16ca1u_.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmps16ca1u_.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps16ca1u_.jl:38\ntest set: Test Failed at /tmp/tmps16ca1u_.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmps16ca1u_.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps16ca1u_.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps16ca1u_.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0\n        return\
    \ lst1\n    end\n    if length(lst2) == 0\n        return lst2\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    return lst1\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppbfcugmp.jl:35\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmppbfcugmp.jl:35\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppbfcugmp.jl:33\ntest set: Test Failed at /tmp/tmppbfcugmp.jl:38\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmppbfcugmp.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppbfcugmp.jl:33\ntest set: Test Failed at /tmp/tmppbfcugmp.jl:39\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmppbfcugmp.jl:39\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppbfcugmp.jl:33\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppbfcugmp.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return lst1\n    end\n    if length(lst1) == 0\n        return\
    \ lst2\n    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if\
    \ length(lst1) == length(lst2)\n        return lst1\n    end\n    if length(lst1)\
    \ > length(lst2)\n        return lst2\n    end\n    if length(lst1) < length(lst2)\n\
    \        return lst1\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq6xoqywt.jl:40\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpq6xoqywt.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq6xoqywt.jl:38\ntest set: Test Failed at /tmp/tmpq6xoqywt.jl:43\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"\
    Hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"Hi\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpq6xoqywt.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq6xoqywt.jl:38\ntest set: Test Failed at /tmp/tmpq6xoqywt.jl:44\n\
    \  Expression: candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"\
    hI\", \"hi\", \"hi\"]\n   Evaluated: [\"hi\", \"admin\"] == [\"hI\", \"hi\", \"\
    hi\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpq6xoqywt.jl:44\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq6xoqywt.jl:38\ntest set: Test Failed at /tmp/tmpq6xoqywt.jl:46\n\
    \  Expression: candidate(Vector{String}([]), [\"this\"]) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpq6xoqywt.jl:46\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq6xoqywt.jl:38\ntest set: Test Failed at /tmp/tmpq6xoqywt.jl:47\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpq6xoqywt.jl:47\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq6xoqywt.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     5      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq6xoqywt.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    sum1 = 0\n    sum2 = 0\n    for\
    \ i in lst1\n        sum1 += length(i)\n    end\n    for i in lst2\n        sum2\
    \ += length(i)\n    end\n    if sum1 < sum2\n        return lst1\n    elseif sum1\
    \ > sum2\n        return lst2\n    else\n        return lst1\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    lst1_total = 0\n    lst2_total =\
    \ 0\n    for i in lst1\n        lst1_total += length(i)\n    end\n    for i in\
    \ lst2\n        lst2_total += length(i)\n    end\n    if lst1_total == lst2_total\n\
    \        return lst1\n    elseif lst1_total < lst2_total\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    9      9\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that accepts two lists of strings and returns\
    \ the list that has \n    total number of chars in the all strings of the list\
    \ less than the other list.\n\n    if the two lists have the same number of chars,\
    \ return the first list.\n\n    Examples\n    total_match([], []) \u279E []\n\
    \    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n    total_match(['hi',\
    \ 'admin'], ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n    total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n    total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\n    \"\"\"\nfunction total_match(lst1::Vector{String},\
    \ lst2::Vector{String})::Vector{String} \n    if length(lst1) == 0 && length(lst2)\
    \ == 0\n        return []\n    end\n    if length(lst1) == 0\n        return lst2\n\
    \    end\n    if length(lst2) == 0\n        return lst1\n    end\n    if sum(length.(lst1))\
    \ < sum(length.(lst2))\n        return lst1\n    elseif sum(length.(lst1)) > sum(length.(lst2))\n\
    \        return lst2\n    else\n        return lst1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt65s5aum.jl:44\n  Expression: candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([])\n   Evaluated: [\"this\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt65s5aum.jl:44\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt65s5aum.jl:36\ntest set: Test Failed at /tmp/tmpt65s5aum.jl:45\n\
    \  Expression: candidate([\"this\"], Vector{String}([])) == Vector{String}([])\n\
    \   Evaluated: [\"this\"] == String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpt65s5aum.jl:45\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt65s5aum.jl:36\nTest Summary: | Pass  Fail  Total\n\
    test set      |    7     2      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt65s5aum.jl:34\n"
  exit_code: 1
  status: SyntaxError
