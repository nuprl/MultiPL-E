name: HumanEval_42_incr_list
language: julia
results:
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x+1 for x in l]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return l .+ 1\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return l.+1\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return l .+ 1\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x+1 for x in l]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return l .+ 1\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l_incr = zeros(Int64, length(l))\n    for i in 1:length(l)\n        l_incr[i]\
    \ = l[i] + 1\n    end\n    return l_incr\nend\nusing Test\n\n@testset begin\n\n\
    candidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [i+1 for i in l]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [x+1 for x in l]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return [i+1 for i in l]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return l .+ 1\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return l .+ 1\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return l .+ 1\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l2 = zeros(Int64, length(l))\n    for i in 1:length(l)\n        l2[i]\
    \ = l[i] + 1\n    end\n    return l2\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    n = length(l)\n    new_l = zeros(Int64, n)\n    for i in 1:n\n       \
    \ new_l[i] = l[i] + 1\n    end\n    return new_l\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return l + 1\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmprhsnzqyj.jl:15\\n  Test threw\
    \ exception\\n  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\\\
    n  MethodError: no method matching +(::Array{Int64,1}, ::Int64)\\n  Closest candidates\
    \ are:\\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:529\\\
    n    +(!Matched::Complex{Bool}, ::Real) at complex.jl:301\\n    +(!Matched::Missing,\
    \ ::Number) at missing.jl:115\\n    ...\\n  Stacktrace:\\n   [1] incr_list(::Array{Int64,1})\
    \ at /tmp/tmprhsnzqyj.jl:8\\n   [2] top-level scope at /tmp/tmprhsnzqyj.jl:15\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmprhsnzqyj.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmprhsnzqyj.jl:16\\n  Test threw exception\\n  Expression: candidate([3,\
    \ 2, 1]) == [4, 3, 2]\\n  MethodError: no method matching +(::Array{Int64,1},\
    \ ::Int64)\\n  Closest candidates are:\\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at operators.jl:529\\n    +(!Matched::Complex{Bool}, ::Real) at complex.jl:301\\\
    n    +(!Matched::Missing, ::Number) at missing.jl:115\\n    ...\\n  Stacktrace:\\\
    n   [1] incr_list(::Array{Int64,1}) at /tmp/tmprhsnzqyj.jl:8\\n   [2] top-level\
    \ scope at /tmp/tmprhsnzqyj.jl:16\\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmprhsnzqyj.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmprhsnzqyj.jl:17\\n  Test threw exception\\n  Expression: candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\\n  MethodError:\
    \ no method matching +(::Array{Int64,1}, ::Int64)\\n  Closest candidates are:\\\
    n    +(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:529\\n \
    \   +(!Matched::Complex{Bool}, ::Real) at complex.jl:301\\n    +(!Matched::Missing,\
    \ ::Number) at missing.jl:115\\n    ...\\n  Stacktrace:\\n   [1] incr_list(::Array{Int64,1})\
    \ at /tmp/tmprhsnzqyj.jl:8\\n   [2] top-level scope at /tmp/tmprhsnzqyj.jl:17\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmprhsnzqyj.jl:14\\n  \\nTest Summary: | Error\
    \  Total\\ntest set      |     3      3\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return l .+ 1\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return l .+ 1\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return l .+ 1\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return l + 1\nend\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppwly2h8b.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching +(::Array{Int64,1}, ::Int64)\n  Closest candidates are:\n\
    \    +(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:529\n  \
    \  +(!Matched::Complex{Bool}, ::Real) at complex.jl:301\n    +(!Matched::Missing,\
    \ ::Number) at missing.jl:115\n    ...\n  Stacktrace:\n   [1] incr_list(::Array{Int64,1})\
    \ at /tmp/tmppwly2h8b.jl:8\n   [2] top-level scope at /tmp/tmppwly2h8b.jl:15\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmppwly2h8b.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmppwly2h8b.jl:16\n  Test threw exception\n  Expression: candidate([3,\
    \ 2, 1]) == [4, 3, 2]\n  MethodError: no method matching +(::Array{Int64,1}, ::Int64)\n\
    \  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at operators.jl:529\n    +(!Matched::Complex{Bool}, ::Real) at complex.jl:301\n\
    \    +(!Matched::Missing, ::Number) at missing.jl:115\n    ...\n  Stacktrace:\n\
    \   [1] incr_list(::Array{Int64,1}) at /tmp/tmppwly2h8b.jl:8\n   [2] top-level\
    \ scope at /tmp/tmppwly2h8b.jl:16\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmppwly2h8b.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmppwly2h8b.jl:17\n  Test threw exception\n  Expression: candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n  MethodError:\
    \ no method matching +(::Array{Int64,1}, ::Int64)\n  Closest candidates are:\n\
    \    +(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:529\n  \
    \  +(!Matched::Complex{Bool}, ::Real) at complex.jl:301\n    +(!Matched::Missing,\
    \ ::Number) at missing.jl:115\n    ...\n  Stacktrace:\n   [1] incr_list(::Array{Int64,1})\
    \ at /tmp/tmppwly2h8b.jl:8\n   [2] top-level scope at /tmp/tmppwly2h8b.jl:17\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmppwly2h8b.jl:14\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppwly2h8b.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    return map(x -> x + 1, l)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
