name: HumanEval_163_generate_integers
language: julia
results:
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpk4puielw.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk4puielw.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpk4puielw.jl:20\ntest set: Test Failed at /tmp/tmpk4puielw.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpk4puielw.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpk4puielw.jl:20\ntest set: Test Failed at /tmp/tmpk4puielw.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpk4puielw.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpk4puielw.jl:20\ntest set: Test Failed at /tmp/tmpk4puielw.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpk4puielw.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpk4puielw.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk4puielw.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvjgkqjl3.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvjgkqjl3.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvjgkqjl3.jl:20\ntest set: Test Failed at /tmp/tmpvjgkqjl3.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpvjgkqjl3.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvjgkqjl3.jl:20\ntest set: Test Failed at /tmp/tmpvjgkqjl3.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpvjgkqjl3.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvjgkqjl3.jl:20\ntest set: Test Failed at /tmp/tmpvjgkqjl3.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpvjgkqjl3.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvjgkqjl3.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvjgkqjl3.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9b3gtwfd.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9b3gtwfd.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9b3gtwfd.jl:20\ntest set: Test Failed at /tmp/tmp9b3gtwfd.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp9b3gtwfd.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9b3gtwfd.jl:20\ntest set: Test Failed at /tmp/tmp9b3gtwfd.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp9b3gtwfd.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9b3gtwfd.jl:20\ntest set: Test Failed at /tmp/tmp9b3gtwfd.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmp9b3gtwfd.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9b3gtwfd.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9b3gtwfd.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpw1kw4llt.jl:21\\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpw1kw4llt.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpw1kw4llt.jl:20\\ntest set: Test Failed at /tmp/tmpw1kw4llt.jl:22\\\
    n  Expression: candidate(10, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpw1kw4llt.jl:22\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpw1kw4llt.jl:20\\ntest set: Test Failed at /tmp/tmpw1kw4llt.jl:23\\\
    n  Expression: candidate(132, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8,\
    \ 10, 12, 14, 16, 18, 20  \\xe2\\x80\\xa6  114, 116, 118, 120, 122, 124, 126,\
    \ 128, 130, 132] == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpw1kw4llt.jl:23\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpw1kw4llt.jl:20\\ntest set: Test Failed at /tmp/tmpw1kw4llt.jl:24\\\
    n  Expression: candidate(17, 89) == Vector{Int64}([])\\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \\xe2\\x80\\xa6  70, 72, 74, 76, 78, 80, 82,\
    \ 84, 86, 88] == Int64[]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpw1kw4llt.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpw1kw4llt.jl:20\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp4ccgbp29.jl:21\\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp4ccgbp29.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp4ccgbp29.jl:20\\ntest set: Test Failed at /tmp/tmp4ccgbp29.jl:22\\\
    n  Expression: candidate(10, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp4ccgbp29.jl:22\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp4ccgbp29.jl:20\\ntest set: Test Failed at /tmp/tmp4ccgbp29.jl:23\\\
    n  Expression: candidate(132, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8,\
    \ 10, 12, 14, 16, 18, 20  \\xe2\\x80\\xa6  114, 116, 118, 120, 122, 124, 126,\
    \ 128, 130, 132] == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp4ccgbp29.jl:23\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp4ccgbp29.jl:20\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        return generate_integers(b, a)\n    end\n    if a %\
    \ 2 == 1\n        a += 1\n    end\n    if b % 2 == 1\n        b -= 1\n    end\n\
    \    if a > b\n        return []\n    end\n    return collect(a:2:b)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl2r36ys9.jl:30\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl2r36ys9.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl2r36ys9.jl:29\ntest set: Test Failed at /tmp/tmpl2r36ys9.jl:31\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpl2r36ys9.jl:31\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl2r36ys9.jl:29\ntest set: Test Failed at /tmp/tmpl2r36ys9.jl:32\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpl2r36ys9.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl2r36ys9.jl:29\ntest set: Test Failed at /tmp/tmpl2r36ys9.jl:33\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpl2r36ys9.jl:33\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl2r36ys9.jl:29\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl2r36ys9.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp40l8vx5z.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp40l8vx5z.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp40l8vx5z.jl:20\ntest set: Test Failed at /tmp/tmp40l8vx5z.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp40l8vx5z.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp40l8vx5z.jl:20\ntest set: Test Failed at /tmp/tmp40l8vx5z.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp40l8vx5z.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp40l8vx5z.jl:20\ntest set: Test Failed at /tmp/tmp40l8vx5z.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmp40l8vx5z.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp40l8vx5z.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp40l8vx5z.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4zo7w80x.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4zo7w80x.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4zo7w80x.jl:20\ntest set: Test Failed at /tmp/tmp4zo7w80x.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp4zo7w80x.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4zo7w80x.jl:20\ntest set: Test Failed at /tmp/tmp4zo7w80x.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp4zo7w80x.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4zo7w80x.jl:20\ntest set: Test Failed at /tmp/tmp4zo7w80x.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmp4zo7w80x.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4zo7w80x.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4zo7w80x.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        return generate_integers(b, a)\n    end\n    if a %\
    \ 2 == 1\n        a += 1\n    end\n    if b % 2 == 1\n        b -= 1\n    end\n\
    \    if a > b\n        return []\n    end\n    return collect(a:2:b)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3vfn9eks.jl:30\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3vfn9eks.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3vfn9eks.jl:29\ntest set: Test Failed at /tmp/tmp3vfn9eks.jl:31\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp3vfn9eks.jl:31\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3vfn9eks.jl:29\ntest set: Test Failed at /tmp/tmp3vfn9eks.jl:32\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp3vfn9eks.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3vfn9eks.jl:29\ntest set: Test Failed at /tmp/tmp3vfn9eks.jl:33\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmp3vfn9eks.jl:33\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3vfn9eks.jl:29\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3vfn9eks.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2dpofytz.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2dpofytz.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2dpofytz.jl:20\ntest set: Test Failed at /tmp/tmp2dpofytz.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp2dpofytz.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2dpofytz.jl:20\ntest set: Test Failed at /tmp/tmp2dpofytz.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp2dpofytz.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2dpofytz.jl:20\ntest set: Test Failed at /tmp/tmp2dpofytz.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmp2dpofytz.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2dpofytz.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2dpofytz.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [x for x in a:b if\
    \ x % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcy99qame.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcy99qame.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcy99qame.jl:20\ntest set: Test Failed at /tmp/tmpcy99qame.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpcy99qame.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcy99qame.jl:20\ntest set: Test Failed at /tmp/tmpcy99qame.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpcy99qame.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcy99qame.jl:20\ntest set: Test Failed at /tmp/tmpcy99qame.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpcy99qame.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcy99qame.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcy99qame.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    if a % 2 == 1\n        a +=\
    \ 1\n    end\n    if b % 2 == 1\n        b -= 1\n    end\n    if a > b\n     \
    \   return Int64[]\n    end\n    return collect(a:2:b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc6q4wuyd.jl:30\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpc6q4wuyd.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc6q4wuyd.jl:29\ntest set: Test Failed at /tmp/tmpc6q4wuyd.jl:31\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpc6q4wuyd.jl:31\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc6q4wuyd.jl:29\ntest set: Test Failed at /tmp/tmpc6q4wuyd.jl:32\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpc6q4wuyd.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc6q4wuyd.jl:29\ntest set: Test Failed at /tmp/tmpc6q4wuyd.jl:33\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpc6q4wuyd.jl:33\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc6q4wuyd.jl:29\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc6q4wuyd.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpddd0088y.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpddd0088y.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpddd0088y.jl:20\ntest set: Test Failed at /tmp/tmpddd0088y.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpddd0088y.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpddd0088y.jl:20\ntest set: Test Failed at /tmp/tmpddd0088y.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpddd0088y.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpddd0088y.jl:20\ntest set: Test Failed at /tmp/tmpddd0088y.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpddd0088y.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpddd0088y.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpddd0088y.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        return generate_integers(b, a)\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpcko4zy1v.jl:21\\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpcko4zy1v.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpcko4zy1v.jl:20\\ntest set: Test Failed at /tmp/tmpcko4zy1v.jl:22\\\
    n  Expression: candidate(10, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpcko4zy1v.jl:22\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpcko4zy1v.jl:20\\ntest set: Test Failed at /tmp/tmpcko4zy1v.jl:23\\\
    n  Expression: candidate(132, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8,\
    \ 10, 12, 14, 16, 18, 20  \\xe2\\x80\\xa6  114, 116, 118, 120, 122, 124, 126,\
    \ 128, 130, 132] == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpcko4zy1v.jl:23\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpcko4zy1v.jl:20\\ntest set: Test Failed at /tmp/tmpcko4zy1v.jl:24\\\
    n  Expression: candidate(17, 89) == Vector{Int64}([])\\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \\xe2\\x80\\xa6  70, 72, 74, 76, 78, 80, 82,\
    \ 84, 86, 88] == Int64[]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpcko4zy1v.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpcko4zy1v.jl:20\\nTest Summary: | Fail  Total\\\
    ntest set      |    4      4\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpka5vy2ca.jl:21\\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpka5vy2ca.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpka5vy2ca.jl:20\\ntest set: Test Failed at /tmp/tmpka5vy2ca.jl:22\\\
    n  Expression: candidate(10, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpka5vy2ca.jl:22\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpka5vy2ca.jl:20\\ntest set: Test Failed at /tmp/tmpka5vy2ca.jl:23\\\
    n  Expression: candidate(132, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8,\
    \ 10, 12, 14, 16, 18, 20  \\xe2\\x80\\xa6  114, 116, 118, 120, 122, 124, 126,\
    \ 128, 130, 132] == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpka5vy2ca.jl:23\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpka5vy2ca.jl:20\\ntest set: Test Failed at /tmp/tmpka5vy2ca.jl:24\\\
    n  Expression: candidate(17, 89) == Vector{Int64}([])\\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \\xe2\\x80\\xa6  70, 72, 74, 76, 78, 80, 82,\
    \ 84, 86, 88] == Int64[]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpka5vy2ca.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpka5vy2ca.jl:20\\nTest Summary: | Fail  Total\\\
    ntest set      |    4      4\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpqi3zvgta.jl:21\\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpqi3zvgta.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpqi3zvgta.jl:20\\ntest set: Test Failed at /tmp/tmpqi3zvgta.jl:22\\\
    n  Expression: candidate(10, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpqi3zvgta.jl:22\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpqi3zvgta.jl:20\\ntest set: Test Failed at /tmp/tmpqi3zvgta.jl:23\\\
    n  Expression: candidate(132, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8,\
    \ 10, 12, 14, 16, 18, 20  \\xe2\\x80\\xa6  114, 116, 118, 120, 122, 124, 126,\
    \ 128, 130, 132] == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpqi3zvgta.jl:23\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpqi3zvgta.jl:20\\ntest set: Test Failed at /tmp/tmpqi3zvgta.jl:24\\\
    n  Expression: candidate(17, 89) == Vector{Int64}([])\\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \\xe2\\x80\\xa6  70, 72, 74, 76, 78, 80, 82,\
    \ 84, 86, 88] == Int64[]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpqi3zvgta.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpqi3zvgta.jl:20\\nTest Summary: | Fail  Total\\\
    ntest set      |    4      4\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyplq0gu7.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyplq0gu7.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyplq0gu7.jl:20\ntest set: Test Failed at /tmp/tmpyplq0gu7.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpyplq0gu7.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyplq0gu7.jl:20\ntest set: Test Failed at /tmp/tmpyplq0gu7.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpyplq0gu7.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyplq0gu7.jl:20\ntest set: Test Failed at /tmp/tmpyplq0gu7.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpyplq0gu7.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyplq0gu7.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyplq0gu7.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpr8o7l90c.jl:21\\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpr8o7l90c.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpr8o7l90c.jl:20\\ntest set: Test Failed at /tmp/tmpr8o7l90c.jl:22\\\
    n  Expression: candidate(10, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpr8o7l90c.jl:22\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpr8o7l90c.jl:20\\ntest set: Test Failed at /tmp/tmpr8o7l90c.jl:23\\\
    n  Expression: candidate(132, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8,\
    \ 10, 12, 14, 16, 18, 20  \\xe2\\x80\\xa6  114, 116, 118, 120, 122, 124, 126,\
    \ 128, 130, 132] == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpr8o7l90c.jl:23\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpr8o7l90c.jl:20\\ntest set: Test Failed at /tmp/tmpr8o7l90c.jl:24\\\
    n  Expression: candidate(17, 89) == Vector{Int64}([])\\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \\xe2\\x80\\xa6  70, 72, 74, 76, 78, 80, 82,\
    \ 84, 86, 88] == Int64[]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpr8o7l90c.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpr8o7l90c.jl:20\\nTest Summary: | Fail  Total\\\
    ntest set      |    4      4\\n'"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpnwj087cu.jl:21\\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpnwj087cu.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpnwj087cu.jl:20\\ntest set: Test Failed at /tmp/tmpnwj087cu.jl:22\\\
    n  Expression: candidate(10, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpnwj087cu.jl:22\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpnwj087cu.jl:20\\ntest set: Test Failed at /tmp/tmpnwj087cu.jl:23\\\
    n  Expression: candidate(132, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8,\
    \ 10, 12, 14, 16, 18, 20  \\xe2\\x80\\xa6  114, 116, 118, 120, 122, 124, 126,\
    \ 128, 130, 132] == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpnwj087cu.jl:23\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpnwj087cu.jl:20\\ntest set: Test Failed at /tmp/tmpnwj087cu.jl:24\\\
    n  Expression: candidate(17, 89) == Vector{Int64}([])\\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \\xe2\\x80\\xa6  70, 72, 74, 76, 78, 80, 82,\
    \ 84, 86, 88] == Int64[]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpnwj087cu.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpnwj087cu.jl:20\\nTest Summary: | Fail  Total\\\
    ntest set      |    4      4\\n'"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmpnwj087cu.jl:18\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [x for x in a:b if\
    \ x % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8byvtct6.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8byvtct6.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8byvtct6.jl:20\ntest set: Test Failed at /tmp/tmp8byvtct6.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp8byvtct6.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8byvtct6.jl:20\ntest set: Test Failed at /tmp/tmp8byvtct6.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp8byvtct6.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8byvtct6.jl:20\ntest set: Test Failed at /tmp/tmp8byvtct6.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmp8byvtct6.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8byvtct6.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8byvtct6.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmporee_evy.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmporee_evy.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmporee_evy.jl:20\ntest set: Test Failed at /tmp/tmporee_evy.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmporee_evy.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmporee_evy.jl:20\ntest set: Test Failed at /tmp/tmporee_evy.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmporee_evy.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmporee_evy.jl:20\ntest set: Test Failed at /tmp/tmporee_evy.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmporee_evy.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmporee_evy.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmporee_evy.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        return generate_integers(b, a)\n    end\n    if a %\
    \ 2 == 1\n        a += 1\n    end\n    return a:2:b\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgwkofmoi.jl:24\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgwkofmoi.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgwkofmoi.jl:23\ntest set: Test Failed at /tmp/tmpgwkofmoi.jl:25\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpgwkofmoi.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgwkofmoi.jl:23\ntest set: Test Failed at /tmp/tmpgwkofmoi.jl:26\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpgwkofmoi.jl:26\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgwkofmoi.jl:23\ntest set: Test Failed at /tmp/tmpgwkofmoi.jl:27\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpgwkofmoi.jl:27\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgwkofmoi.jl:23\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgwkofmoi.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu69xkyln.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpu69xkyln.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu69xkyln.jl:20\ntest set: Test Failed at /tmp/tmpu69xkyln.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpu69xkyln.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu69xkyln.jl:20\ntest set: Test Failed at /tmp/tmpu69xkyln.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpu69xkyln.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu69xkyln.jl:20\ntest set: Test Failed at /tmp/tmpu69xkyln.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpu69xkyln.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu69xkyln.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu69xkyln.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl5wb5g_e.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl5wb5g_e.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl5wb5g_e.jl:20\ntest set: Test Failed at /tmp/tmpl5wb5g_e.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpl5wb5g_e.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl5wb5g_e.jl:20\ntest set: Test Failed at /tmp/tmpl5wb5g_e.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpl5wb5g_e.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl5wb5g_e.jl:20\ntest set: Test Failed at /tmp/tmpl5wb5g_e.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpl5wb5g_e.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl5wb5g_e.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl5wb5g_e.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpzxqt_458.jl:21\\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpzxqt_458.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpzxqt_458.jl:20\\ntest set: Test Failed at /tmp/tmpzxqt_458.jl:22\\\
    n  Expression: candidate(10, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpzxqt_458.jl:22\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpzxqt_458.jl:20\\ntest set: Test Failed at /tmp/tmpzxqt_458.jl:23\\\
    n  Expression: candidate(132, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8,\
    \ 10, 12, 14, 16, 18, 20  \\xe2\\x80\\xa6  114, 116, 118, 120, 122, 124, 126,\
    \ 128, 130, 132] == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpzxqt_458.jl:23\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpzxqt_458.jl:20\\ntest set: Test Failed at /tmp/tmpzxqt_458.jl:24\\\
    n  Expression: candidate(17, 89) == '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpngt9emvm.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpngt9emvm.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpngt9emvm.jl:20\ntest set: Test Failed at /tmp/tmpngt9emvm.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpngt9emvm.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpngt9emvm.jl:20\ntest set: Test Failed at /tmp/tmpngt9emvm.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpngt9emvm.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpngt9emvm.jl:20\ntest set: Test Failed at /tmp/tmpngt9emvm.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpngt9emvm.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpngt9emvm.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpngt9emvm.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpw6dndk2x.jl:21\\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpw6dndk2x.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpw6dndk2x.jl:20\\ntest set: Test Failed at /tmp/tmpw6dndk2x.jl:22\\\
    n  Expression: candidate(10, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpw6dndk2x.jl:22\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpw6dndk2x.jl:20\\ntest set: Test Failed at /tmp/tmpw6dndk2x.jl:23\\\
    n  Expression: candidate(132, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8,\
    \ 10, 12, 14, 16, 18, 20  \\xe2\\x80\\xa6  114, 116, 118, 120, 122, 124, 126,\
    \ 128, 130, 132] == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpw6dndk2x.jl:23\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpw6dndk2x.jl:20\\ntest set: Test Failed at /tmp/tmpw6dndk2x.jl:24\\\
    n  Expression: candidate(17, 89) == Vector{Int64}([])\\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \\xe2\\x80\\xa6  70, 72, 74, 76, 78, 80, 82,\
    \ 84, 86, 88] == Int64[]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpw6dndk2x.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpw6dndk2x.jl:20\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        return generate_integers(b, a)\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvrdov7ll.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvrdov7ll.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvrdov7ll.jl:20\ntest set: Test Failed at /tmp/tmpvrdov7ll.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpvrdov7ll.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvrdov7ll.jl:20\ntest set: Test Failed at /tmp/tmpvrdov7ll.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpvrdov7ll.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvrdov7ll.jl:20\ntest set: Test Failed at /tmp/tmpvrdov7ll.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpvrdov7ll.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvrdov7ll.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvrdov7ll.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0fkgg9tl.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0fkgg9tl.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0fkgg9tl.jl:20\ntest set: Test Failed at /tmp/tmp0fkgg9tl.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp0fkgg9tl.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0fkgg9tl.jl:20\ntest set: Test Failed at /tmp/tmp0fkgg9tl.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp0fkgg9tl.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0fkgg9tl.jl:20\ntest set: Test Failed at /tmp/tmp0fkgg9tl.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmp0fkgg9tl.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0fkgg9tl.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0fkgg9tl.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpw9pn8r3j.jl:21\\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpw9pn8r3j.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpw9pn8r3j.jl:20\\ntest set: Test Failed at /tmp/tmpw9pn8r3j.jl:22\\\
    n  Expression: candidate(10, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpw9pn8r3j.jl:22\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpw9pn8r3j.jl:20\\ntest set: Test Failed at /tmp/tmpw9pn8r3j.jl:23\\\
    n  Expression: candidate(132, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8,\
    \ 10, 12, 14, 16, 18, 20  \\xe2\\x80\\xa6  114, 116, 118, 120, 122, 124, 126,\
    \ 128, 130, 132] == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpw9pn8r3j.jl:23\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpw9pn8r3j.jl:20\\ntest set: Test Failed at /tmp/tmpw9pn8r3j.jl:24\\\
    n  Expression: candidate(17, 89) == Vector{Int64}([])\\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \\xe2\\x80\\xa6  70, 72, 74, 76, 78, 80, 82,\
    \ 84, 86, 88] == Int64[]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpw9pn8r3j.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpw9pn8r3j.jl:20\\nTest Summary: | Fail  Total\\\
    ntest set      |    4      4\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [x for x in a:b if\
    \ x % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpmdblfiio.jl:21\\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpmdblfiio.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpmdblfiio.jl:20\\ntest set: Test Failed at /tmp/tmpmdblfiio.jl:22\\\
    n  Expression: candidate(10, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpmdblfiio.jl:22\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpmdblfiio.jl:20\\ntest set: Test Failed at /tmp/tmpmdblfiio.jl:23\\\
    n  Expression: candidate(132, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8,\
    \ 10, 12, 14, 16, 18, 20  \\xe2\\x80\\xa6  114, 116, 118, 120, 122, 124, 126,\
    \ 128, 130, 132] == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpmdblfiio.jl:23\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpmdblfiio.jl:20\\ntest set: Test Failed at /tmp/tmpmdblfiio.jl:24\\\
    n  Expression: candidate(17, 89) == Vector{Int64}([])\\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \\xe2\\x80\\xa6  70, 72, 74, 76, 78, 80, 82,\
    \ 84, 86, 88] == Int64[]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpmdblfiio.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpmdblfiio.jl:20\\nTest Summary: | '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpsg4dmfb4.jl:21\\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpsg4dmfb4.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpsg4dmfb4.jl:20\\ntest set: Test Failed at /tmp/tmpsg4dmfb4.jl:22\\\
    n  Expression: candidate(10, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpsg4dmfb4.jl:22\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpsg4dmfb4.jl:20\\ntest set: Test Failed at /tmp/tmpsg4dmfb4.jl:23\\\
    n  Expression: candidate(132, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8,\
    \ 10, 12, 14, 16, 18, 20  \\xe2\\x80\\xa6  114, 116, 118, 120, 122, 124, 126,\
    \ 128, 130, 132] == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpsg4dmfb4.jl:23\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpsg4dmfb4.jl:20\\ntest set: Test Failed at /tmp/tmpsg4dmfb4.jl:24\\\
    n  Expression: candidate(17, 89) == Vector{Int64}([])\\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \\xe2\\x80\\xa6  70, 72, 74, 76, 78, 80, 82,\
    \ 84, 86, 88] == Int64[]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpsg4dmfb4.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpsg4dmfb4.jl:20\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpch5640f0.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpch5640f0.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpch5640f0.jl:20\ntest set: Test Failed at /tmp/tmpch5640f0.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpch5640f0.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpch5640f0.jl:20\ntest set: Test Failed at /tmp/tmpch5640f0.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpch5640f0.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpch5640f0.jl:20\ntest set: Test Failed at /tmp/tmpch5640f0.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpch5640f0.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpch5640f0.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpch5640f0.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpksbacc9t.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpksbacc9t.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpksbacc9t.jl:20\ntest set: Test Failed at /tmp/tmpksbacc9t.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpksbacc9t.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpksbacc9t.jl:20\ntest set: Test Failed at /tmp/tmpksbacc9t.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpksbacc9t.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpksbacc9t.jl:20\ntest set: Test Failed at /tmp/tmpksbacc9t.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpksbacc9t.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpksbacc9t.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpksbacc9t.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpund_67d4.jl:21\\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpund_67d4.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpund_67d4.jl:20\\ntest set: Test Failed at /tmp/tmpund_67d4.jl:22\\\
    n  Expression: candidate(10, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpund_67d4.jl:22\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpund_67d4.jl:20\\ntest set: Test Failed at /tmp/tmpund_67d4.jl:23\\\
    n  Expression: candidate(132, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8,\
    \ 10, 12, 14, 16, 18, 20  \\xe2\\x80\\xa6  114, 116, 118, 120, 122, 124, 126,\
    \ 128, 130, 132] == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpund_67d4.jl:23\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpund_67d4.jl:20\\ntest set: Test Failed at /tmp/tmpund_67d4.jl:24\\\
    n  Expression: candidate(17, 89) == Vector{Int64}([])\\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \\xe2\\x80\\xa6  70, 72, 74, 76, 78, 80, 82,\
    \ 84, 86, 88] == Int64[]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpund_67d4.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpund_67d4.jl:20\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpx6qhglip.jl:21\\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpx6qhglip.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpx6qhglip.jl:20\\ntest set: Test Failed at /tmp/tmpx6qhglip.jl:22\\\
    n  Expression: candidate(10, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpx6qhglip.jl:22\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpx6qhglip.jl:20\\ntest set: Test Failed at /tmp/tmpx6qhglip.jl:23\\\
    n  Expression: candidate(132, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8,\
    \ 10, 12, 14, 16, 18, 20  \\xe2\\x80\\xa6  114, 116, 118, 120, 122, 124, 126,\
    \ 128, 130, 132] == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpx6qhglip.jl:23\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpx6qhglip.jl:20\\ntest set: Test Failed at /tmp/tmpx6qhglip.jl:24\\\
    n  Expression: candidate(17, 89) == Vector{Int64}([])\\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \\xe2\\x80\\xa6  70, 72, 74, 76, 78, 80, 82,\
    \ 84, 86, 88] == Int64[]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpx6qhglip.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpx6qhglip.jl:20\\nTest Summary: | Fail  Total\\\
    ntest set      |    4      4\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3om39zts.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3om39zts.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3om39zts.jl:20\ntest set: Test Failed at /tmp/tmp3om39zts.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp3om39zts.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3om39zts.jl:20\ntest set: Test Failed at /tmp/tmp3om39zts.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp3om39zts.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3om39zts.jl:20\ntest set: Test Failed at /tmp/tmp3om39zts.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmp3om39zts.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3om39zts.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3om39zts.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8upn25tf.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8upn25tf.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8upn25tf.jl:20\ntest set: Test Failed at /tmp/tmp8upn25tf.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp8upn25tf.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8upn25tf.jl:20\ntest set: Test Failed at /tmp/tmp8upn25tf.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp8upn25tf.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8upn25tf.jl:20\ntest set: Test Failed at /tmp/tmp8upn25tf.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmp8upn25tf.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8upn25tf.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8upn25tf.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkhnmvg5a.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkhnmvg5a.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkhnmvg5a.jl:20\ntest set: Test Failed at /tmp/tmpkhnmvg5a.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpkhnmvg5a.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkhnmvg5a.jl:20\ntest set: Test Failed at /tmp/tmpkhnmvg5a.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpkhnmvg5a.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkhnmvg5a.jl:20\ntest set: Test Failed at /tmp/tmpkhnmvg5a.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpkhnmvg5a.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkhnmvg5a.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkhnmvg5a.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpouqk0eql.jl:21\\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpouqk0eql.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpouqk0eql.jl:20\\ntest set: Test Failed at /tmp/tmpouqk0eql.jl:22\\\
    n  Expression: candidate(10, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpouqk0eql.jl:22\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpouqk0eql.jl:20\\ntest set: Test Failed at /tmp/tmpouqk0eql.jl:23\\\
    n  Expression: candidate(132, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8,\
    \ 10, 12, 14, 16, 18, 20  \\xe2\\x80\\xa6  114, 116, 118, 120, 122, 124, 126,\
    \ 128, 130, 132] == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpouqk0eql.jl:23\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpouqk0eql.jl:20\\ntest set: Test Failed at /tmp/tmpouqk0eql.jl:24\\\
    n  Expression: candidate(17, 89) == Vector{Int64}([])\\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \\xe2\\x80\\xa6  70, 72, 74, 76, 78, 80, 82,\
    \ 84, 86, 88] == Int64[]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpouqk0eql.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpouqk0eql.jl:20\\nTest Summary: | Fail  Total\\\
    ntest set      |    4      4\\n'"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b \n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpddfgn4ch.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpddfgn4ch.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpddfgn4ch.jl:20\ntest set: Test Failed at /tmp/tmpddfgn4ch.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpddfgn4ch.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpddfgn4ch.jl:20\ntest set: Test Failed at /tmp/tmpddfgn4ch.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpddfgn4ch.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpddfgn4ch.jl:20\ntest set: Test Failed at /tmp/tmpddfgn4ch.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpddfgn4ch.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpddfgn4ch.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpddfgn4ch.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp70pl3p7k.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp70pl3p7k.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp70pl3p7k.jl:20\ntest set: Test Failed at /tmp/tmp70pl3p7k.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp70pl3p7k.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp70pl3p7k.jl:20\ntest set: Test Failed at /tmp/tmp70pl3p7k.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp70pl3p7k.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp70pl3p7k.jl:20\ntest set: Test Failed at /tmp/tmp70pl3p7k.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmp70pl3p7k.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp70pl3p7k.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp70pl3p7k.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi9nwa0j4.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi9nwa0j4.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi9nwa0j4.jl:20\ntest set: Test Failed at /tmp/tmpi9nwa0j4.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpi9nwa0j4.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi9nwa0j4.jl:20\ntest set: Test Failed at /tmp/tmpi9nwa0j4.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpi9nwa0j4.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi9nwa0j4.jl:20\ntest set: Test Failed at /tmp/tmpi9nwa0j4.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpi9nwa0j4.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi9nwa0j4.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi9nwa0j4.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjeg95__i.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjeg95__i.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjeg95__i.jl:20\ntest set: Test Failed at /tmp/tmpjeg95__i.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpjeg95__i.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjeg95__i.jl:20\ntest set: Test Failed at /tmp/tmpjeg95__i.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpjeg95__i.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjeg95__i.jl:20\ntest set: Test Failed at /tmp/tmpjeg95__i.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpjeg95__i.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjeg95__i.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjeg95__i.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpg9april5.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg9april5.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg9april5.jl:20\ntest set: Test Failed at /tmp/tmpg9april5.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpg9april5.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg9april5.jl:20\ntest set: Test Failed at /tmp/tmpg9april5.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpg9april5.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg9april5.jl:20\ntest set: Test Failed at /tmp/tmpg9april5.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpg9april5.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg9april5.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg9april5.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpd81rbkgi.jl:21\\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpd81rbkgi.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpd81rbkgi.jl:20\\ntest set: Test Failed at /tmp/tmpd81rbkgi.jl:22\\\
    n  Expression: candidate(10, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpd81rbkgi.jl:22\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpd81rbkgi.jl:20\\ntest set: Test Failed at /tmp/tmpd81rbkgi.jl:23\\\
    n  Expression: candidate(132, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8,\
    \ 10, 12, 14, 16, 18, 20  \\xe2\\x80\\xa6  114, 116, 118, 120, 122, 124, 126,\
    \ 128, 130, 132] == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpd81rbkgi.jl:23\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpd81rbkgi.jl:20\\ntest set: Test Failed at /tmp/tmpd81rbkgi.jl:24\\\
    n  Expression: candidate(17, 89) == Vector{Int64}([])\\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \\xe2\\x80\\xa6  70, 72, 74, 76, 78, 80, 82,\
    \ 84, 86, 88] == Int64[]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpd81rbkgi.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpd81rbkgi.jl:20\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpkkxr02a1.jl:21\\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpkkxr02a1.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpkkxr02a1.jl:20\\ntest set: Test Failed at /tmp/tmpkkxr02a1.jl:22\\\
    n  Expression: candidate(10, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpkkxr02a1.jl:22\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpkkxr02a1.jl:20\\ntest set: Test Failed at /tmp/tmpkkxr02a1.jl:23\\\
    n  Expression: candidate(132, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8,\
    \ 10, 12, 14, 16, 18, 20  \\xe2\\x80\\xa6  114, 116, 118, 120, 122, 124, 126,\
    \ 128, 130, 132] == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpkkxr02a1.jl:23\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpkkxr02a1.jl:20\\ntest set: Test Failed at /tmp/tmpkkxr02a1.jl:24\\\
    n  Expression: candidate(17, 89) == Vector{Int64}([])\\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \\xe2\\x80\\xa6  70, 72, 74, 76, 78, 80, 82,\
    \ 84, 86, 88] == Int64[]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpkkxr02a1.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpkkxr02a1.jl:20\\nTest Summary: | Fail  Total\\\
    ntest set      |    4      4\\n'"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmpkkxr02a1.jl:18\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcqxilbrs.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcqxilbrs.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcqxilbrs.jl:20\ntest set: Test Failed at /tmp/tmpcqxilbrs.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpcqxilbrs.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcqxilbrs.jl:20\ntest set: Test Failed at /tmp/tmpcqxilbrs.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpcqxilbrs.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcqxilbrs.jl:20\ntest set: Test Failed at /tmp/tmpcqxilbrs.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpcqxilbrs.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcqxilbrs.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcqxilbrs.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        return generate_integers(b, a)\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpfmrg1bug.jl:21\\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpfmrg1bug.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpfmrg1bug.jl:20\\ntest set: Test Failed at /tmp/tmpfmrg1bug.jl:22\\\
    n  Expression: candidate(10, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpfmrg1bug.jl:22\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpfmrg1bug.jl:20\\ntest set: Test Failed at /tmp/tmpfmrg1bug.jl:23\\\
    n  Expression: candidate(132, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8,\
    \ 10, 12, 14, 16, 18, 20  \\xe2\\x80\\xa6  114, 116, 118, 120, 122, 124, 126,\
    \ 128, 130, 132] == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpfmrg1bug.jl:23\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpfmrg1bug.jl:20\\ntest set: Test Failed at /tmp/tmpfmrg1bug.jl:24\\\
    n  Expression: candidate(17, 89) == Vector{Int64}([])\\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \\xe2\\x80\\xa6  70, 72, 74, 76, 78, 80, 82,\
    \ 84, 86, 88] == Int64[]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpfmrg1bug.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpfmrg1bug.jl:20\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        return generate_integers(b, a)\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpujkzuucx.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpujkzuucx.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpujkzuucx.jl:20\ntest set: Test Failed at /tmp/tmpujkzuucx.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpujkzuucx.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpujkzuucx.jl:20\ntest set: Test Failed at /tmp/tmpujkzuucx.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpujkzuucx.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpujkzuucx.jl:20\ntest set: Test Failed at /tmp/tmpujkzuucx.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpujkzuucx.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpujkzuucx.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpujkzuucx.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [x for x in a:b if\
    \ x % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_7s75s3c.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_7s75s3c.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_7s75s3c.jl:20\ntest set: Test Failed at /tmp/tmp_7s75s3c.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp_7s75s3c.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_7s75s3c.jl:20\ntest set: Test Failed at /tmp/tmp_7s75s3c.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp_7s75s3c.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_7s75s3c.jl:20\ntest set: Test Failed at /tmp/tmp_7s75s3c.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmp_7s75s3c.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_7s75s3c.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_7s75s3c.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp0wvud40e.jl:21\\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp0wvud40e.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp0wvud40e.jl:20\\ntest set: Test Failed at /tmp/tmp0wvud40e.jl:22\\\
    n  Expression: candidate(10, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp0wvud40e.jl:22\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp0wvud40e.jl:20\\ntest set: Test Failed at /tmp/tmp0wvud40e.jl:23\\\
    n  Expression: candidate(132, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8,\
    \ 10, 12, 14, 16, 18, 20  \\xe2\\x80\\xa6  114, 116, 118, 120, 122, 124, 126,\
    \ 128, 130, 132] == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp0wvud40e.jl:23\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp0wvud40e.jl:20\\ntest set: Test Failed at /tmp/tmp0wvud40e.jl:24\\\
    n  Expression: candidate(17, 89) == Vector{Int64}([])\\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \\xe2\\x80\\xa6  70, 72, 74, 76, 78, 80, 82,\
    \ 84, 86, 88] == Int64[]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp0wvud40e.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp0wvud40e.jl:20\\nTest Summary: | Fail  Total\\\
    ntest set      |    4      4\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0i4d5lja.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0i4d5lja.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0i4d5lja.jl:20\ntest set: Test Failed at /tmp/tmp0i4d5lja.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp0i4d5lja.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0i4d5lja.jl:20\ntest set: Test Failed at /tmp/tmp0i4d5lja.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp0i4d5lja.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0i4d5lja.jl:20\ntest set: Test Failed at /tmp/tmp0i4d5lja.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmp0i4d5lja.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0i4d5lja.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0i4d5lja.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpaoy295v_.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpaoy295v_.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpaoy295v_.jl:20\ntest set: Test Failed at /tmp/tmpaoy295v_.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpaoy295v_.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpaoy295v_.jl:20\ntest set: Test Failed at /tmp/tmpaoy295v_.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpaoy295v_.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpaoy295v_.jl:20\ntest set: Test Failed at /tmp/tmpaoy295v_.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpaoy295v_.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpaoy295v_.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaoy295v_.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4xa8qlv9.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4xa8qlv9.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4xa8qlv9.jl:20\ntest set: Test Failed at /tmp/tmp4xa8qlv9.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp4xa8qlv9.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4xa8qlv9.jl:20\ntest set: Test Failed at /tmp/tmp4xa8qlv9.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp4xa8qlv9.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4xa8qlv9.jl:20\ntest set: Test Failed at /tmp/tmp4xa8qlv9.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmp4xa8qlv9.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4xa8qlv9.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4xa8qlv9.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1p3alj_8.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1p3alj_8.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1p3alj_8.jl:20\ntest set: Test Failed at /tmp/tmp1p3alj_8.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp1p3alj_8.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1p3alj_8.jl:20\ntest set: Test Failed at /tmp/tmp1p3alj_8.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp1p3alj_8.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1p3alj_8.jl:20\ntest set: Test Failed at /tmp/tmp1p3alj_8.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmp1p3alj_8.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1p3alj_8.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1p3alj_8.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpxr0593en.jl:21\\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpxr0593en.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpxr0593en.jl:20\\ntest set: Test Failed at /tmp/tmpxr0593en.jl:22\\\
    n  Expression: candidate(10, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpxr0593en.jl:22\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpxr0593en.jl:20\\ntest set: Test Failed at /tmp/tmpxr0593en.jl:23\\\
    n  Expression: candidate(132, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8,\
    \ 10, 12, 14, 16, 18, 20  \\xe2\\x80\\xa6  114, 116, 118, 120, 122, 124, 126,\
    \ 128, 130, 132] == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpxr0593en.jl:23\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpxr0593en.jl:20\\ntest set: Test Failed at /tmp/tmpxr0593en.jl:24\\\
    n  Expression: candidate(17, 89) == Vector{Int64}([])\\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \\xe2\\x80\\xa6  70, 72, 74, 76, 78, 80, 82,\
    \ 84, 86, 88] == Int64[]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpxr0593en.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpxr0593en.jl:20\\nTest Summary: | Fail  Total\\\
    ntest set      |    4      4\\n'"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd59h21jb.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd59h21jb.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpd59h21jb.jl:20\ntest set: Test Failed at /tmp/tmpd59h21jb.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpd59h21jb.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpd59h21jb.jl:20\ntest set: Test Failed at /tmp/tmpd59h21jb.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpd59h21jb.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpd59h21jb.jl:20\ntest set: Test Failed at /tmp/tmpd59h21jb.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpd59h21jb.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpd59h21jb.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd59h21jb.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [x for x in a:b if\
    \ x % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa2h6s8_y.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpa2h6s8_y.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa2h6s8_y.jl:20\ntest set: Test Failed at /tmp/tmpa2h6s8_y.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpa2h6s8_y.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa2h6s8_y.jl:20\ntest set: Test Failed at /tmp/tmpa2h6s8_y.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpa2h6s8_y.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa2h6s8_y.jl:20\ntest set: Test Failed at /tmp/tmpa2h6s8_y.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpa2h6s8_y.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa2h6s8_y.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa2h6s8_y.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpooagcocp.jl:21\\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpooagcocp.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpooagcocp.jl:20\\ntest set: Test Failed at /tmp/tmpooagcocp.jl:22\\\
    n  Expression: candidate(10, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpooagcocp.jl:22\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpooagcocp.jl:20\\ntest set: Test Failed at /tmp/tmpooagcocp.jl:23\\\
    n  Expression: candidate(132, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8,\
    \ 10, 12, 14, 16, 18, 20  \\xe2\\x80\\xa6  114, 116, 118, 120, 122, 124, 126,\
    \ 128, 130, 132] == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpooagcocp.jl:23\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpooagcocp.jl:20\\ntest set: Test Failed at /tmp/tmpooagcocp.jl:24\\\
    n  Expression: candidate(17, 89) == Vector{Int64}([])\\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \\xe2\\x80\\xa6  70, 72, 74, 76, 78, 80, 82,\
    \ 84, 86, 88] == Int64[]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpooagcocp.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpooagcocp.jl:20\\nTest Summary: | Fail  Total\\\
    ntest set      |    4      4\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu5w0009z.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpu5w0009z.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu5w0009z.jl:20\ntest set: Test Failed at /tmp/tmpu5w0009z.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpu5w0009z.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu5w0009z.jl:20\ntest set: Test Failed at /tmp/tmpu5w0009z.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpu5w0009z.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu5w0009z.jl:20\ntest set: Test Failed at /tmp/tmpu5w0009z.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpu5w0009z.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu5w0009z.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu5w0009z.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        return generate_integers(b, a)\n    end\n    if a %\
    \ 2 == 1\n        a += 1\n    end\n    if b % 2 == 1\n        b -= 1\n    end\n\
    \    return collect(a:2:b)\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpup500juh.jl:27\\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpup500juh.jl:27\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpup500juh.jl:26\\ntest set: Test Failed at /tmp/tmpup500juh.jl:28\\\
    n  Expression: candidate(10, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpup500juh.jl:28\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpup500juh.jl:26\\ntest set: Test Failed at /tmp/tmpup500juh.jl:29\\\
    n  Expression: candidate(132, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8,\
    \ 10, 12, 14, 16, 18, 20  \\xe2\\x80\\xa6  114, 116, 118, 120, 122, 124, 126,\
    \ 128, 130, 132] == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpup500juh.jl:29\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpup500juh.jl:26\\ntest set: Test Failed at /tmp/tmpup500juh.jl:30\\\
    n  Expression: candidate(17, 89) == Vector{Int64}([])\\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \\xe2\\x80\\xa6  70, 72, 74, 76, 78, 80, 82,\
    \ 84, 86, 88] == Int64[]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpup500juh.jl:30\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpup500juh.jl:26\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i = a:2:b]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7al9krw4.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7al9krw4.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7al9krw4.jl:20\ntest set: Test Failed at /tmp/tmp7al9krw4.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp7al9krw4.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7al9krw4.jl:20\ntest set: Test Failed at /tmp/tmp7al9krw4.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp7al9krw4.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7al9krw4.jl:20\ntest set: Test Failed at /tmp/tmp7al9krw4.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [17, 19,\
    \ 21, 23, 25, 27, 29, 31, 33, 35  \u2026  71, 73, 75, 77, 79, 81, 83, 85, 87,\
    \ 89] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmp7al9krw4.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7al9krw4.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7al9krw4.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [x for x in a:b if\
    \ x % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpcxvrk734.jl:21\\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpcxvrk734.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpcxvrk734.jl:20\\ntest set: Test Failed at /tmp/tmpcxvrk734.jl:22\\\
    n  Expression: candidate(10, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpcxvrk734.jl:22\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpcxvrk734.jl:20\\ntest set: Test Failed at /tmp/tmpcxvrk734.jl:23\\\
    n  Expression: candidate(132, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8,\
    \ 10, 12, 14, 16, 18, 20  \\xe2\\x80\\xa6  114, 116, 118, 120, 122, 124, 126,\
    \ 128, 130, 132] == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpcxvrk734.jl:23\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpcxvrk734.jl:20\\ntest set: Test Failed at /tmp/tmpcxvrk734.jl:24\\\
    n  Expression: candidate(17, 89) == Vector{Int64}([])\\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \\xe2\\x80\\xa6  70, 72, 74, 76, 78, 80, 82,\
    \ 84, 86, 88] == Int64[]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpcxvrk734.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpcxvrk734.jl:20\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3xx6xv1s.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3xx6xv1s.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3xx6xv1s.jl:20\ntest set: Test Failed at /tmp/tmp3xx6xv1s.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp3xx6xv1s.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3xx6xv1s.jl:20\ntest set: Test Failed at /tmp/tmp3xx6xv1s.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp3xx6xv1s.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3xx6xv1s.jl:20\ntest set: Test Failed at /tmp/tmp3xx6xv1s.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmp3xx6xv1s.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3xx6xv1s.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3xx6xv1s.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp31g1brbb.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp31g1brbb.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp31g1brbb.jl:20\ntest set: Test Failed at /tmp/tmp31g1brbb.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp31g1brbb.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp31g1brbb.jl:20\ntest set: Test Failed at /tmp/tmp31g1brbb.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp31g1brbb.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp31g1brbb.jl:20\ntest set: Test Failed at /tmp/tmp31g1brbb.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmp31g1brbb.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp31g1brbb.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp31g1brbb.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpg_ji2g9w.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg_ji2g9w.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg_ji2g9w.jl:20\ntest set: Test Failed at /tmp/tmpg_ji2g9w.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpg_ji2g9w.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg_ji2g9w.jl:20\ntest set: Test Failed at /tmp/tmpg_ji2g9w.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpg_ji2g9w.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg_ji2g9w.jl:20\ntest set: Test Failed at /tmp/tmpg_ji2g9w.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpg_ji2g9w.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg_ji2g9w.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg_ji2g9w.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwvtxf2vb.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwvtxf2vb.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwvtxf2vb.jl:20\ntest set: Test Failed at /tmp/tmpwvtxf2vb.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpwvtxf2vb.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwvtxf2vb.jl:20\ntest set: Test Failed at /tmp/tmpwvtxf2vb.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpwvtxf2vb.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwvtxf2vb.jl:20\ntest set: Test Failed at /tmp/tmpwvtxf2vb.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpwvtxf2vb.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwvtxf2vb.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwvtxf2vb.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph2r_vqs8.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmph2r_vqs8.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph2r_vqs8.jl:20\ntest set: Test Failed at /tmp/tmph2r_vqs8.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmph2r_vqs8.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph2r_vqs8.jl:20\ntest set: Test Failed at /tmp/tmph2r_vqs8.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmph2r_vqs8.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph2r_vqs8.jl:20\ntest set: Test Failed at /tmp/tmph2r_vqs8.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmph2r_vqs8.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph2r_vqs8.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph2r_vqs8.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp94hhn94i.jl:21\\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp94hhn94i.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp94hhn94i.jl:20\\ntest set: Test Failed at /tmp/tmp94hhn94i.jl:22\\\
    n  Expression: candidate(10, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp94hhn94i.jl:22\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp94hhn94i.jl:20\\ntest set: Test Failed at /tmp/tmp94hhn94i.jl:23\\\
    n  Expression: candidate(132, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8,\
    \ 10, 12, 14, 16, 18, 20  \\xe2\\x80\\xa6  114, 116, 118, 120, 122, 124, 126,\
    \ 128, 130, 132] == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp94hhn94i.jl:23\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp94hhn94i.jl:20\\ntest set: Test Failed at /tmp/tmp94hhn94i.jl:24\\\
    n  Expression: candidate(17, 89) == Vector{Int64}([])\\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \\xe2\\x80\\xa6  70, 72, 74, 76, 78, 80, 82,\
    \ 84, 86, 88] == Int64[]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp94hhn94i.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp94hhn94i.jl:20\\nTest Summary: | Fail  Total\\\
    ntest set      |    4      4\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7__iem46.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7__iem46.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7__iem46.jl:20\ntest set: Test Failed at /tmp/tmp7__iem46.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp7__iem46.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7__iem46.jl:20\ntest set: Test Failed at /tmp/tmp7__iem46.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp7__iem46.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7__iem46.jl:20\ntest set: Test Failed at /tmp/tmp7__iem46.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmp7__iem46.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7__iem46.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7__iem46.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8kf_fgpy.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8kf_fgpy.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8kf_fgpy.jl:20\ntest set: Test Failed at /tmp/tmp8kf_fgpy.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp8kf_fgpy.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8kf_fgpy.jl:20\ntest set: Test Failed at /tmp/tmp8kf_fgpy.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp8kf_fgpy.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8kf_fgpy.jl:20\ntest set: Test Failed at /tmp/tmp8kf_fgpy.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmp8kf_fgpy.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8kf_fgpy.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8kf_fgpy.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        return generate_integers(b, a)\n    end\n    if a %\
    \ 2 == 1\n        a += 1\n    end\n    if b % 2 == 1\n        b -= 1\n    end\n\
    \    if a > b\n        return []\n    end\n    return collect(a:2:b)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0d0fg6f6.jl:30\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0d0fg6f6.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0d0fg6f6.jl:29\ntest set: Test Failed at /tmp/tmp0d0fg6f6.jl:31\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp0d0fg6f6.jl:31\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0d0fg6f6.jl:29\ntest set: Test Failed at /tmp/tmp0d0fg6f6.jl:32\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp0d0fg6f6.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0d0fg6f6.jl:29\ntest set: Test Failed at /tmp/tmp0d0fg6f6.jl:33\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmp0d0fg6f6.jl:33\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0d0fg6f6.jl:29\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0d0fg6f6.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmphe4_ysg9.jl:21\\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmphe4_ysg9.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmphe4_ysg9.jl:20\\ntest set: Test Failed at /tmp/tmphe4_ysg9.jl:22\\\
    n  Expression: candidate(10, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmphe4_ysg9.jl:22\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmphe4_ysg9.jl:20\\ntest set: Test Failed at /tmp/tmphe4_ysg9.jl:23\\\
    n  Expression: candidate(132, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8,\
    \ 10, 12, 14, 16, 18, 20  \\xe2\\x80\\xa6  114, 116, 118, 120, 122, 124, 126,\
    \ 128, 130, 132] == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmphe4_ysg9.jl:23\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmphe4_ysg9.jl:20\\ntest set: Test Failed at /tmp/tmphe4_ysg9.jl:24\\\
    n  Expression: candidate(17, 89) == Vector{Int64}([])\\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \\xe2\\x80\\xa6  70, 72, 74, 76, 78, 80, 82,\
    \ 84, 86, 88] == Int64[]\\nStacktrace:\\n [1] top-level scope at /tmp/tmphe4_ysg9.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmphe4_ysg9.jl:20\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppmj1eqvp.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppmj1eqvp.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppmj1eqvp.jl:20\ntest set: Test Failed at /tmp/tmppmj1eqvp.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmppmj1eqvp.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppmj1eqvp.jl:20\ntest set: Test Failed at /tmp/tmppmj1eqvp.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmppmj1eqvp.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppmj1eqvp.jl:20\ntest set: Test Failed at /tmp/tmppmj1eqvp.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmppmj1eqvp.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppmj1eqvp.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppmj1eqvp.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph2jhka1p.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmph2jhka1p.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph2jhka1p.jl:20\ntest set: Test Failed at /tmp/tmph2jhka1p.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmph2jhka1p.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph2jhka1p.jl:20\ntest set: Test Failed at /tmp/tmph2jhka1p.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmph2jhka1p.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph2jhka1p.jl:20\ntest set: Test Failed at /tmp/tmph2jhka1p.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmph2jhka1p.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph2jhka1p.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph2jhka1p.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp19uo6we2.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp19uo6we2.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp19uo6we2.jl:20\ntest set: Test Failed at /tmp/tmp19uo6we2.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp19uo6we2.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp19uo6we2.jl:20\ntest set: Test Failed at /tmp/tmp19uo6we2.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp19uo6we2.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp19uo6we2.jl:20\ntest set: Test Failed at /tmp/tmp19uo6we2.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmp19uo6we2.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp19uo6we2.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp19uo6we2.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpepc25qni.jl:21\\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpepc25qni.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpepc25qni.jl:20\\ntest set: Test Failed at /tmp/tmpepc25qni.jl:22\\\
    n  Expression: candidate(10, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpepc25qni.jl:22\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpepc25qni.jl:20\\ntest set: Test Failed at /tmp/tmpepc25qni.jl:23\\\
    n  Expression: candidate(132, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8,\
    \ 10, 12, 14, 16, 18, 20  \\xe2\\x80\\xa6  114, 116, 118, 120, 122, 124, 126,\
    \ 128, 130, 132] == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpepc25qni.jl:23\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpepc25qni.jl:20\\ntest set: Test Failed at /tmp/tmpepc25qni.jl:24\\\
    n  Expression: candidate(17, 89) == Vector{Int64}([])\\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \\xe2\\x80\\xa6  70, 72, 74, 76, 78, 80, 82,\
    \ 84, 86, 88] == Int64[]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpepc25qni.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpepc25qni.jl:20\\nTest Summary: | Fail  Total\\\
    n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9219650d.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9219650d.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9219650d.jl:20\ntest set: Test Failed at /tmp/tmp9219650d.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp9219650d.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9219650d.jl:20\ntest set: Test Failed at /tmp/tmp9219650d.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp9219650d.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9219650d.jl:20\ntest set: Test Failed at /tmp/tmp9219650d.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmp9219650d.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9219650d.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9219650d.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    if a % 2 == 1\n        a +=\
    \ 1\n    end\n    if b % 2 == 1\n        b -= 1\n    end\n    if a > b\n     \
    \   return []\n    end\n    return collect(a:2:b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5h269vra.jl:30\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5h269vra.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5h269vra.jl:29\ntest set: Test Failed at /tmp/tmp5h269vra.jl:31\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp5h269vra.jl:31\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5h269vra.jl:29\ntest set: Test Failed at /tmp/tmp5h269vra.jl:32\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp5h269vra.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5h269vra.jl:29\ntest set: Test Failed at /tmp/tmp5h269vra.jl:33\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmp5h269vra.jl:33\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5h269vra.jl:29\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5h269vra.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgx01cajz.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgx01cajz.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgx01cajz.jl:20\ntest set: Test Failed at /tmp/tmpgx01cajz.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpgx01cajz.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgx01cajz.jl:20\ntest set: Test Failed at /tmp/tmpgx01cajz.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpgx01cajz.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgx01cajz.jl:20\ntest set: Test Failed at /tmp/tmpgx01cajz.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpgx01cajz.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgx01cajz.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgx01cajz.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqd6flfot.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqd6flfot.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqd6flfot.jl:20\ntest set: Test Failed at /tmp/tmpqd6flfot.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpqd6flfot.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqd6flfot.jl:20\ntest set: Test Failed at /tmp/tmpqd6flfot.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpqd6flfot.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqd6flfot.jl:20\ntest set: Test Failed at /tmp/tmpqd6flfot.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpqd6flfot.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqd6flfot.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqd6flfot.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmplevssvgw.jl:21\\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmplevssvgw.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmplevssvgw.jl:20\\ntest set: Test Failed at /tmp/tmplevssvgw.jl:22\\\
    n  Expression: candidate(10, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmplevssvgw.jl:22\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmplevssvgw.jl:20\\ntest set: Test Failed at /tmp/tmplevssvgw.jl:23\\\
    n  Expression: candidate(132, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8,\
    \ 10, 12, 14, 16, 18, 20  \\xe2\\x80\\xa6  114, 116, 118, 120, 122, 124, 126,\
    \ 128, 130, 132] == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmplevssvgw.jl:23\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmplevssvgw.jl:20\\ntest set: Test Failed at /tmp/tmplevssvgw.jl:24\\\
    n  Expression: candidate(17, 89) == Vector{Int64}([])\\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \\xe2\\x80\\xa6  70, 72, 74, 76, 78, 80, 82,\
    \ 84, 86, 88] == Int64[]\\nStacktrace:\\n [1] top-level scope at /tmp/tmplevssvgw.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmplevssvgw.jl:20\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp583tbopv.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp583tbopv.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp583tbopv.jl:20\ntest set: Test Failed at /tmp/tmp583tbopv.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp583tbopv.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp583tbopv.jl:20\ntest set: Test Failed at /tmp/tmp583tbopv.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp583tbopv.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp583tbopv.jl:20\ntest set: Test Failed at /tmp/tmp583tbopv.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmp583tbopv.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp583tbopv.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp583tbopv.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpvt54he4z.jl:21\\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpvt54he4z.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpvt54he4z.jl:20\\ntest set: Test Failed at /tmp/tmpvt54he4z.jl:22\\\
    n  Expression: candidate(10, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpvt54he4z.jl:22\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpvt54he4z.jl:20\\ntest set: Test Failed at /tmp/tmpvt54he4z.jl:23\\\
    n  Expression: candidate(132, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8,\
    \ 10, 12, 14, 16, 18, 20  \\xe2\\x80\\xa6  114, 116, 118, 120, 122, 124, 126,\
    \ 128, 130, 132] == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpvt54he4z.jl:23\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpvt54he4z.jl:20\\ntest set: Test Failed at /tmp/tmpvt54he4z.jl:24\\\
    n  Expression: candidate(17, 89) == Vector{Int64}([])\\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \\xe2\\x80\\xa6  70, 72, 74, 76, 78, 80, 82,\
    \ 84, 86, 88] == Int64[]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpvt54he4z.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpvt54he4z.jl:20\\nTest Summary: | Fail  Total\\\
    ntest set      |    4      4\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppvz8prjd.jl:18\n  Test threw exception\n\
    \  Expression: candidate(2, 10) == [2, 4, 6, 8]\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{Int64,1}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmppvz8prjd.jl:12\n\
    \   [2] top-level scope at /tmp/tmppvz8prjd.jl:18\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmppvz8prjd.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmppvz8prjd.jl:19\n  Test threw exception\n  Expression: candidate(10,\
    \ 2) == [2, 4, 6, 8]\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Array{Int64,1}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::AbstractArray) where T<:Array at array.jl:533\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n    convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmppvz8prjd.jl:12\n\
    \   [2] top-level scope at /tmp/tmppvz8prjd.jl:19\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmppvz8prjd.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmppvz8prjd.jl:20\n  Test threw exception\n  Expression: candidate(132,\
    \ 2) == [2, 4, 6, 8]\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Array{Int64,1}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::AbstractArray) where T<:Array at array.jl:533\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n    convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmppvz8prjd.jl:12\n\
    \   [2] top-level scope at /tmp/tmppvz8prjd.jl:20\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmppvz8prjd.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmppvz8prjd.jl:21\n  Test threw exception\n  Expression: candidate(17,\
    \ 89) == Vector{Int64}([])\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Array{Int64,1}\n  Closest candidates are:\n   \
    \ convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] generate_integers(::Int64, ::Int64) at /tmp/tmppvz8prjd.jl:12\n\
    \   [2] top-level scope at /tmp/tmppvz8prjd.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmppvz8prjd.jl:17\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppvz8prjd.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp1iaex5a.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp1iaex5a.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp1iaex5a.jl:20\ntest set: Test Failed at /tmp/tmpp1iaex5a.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpp1iaex5a.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp1iaex5a.jl:20\ntest set: Test Failed at /tmp/tmpp1iaex5a.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpp1iaex5a.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp1iaex5a.jl:20\ntest set: Test Failed at /tmp/tmpp1iaex5a.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpp1iaex5a.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp1iaex5a.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp1iaex5a.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_c0nci2k.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_c0nci2k.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_c0nci2k.jl:20\ntest set: Test Failed at /tmp/tmp_c0nci2k.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp_c0nci2k.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_c0nci2k.jl:20\ntest set: Test Failed at /tmp/tmp_c0nci2k.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp_c0nci2k.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_c0nci2k.jl:20\ntest set: Test Failed at /tmp/tmp_c0nci2k.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmp_c0nci2k.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_c0nci2k.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_c0nci2k.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxb2llvyk.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxb2llvyk.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxb2llvyk.jl:20\ntest set: Test Failed at /tmp/tmpxb2llvyk.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpxb2llvyk.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxb2llvyk.jl:20\ntest set: Test Failed at /tmp/tmpxb2llvyk.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpxb2llvyk.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxb2llvyk.jl:20\ntest set: Test Failed at /tmp/tmpxb2llvyk.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpxb2llvyk.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxb2llvyk.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxb2llvyk.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpjdtmr9uk.jl:21\\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpjdtmr9uk.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpjdtmr9uk.jl:20\\ntest set: Test Failed at /tmp/tmpjdtmr9uk.jl:22\\\
    n  Expression: candidate(10, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpjdtmr9uk.jl:22\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpjdtmr9uk.jl:20\\ntest set: Test Failed at /tmp/tmpjdtmr9uk.jl:23\\\
    n  Expression: candidate(132, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8,\
    \ 10, 12, 14, 16, 18, 20  \\xe2\\x80\\xa6  114, 116, 118, 120, 122, 124, 126,\
    \ 128, 130, 132] == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpjdtmr9uk.jl:23\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpjdtmr9uk.jl:20\\ntest set: Test Failed at /tmp/tmpjdtmr9uk.jl:24\\\
    n  Expression: candidate(17, 89) == Vector{Int64}([])\\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \\xe2\\x80\\xa6  70, 72, 74, 76, 78, 80, 82,\
    \ 84, 86, 88] == Int64[]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpjdtmr9uk.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpjdtmr9uk.jl:20\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppjxw3_3r.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppjxw3_3r.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppjxw3_3r.jl:20\ntest set: Test Failed at /tmp/tmppjxw3_3r.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmppjxw3_3r.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppjxw3_3r.jl:20\ntest set: Test Failed at /tmp/tmppjxw3_3r.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmppjxw3_3r.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppjxw3_3r.jl:20\ntest set: Test Failed at /tmp/tmppjxw3_3r.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmppjxw3_3r.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppjxw3_3r.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppjxw3_3r.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp_amedboa.jl:21\\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp_amedboa.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp_amedboa.jl:20\\ntest set: Test Failed at /tmp/tmp_amedboa.jl:22\\\
    n  Expression: candidate(10, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp_amedboa.jl:22\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp_amedboa.jl:20\\ntest set: Test Failed at /tmp/tmp_amedboa.jl:23\\\
    n  Expression: candidate(132, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8,\
    \ 10, 12, 14, 16, 18, 20  \\xe2\\x80\\xa6  114, 116, 118, 120, 122, 124, 126,\
    \ 128, 130, 132] == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp_amedboa.jl:23\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp_amedboa.jl:20\\ntest set: Test Failed at /tmp/tmp_amedboa.jl:24\\\
    n  Expression: candidate(17, 89) == Vector{Int64}([])\\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \\xe2\\x80\\xa6  70, 72, 74, 76, 78, 80, 82,\
    \ 84, 86, 88] == Int64[]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp_amedboa.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp_amedboa.jl:20\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [x for x in a:b if\
    \ x % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_td6gb7r.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_td6gb7r.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_td6gb7r.jl:20\ntest set: Test Failed at /tmp/tmp_td6gb7r.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp_td6gb7r.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_td6gb7r.jl:20\ntest set: Test Failed at /tmp/tmp_td6gb7r.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp_td6gb7r.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_td6gb7r.jl:20\ntest set: Test Failed at /tmp/tmp_td6gb7r.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmp_td6gb7r.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_td6gb7r.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_td6gb7r.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmptmswldpy.jl:21\\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmptmswldpy.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmptmswldpy.jl:20\\ntest set: Test Failed at /tmp/tmptmswldpy.jl:22\\\
    n  Expression: candidate(10, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmptmswldpy.jl:22\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmptmswldpy.jl:20\\ntest set: Test Failed at /tmp/tmptmswldpy.jl:23\\\
    n  Expression: candidate(132, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8,\
    \ 10, 12, 14, 16, 18, 20  \\xe2\\x80\\xa6  114, 116, 118, 120, 122, 124, 126,\
    \ 128, 130, 132] == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmptmswldpy.jl:23\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmptmswldpy.jl:20\\ntest set: Test Failed at /tmp/tmptmswldpy.jl:24\\\
    n  Expression: candidate(17, 89) == Vector{Int64}([])\\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \\xe2\\x80\\xa6  70, 72, 74, 76, 78, 80, 82,\
    \ 84, 86, 88] == Int64[]\\nStacktrace:\\n [1] top-level scope at /tmp/tmptmswldpy.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmptmswldpy.jl:20\\nTest Summary: | Fail  Total\\\
    ntest set      |    4      4\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a == b\n        if a % 2 == 0\n            return [a]\n        else\n\
    \            return []\n        end\n    end\n    if a > b\n        a, b = b,\
    \ a\n    end\n    if a % 2 == 0\n        return [i for i = a:2:b]\n    else\n\
    \        return [i for i = a+1:2:b]\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t\
    @test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6,\
    \ 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpucka303z.jl:32\\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpucka303z.jl:32\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpucka303z.jl:31\\ntest set: Test Failed at /tmp/tmpucka303z.jl:33\\\
    n  Expression: candidate(10, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpucka303z.jl:33\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpucka303z.jl:31\\ntest set: Test Failed at /tmp/tmpucka303z.jl:34\\\
    n  Expression: candidate(132, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8,\
    \ 10, 12, 14, 16, 18, 20  \\xe2\\x80\\xa6  114, 116, 118, 120, 122, 124, 126,\
    \ 128, 130, 132] == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpucka303z.jl:34\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpucka303z.jl:31\\ntest set: Test Failed at /tmp/tmpucka303z.jl:35\\\
    n  Expression: candidate(17, 89) == Vector{Int64}([])\\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \\xe2\\x80\\xa6  70, 72, 74, 76, 78, 80, 82,\
    \ 84, 86, 88] == Int64[]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpucka303z.jl:35\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpucka303z.jl:31\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpctq3sm2t.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpctq3sm2t.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpctq3sm2t.jl:20\ntest set: Test Failed at /tmp/tmpctq3sm2t.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpctq3sm2t.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpctq3sm2t.jl:20\ntest set: Test Failed at /tmp/tmpctq3sm2t.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpctq3sm2t.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpctq3sm2t.jl:20\ntest set: Test Failed at /tmp/tmpctq3sm2t.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpctq3sm2t.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpctq3sm2t.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpctq3sm2t.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp11l81f_1.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp11l81f_1.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp11l81f_1.jl:20\ntest set: Test Failed at /tmp/tmp11l81f_1.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp11l81f_1.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp11l81f_1.jl:20\ntest set: Test Failed at /tmp/tmp11l81f_1.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp11l81f_1.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp11l81f_1.jl:20\ntest set: Test Failed at /tmp/tmp11l81f_1.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmp11l81f_1.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp11l81f_1.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp11l81f_1.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyj9rrkl8.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyj9rrkl8.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyj9rrkl8.jl:20\ntest set: Test Failed at /tmp/tmpyj9rrkl8.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpyj9rrkl8.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyj9rrkl8.jl:20\ntest set: Test Failed at /tmp/tmpyj9rrkl8.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpyj9rrkl8.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyj9rrkl8.jl:20\ntest set: Test Failed at /tmp/tmpyj9rrkl8.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpyj9rrkl8.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyj9rrkl8.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyj9rrkl8.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpu8nts8r5.jl:21\\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpu8nts8r5.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpu8nts8r5.jl:20\\ntest set: Test Failed at /tmp/tmpu8nts8r5.jl:22\\\
    n  Expression: candidate(10, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpu8nts8r5.jl:22\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpu8nts8r5.jl:20\\ntest set: Test Failed at /tmp/tmpu8nts8r5.jl:23\\\
    n  Expression: candidate(132, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8,\
    \ 10, 12, 14, 16, 18, 20  \\xe2\\x80\\xa6  114, 116, 118, 120, 122, 124, 126,\
    \ 128, 130, 132] == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpu8nts8r5.jl:23\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpu8nts8r5.jl:20\\ntest set: Test Failed at /tmp/tmpu8nts8r5.jl:24\\\
    n  Expression: candidate(17, 89) == Vector{Int64}([])\\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \\xe2\\x80\\xa6  70, 72, 74, 76, 78, 80, 82,\
    \ 84, 86, 88] == Int64[]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpu8nts8r5.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpu8nts8r5.jl:20\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzm4vny1q.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzm4vny1q.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzm4vny1q.jl:20\ntest set: Test Failed at /tmp/tmpzm4vny1q.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpzm4vny1q.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzm4vny1q.jl:20\ntest set: Test Failed at /tmp/tmpzm4vny1q.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpzm4vny1q.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzm4vny1q.jl:20\ntest set: Test Failed at /tmp/tmpzm4vny1q.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpzm4vny1q.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzm4vny1q.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzm4vny1q.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyyox2wtc.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyyox2wtc.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyyox2wtc.jl:20\ntest set: Test Failed at /tmp/tmpyyox2wtc.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpyyox2wtc.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyyox2wtc.jl:20\ntest set: Test Failed at /tmp/tmpyyox2wtc.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpyyox2wtc.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyyox2wtc.jl:20\ntest set: Test Failed at /tmp/tmpyyox2wtc.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpyyox2wtc.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyyox2wtc.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyyox2wtc.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzdqk1985.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzdqk1985.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzdqk1985.jl:20\ntest set: Test Failed at /tmp/tmpzdqk1985.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpzdqk1985.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzdqk1985.jl:20\ntest set: Test Failed at /tmp/tmpzdqk1985.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpzdqk1985.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzdqk1985.jl:20\ntest set: Test Failed at /tmp/tmpzdqk1985.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpzdqk1985.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzdqk1985.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzdqk1985.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps3mpsmuh.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmps3mpsmuh.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps3mpsmuh.jl:20\ntest set: Test Failed at /tmp/tmps3mpsmuh.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmps3mpsmuh.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps3mpsmuh.jl:20\ntest set: Test Failed at /tmp/tmps3mpsmuh.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmps3mpsmuh.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps3mpsmuh.jl:20\ntest set: Test Failed at /tmp/tmps3mpsmuh.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmps3mpsmuh.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps3mpsmuh.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps3mpsmuh.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcyi9t5au.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcyi9t5au.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcyi9t5au.jl:20\ntest set: Test Failed at /tmp/tmpcyi9t5au.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpcyi9t5au.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcyi9t5au.jl:20\ntest set: Test Failed at /tmp/tmpcyi9t5au.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpcyi9t5au.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcyi9t5au.jl:20\ntest set: Test Failed at /tmp/tmpcyi9t5au.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpcyi9t5au.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcyi9t5au.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcyi9t5au.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4_s0xx2r.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4_s0xx2r.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4_s0xx2r.jl:20\ntest set: Test Failed at /tmp/tmp4_s0xx2r.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp4_s0xx2r.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4_s0xx2r.jl:20\ntest set: Test Failed at /tmp/tmp4_s0xx2r.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp4_s0xx2r.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4_s0xx2r.jl:20\ntest set: Test Failed at /tmp/tmp4_s0xx2r.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmp4_s0xx2r.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4_s0xx2r.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4_s0xx2r.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjeoyhoxt.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjeoyhoxt.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjeoyhoxt.jl:20\ntest set: Test Failed at /tmp/tmpjeoyhoxt.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpjeoyhoxt.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjeoyhoxt.jl:20\ntest set: Test Failed at /tmp/tmpjeoyhoxt.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpjeoyhoxt.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjeoyhoxt.jl:20\ntest set: Test Failed at /tmp/tmpjeoyhoxt.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpjeoyhoxt.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjeoyhoxt.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjeoyhoxt.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        return generate_integers(b, a)\n    end\n    if a %\
    \ 2 == 1\n        a += 1\n    end\n    if b % 2 == 1\n        b -= 1\n    end\n\
    \    if a > b\n        return []\n    end\n    return collect(a:2:b)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4y7ps6ax.jl:30\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4y7ps6ax.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4y7ps6ax.jl:29\ntest set: Test Failed at /tmp/tmp4y7ps6ax.jl:31\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp4y7ps6ax.jl:31\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4y7ps6ax.jl:29\ntest set: Test Failed at /tmp/tmp4y7ps6ax.jl:32\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp4y7ps6ax.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4y7ps6ax.jl:29\ntest set: Test Failed at /tmp/tmp4y7ps6ax.jl:33\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmp4y7ps6ax.jl:33\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4y7ps6ax.jl:29\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4y7ps6ax.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        return generate_integers(b, a)\n    end\n    if a %\
    \ 2 == 1\n        a += 1\n    end\n    if b % 2 == 1\n        b -= 1\n    end\n\
    \    if a > b\n        return []\n    end\n    return collect(a:2:b)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpeb3jn8c2.jl:30\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpeb3jn8c2.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpeb3jn8c2.jl:29\ntest set: Test Failed at /tmp/tmpeb3jn8c2.jl:31\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpeb3jn8c2.jl:31\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpeb3jn8c2.jl:29\ntest set: Test Failed at /tmp/tmpeb3jn8c2.jl:32\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpeb3jn8c2.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpeb3jn8c2.jl:29\ntest set: Test Failed at /tmp/tmpeb3jn8c2.jl:33\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpeb3jn8c2.jl:33\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpeb3jn8c2.jl:29\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeb3jn8c2.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsx9iabmo.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsx9iabmo.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsx9iabmo.jl:20\ntest set: Test Failed at /tmp/tmpsx9iabmo.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpsx9iabmo.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsx9iabmo.jl:20\ntest set: Test Failed at /tmp/tmpsx9iabmo.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpsx9iabmo.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsx9iabmo.jl:20\ntest set: Test Failed at /tmp/tmpsx9iabmo.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpsx9iabmo.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsx9iabmo.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsx9iabmo.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpof5s8bkx.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpof5s8bkx.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpof5s8bkx.jl:20\ntest set: Test Failed at /tmp/tmpof5s8bkx.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpof5s8bkx.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpof5s8bkx.jl:20\ntest set: Test Failed at /tmp/tmpof5s8bkx.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpof5s8bkx.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpof5s8bkx.jl:20\ntest set: Test Failed at /tmp/tmpof5s8bkx.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpof5s8bkx.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpof5s8bkx.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpof5s8bkx.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7aeoxcx1.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7aeoxcx1.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7aeoxcx1.jl:20\ntest set: Test Failed at /tmp/tmp7aeoxcx1.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp7aeoxcx1.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7aeoxcx1.jl:20\ntest set: Test Failed at /tmp/tmp7aeoxcx1.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp7aeoxcx1.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7aeoxcx1.jl:20\ntest set: Test Failed at /tmp/tmp7aeoxcx1.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmp7aeoxcx1.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7aeoxcx1.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7aeoxcx1.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphqy4u03i.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphqy4u03i.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphqy4u03i.jl:20\ntest set: Test Failed at /tmp/tmphqy4u03i.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmphqy4u03i.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphqy4u03i.jl:20\ntest set: Test Failed at /tmp/tmphqy4u03i.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmphqy4u03i.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphqy4u03i.jl:20\ntest set: Test Failed at /tmp/tmphqy4u03i.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmphqy4u03i.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphqy4u03i.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphqy4u03i.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a <= b\n        return [i for i in a:b if i % 2 == 0]\n    else\n \
    \       return [i for i in b:a if i % 2 == 0]\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp0bgox9g2.jl:22\\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp0bgox9g2.jl:22\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp0bgox9g2.jl:21\\ntest set: Test Failed at /tmp/tmp0bgox9g2.jl:23\\\
    n  Expression: candidate(10, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp0bgox9g2.jl:23\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp0bgox9g2.jl:21\\ntest set: Test Failed at /tmp/tmp0bgox9g2.jl:24\\\
    n  Expression: candidate(132, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8,\
    \ 10, 12, 14, 16, 18, 20  \\xe2\\x80\\xa6  114, 116, 118, 120, 122, 124, 126,\
    \ 128, 130, 132] == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp0bgox9g2.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp0bgox9g2.jl:21\\ntest set: Test Failed at /tmp/tmp0bgox9g2.jl:25\\\
    n  Expression: candidate(17, 89) == Vector{Int64}([])\\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \\xe2\\x80\\xa6  70, 72, 74, 76, 78, 80, 82,\
    \ 84, 86, 88] == Int64[]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp0bgox9g2.jl:25\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp0bgox9g2.jl:21\\nTest Summary: | Fail  Total\\\
    ntest set      |    4      4\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpiche19m1.jl:21\\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpiche19m1.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpiche19m1.jl:20\\ntest set: Test Failed at /tmp/tmpiche19m1.jl:22\\\
    n  Expression: candidate(10, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpiche19m1.jl:22\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpiche19m1.jl:20\\ntest set: Test Failed at /tmp/tmpiche19m1.jl:23\\\
    n  Expression: candidate(132, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8,\
    \ 10, 12, 14, 16, 18, 20  \\xe2\\x80\\xa6  114, 116, 118, 120, 122, 124, 126,\
    \ 128, 130, 132] == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpiche19m1.jl:23\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpiche19m1.jl:20\\ntest set: Test Failed at /tmp/tmpiche19m1.jl:24\\\
    n  Expression: candidate(17, 89) == Vector{Int64}([])\\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \\xe2\\x80\\xa6  70, 72, 74, 76, 78, 80, 82,\
    \ 84, 86, 88] == Int64[]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpiche19m1.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpiche19m1.jl:20\\nTest Summary: | Fail  Total\\\
    ntest set      |    4      4\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        return generate_integers(b, a)\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp0cmn5533.jl:21\\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp0cmn5533.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp0cmn5533.jl:20\\ntest set: Test Failed at /tmp/tmp0cmn5533.jl:22\\\
    n  Expression: candidate(10, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp0cmn5533.jl:22\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp0cmn5533.jl:20\\ntest set: Test Failed at /tmp/tmp0cmn5533.jl:23\\\
    n  Expression: candidate(132, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8,\
    \ 10, 12, 14, 16, 18, 20  \\xe2\\x80\\xa6  114, 116, 118, 120, 122, 124, 126,\
    \ 128, 130, 132] == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp0cmn5533.jl:23\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp0cmn5533.jl:20\\ntest set: Test Failed at /tmp/tmp0cmn5533.jl:24\\\
    n  Expression: candidate(17, 89) == Vector{Int64}([])\\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \\xe2\\x80\\xa6  70, 72, 74, 76, 78, 80, 82,\
    \ 84, 86, 88] == Int64[]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp0cmn5533.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp0cmn5533.jl:20\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpud3pa87f.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpud3pa87f.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpud3pa87f.jl:20\ntest set: Test Failed at /tmp/tmpud3pa87f.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpud3pa87f.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpud3pa87f.jl:20\ntest set: Test Failed at /tmp/tmpud3pa87f.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpud3pa87f.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpud3pa87f.jl:20\ntest set: Test Failed at /tmp/tmpud3pa87f.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpud3pa87f.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpud3pa87f.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpud3pa87f.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfu07tn93.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfu07tn93.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfu07tn93.jl:20\ntest set: Test Failed at /tmp/tmpfu07tn93.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpfu07tn93.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfu07tn93.jl:20\ntest set: Test Failed at /tmp/tmpfu07tn93.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpfu07tn93.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfu07tn93.jl:20\ntest set: Test Failed at /tmp/tmpfu07tn93.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpfu07tn93.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfu07tn93.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfu07tn93.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9ws500mt.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9ws500mt.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9ws500mt.jl:20\ntest set: Test Failed at /tmp/tmp9ws500mt.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp9ws500mt.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9ws500mt.jl:20\ntest set: Test Failed at /tmp/tmp9ws500mt.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp9ws500mt.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9ws500mt.jl:20\ntest set: Test Failed at /tmp/tmp9ws500mt.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmp9ws500mt.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9ws500mt.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9ws500mt.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpibfhxwpr.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpibfhxwpr.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpibfhxwpr.jl:20\ntest set: Test Failed at /tmp/tmpibfhxwpr.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpibfhxwpr.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpibfhxwpr.jl:20\ntest set: Test Failed at /tmp/tmpibfhxwpr.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpibfhxwpr.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpibfhxwpr.jl:20\ntest set: Test Failed at /tmp/tmpibfhxwpr.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpibfhxwpr.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpibfhxwpr.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpibfhxwpr.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx53uev8c.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx53uev8c.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx53uev8c.jl:20\ntest set: Test Failed at /tmp/tmpx53uev8c.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpx53uev8c.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx53uev8c.jl:20\ntest set: Test Failed at /tmp/tmpx53uev8c.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpx53uev8c.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx53uev8c.jl:20\ntest set: Test Failed at /tmp/tmpx53uev8c.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpx53uev8c.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx53uev8c.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx53uev8c.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9s9lms5z.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9s9lms5z.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9s9lms5z.jl:20\ntest set: Test Failed at /tmp/tmp9s9lms5z.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp9s9lms5z.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9s9lms5z.jl:20\ntest set: Test Failed at /tmp/tmp9s9lms5z.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp9s9lms5z.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9s9lms5z.jl:20\ntest set: Test Failed at /tmp/tmp9s9lms5z.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmp9s9lms5z.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9s9lms5z.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9s9lms5z.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt4ojqbu0.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt4ojqbu0.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt4ojqbu0.jl:20\ntest set: Test Failed at /tmp/tmpt4ojqbu0.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpt4ojqbu0.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt4ojqbu0.jl:20\ntest set: Test Failed at /tmp/tmpt4ojqbu0.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpt4ojqbu0.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt4ojqbu0.jl:20\ntest set: Test Failed at /tmp/tmpt4ojqbu0.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpt4ojqbu0.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt4ojqbu0.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt4ojqbu0.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpqvv8b1vd.jl:21\\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpqvv8b1vd.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpqvv8b1vd.jl:20\\ntest set: Test Failed at /tmp/tmpqvv8b1vd.jl:22\\\
    n  Expression: candidate(10, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpqvv8b1vd.jl:22\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpqvv8b1vd.jl:20\\ntest set: Test Failed at /tmp/tmpqvv8b1vd.jl:23\\\
    n  Expression: candidate(132, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8,\
    \ 10, 12, 14, 16, 18, 20  \\xe2\\x80\\xa6  114, 116, 118, 120, 122, 124, 126,\
    \ 128, 130, 132] == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpqvv8b1vd.jl:23\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpqvv8b1vd.jl:20\\ntest set: Test Failed at /tmp/tmpqvv8b1vd.jl:24\\\
    n  Expression: candidate(17, 89) == Vector{Int64}([])\\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \\xe2\\x80\\xa6  70, 72, 74, 76, 78, 80, 82,\
    \ 84, 86, 88] == Int64[]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpqvv8b1vd.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpqvv8b1vd.jl:20\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptoye6oll.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptoye6oll.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptoye6oll.jl:20\ntest set: Test Failed at /tmp/tmptoye6oll.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmptoye6oll.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptoye6oll.jl:20\ntest set: Test Failed at /tmp/tmptoye6oll.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmptoye6oll.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptoye6oll.jl:20\ntest set: Test Failed at /tmp/tmptoye6oll.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmptoye6oll.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptoye6oll.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptoye6oll.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp65_9mukz.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp65_9mukz.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp65_9mukz.jl:20\ntest set: Test Failed at /tmp/tmp65_9mukz.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp65_9mukz.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp65_9mukz.jl:20\ntest set: Test Failed at /tmp/tmp65_9mukz.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp65_9mukz.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp65_9mukz.jl:20\ntest set: Test Failed at /tmp/tmp65_9mukz.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmp65_9mukz.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp65_9mukz.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp65_9mukz.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmptg16hoyq.jl:21\\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmptg16hoyq.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmptg16hoyq.jl:20\\ntest set: Test Failed at /tmp/tmptg16hoyq.jl:22\\\
    n  Expression: candidate(10, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmptg16hoyq.jl:22\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmptg16hoyq.jl:20\\ntest set: Test Failed at /tmp/tmptg16hoyq.jl:23\\\
    n  Expression: candidate(132, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8,\
    \ 10, 12, 14, 16, 18, 20  \\xe2\\x80\\xa6  114, 116, 118, 120, 122, 124, 126,\
    \ 128, 130, 132] == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmptg16hoyq.jl:23\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmptg16hoyq.jl:20\\ntest set: Test Failed at /tmp/tmptg16hoyq.jl:24\\\
    n  Expression: candidate(17, 89) == Vector{Int64}([])\\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \\xe2\\x80\\xa6  70, 72, 74, 76, 78, 80, 82,\
    \ 84, 86, 88] == Int64[]\\nStacktrace:\\n [1] top-level scope at /tmp/tmptg16hoyq.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmptg16hoyq.jl:20\\nTest Summary: | Fail  Total\\\
    ntest set      |    4      4\\n'"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmptg16hoyq.jl:18\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpj8w_gipp.jl:21\\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpj8w_gipp.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpj8w_gipp.jl:20\\ntest set: Test Failed at /tmp/tmpj8w_gipp.jl:22\\\
    n  Expression: candidate(10, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpj8w_gipp.jl:22\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpj8w_gipp.jl:20\\ntest set: Test Failed at /tmp/tmpj8w_gipp.jl:23\\\
    n  Expression: candidate(132, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8,\
    \ 10, 12, 14, 16, 18, 20  \\xe2\\x80\\xa6  114, 116, 118, 120, 122, 124, 126,\
    \ 128, 130, 132] == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpj8w_gipp.jl:23\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpj8w_gipp.jl:20\\ntest set: Test Failed at /tmp/tmpj8w_gipp.jl:24\\\
    n  Expression: candidate(17, 89) == Vector{Int64}([])\\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \\xe2\\x80\\xa6  70, 72, 74, 76, 78, 80, 82,\
    \ 84, 86, 88] == Int64[]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpj8w_gipp.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpj8w_gipp.jl:20\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb8xt1pdd.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb8xt1pdd.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpb8xt1pdd.jl:20\ntest set: Test Failed at /tmp/tmpb8xt1pdd.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpb8xt1pdd.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpb8xt1pdd.jl:20\ntest set: Test Failed at /tmp/tmpb8xt1pdd.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpb8xt1pdd.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpb8xt1pdd.jl:20\ntest set: Test Failed at /tmp/tmpb8xt1pdd.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpb8xt1pdd.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpb8xt1pdd.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb8xt1pdd.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpi8yh0xnq.jl:21\\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpi8yh0xnq.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpi8yh0xnq.jl:20\\ntest set: Test Failed at /tmp/tmpi8yh0xnq.jl:22\\\
    n  Expression: candidate(10, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpi8yh0xnq.jl:22\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpi8yh0xnq.jl:20\\ntest set: Test Failed at /tmp/tmpi8yh0xnq.jl:23\\\
    n  Expression: candidate(132, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8,\
    \ 10, 12, 14, 16, 18, 20  \\xe2\\x80\\xa6  114, 116, 118, 120, 122, 124, 126,\
    \ 128, 130, 132] == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpi8yh0xnq.jl:23\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpi8yh0xnq.jl:20\\ntest set: Test Failed at /tmp/tmpi8yh0xnq.jl:24\\\
    n  Expression: candidate(17, 89) == Vector{Int64}([])\\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \\xe2\\x80\\xa6  70, 72, 74, 76, 78, 80, 82,\
    \ 84, 86, 88] == Int64[]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpi8yh0xnq.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpi8yh0xnq.jl:20\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd42ckl12.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd42ckl12.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpd42ckl12.jl:20\ntest set: Test Failed at /tmp/tmpd42ckl12.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpd42ckl12.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpd42ckl12.jl:20\ntest set: Test Failed at /tmp/tmpd42ckl12.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpd42ckl12.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpd42ckl12.jl:20\ntest set: Test Failed at /tmp/tmpd42ckl12.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpd42ckl12.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpd42ckl12.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd42ckl12.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmaefhqxd.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmaefhqxd.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmaefhqxd.jl:20\ntest set: Test Failed at /tmp/tmpmaefhqxd.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpmaefhqxd.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmaefhqxd.jl:20\ntest set: Test Failed at /tmp/tmpmaefhqxd.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpmaefhqxd.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmaefhqxd.jl:20\ntest set: Test Failed at /tmp/tmpmaefhqxd.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpmaefhqxd.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmaefhqxd.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmaefhqxd.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbxeqzzmw.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbxeqzzmw.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbxeqzzmw.jl:20\ntest set: Test Failed at /tmp/tmpbxeqzzmw.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpbxeqzzmw.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbxeqzzmw.jl:20\ntest set: Test Failed at /tmp/tmpbxeqzzmw.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpbxeqzzmw.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbxeqzzmw.jl:20\ntest set: Test Failed at /tmp/tmpbxeqzzmw.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpbxeqzzmw.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbxeqzzmw.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbxeqzzmw.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpm17ig_fb.jl:21\\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpm17ig_fb.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpm17ig_fb.jl:20\\ntest set: Test Failed at /tmp/tmpm17ig_fb.jl:22\\\
    n  Expression: candidate(10, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpm17ig_fb.jl:22\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpm17ig_fb.jl:20\\ntest set: Test Failed at /tmp/tmpm17ig_fb.jl:23\\\
    n  Expression: candidate(132, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8,\
    \ 10, 12, 14, 16, 18, 20  \\xe2\\x80\\xa6  114, 116, 118, 120, 122, 124, 126,\
    \ 128, 130, 132] == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpm17ig_fb.jl:23\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpm17ig_fb.jl:20\\ntest set: Test Failed at /tmp/tmpm17ig_fb.jl:24\\\
    n  Expression: candidate(17, 89) == Vector{Int64}([])\\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \\xe2\\x80\\xa6  70, 72, 74, 76, 78, 80, 82,\
    \ 84, 86, 88] == Int64[]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpm17ig_fb.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpm17ig_fb.jl:20\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        return generate_integers(b, a)\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp9ufqgml3.jl:21\\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp9ufqgml3.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp9ufqgml3.jl:20\\ntest set: Test Failed at /tmp/tmp9ufqgml3.jl:22\\\
    n  Expression: candidate(10, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp9ufqgml3.jl:22\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp9ufqgml3.jl:20\\ntest set: Test Failed at /tmp/tmp9ufqgml3.jl:23\\\
    n  Expression: candidate(132, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8,\
    \ 10, 12, 14, 16, 18, 20  \\xe2\\x80\\xa6  114, 116, 118, 120, 122, 124, 126,\
    \ 128, 130, 132] == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp9ufqgml3.jl:23\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp9ufqgml3.jl:20\\ntest set: Test Failed at /tmp/tmp9ufqgml3.jl:24\\\
    n  Expression: candidate(17, 89) == Vector{Int64}([])\\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \\xe2\\x80\\xa6  70, 72, 74, 76, 78, 80, 82,\
    \ 84, 86, 88] == Int64[]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp9ufqgml3.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp9ufqgml3.jl:20\\nTest Summary: | Fail  Total'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptj7bp6vb.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptj7bp6vb.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptj7bp6vb.jl:20\ntest set: Test Failed at /tmp/tmptj7bp6vb.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmptj7bp6vb.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptj7bp6vb.jl:20\ntest set: Test Failed at /tmp/tmptj7bp6vb.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmptj7bp6vb.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptj7bp6vb.jl:20\ntest set: Test Failed at /tmp/tmptj7bp6vb.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmptj7bp6vb.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptj7bp6vb.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptj7bp6vb.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzxy3kt_a.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzxy3kt_a.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzxy3kt_a.jl:20\ntest set: Test Failed at /tmp/tmpzxy3kt_a.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpzxy3kt_a.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzxy3kt_a.jl:20\ntest set: Test Failed at /tmp/tmpzxy3kt_a.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpzxy3kt_a.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzxy3kt_a.jl:20\ntest set: Test Failed at /tmp/tmpzxy3kt_a.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpzxy3kt_a.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzxy3kt_a.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzxy3kt_a.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp21fg1yv3.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp21fg1yv3.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp21fg1yv3.jl:20\ntest set: Test Failed at /tmp/tmp21fg1yv3.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp21fg1yv3.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp21fg1yv3.jl:20\ntest set: Test Failed at /tmp/tmp21fg1yv3.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp21fg1yv3.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp21fg1yv3.jl:20\ntest set: Test Failed at /tmp/tmp21fg1yv3.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmp21fg1yv3.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp21fg1yv3.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp21fg1yv3.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i = a:2:b]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl28ycmgs.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl28ycmgs.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl28ycmgs.jl:20\ntest set: Test Failed at /tmp/tmpl28ycmgs.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpl28ycmgs.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl28ycmgs.jl:20\ntest set: Test Failed at /tmp/tmpl28ycmgs.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpl28ycmgs.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl28ycmgs.jl:20\ntest set: Test Failed at /tmp/tmpl28ycmgs.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [17, 19,\
    \ 21, 23, 25, 27, 29, 31, 33, 35  \u2026  71, 73, 75, 77, 79, 81, 83, 85, 87,\
    \ 89] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpl28ycmgs.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl28ycmgs.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl28ycmgs.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_q__a0y0.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_q__a0y0.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_q__a0y0.jl:20\ntest set: Test Failed at /tmp/tmp_q__a0y0.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp_q__a0y0.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_q__a0y0.jl:20\ntest set: Test Failed at /tmp/tmp_q__a0y0.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp_q__a0y0.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_q__a0y0.jl:20\ntest set: Test Failed at /tmp/tmp_q__a0y0.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmp_q__a0y0.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_q__a0y0.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_q__a0y0.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        return generate_integers(b, a)\n    end\n    if a %\
    \ 2 == 1\n        a += 1\n    end\n    if b % 2 == 1\n        b -= 1\n    end\n\
    \    return collect(a:2:b)\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpcn2nq3tv.jl:27\\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpcn2nq3tv.jl:27\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpcn2nq3tv.jl:26\\ntest set: Test Failed at /tmp/tmpcn2nq3tv.jl:28\\\
    n  Expression: candidate(10, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpcn2nq3tv.jl:28\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpcn2nq3tv.jl:26\\ntest set: Test Failed at /tmp/tmpcn2nq3tv.jl:29\\\
    n  Expression: candidate(132, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8,\
    \ 10, 12, 14, 16, 18, 20  \\xe2\\x80\\xa6  114, 116, 118, 120, 122, 124, 126,\
    \ 128, 130, 132] == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpcn2nq3tv.jl:29\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpcn2nq3tv.jl:26\\ntest set: Test Failed at /tmp/tmpcn2nq3tv.jl:30\\\
    n  Expression: candidate(17, 89) == Vector{Int64}([])\\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \\xe2\\x80\\xa6  70, 72, 74, 76, 78, 80, 82,\
    \ 84, 86, 88] == Int64[]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpcn2nq3tv.jl:30\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpcn2nq3tv.jl:26\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv_hxt943.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpv_hxt943.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpv_hxt943.jl:20\ntest set: Test Failed at /tmp/tmpv_hxt943.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpv_hxt943.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpv_hxt943.jl:20\ntest set: Test Failed at /tmp/tmpv_hxt943.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpv_hxt943.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpv_hxt943.jl:20\ntest set: Test Failed at /tmp/tmpv_hxt943.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpv_hxt943.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpv_hxt943.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv_hxt943.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp56xqgxg3.jl:21\\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp56xqgxg3.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp56xqgxg3.jl:20\\ntest set: Test Failed at /tmp/tmp56xqgxg3.jl:22\\\
    n  Expression: candidate(10, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp56xqgxg3.jl:22\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp56xqgxg3.jl:20\\ntest set: Test Failed at /tmp/tmp56xqgxg3.jl:23\\\
    n  Expression: candidate(132, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8,\
    \ 10, 12, 14, 16, 18, 20  \\xe2\\x80\\xa6  114, 116, 118, 120, 122, 124, 126,\
    \ 128, 130, 132] == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp56xqgxg3.jl:23\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp56xqgxg3.jl:20\\ntest set: Test Failed at /tmp/tmp56xqgxg3.jl:24\\\
    n  Expression: candidate(17, 89) == Vector{Int64}([])\\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \\xe2\\x80\\xa6  70, 72, 74, 76, 78, 80, 82,\
    \ 84, 86, 88] == Int64[]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp56xqgxg3.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp56xqgxg3.jl:20\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0ux5nwsp.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0ux5nwsp.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0ux5nwsp.jl:20\ntest set: Test Failed at /tmp/tmp0ux5nwsp.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp0ux5nwsp.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0ux5nwsp.jl:20\ntest set: Test Failed at /tmp/tmp0ux5nwsp.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp0ux5nwsp.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0ux5nwsp.jl:20\ntest set: Test Failed at /tmp/tmp0ux5nwsp.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmp0ux5nwsp.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0ux5nwsp.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0ux5nwsp.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn4vd9iee.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn4vd9iee.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn4vd9iee.jl:20\ntest set: Test Failed at /tmp/tmpn4vd9iee.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpn4vd9iee.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn4vd9iee.jl:20\ntest set: Test Failed at /tmp/tmpn4vd9iee.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpn4vd9iee.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn4vd9iee.jl:20\ntest set: Test Failed at /tmp/tmpn4vd9iee.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpn4vd9iee.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn4vd9iee.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn4vd9iee.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp4zgqq7oe.jl:21\\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp4zgqq7oe.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp4zgqq7oe.jl:20\\ntest set: Test Failed at /tmp/tmp4zgqq7oe.jl:22\\\
    n  Expression: candidate(10, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp4zgqq7oe.jl:22\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp4zgqq7oe.jl:20\\ntest set: Test Failed at /tmp/tmp4zgqq7oe.jl:23\\\
    n  Expression: candidate(132, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8,\
    \ 10, 12, 14, 16, 18, 20  \\xe2\\x80\\xa6  114, 116, 118, 120, 122, 124, 126,\
    \ 128, 130, 132] == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp4zgqq7oe.jl:23\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp4zgqq7oe.jl:20\\ntest set: Test Failed at /tmp/tmp4zgqq7oe.jl:24\\\
    n  Expression: candidate(17, 89) == Vector{Int64}([])\\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \\xe2\\x80\\xa6  70, 72, 74, 76, 78, 80, 82,\
    \ 84, 86, 88] == Int64[]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp4zgqq7oe.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp4zgqq7oe.jl:20\\nTest Summary: | Fail  Total\\\
    ntest set      |    4      4\\n'"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [x for x in a:b if\
    \ x % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdb98nls8.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdb98nls8.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdb98nls8.jl:20\ntest set: Test Failed at /tmp/tmpdb98nls8.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpdb98nls8.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdb98nls8.jl:20\ntest set: Test Failed at /tmp/tmpdb98nls8.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpdb98nls8.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdb98nls8.jl:20\ntest set: Test Failed at /tmp/tmpdb98nls8.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpdb98nls8.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdb98nls8.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdb98nls8.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b \n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_rtusff8.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_rtusff8.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_rtusff8.jl:20\ntest set: Test Failed at /tmp/tmp_rtusff8.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp_rtusff8.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_rtusff8.jl:20\ntest set: Test Failed at /tmp/tmp_rtusff8.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp_rtusff8.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_rtusff8.jl:20\ntest set: Test Failed at /tmp/tmp_rtusff8.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmp_rtusff8.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_rtusff8.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_rtusff8.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpinv93b30.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpinv93b30.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpinv93b30.jl:20\ntest set: Test Failed at /tmp/tmpinv93b30.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpinv93b30.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpinv93b30.jl:20\ntest set: Test Failed at /tmp/tmpinv93b30.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpinv93b30.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpinv93b30.jl:20\ntest set: Test Failed at /tmp/tmpinv93b30.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpinv93b30.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpinv93b30.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpinv93b30.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        return generate_integers(b, a)\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpvp1pdq6a.jl:21\\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpvp1pdq6a.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpvp1pdq6a.jl:20\\ntest set: Test Failed at /tmp/tmpvp1pdq6a.jl:22\\\
    n  Expression: candidate(10, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpvp1pdq6a.jl:22\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpvp1pdq6a.jl:20\\ntest set: Test Failed at /tmp/tmpvp1pdq6a.jl:23\\\
    n  Expression: candidate(132, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8,\
    \ 10, 12, 14, 16, 18, 20  \\xe2\\x80\\xa6  114, 116, 118, 120, 122, 124, 126,\
    \ 128, 130, 132] == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpvp1pdq6a.jl:23\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpvp1pdq6a.jl:20\\ntest set: Test Failed at /tmp/tmpvp1pdq6a.jl:24\\\
    n  Expression: candidate(17, 89) == Vector{Int64}([])\\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \\xe2\\x80\\xa6  70, 72, 74, 76, 78, 80, 82,\
    \ 84, 86, 88] == Int64[]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpvp1pdq6a.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpvp1pdq6a.jl:20\\nTest Summary: | Fail  Total\\\
    ntest set      |    4      4\\n'"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpguuhjyyk.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpguuhjyyk.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpguuhjyyk.jl:20\ntest set: Test Failed at /tmp/tmpguuhjyyk.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpguuhjyyk.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpguuhjyyk.jl:20\ntest set: Test Failed at /tmp/tmpguuhjyyk.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpguuhjyyk.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpguuhjyyk.jl:20\ntest set: Test Failed at /tmp/tmpguuhjyyk.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpguuhjyyk.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpguuhjyyk.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpguuhjyyk.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmph8kw6ui2.jl:21\\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmph8kw6ui2.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmph8kw6ui2.jl:20\\ntest set: Test Failed at /tmp/tmph8kw6ui2.jl:22\\\
    n  Expression: candidate(10, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmph8kw6ui2.jl:22\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmph8kw6ui2.jl:20\\ntest set: Test Failed at /tmp/tmph8kw6ui2.jl:23\\\
    n  Expression: candidate(132, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8,\
    \ 10, 12, 14, 16, 18, 20  \\xe2\\x80\\xa6  114, 116, 118, 120, 122, 124, 126,\
    \ 128, 130, 132] == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmph8kw6ui2.jl:23\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmph8kw6ui2.jl:20\\ntest set: Test Failed at /tmp/tmph8kw6ui2.jl:24\\\
    n  Expression: candidate(17, 89) == Vector{Int64'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz5o60htg.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz5o60htg.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpz5o60htg.jl:20\ntest set: Test Failed at /tmp/tmpz5o60htg.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpz5o60htg.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpz5o60htg.jl:20\ntest set: Test Failed at /tmp/tmpz5o60htg.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpz5o60htg.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpz5o60htg.jl:20\ntest set: Test Failed at /tmp/tmpz5o60htg.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpz5o60htg.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpz5o60htg.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz5o60htg.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [x for x in a:b if\
    \ x % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp418rn8cf.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp418rn8cf.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp418rn8cf.jl:20\ntest set: Test Failed at /tmp/tmp418rn8cf.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp418rn8cf.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp418rn8cf.jl:20\ntest set: Test Failed at /tmp/tmp418rn8cf.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp418rn8cf.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp418rn8cf.jl:20\ntest set: Test Failed at /tmp/tmp418rn8cf.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmp418rn8cf.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp418rn8cf.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp418rn8cf.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoprgj88w.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpoprgj88w.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoprgj88w.jl:20\ntest set: Test Failed at /tmp/tmpoprgj88w.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpoprgj88w.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoprgj88w.jl:20\ntest set: Test Failed at /tmp/tmpoprgj88w.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpoprgj88w.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoprgj88w.jl:20\ntest set: Test Failed at /tmp/tmpoprgj88w.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpoprgj88w.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoprgj88w.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoprgj88w.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpuklro2xj.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpuklro2xj.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpuklro2xj.jl:20\ntest set: Test Failed at /tmp/tmpuklro2xj.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpuklro2xj.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpuklro2xj.jl:20\ntest set: Test Failed at /tmp/tmpuklro2xj.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpuklro2xj.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpuklro2xj.jl:20\ntest set: Test Failed at /tmp/tmpuklro2xj.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpuklro2xj.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpuklro2xj.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuklro2xj.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp42wau7o_.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp42wau7o_.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp42wau7o_.jl:20\ntest set: Test Failed at /tmp/tmp42wau7o_.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp42wau7o_.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp42wau7o_.jl:20\ntest set: Test Failed at /tmp/tmp42wau7o_.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp42wau7o_.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp42wau7o_.jl:20\ntest set: Test Failed at /tmp/tmp42wau7o_.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmp42wau7o_.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp42wau7o_.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp42wau7o_.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_bsywv5m.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_bsywv5m.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_bsywv5m.jl:20\ntest set: Test Failed at /tmp/tmp_bsywv5m.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp_bsywv5m.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_bsywv5m.jl:20\ntest set: Test Failed at /tmp/tmp_bsywv5m.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp_bsywv5m.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_bsywv5m.jl:20\ntest set: Test Failed at /tmp/tmp_bsywv5m.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmp_bsywv5m.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_bsywv5m.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_bsywv5m.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpe9cp9rnj.jl:21\\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpe9cp9rnj.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpe9cp9rnj.jl:20\\ntest set: Test Failed at /tmp/tmpe9cp9rnj.jl:22\\\
    n  Expression: candidate(10, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpe9cp9rnj.jl:22\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpe9cp9rnj.jl:20\\ntest set: Test Failed at /tmp/tmpe9cp9rnj.jl:23\\\
    n  Expression: candidate(132, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8,\
    \ 10, 12, 14, 16, 18, 20  \\xe2\\x80\\xa6  114, 116, 118, 120, 122, 124, 126,\
    \ 128, 130, 132] == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpe9cp9rnj.jl:23\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpe9cp9rnj.jl:20\\ntest set: Test Failed at /tmp/tmpe9cp9rnj.jl:24\\\
    n  Expression: candidate(17, 89) == Vector{Int64}([])\\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \\xe2\\x80\\xa6  70, 72, 74, 76, 78, 80, 82,\
    \ 84, 86, 88] == Int64[]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpe9cp9rnj.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpe9cp9rnj.jl:20\\nTest Summary: | Fail  Total\\\
    ntest set      |    4      4\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptjayuhyp.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptjayuhyp.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptjayuhyp.jl:20\ntest set: Test Failed at /tmp/tmptjayuhyp.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmptjayuhyp.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptjayuhyp.jl:20\ntest set: Test Failed at /tmp/tmptjayuhyp.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmptjayuhyp.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptjayuhyp.jl:20\ntest set: Test Failed at /tmp/tmptjayuhyp.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmptjayuhyp.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptjayuhyp.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptjayuhyp.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa41cm55p.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpa41cm55p.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa41cm55p.jl:20\ntest set: Test Failed at /tmp/tmpa41cm55p.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpa41cm55p.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa41cm55p.jl:20\ntest set: Test Failed at /tmp/tmpa41cm55p.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpa41cm55p.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa41cm55p.jl:20\ntest set: Test Failed at /tmp/tmpa41cm55p.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpa41cm55p.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa41cm55p.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa41cm55p.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        return generate_integers(b, a)\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp8h54u6i7.jl:21\\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp8h54u6i7.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp8h54u6i7.jl:20\\ntest set: Test Failed at /tmp/tmp8h54u6i7.jl:22\\\
    n  Expression: candidate(10, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp8h54u6i7.jl:22\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp8h54u6i7.jl:20\\ntest set: Test Failed at /tmp/tmp8h54u6i7.jl:23\\\
    n  Expression: candidate(132, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8,\
    \ 10, 12, 14, 16, 18, 20  \\xe2\\x80\\xa6  114, 116, 118, 120, 122, 124, 126,\
    \ 128, 130, 132] == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp8h54u6i7.jl:23\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp8h54u6i7.jl:20\\ntest set: Test Failed at /tmp/tmp8h54u6i7.jl:24\\\
    n  Expression: candidate(17, 89) == Vector{Int64}([])\\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \\xe2\\x80\\xa6  70, 72, 74, 76, 78, 80, 82,\
    \ 84, 86, 88] == Int64[]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp8h54u6i7.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp8h54u6i7.jl:20\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppiu1aorh.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppiu1aorh.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppiu1aorh.jl:20\ntest set: Test Failed at /tmp/tmppiu1aorh.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmppiu1aorh.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppiu1aorh.jl:20\ntest set: Test Failed at /tmp/tmppiu1aorh.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmppiu1aorh.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppiu1aorh.jl:20\ntest set: Test Failed at /tmp/tmppiu1aorh.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmppiu1aorh.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppiu1aorh.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppiu1aorh.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpztd79yjq.jl:21\\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpztd79yjq.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpztd79yjq.jl:20\\ntest set: Test Failed at /tmp/tmpztd79yjq.jl:22\\\
    n  Expression: candidate(10, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpztd79yjq.jl:22\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpztd79yjq.jl:20\\ntest set: Test Failed at /tmp/tmpztd79yjq.jl:23\\\
    n  Expression: candidate(132, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8,\
    \ 10, 12, 14, 16, 18, 20  \\xe2\\x80\\xa6  114, 116, 118, 120, 122, 124, 126,\
    \ 128, 130, 132] == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpztd79yjq.jl:23\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpztd79yjq.jl:20\\ntest set: Test Failed at /tmp/tmpztd79yjq.jl:24\\\
    n  Expression: candidate(17, 89) == Vector{Int64}([])\\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \\xe2\\x80\\xa6  70, 72, 74, 76, 78, 80, 82,\
    \ 84, 86, 88] == Int64[]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpztd79yjq.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpztd79yjq.jl:20\\nTest Summary: | Fail  Total\\\
    ntest set      |    4      4\\n'"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    if a % 2 == 1\n        a +=\
    \ 1\n    end\n    if b % 2 == 1\n        b -= 1\n    end\n    if a > b\n     \
    \   return Int64[]\n    end\n    return collect(a:2:b)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = generate_integers;\n\t@test(candidate(2, 10) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2)\
    \ == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvt_nhzto.jl:30\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvt_nhzto.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvt_nhzto.jl:29\ntest set: Test Failed at /tmp/tmpvt_nhzto.jl:31\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpvt_nhzto.jl:31\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvt_nhzto.jl:29\ntest set: Test Failed at /tmp/tmpvt_nhzto.jl:32\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpvt_nhzto.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvt_nhzto.jl:29\ntest set: Test Failed at /tmp/tmpvt_nhzto.jl:33\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpvt_nhzto.jl:33\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvt_nhzto.jl:29\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvt_nhzto.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        return generate_integers(b, a)\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz0n4byuf.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz0n4byuf.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpz0n4byuf.jl:20\ntest set: Test Failed at /tmp/tmpz0n4byuf.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpz0n4byuf.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpz0n4byuf.jl:20\ntest set: Test Failed at /tmp/tmpz0n4byuf.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpz0n4byuf.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpz0n4byuf.jl:20\ntest set: Test Failed at /tmp/tmpz0n4byuf.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpz0n4byuf.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpz0n4byuf.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz0n4byuf.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpouiwd049.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpouiwd049.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpouiwd049.jl:20\ntest set: Test Failed at /tmp/tmpouiwd049.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpouiwd049.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpouiwd049.jl:20\ntest set: Test Failed at /tmp/tmpouiwd049.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpouiwd049.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpouiwd049.jl:20\ntest set: Test Failed at /tmp/tmpouiwd049.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpouiwd049.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpouiwd049.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpouiwd049.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        return generate_integers(b, a)\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsxum7h58.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsxum7h58.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsxum7h58.jl:20\ntest set: Test Failed at /tmp/tmpsxum7h58.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpsxum7h58.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsxum7h58.jl:20\ntest set: Test Failed at /tmp/tmpsxum7h58.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpsxum7h58.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsxum7h58.jl:20\ntest set: Test Failed at /tmp/tmpsxum7h58.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpsxum7h58.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsxum7h58.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsxum7h58.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmprs4ap7gd.jl:21\\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmprs4ap7gd.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmprs4ap7gd.jl:20\\ntest set: Test Failed at /tmp/tmprs4ap7gd.jl:22\\\
    n  Expression: candidate(10, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmprs4ap7gd.jl:22\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmprs4ap7gd.jl:20\\ntest set: Test Failed at /tmp/tmprs4ap7gd.jl:23\\\
    n  Expression: candidate(132, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8,\
    \ 10, 12, 14, 16, 18, 20  \\xe2\\x80\\xa6  114, 116, 118, 120, 122, 124, 126,\
    \ 128, 130, 132] == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmprs4ap7gd.jl:23\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmprs4ap7gd.jl:20\\ntest set: Test Failed at /tmp/tmprs4ap7gd.jl:24\\\
    n  Expression: candidate(17, 89) == Vector{Int64}([])\\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \\xe2\\x80\\xa6  70, 72, 74, 76, 78, 80, 82,\
    \ 84, 86, 88] == Int64[]\\nStacktrace:\\n [1] top-level scope at /tmp/tmprs4ap7gd.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmprs4ap7gd.jl:20\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2d7nd_5a.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2d7nd_5a.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2d7nd_5a.jl:20\ntest set: Test Failed at /tmp/tmp2d7nd_5a.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp2d7nd_5a.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2d7nd_5a.jl:20\ntest set: Test Failed at /tmp/tmp2d7nd_5a.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp2d7nd_5a.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2d7nd_5a.jl:20\ntest set: Test Failed at /tmp/tmp2d7nd_5a.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmp2d7nd_5a.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2d7nd_5a.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2d7nd_5a.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7eyy3spd.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7eyy3spd.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7eyy3spd.jl:20\ntest set: Test Failed at /tmp/tmp7eyy3spd.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp7eyy3spd.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7eyy3spd.jl:20\ntest set: Test Failed at /tmp/tmp7eyy3spd.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp7eyy3spd.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7eyy3spd.jl:20\ntest set: Test Failed at /tmp/tmp7eyy3spd.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmp7eyy3spd.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7eyy3spd.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7eyy3spd.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpp3wqhkj5.jl:21\\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpp3wqhkj5.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpp3wqhkj5.jl:20\\ntest set: Test Failed at /tmp/tmpp3wqhkj5.jl:22\\\
    n  Expression: candidate(10, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpp3wqhkj5.jl:22\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpp3wqhkj5.jl:20\\ntest set: Test Failed at /tmp/tmpp3wqhkj5.jl:23\\\
    n  Expression: candidate(132, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8,\
    \ 10, 12, 14, 16, 18, 20  \\xe2\\x80\\xa6  114, 116, 118, 120, 122, 124, 126,\
    \ 128, 130, 132] == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpp3wqhkj5.jl:23\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpp3wqhkj5.jl:20\\ntest set: Test Failed at /tmp/tmpp3wqhkj5.jl:24\\\
    n  Expression: candidate(17, 89) == Vector{Int64}([])\\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \\xe2\\x80\\xa6  70, 72, 74, 76, 78, 80, 82,\
    \ 84, 86, 88] == Int64[]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpp3wqhkj5.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpp3wqhkj5.jl:20\\nTest Summary: | Fail  Total\\\
    ntest set      |    4      4\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        return generate_integers(b, a)\n    end\n    if a %\
    \ 2 == 1\n        a += 1\n    end\n    if b % 2 == 1\n        b -= 1\n    end\n\
    \    if a > b\n        return []\n    end\n    return collect(a:2:b)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = generate_integers;\n\t@test(candidate(2,\
    \ 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4, 6, 8])\n\t@test(candidate(132,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpg4zf7y4h.jl:30\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg4zf7y4h.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg4zf7y4h.jl:29\ntest set: Test Failed at /tmp/tmpg4zf7y4h.jl:31\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpg4zf7y4h.jl:31\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg4zf7y4h.jl:29\ntest set: Test Failed at /tmp/tmpg4zf7y4h.jl:32\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpg4zf7y4h.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg4zf7y4h.jl:29\ntest set: Test Failed at /tmp/tmpg4zf7y4h.jl:33\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpg4zf7y4h.jl:33\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg4zf7y4h.jl:29\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg4zf7y4h.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd3tf_ycm.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd3tf_ycm.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpd3tf_ycm.jl:20\ntest set: Test Failed at /tmp/tmpd3tf_ycm.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpd3tf_ycm.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpd3tf_ycm.jl:20\ntest set: Test Failed at /tmp/tmpd3tf_ycm.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpd3tf_ycm.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpd3tf_ycm.jl:20\ntest set: Test Failed at /tmp/tmpd3tf_ycm.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpd3tf_ycm.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpd3tf_ycm.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd3tf_ycm.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        return generate_integers(b, a)\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkhpezguq.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkhpezguq.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkhpezguq.jl:20\ntest set: Test Failed at /tmp/tmpkhpezguq.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpkhpezguq.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkhpezguq.jl:20\ntest set: Test Failed at /tmp/tmpkhpezguq.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpkhpezguq.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkhpezguq.jl:20\ntest set: Test Failed at /tmp/tmpkhpezguq.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpkhpezguq.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkhpezguq.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkhpezguq.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [x for x in a:b if\
    \ x % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpsc7tmjcl.jl:21\\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpsc7tmjcl.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpsc7tmjcl.jl:20\\ntest set: Test Failed at /tmp/tmpsc7tmjcl.jl:22\\\
    n  Expression: candidate(10, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpsc7tmjcl.jl:22\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpsc7tmjcl.jl:20\\ntest set: Test Failed at /tmp/tmpsc7tmjcl.jl:23\\\
    n  Expression: candidate(132, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8,\
    \ 10, 12, 14, 16, 18, 20  \\xe2\\x80\\xa6  114, 116, 118, 120, 122, 124, 126,\
    \ 128, 130, 132] == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpsc7tmjcl.jl:23\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpsc7tmjcl.jl:20\\ntest set: Test Failed at /tmp/tmpsc7tmjcl.jl:24\\\
    n  Expression: candidate(17, 89) == Vector{Int64}([])\\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \\xe2\\x80\\xa6  70, 72, 74, 76, 78, 80, 82,\
    \ 84, 86, 88] == Int64[]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpsc7tmjcl.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpsc7tmjcl.jl:20\\nTest Summary: | Fail  Total\\\
    ntest set      |    4      4\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        return generate_integers(b, a)\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp54ci22n9.jl:21\\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp54ci22n9.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp54ci22n9.jl:20\\ntest set: Test Failed at /tmp/tmp54ci22n9.jl:22\\\
    n  Expression: candidate(10, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp54ci22n9.jl:22\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp54ci22n9.jl:20\\ntest set: Test Failed at /tmp/tmp54ci22n9.jl:23\\\
    n  Expression: candidate(132, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8,\
    \ 10, 12, 14, 16, 18, 20  \\xe2\\x80\\xa6  114, 116, 118, 120, 122, 124, 126,\
    \ 128, 130, 132] == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp54ci22n9.jl:23\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp54ci22n9.jl:20\\ntest set: Test Failed at /tmp/tmp54ci22n9.jl:24\\\
    n  Expression: candidate(17, 89) == Vector{Int64}([])\\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \\xe2\\x80\\xa6  70, 72, 74, 76, 78, 80, 82,\
    \ 84, 86, 88] == Int64[]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp54ci22n9.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp54ci22n9.jl:20\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzjzjo8ez.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzjzjo8ez.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzjzjo8ez.jl:20\ntest set: Test Failed at /tmp/tmpzjzjo8ez.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpzjzjo8ez.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzjzjo8ez.jl:20\ntest set: Test Failed at /tmp/tmpzjzjo8ez.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpzjzjo8ez.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzjzjo8ez.jl:20\ntest set: Test Failed at /tmp/tmpzjzjo8ez.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpzjzjo8ez.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzjzjo8ez.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzjzjo8ez.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdvtn_idu.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdvtn_idu.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdvtn_idu.jl:20\ntest set: Test Failed at /tmp/tmpdvtn_idu.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpdvtn_idu.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdvtn_idu.jl:20\ntest set: Test Failed at /tmp/tmpdvtn_idu.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpdvtn_idu.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdvtn_idu.jl:20\ntest set: Test Failed at /tmp/tmpdvtn_idu.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpdvtn_idu.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdvtn_idu.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdvtn_idu.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [x for x in a:b if\
    \ x % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf282ei91.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf282ei91.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpf282ei91.jl:20\ntest set: Test Failed at /tmp/tmpf282ei91.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpf282ei91.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpf282ei91.jl:20\ntest set: Test Failed at /tmp/tmpf282ei91.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpf282ei91.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpf282ei91.jl:20\ntest set: Test Failed at /tmp/tmpf282ei91.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpf282ei91.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpf282ei91.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf282ei91.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpf6a6y1o6.jl:21\\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpf6a6y1o6.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpf6a6y1o6.jl:20\\ntest set: Test Failed at /tmp/tmpf6a6y1o6.jl:22\\\
    n  Expression: candidate(10, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpf6a6y1o6.jl:22\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpf6a6y1o6.jl:20\\ntest set: Test Failed at /tmp/tmpf6a6y1o6.jl:23\\\
    n  Expression: candidate(132, 2) == [2, 4, 6, 8]\\n   Evaluated: [2, 4, 6, 8,\
    \ 10, 12, 14, 16, 18, 20  \\xe2\\x80\\xa6  114, 116, 118, 120, 122, 124, 126,\
    \ 128, 130, 132] == [2, 4, 6, 8]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpf6a6y1o6.jl:23\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpf6a6y1o6.jl:20\\ntest set: Test Failed at /tmp/tmpf6a6y1o6.jl:24\\\
    n  Expression: candidate(17, 89) == Vector{Int64}([])\\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \\xe2\\x80\\xa6  70, 72, 74, 76, 78, 80, 82,\
    \ 84, 86, 88] == Int64[]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpf6a6y1o6.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpf6a6y1o6.jl:20\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4k0_frln.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4k0_frln.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4k0_frln.jl:20\ntest set: Test Failed at /tmp/tmp4k0_frln.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp4k0_frln.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4k0_frln.jl:20\ntest set: Test Failed at /tmp/tmp4k0_frln.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp4k0_frln.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4k0_frln.jl:20\ntest set: Test Failed at /tmp/tmp4k0_frln.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmp4k0_frln.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4k0_frln.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4k0_frln.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfu0ud8oj.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfu0ud8oj.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfu0ud8oj.jl:20\ntest set: Test Failed at /tmp/tmpfu0ud8oj.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpfu0ud8oj.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfu0ud8oj.jl:20\ntest set: Test Failed at /tmp/tmpfu0ud8oj.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpfu0ud8oj.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfu0ud8oj.jl:20\ntest set: Test Failed at /tmp/tmpfu0ud8oj.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpfu0ud8oj.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfu0ud8oj.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfu0ud8oj.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp43k0rb2h.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp43k0rb2h.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp43k0rb2h.jl:20\ntest set: Test Failed at /tmp/tmp43k0rb2h.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp43k0rb2h.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp43k0rb2h.jl:20\ntest set: Test Failed at /tmp/tmp43k0rb2h.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp43k0rb2h.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp43k0rb2h.jl:20\ntest set: Test Failed at /tmp/tmp43k0rb2h.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmp43k0rb2h.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp43k0rb2h.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp43k0rb2h.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [x for x in a:b if\
    \ x % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpct2rkrcy.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpct2rkrcy.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpct2rkrcy.jl:20\ntest set: Test Failed at /tmp/tmpct2rkrcy.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpct2rkrcy.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpct2rkrcy.jl:20\ntest set: Test Failed at /tmp/tmpct2rkrcy.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpct2rkrcy.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpct2rkrcy.jl:20\ntest set: Test Failed at /tmp/tmpct2rkrcy.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpct2rkrcy.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpct2rkrcy.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpct2rkrcy.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbojgg6md.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbojgg6md.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbojgg6md.jl:20\ntest set: Test Failed at /tmp/tmpbojgg6md.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpbojgg6md.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbojgg6md.jl:20\ntest set: Test Failed at /tmp/tmpbojgg6md.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpbojgg6md.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbojgg6md.jl:20\ntest set: Test Failed at /tmp/tmpbojgg6md.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpbojgg6md.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbojgg6md.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbojgg6md.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjyd07pgw.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjyd07pgw.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjyd07pgw.jl:20\ntest set: Test Failed at /tmp/tmpjyd07pgw.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpjyd07pgw.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjyd07pgw.jl:20\ntest set: Test Failed at /tmp/tmpjyd07pgw.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpjyd07pgw.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjyd07pgw.jl:20\ntest set: Test Failed at /tmp/tmpjyd07pgw.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpjyd07pgw.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjyd07pgw.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjyd07pgw.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplf1029o5.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplf1029o5.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplf1029o5.jl:20\ntest set: Test Failed at /tmp/tmplf1029o5.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmplf1029o5.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplf1029o5.jl:20\ntest set: Test Failed at /tmp/tmplf1029o5.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmplf1029o5.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplf1029o5.jl:20\ntest set: Test Failed at /tmp/tmplf1029o5.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmplf1029o5.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplf1029o5.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplf1029o5.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbx2w2ggf.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbx2w2ggf.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbx2w2ggf.jl:20\ntest set: Test Failed at /tmp/tmpbx2w2ggf.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpbx2w2ggf.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbx2w2ggf.jl:20\ntest set: Test Failed at /tmp/tmpbx2w2ggf.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpbx2w2ggf.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbx2w2ggf.jl:20\ntest set: Test Failed at /tmp/tmpbx2w2ggf.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpbx2w2ggf.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbx2w2ggf.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbx2w2ggf.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfzqhfh0g.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfzqhfh0g.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfzqhfh0g.jl:20\ntest set: Test Failed at /tmp/tmpfzqhfh0g.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpfzqhfh0g.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfzqhfh0g.jl:20\ntest set: Test Failed at /tmp/tmpfzqhfh0g.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpfzqhfh0g.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfzqhfh0g.jl:20\ntest set: Test Failed at /tmp/tmpfzqhfh0g.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpfzqhfh0g.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfzqhfh0g.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfzqhfh0g.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp84tquru5.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp84tquru5.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp84tquru5.jl:20\ntest set: Test Failed at /tmp/tmp84tquru5.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp84tquru5.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp84tquru5.jl:20\ntest set: Test Failed at /tmp/tmp84tquru5.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp84tquru5.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp84tquru5.jl:20\ntest set: Test Failed at /tmp/tmp84tquru5.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmp84tquru5.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp84tquru5.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp84tquru5.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2af7lwju.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2af7lwju.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2af7lwju.jl:20\ntest set: Test Failed at /tmp/tmp2af7lwju.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp2af7lwju.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2af7lwju.jl:20\ntest set: Test Failed at /tmp/tmp2af7lwju.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp2af7lwju.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2af7lwju.jl:20\ntest set: Test Failed at /tmp/tmp2af7lwju.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmp2af7lwju.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2af7lwju.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2af7lwju.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi9033bh4.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi9033bh4.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi9033bh4.jl:20\ntest set: Test Failed at /tmp/tmpi9033bh4.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpi9033bh4.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi9033bh4.jl:20\ntest set: Test Failed at /tmp/tmpi9033bh4.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpi9033bh4.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi9033bh4.jl:20\ntest set: Test Failed at /tmp/tmpi9033bh4.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpi9033bh4.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi9033bh4.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi9033bh4.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkirjzgsw.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkirjzgsw.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkirjzgsw.jl:20\ntest set: Test Failed at /tmp/tmpkirjzgsw.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpkirjzgsw.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkirjzgsw.jl:20\ntest set: Test Failed at /tmp/tmpkirjzgsw.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpkirjzgsw.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkirjzgsw.jl:20\ntest set: Test Failed at /tmp/tmpkirjzgsw.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpkirjzgsw.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkirjzgsw.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkirjzgsw.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        return generate_integers(b, a)\n    end\n    return\
    \ [i for i in a:b if i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = generate_integers;\n\t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10,\
    \ 2) == [2, 4, 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17,\
    \ 89) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9qmr5fe4.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9qmr5fe4.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9qmr5fe4.jl:20\ntest set: Test Failed at /tmp/tmp9qmr5fe4.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp9qmr5fe4.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9qmr5fe4.jl:20\ntest set: Test Failed at /tmp/tmp9qmr5fe4.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp9qmr5fe4.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9qmr5fe4.jl:20\ntest set: Test Failed at /tmp/tmp9qmr5fe4.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmp9qmr5fe4.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9qmr5fe4.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9qmr5fe4.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp57y87kbf.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp57y87kbf.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp57y87kbf.jl:20\ntest set: Test Failed at /tmp/tmp57y87kbf.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp57y87kbf.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp57y87kbf.jl:20\ntest set: Test Failed at /tmp/tmp57y87kbf.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp57y87kbf.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp57y87kbf.jl:20\ntest set: Test Failed at /tmp/tmp57y87kbf.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmp57y87kbf.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp57y87kbf.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp57y87kbf.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1jw3zb2b.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1jw3zb2b.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1jw3zb2b.jl:20\ntest set: Test Failed at /tmp/tmp1jw3zb2b.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp1jw3zb2b.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1jw3zb2b.jl:20\ntest set: Test Failed at /tmp/tmp1jw3zb2b.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp1jw3zb2b.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1jw3zb2b.jl:20\ntest set: Test Failed at /tmp/tmp1jw3zb2b.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmp1jw3zb2b.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1jw3zb2b.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1jw3zb2b.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0x681sit.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0x681sit.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0x681sit.jl:20\ntest set: Test Failed at /tmp/tmp0x681sit.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp0x681sit.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0x681sit.jl:20\ntest set: Test Failed at /tmp/tmp0x681sit.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmp0x681sit.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0x681sit.jl:20\ntest set: Test Failed at /tmp/tmp0x681sit.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmp0x681sit.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0x681sit.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0x681sit.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbcsw77jg.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbcsw77jg.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbcsw77jg.jl:20\ntest set: Test Failed at /tmp/tmpbcsw77jg.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpbcsw77jg.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbcsw77jg.jl:20\ntest set: Test Failed at /tmp/tmpbcsw77jg.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpbcsw77jg.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbcsw77jg.jl:20\ntest set: Test Failed at /tmp/tmpbcsw77jg.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpbcsw77jg.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbcsw77jg.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbcsw77jg.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxlvsu7ma.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxlvsu7ma.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxlvsu7ma.jl:20\ntest set: Test Failed at /tmp/tmpxlvsu7ma.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpxlvsu7ma.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxlvsu7ma.jl:20\ntest set: Test Failed at /tmp/tmpxlvsu7ma.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpxlvsu7ma.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxlvsu7ma.jl:20\ntest set: Test Failed at /tmp/tmpxlvsu7ma.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpxlvsu7ma.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxlvsu7ma.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxlvsu7ma.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two positive integers a and b, return the even digits\
    \ between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2,\
    \ 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10,\
    \ 14) => []\n    \"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\
    \ \n    if a > b\n        a, b = b, a\n    end\n    return [i for i in a:b if\
    \ i % 2 == 0]\nend\nusing Test\n\n@testset begin\n\ncandidate = generate_integers;\n\
    \t@test(candidate(2, 10) == [2, 4, 6, 8])\n\t@test(candidate(10, 2) == [2, 4,\
    \ 6, 8])\n\t@test(candidate(132, 2) == [2, 4, 6, 8])\n\t@test(candidate(17, 89)\
    \ == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpowtiacp8.jl:21\n  Expression: candidate(2,\
    \ 10) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10] == [2, 4, 6, 8]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpowtiacp8.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpowtiacp8.jl:20\ntest set: Test Failed at /tmp/tmpowtiacp8.jl:22\n\
    \  Expression: candidate(10, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpowtiacp8.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpowtiacp8.jl:20\ntest set: Test Failed at /tmp/tmpowtiacp8.jl:23\n\
    \  Expression: candidate(132, 2) == [2, 4, 6, 8]\n   Evaluated: [2, 4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20  \u2026  114, 116, 118, 120, 122, 124, 126, 128, 130, 132]\
    \ == [2, 4, 6, 8]\nStacktrace:\n [1] top-level scope at /tmp/tmpowtiacp8.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpowtiacp8.jl:20\ntest set: Test Failed at /tmp/tmpowtiacp8.jl:24\n\
    \  Expression: candidate(17, 89) == Vector{Int64}([])\n   Evaluated: [18, 20,\
    \ 22, 24, 26, 28, 30, 32, 34, 36  \u2026  70, 72, 74, 76, 78, 80, 82, 84, 86,\
    \ 88] == Int64[]\nStacktrace:\n [1] top-level scope at /tmp/tmpowtiacp8.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpowtiacp8.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpowtiacp8.jl:18\n"
  exit_code: 1
  status: SyntaxError
