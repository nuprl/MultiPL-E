name: HumanEval_16_count_distinct_characters
language: julia
results:
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    characters = Set{Char}()\n\
    \    for character in string\n        push!(characters, character)\n    end\n\
    \    return length(characters)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_distinct_characters;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\") == 5)\n\t@test(candidate(\"\
    aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe0xbo076.jl:21\n  Expression: candidate(\"\
    abcdecadeCADE\") == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpe0xbo076.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpe0xbo076.jl:18\ntest set: Test Failed at /tmp/tmpe0xbo076.jl:22\n\
    \  Expression: candidate(\"aaaaAAAAaaaa\") == 1\n   Evaluated: 2 == 1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpe0xbo076.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpe0xbo076.jl:18\ntest set: Test Failed at /tmp/tmpe0xbo076.jl:23\n\
    \  Expression: candidate(\"Jerry jERRY JeRRRY\") == 5\n   Evaluated: 9 == 5\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpe0xbo076.jl:23\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpe0xbo076.jl:18\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe0xbo076.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # TODO: write code here\n\
    \    return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4ceg7yg5.jl:17\n  Expression: candidate(\"\
    abcde\") == 5\n   Evaluated: 0 == 5\nStacktrace:\n [1] top-level scope at /tmp/tmp4ceg7yg5.jl:17\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4ceg7yg5.jl:15\ntest set: Test Failed at /tmp/tmp4ceg7yg5.jl:18\n\
    \  Expression: candidate(\"abcdecadeCADE\") == 5\n   Evaluated: 0 == 5\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4ceg7yg5.jl:18\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4ceg7yg5.jl:15\ntest set: Test Failed at /tmp/tmp4ceg7yg5.jl:19\n\
    \  Expression: candidate(\"aaaaAAAAaaaa\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4ceg7yg5.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4ceg7yg5.jl:15\ntest set: Test Failed at /tmp/tmp4ceg7yg5.jl:20\n\
    \  Expression: candidate(\"Jerry jERRY JeRRRY\") == 5\n   Evaluated: 0 == 5\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp4ceg7yg5.jl:20\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4ceg7yg5.jl:15\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4ceg7yg5.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    distinct_characters =\
    \ Set{Char}()\n    for character in string\n        push!(distinct_characters,\
    \ character)\n    end\n    return length(distinct_characters)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = count_distinct_characters;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\"\
    ) == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry\
    \ jERRY JeRRRY\") == 5)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp6bwxsru1.jl:21\\n  Expression: candidate(\"\
    abcdecadeCADE\") == 5\\n   Evaluated: 9 == 5\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmp6bwxsru1.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp6bwxsru1.jl:18\\ntest set: Test Failed at /tmp/tmp6bwxsru1.jl:22\\\
    n  Expression: candidate(\"aaaaAAAAaaaa\") == 1\\n   Evaluated: 2 == 1\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp6bwxsru1.jl:22\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp6bwxsru1.jl:18\\ntest set: Test Failed at /tmp/tmp6bwxsru1.jl:23\\\
    n  Expression: candidate(\"Jerry jERRY JeRRRY\") == 5\\n   Evaluated: 9 == 5\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmp6bwxsru1.jl:23\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp6bwxsru1.jl:18\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    2     3      5\\n'"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # convert string to lowercase\n\
    \    string = lowercase(string)\n    # convert string to set\n    set = Set(string)\n\
    \    # return length of set\n    return length(set)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_distinct_characters;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\"\
    ) == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry\
    \ jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(collect(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc7q91208.jl:17\n  Expression: candidate(\"\
    abcdecadeCADE\") == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpc7q91208.jl:17\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc7q91208.jl:14\ntest set: Test Failed at /tmp/tmpc7q91208.jl:18\n\
    \  Expression: candidate(\"aaaaAAAAaaaa\") == 1\n   Evaluated: 2 == 1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpc7q91208.jl:18\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc7q91208.jl:14\ntest set: Test Failed at /tmp/tmpc7q91208.jl:19\n\
    \  Expression: candidate(\"Jerry jERRY JeRRRY\") == 5\n   Evaluated: 9 == 5\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpc7q91208.jl:19\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc7q91208.jl:14\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc7q91208.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\"\
    ) == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry\
    \ jERRY JeRRRY\") == 5)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5sgjdxdr.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] count_distinct_characters(::String)\
    \ at /tmp/tmp5sgjdxdr.jl:9\n   [2] top-level scope at /tmp/tmp5sgjdxdr.jl:15\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp5sgjdxdr.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp5sgjdxdr.jl:16\n  Test threw exception\n  Expression: candidate(\"\
    abcde\") == 5\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number) where\
    \ T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] count_distinct_characters(::String)\
    \ at /tmp/tmp5sgjdxdr.jl:9\n   [2] top-level scope at /tmp/tmp5sgjdxdr.jl:16\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp5sgjdxdr.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp5sgjdxdr.jl:17\n  Test threw exception\n  Expression: candidate(\"\
    abcdecadeCADE\") == 5\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] count_distinct_characters(::String)\
    \ at /tmp/tmp5sgjdxdr.jl:9\n   [2] top-level scope at /tmp/tmp5sgjdxdr.jl:17\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp5sgjdxdr.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp5sgjdxdr.jl:18\n  Test threw exception\n  Expression: candidate(\"\
    aaaaAAAAaaaa\") == 1\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] count_distinct_characters(::String)\
    \ at /tmp/tmp5sgjdxdr.jl:9\n   [2] top-level scope at /tmp/tmp5sgjdxdr.jl:18\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp5sgjdxdr.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmp5sgjdxdr.jl:19\n  Test threw exception\n  Expression: candidate(\"\
    Jerry jERRY JeRRRY\") == 5\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] count_distinct_characters(::String)\
    \ at /tmp/tmp5sgjdxdr.jl:9\n   [2] top-level scope at /tmp/tmp5sgjdxdr.jl:19\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp5sgjdxdr.jl:14\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5sgjdxdr.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    distinct_chars = Set{Char}()\n\
    \    for c in string\n        push!(distinct_chars, c)\n    end\n    return length(distinct_chars)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp2uu67t8r.jl:21\\n  Expression: candidate(\"\
    abcdecadeCADE\") == 5\\n   Evaluated: 9 == 5\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmp2uu67t8r.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp2uu67t8r.jl:18\\ntest set: Test Failed at /tmp/tmp2uu67t8r.jl:22\\\
    n  Expression: candidate(\"aaaaAAAAaaaa\") == 1\\n   Evaluated: 2 == 1\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp2uu67t8r.jl:22\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp2uu67t8r.jl:18\\ntest set: Test Failed at /tmp/tmp2uu67t8r.jl:23\\\
    n  Expression: candidate(\"Jerry jERRY JeRRRY\") == 5\\n   Evaluated: 9 == 5\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmp2uu67t8r.jl:23\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp2uu67t8r.jl:18\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    2     3      5\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\"\
    ) == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry\
    \ jERRY JeRRRY\") == 5)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppqwbpyfk.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] count_distinct_characters(::String)\
    \ at /tmp/tmppqwbpyfk.jl:9\n   [2] top-level scope at /tmp/tmppqwbpyfk.jl:15\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmppqwbpyfk.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmppqwbpyfk.jl:16\n  Test threw exception\n  Expression: candidate(\"\
    abcde\") == 5\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number) where\
    \ T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] count_distinct_characters(::String)\
    \ at /tmp/tmppqwbpyfk.jl:9\n   [2] top-level scope at /tmp/tmppqwbpyfk.jl:16\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmppqwbpyfk.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmppqwbpyfk.jl:17\n  Test threw exception\n  Expression: candidate(\"\
    abcdecadeCADE\") == 5\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] count_distinct_characters(::String)\
    \ at /tmp/tmppqwbpyfk.jl:9\n   [2] top-level scope at /tmp/tmppqwbpyfk.jl:17\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmppqwbpyfk.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmppqwbpyfk.jl:18\n  Test threw exception\n  Expression: candidate(\"\
    aaaaAAAAaaaa\") == 1\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] count_distinct_characters(::String)\
    \ at /tmp/tmppqwbpyfk.jl:9\n   [2] top-level scope at /tmp/tmppqwbpyfk.jl:18\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmppqwbpyfk.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmppqwbpyfk.jl:19\n  Test threw exception\n  Expression: candidate(\"\
    Jerry jERRY JeRRRY\") == 5\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] count_distinct_characters(::String)\
    \ at /tmp/tmppqwbpyfk.jl:9\n   [2] top-level scope at /tmp/tmppqwbpyfk.jl:19\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmppqwbpyfk.jl:14\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppqwbpyfk.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(collect(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6h1sh1kn.jl:17\n  Expression: candidate(\"\
    abcdecadeCADE\") == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp6h1sh1kn.jl:17\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6h1sh1kn.jl:14\ntest set: Test Failed at /tmp/tmp6h1sh1kn.jl:18\n\
    \  Expression: candidate(\"aaaaAAAAaaaa\") == 1\n   Evaluated: 2 == 1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6h1sh1kn.jl:18\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6h1sh1kn.jl:14\ntest set: Test Failed at /tmp/tmp6h1sh1kn.jl:19\n\
    \  Expression: candidate(\"Jerry jERRY JeRRRY\") == 5\n   Evaluated: 9 == 5\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp6h1sh1kn.jl:19\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6h1sh1kn.jl:14\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6h1sh1kn.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # YOUR CODE HERE\n  \
    \  return length(unique(lowercase(string)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = count_distinct_characters;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\") == 5)\n\t@test(candidate(\"\
    aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(collect(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6_mmoz8u.jl:17\n  Expression: candidate(\"\
    abcdecadeCADE\") == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp6_mmoz8u.jl:17\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6_mmoz8u.jl:14\ntest set: Test Failed at /tmp/tmp6_mmoz8u.jl:18\n\
    \  Expression: candidate(\"aaaaAAAAaaaa\") == 1\n   Evaluated: 2 == 1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6_mmoz8u.jl:18\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6_mmoz8u.jl:14\ntest set: Test Failed at /tmp/tmp6_mmoz8u.jl:19\n\
    \  Expression: candidate(\"Jerry jERRY JeRRRY\") == 5\n   Evaluated: 9 == 5\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp6_mmoz8u.jl:19\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6_mmoz8u.jl:14\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6_mmoz8u.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\"\
    ) == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry\
    \ jERRY JeRRRY\") == 5)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpz2bou03f.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] count_distinct_characters(::String)\
    \ at /tmp/tmpz2bou03f.jl:9\n   [2] top-level scope at /tmp/tmpz2bou03f.jl:15\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpz2bou03f.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpz2bou03f.jl:16\n  Test threw exception\n  Expression: candidate(\"\
    abcde\") == 5\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number) where\
    \ T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] count_distinct_characters(::String)\
    \ at /tmp/tmpz2bou03f.jl:9\n   [2] top-level scope at /tmp/tmpz2bou03f.jl:16\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpz2bou03f.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpz2bou03f.jl:17\n  Test threw exception\n  Expression: candidate(\"\
    abcdecadeCADE\") == 5\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] count_distinct_characters(::String)\
    \ at /tmp/tmpz2bou03f.jl:9\n   [2] top-level scope at /tmp/tmpz2bou03f.jl:17\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpz2bou03f.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpz2bou03f.jl:18\n  Test threw exception\n  Expression: candidate(\"\
    aaaaAAAAaaaa\") == 1\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] count_distinct_characters(::String)\
    \ at /tmp/tmpz2bou03f.jl:9\n   [2] top-level scope at /tmp/tmpz2bou03f.jl:18\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpz2bou03f.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpz2bou03f.jl:19\n  Test threw exception\n  Expression: candidate(\"\
    Jerry jERRY JeRRRY\") == 5\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] count_distinct_characters(::String)\
    \ at /tmp/tmpz2bou03f.jl:9\n   [2] top-level scope at /tmp/tmpz2bou03f.jl:19\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpz2bou03f.jl:14\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz2bou03f.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(collect(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpit5b0rma.jl:17\\n  Expression: candidate(\"\
    abcdecadeCADE\") == 5\\n   Evaluated: 9 == 5\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpit5b0rma.jl:17\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpit5b0rma.jl:14\\ntest set: Test Failed at /tmp/tmpit5b0rma.jl:18\\\
    n  Expression: candidate(\"aaaaAAAAaaaa\") == 1\\n   Evaluated: 2 == 1\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpit5b0rma.jl:18\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpit5b0rma.jl:14\\ntest set: Test Failed at /tmp/tmpit5b0rma.jl:19\\\
    n  Expression: candidate(\"Jerry jERRY JeRRRY\") == 5\\n   Evaluated: 9 == 5\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpit5b0rma.jl:19\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpit5b0rma.jl:14\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(Set(collect(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmporonwbwi.jl:17\n  Expression: candidate(\"\
    abcdecadeCADE\") == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmporonwbwi.jl:17\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmporonwbwi.jl:14\ntest set: Test Failed at /tmp/tmporonwbwi.jl:18\n\
    \  Expression: candidate(\"aaaaAAAAaaaa\") == 1\n   Evaluated: 2 == 1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmporonwbwi.jl:18\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmporonwbwi.jl:14\ntest set: Test Failed at /tmp/tmporonwbwi.jl:19\n\
    \  Expression: candidate(\"Jerry jERRY JeRRRY\") == 5\n   Evaluated: 9 == 5\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmporonwbwi.jl:19\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmporonwbwi.jl:14\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmporonwbwi.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # YOUR CODE HERE\n  \
    \  return length(unique(lowercase(string)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = count_distinct_characters;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\") == 5)\n\t@test(candidate(\"\
    aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    distinct_characters =\
    \ Set{Char}()\n    for character in string\n        push!(distinct_characters,\
    \ character)\n    end\n    return length(distinct_characters)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = count_distinct_characters;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\"\
    ) == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry\
    \ jERRY JeRRRY\") == 5)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyvog3xt6.jl:21\n  Expression: candidate(\"\
    abcdecadeCADE\") == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpyvog3xt6.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyvog3xt6.jl:18\ntest set: Test Failed at /tmp/tmpyvog3xt6.jl:22\n\
    \  Expression: candidate(\"aaaaAAAAaaaa\") == 1\n   Evaluated: 2 == 1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyvog3xt6.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyvog3xt6.jl:18\ntest set: Test Failed at /tmp/tmpyvog3xt6.jl:23\n\
    \  Expression: candidate(\"Jerry jERRY JeRRRY\") == 5\n   Evaluated: 9 == 5\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpyvog3xt6.jl:23\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyvog3xt6.jl:18\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyvog3xt6.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    distinct_characters =\
    \ Set{Char}()\n    for character in string\n        push!(distinct_characters,\
    \ character)\n    end\n    return length(distinct_characters)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = count_distinct_characters;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\"\
    ) == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry\
    \ jERRY JeRRRY\") == 5)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpbotdyn93.jl:21\\n  Expression: candidate(\"\
    abcdecadeCADE\") == 5\\n   Evaluated: 9 == 5\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpbotdyn93.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpbotdyn93.jl:18\\ntest set: Test Failed at /tmp/tmpbotdyn93.jl:22\\\
    n  Expression: candidate(\"aaaaAAAAaaaa\") == 1\\n   Evaluated: 2 == 1\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpbotdyn93.jl:22\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpbotdyn93.jl:18\\ntest set: Test Failed at /tmp/tmpbotdyn93.jl:23\\\
    n  Expression: candidate(\"Jerry jERRY JeRRRY\") == 5\\n   Evaluated: 9 == 5\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpbotdyn93.jl:23\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpbotdyn93.jl:18\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(collect(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp6l7jtvb6.jl:17\\n  Expression: candidate(\"\
    abcdecadeCADE\") == 5\\n   Evaluated: 9 == 5\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmp6l7jtvb6.jl:17\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp6l7jtvb6.jl:14\\ntest set: Test Failed at /tmp/tmp6l7jtvb6.jl:18\\\
    n  Expression: candidate(\"aaaaAAAAaaaa\") == 1\\n   Evaluated: 2 == 1\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp6l7jtvb6.jl:18\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp6l7jtvb6.jl:14\\ntest set: Test Failed at /tmp/tmp6l7jtvb6.jl:19\\\
    n  Expression: candidate(\"Jerry jERRY JeRRRY\") == 5\\n   Evaluated: 9 == 5\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmp6l7jtvb6.jl:19\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp6l7jtvb6.jl:14\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    2     3      5\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # YOUR CODE HERE\n  \
    \  return length(unique(lowercase(string)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = count_distinct_characters;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\") == 5)\n\t@test(candidate(\"\
    aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # YOUR CODE HERE\n  \
    \  return length(unique(lowercase(string)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = count_distinct_characters;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\") == 5)\n\t@test(candidate(\"\
    aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # YOUR CODE HERE\n  \
    \  return length(unique(lowercase(string)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = count_distinct_characters;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\") == 5)\n\t@test(candidate(\"\
    aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    characters = Set()\n\
    \    for c in string\n        push!(characters, c)\n    end\n    return length(characters)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwokccqyf.jl:21\n  Expression: candidate(\"\
    abcdecadeCADE\") == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpwokccqyf.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwokccqyf.jl:18\ntest set: Test Failed at /tmp/tmpwokccqyf.jl:22\n\
    \  Expression: candidate(\"aaaaAAAAaaaa\") == 1\n   Evaluated: 2 == 1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwokccqyf.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwokccqyf.jl:18\ntest set: Test Failed at /tmp/tmpwokccqyf.jl:23\n\
    \  Expression: candidate(\"Jerry jERRY JeRRRY\") == 5\n   Evaluated: 9 == 5\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpwokccqyf.jl:23\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwokccqyf.jl:18\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwokccqyf.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # YOUR CODE HERE\n  \
    \  return length(unique(collect(string)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = count_distinct_characters;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\") == 5)\n\t@test(candidate(\"\
    aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcl4vkadc.jl:18\n  Expression: candidate(\"\
    abcdecadeCADE\") == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpcl4vkadc.jl:18\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcl4vkadc.jl:15\ntest set: Test Failed at /tmp/tmpcl4vkadc.jl:19\n\
    \  Expression: candidate(\"aaaaAAAAaaaa\") == 1\n   Evaluated: 2 == 1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcl4vkadc.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcl4vkadc.jl:15\ntest set: Test Failed at /tmp/tmpcl4vkadc.jl:20\n\
    \  Expression: candidate(\"Jerry jERRY JeRRRY\") == 5\n   Evaluated: 9 == 5\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpcl4vkadc.jl:20\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcl4vkadc.jl:15\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcl4vkadc.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # YOUR CODE HERE\n  \
    \  return length(unique(lowercase(string)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = count_distinct_characters;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\") == 5)\n\t@test(candidate(\"\
    aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # YOUR CODE HERE\n  \
    \  return length(unique(lowercase(string)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = count_distinct_characters;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\") == 5)\n\t@test(candidate(\"\
    aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # Your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\"\
    ) == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry\
    \ jERRY JeRRRY\") == 5)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpzta1vpdg.jl:15\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == 0\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Ptr) where T<:Integer at pointer.jl:23\\n    ...\\\
    n  Stacktrace:\\n   [1] count_distinct_characters(::String) at /tmp/tmpzta1vpdg.jl:9\\\
    n   [2] top-level scope at /tmp/tmpzta1vpdg.jl:15\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpzta1vpdg.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpzta1vpdg.jl:16\\n  Test threw exception\\n  Expression: candidate(\"\
    abcde\") == 5\\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where\
    \ T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at pointer.jl:23\\n    ...\\n  Stacktrace:\\n   [1] count_distinct_characters(::String)\
    \ at /tmp/tmpzta1vpdg.jl:9\\n   [2] top-level scope at /tmp/tmpzta1vpdg.jl:16\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpzta1vpdg.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpzta1vpdg.jl:17\\n  Test threw exception\\n  Expression: candidate(\"\
    abcdecadeCADE\") == 5\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\\n    ...\\n  Stacktrace:\\n   [1] count_distinct_characters(::String)\
    \ at /tmp/tmpzta1vpdg.jl:9\\n   [2] top-level scope at /tmp/tmpzta1vpdg.jl:17\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpzta1vpdg.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpzta1vpdg.jl:18\\n  Test threw exception\\n  Expression: candidate(\"\
    aaaaAAAAaaaa\") == 1\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\\n    ...\\n  Stacktrace:\\n   [1] count_distinct_characters(::String)\
    \ at /tmp/tmpzta1vpdg.jl:9\\n   [2] top-level scope at /tmp/tmpzta1vpdg.jl:18\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpzta1vpdg.jl:14\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpzta1vpdg.jl:19\\n  Test threw exception\\n  Expression: candidate(\"\
    Jerry jERRY JeRRRY\") == 5\\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\\n    ...\\n  Stacktrace:\\n   [1] count_distinct_characters(::String)\
    \ at /tmp/tmpzta1vpdg.jl:9\\n   [2] top-level scope at /tmp/tmpzta1vpdg.jl:19\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpzta1vpdg.jl:14\\n  \\nTest Summary: | Error\
    \  Total\\ntest set      |     5      5\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(Set(collect(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph_jxpnwr.jl:17\n  Expression: candidate(\"\
    abcdecadeCADE\") == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmph_jxpnwr.jl:17\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph_jxpnwr.jl:14\ntest set: Test Failed at /tmp/tmph_jxpnwr.jl:18\n\
    \  Expression: candidate(\"aaaaAAAAaaaa\") == 1\n   Evaluated: 2 == 1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmph_jxpnwr.jl:18\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph_jxpnwr.jl:14\ntest set: Test Failed at /tmp/tmph_jxpnwr.jl:19\n\
    \  Expression: candidate(\"Jerry jERRY JeRRRY\") == 5\n   Evaluated: 9 == 5\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmph_jxpnwr.jl:19\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph_jxpnwr.jl:14\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph_jxpnwr.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # your code here\n  \
    \  return length(unique(lowercase(string)))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = count_distinct_characters;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\") == 5)\n\t@test(candidate(\"\
    aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(collect(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_aqt93f6.jl:17\n  Expression: candidate(\"\
    abcdecadeCADE\") == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp_aqt93f6.jl:17\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_aqt93f6.jl:14\ntest set: Test Failed at /tmp/tmp_aqt93f6.jl:18\n\
    \  Expression: candidate(\"aaaaAAAAaaaa\") == 1\n   Evaluated: 2 == 1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_aqt93f6.jl:18\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_aqt93f6.jl:14\ntest set: Test Failed at /tmp/tmp_aqt93f6.jl:19\n\
    \  Expression: candidate(\"Jerry jERRY JeRRRY\") == 5\n   Evaluated: 9 == 5\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp_aqt93f6.jl:19\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_aqt93f6.jl:14\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_aqt93f6.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\"\
    ) == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry\
    \ jERRY JeRRRY\") == 5)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqam4960g.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] count_distinct_characters(::String)\
    \ at /tmp/tmpqam4960g.jl:9\n   [2] top-level scope at /tmp/tmpqam4960g.jl:15\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqam4960g.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpqam4960g.jl:16\n  Test threw exception\n  Expression: candidate(\"\
    abcde\") == 5\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number) where\
    \ T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] count_distinct_characters(::String)\
    \ at /tmp/tmpqam4960g.jl:9\n   [2] top-level scope at /tmp/tmpqam4960g.jl:16\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqam4960g.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpqam4960g.jl:17\n  Test threw exception\n  Expression: candidate(\"\
    abcdecadeCADE\") == 5\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] count_distinct_characters(::String)\
    \ at /tmp/tmpqam4960g.jl:9\n   [2] top-level scope at /tmp/tmpqam4960g.jl:17\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqam4960g.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpqam4960g.jl:18\n  Test threw exception\n  Expression: candidate(\"\
    aaaaAAAAaaaa\") == 1\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] count_distinct_characters(::String)\
    \ at /tmp/tmpqam4960g.jl:9\n   [2] top-level scope at /tmp/tmpqam4960g.jl:18\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqam4960g.jl:14\n  \ntest set: Error During\
    \ Test at /tmp/tmpqam4960g.jl:19\n  Test threw exception\n  Expression: candidate(\"\
    Jerry jERRY JeRRRY\") == 5\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] count_distinct_characters(::String)\
    \ at /tmp/tmpqam4960g.jl:9\n   [2] top-level scope at /tmp/tmpqam4960g.jl:19\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqam4960g.jl:14\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqam4960g.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    characters = Set{Char}()\n\
    \    for c in string\n        push!(characters, c)\n    end\n    return length(characters)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6r_bidj6.jl:21\n  Expression: candidate(\"\
    abcdecadeCADE\") == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp6r_bidj6.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6r_bidj6.jl:18\ntest set: Test Failed at /tmp/tmp6r_bidj6.jl:22\n\
    \  Expression: candidate(\"aaaaAAAAaaaa\") == 1\n   Evaluated: 2 == 1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6r_bidj6.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6r_bidj6.jl:18\ntest set: Test Failed at /tmp/tmp6r_bidj6.jl:23\n\
    \  Expression: candidate(\"Jerry jERRY JeRRRY\") == 5\n   Evaluated: 9 == 5\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp6r_bidj6.jl:23\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6r_bidj6.jl:18\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6r_bidj6.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    distinct_characters =\
    \ Set{Char}()\n    for character in string\n        push!(distinct_characters,\
    \ character)\n    end\n    return length(distinct_characters)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = count_distinct_characters;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\"\
    ) == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry\
    \ jERRY JeRRRY\") == 5)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi_neylm1.jl:21\n  Expression: candidate(\"\
    abcdecadeCADE\") == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpi_neylm1.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi_neylm1.jl:18\ntest set: Test Failed at /tmp/tmpi_neylm1.jl:22\n\
    \  Expression: candidate(\"aaaaAAAAaaaa\") == 1\n   Evaluated: 2 == 1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi_neylm1.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi_neylm1.jl:18\ntest set: Test Failed at /tmp/tmpi_neylm1.jl:23\n\
    \  Expression: candidate(\"Jerry jERRY JeRRRY\") == 5\n   Evaluated: 9 == 5\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpi_neylm1.jl:23\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi_neylm1.jl:18\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi_neylm1.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(collect(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbu58ntms.jl:17\n  Expression: candidate(\"\
    abcdecadeCADE\") == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpbu58ntms.jl:17\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbu58ntms.jl:14\ntest set: Test Failed at /tmp/tmpbu58ntms.jl:18\n\
    \  Expression: candidate(\"aaaaAAAAaaaa\") == 1\n   Evaluated: 2 == 1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbu58ntms.jl:18\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbu58ntms.jl:14\ntest set: Test Failed at /tmp/tmpbu58ntms.jl:19\n\
    \  Expression: candidate(\"Jerry jERRY JeRRRY\") == 5\n   Evaluated: 9 == 5\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpbu58ntms.jl:19\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbu58ntms.jl:14\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbu58ntms.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    distinct_characters =\
    \ Set{Char}()\n    for character in string\n        push!(distinct_characters,\
    \ character)\n    end\n    return length(distinct_characters)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = count_distinct_characters;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\"\
    ) == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry\
    \ jERRY JeRRRY\") == 5)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphiii_7u5.jl:21\n  Expression: candidate(\"\
    abcdecadeCADE\") == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmphiii_7u5.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphiii_7u5.jl:18\ntest set: Test Failed at /tmp/tmphiii_7u5.jl:22\n\
    \  Expression: candidate(\"aaaaAAAAaaaa\") == 1\n   Evaluated: 2 == 1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphiii_7u5.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphiii_7u5.jl:18\ntest set: Test Failed at /tmp/tmphiii_7u5.jl:23\n\
    \  Expression: candidate(\"Jerry jERRY JeRRRY\") == 5\n   Evaluated: 9 == 5\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmphiii_7u5.jl:23\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphiii_7u5.jl:18\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphiii_7u5.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    distinct_characters =\
    \ Set{Char}()\n    for character in string\n        push!(distinct_characters,\
    \ character)\n    end\n    return length(distinct_characters)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = count_distinct_characters;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"abcdecadeCADE\"\
    ) == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"Jerry\
    \ jERRY JeRRRY\") == 5)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6gftna82.jl:21\n  Expression: candidate(\"\
    abcdecadeCADE\") == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp6gftna82.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6gftna82.jl:18\ntest set: Test Failed at /tmp/tmp6gftna82.jl:22\n\
    \  Expression: candidate(\"aaaaAAAAaaaa\") == 1\n   Evaluated: 2 == 1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6gftna82.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6gftna82.jl:18\ntest set: Test Failed at /tmp/tmp6gftna82.jl:23\n\
    \  Expression: candidate(\"Jerry jERRY JeRRRY\") == 5\n   Evaluated: 9 == 5\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp6gftna82.jl:23\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6gftna82.jl:18\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6gftna82.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n \
    \   3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\nfunction\
    \ count_distinct_characters(string::String)::Int64 \n    return length(unique(lowercase(string)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
    abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
    Jerry jERRY JeRRRY\") == 5)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
