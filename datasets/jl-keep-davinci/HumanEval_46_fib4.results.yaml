name: HumanEval_46_fib4
language: julia
results:
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 4\n        return n\n    end\n    a, b, c, d = 0, 0, 2, 0\n   \
    \ for i in 4:n\n        a, b, c, d = b, c, d, a + b + c + d\n    end\n    return\
    \ d\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in 1:n-3\n        a,b,c,d\
    \ = b,c,d,a+b+c+d\n    end\n    return d\nend\nusing Test\n\n@testset begin\n\n\
    candidate = fib4;\n\t@test(candidate(5) == 4)\n\t@test(candidate(8) == 28)\n\t\
    @test(candidate(10) == 104)\n\t@test(candidate(12) == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 4\n        return n\n    end\n    a, b, c, d = 0, 0, 2, 0\n   \
    \ for i in 4:n\n        a, b, c, d = b, c, d, a + b + c + d\n    end\n    return\
    \ d\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i = 4:n\n\
    \            temp = a + b + c + d\n            a = b\n            b = c\n    \
    \        c = d\n            d = temp\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 4\n        return n\n    end\n    a = 0\n    b = 0\n    c = 2\n\
    \    d = 0\n    for i in 4:n\n        d = a + b + c\n        a = b\n        b\
    \ = c\n        c = d\n    end\n    return d\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\t@test(candidate(8) == 28)\n\
    \t@test(candidate(10) == 104)\n\t@test(candidate(12) == 386)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt8y6j244.jl:37\n  Expression: candidate(8)\
    \ == 28\n   Evaluated: 26 == 28\nStacktrace:\n [1] top-level scope at /tmp/tmpt8y6j244.jl:37\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt8y6j244.jl:35\ntest set: Test Failed at /tmp/tmpt8y6j244.jl:38\n\
    \  Expression: candidate(10) == 104\n   Evaluated: 88 == 104\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpt8y6j244.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt8y6j244.jl:35\ntest set: Test Failed at /tmp/tmpt8y6j244.jl:39\n\
    \  Expression: candidate(12) == 386\n   Evaluated: 298 == 386\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpt8y6j244.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt8y6j244.jl:35\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt8y6j244.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 4\n        return n\n    end\n    a, b, c, d = 0, 0, 2, 0\n   \
    \ for i in 4:n\n        a, b, c, d = b, c, d, a + b + c + d\n    end\n    return\
    \ d\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 4\n        return n\n    end\n    a, b, c, d = 0, 0, 2, 0\n   \
    \ for i in 4:n\n        a, b, c, d = b, c, d, a + b + c + d\n    end\n    return\
    \ d\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 0\n        error(\"n must be non-negative\")\n    end\n    if n\
    \ == 0\n        return 0\n    end\n    if n == 1\n        return 0\n    end\n\
    \    if n == 2\n        return 2\n    end\n    if n == 3\n        return 0\n \
    \   end\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in 4:n\n      \
    \  a, b, c, d = b, c, d, a + b + c + d\n    end\n    return d\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\t@test(candidate(8)\
    \ == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12) == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    a, b, c, d = 0, 0, 2, 0\n    for i in 1:n-3\n        a, b, c, d = b, c,\
    \ d, a+b+c+d\n    end\n    return d\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib4;\n\t@test(candidate(5) == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10)\
    \ == 104)\n\t@test(candidate(12) == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 0\n        throw(ArgumentError(\"n must be non-negative\"))\n \
    \   end\n    if n == 0\n        return 0\n    end\n    if n == 1\n        return\
    \ 0\n    end\n    if n == 2\n        return 2\n    end\n    if n == 3\n      \
    \  return 0\n    end\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in\
    \ 4:n\n        a, b, c, d = b, c, d, a + b + c + d\n    end\n    return d\nend\n\
    using Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\
    \t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 4\n        return n\n    end\n    a, b, c, d = 0, 0, 2, 0\n   \
    \ for i in 4:n\n        a, b, c, d = b, c, d, a + b + c + d\n    end\n    return\
    \ d\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 0\n        return 0\n    end\n    a = 0\n    b = 0\n    c = 2\n\
    \    d = 0\n    for i in 1:n-2\n        d = a + b + c\n        a = b\n       \
    \ b = c\n        c = d\n    end\n    return d\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\t@test(candidate(8) == 28)\n\
    \t@test(candidate(10) == 104)\n\t@test(candidate(12) == 386)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp_ucm06_m.jl:36\\n  Expression: candidate(5)\
    \ == 4\\n   Evaluated: 8 == 4\\nStacktrace:\\n [1] top-level scope at /tmp/tmp_ucm06_m.jl:36\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp_ucm06_m.jl:35\\ntest set: Test Failed at /tmp/tmp_ucm06_m.jl:37\\\
    n  Expression: candidate(8) == 28\\n   Evaluated: 48 == 28\\nStacktrace:\\n [1]\
    \ top-level scope at /tmp/tmp_ucm06_m.jl:37\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp_ucm06_m.jl:35\\ntest set: Test Failed at /tmp/tmp_ucm06_m.jl:38\\\
    n  Expression: candidate(10) == 104\\n   Evaluated: 162 == 104\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp_ucm06_m.jl:38\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp_ucm06_m.jl:35\\ntest set: Test Failed at /tmp/tmp_ucm06_m.jl:39\\\
    n  Expression: candidate(12) == 386\\n   Evaluated: 548 == 386\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp_ucm06_m.jl:39\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp_ucm06_m.jl:35\\nTest Summary: | '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 0\n        error(\"n must be non-negative\")\n    end\n    if n\
    \ == 0\n        return 0\n    end\n    if n == 1\n        return 0\n    end\n\
    \    if n == 2\n        return 2\n    end\n    if n == 3\n        return 0\n \
    \   end\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in 4:n\n      \
    \  a, b, c, d = b, c, d, a + b + c + d\n    end\n    return d\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\t@test(candidate(8)\
    \ == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12) == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            temp = a + b + c + d\n            a = b\n            b = c\n\
    \            c = d\n            d = temp\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in 1:n-3\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    end\n    return\
    \ d\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpopikjjs1.jl:34\n  Expression: candidate(8)\
    \ == 28\n   Evaluated: 26 == 28\nStacktrace:\n [1] top-level scope at /tmp/tmpopikjjs1.jl:34\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpopikjjs1.jl:32\ntest set: Test Failed at /tmp/tmpopikjjs1.jl:35\n\
    \  Expression: candidate(10) == 104\n   Evaluated: 88 == 104\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpopikjjs1.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpopikjjs1.jl:32\ntest set: Test Failed at /tmp/tmpopikjjs1.jl:36\n\
    \  Expression: candidate(12) == 386\n   Evaluated: 298 == 386\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpopikjjs1.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpopikjjs1.jl:32\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpopikjjs1.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 4\n        return n\n    end\n    a = 0\n    b = 0\n    c = 2\n\
    \    d = 0\n    for i in 4:n\n        d = a + b + c\n        a = b\n        b\
    \ = c\n        c = d\n    end\n    return d\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\t@test(candidate(8) == 28)\n\
    \t@test(candidate(10) == 104)\n\t@test(candidate(12) == 386)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1qf38qbm.jl:37\n  Expression: candidate(8)\
    \ == 28\n   Evaluated: 26 == 28\nStacktrace:\n [1] top-level scope at /tmp/tmp1qf38qbm.jl:37\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1qf38qbm.jl:35\ntest set: Test Failed at /tmp/tmp1qf38qbm.jl:38\n\
    \  Expression: candidate(10) == 104\n   Evaluated: 88 == 104\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp1qf38qbm.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1qf38qbm.jl:35\ntest set: Test Failed at /tmp/tmp1qf38qbm.jl:39\n\
    \  Expression: candidate(12) == 386\n   Evaluated: 298 == 386\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp1qf38qbm.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1qf38qbm.jl:35\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1qf38qbm.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in 1:n-3\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    end\n    return\
    \ d\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw0e2gmww.jl:34\n  Expression: candidate(8)\
    \ == 28\n   Evaluated: 26 == 28\nStacktrace:\n [1] top-level scope at /tmp/tmpw0e2gmww.jl:34\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpw0e2gmww.jl:32\ntest set: Test Failed at /tmp/tmpw0e2gmww.jl:35\n\
    \  Expression: candidate(10) == 104\n   Evaluated: 88 == 104\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpw0e2gmww.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpw0e2gmww.jl:32\ntest set: Test Failed at /tmp/tmpw0e2gmww.jl:36\n\
    \  Expression: candidate(12) == 386\n   Evaluated: 298 == 386\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpw0e2gmww.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpw0e2gmww.jl:32\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw0e2gmww.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 0\n        return 0\n    end\n    a = 0\n    b = 0\n    c = 2\n\
    \    d = 0\n    for i in 3:n\n        a, b, c, d = b, c, d, a + b + c + d\n  \
    \  end\n    return d\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\
    \t@test(candidate(5) == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10)\
    \ == 104)\n\t@test(candidate(12) == 386)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmhgh9kak.jl:33\n  Expression: candidate(5)\
    \ == 4\n   Evaluated: 8 == 4\nStacktrace:\n [1] top-level scope at /tmp/tmpmhgh9kak.jl:33\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmhgh9kak.jl:32\ntest set: Test Failed at /tmp/tmpmhgh9kak.jl:34\n\
    \  Expression: candidate(8) == 28\n   Evaluated: 54 == 28\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpmhgh9kak.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmhgh9kak.jl:32\ntest set: Test Failed at /tmp/tmpmhgh9kak.jl:35\n\
    \  Expression: candidate(10) == 104\n   Evaluated: 200 == 104\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpmhgh9kak.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmhgh9kak.jl:32\ntest set: Test Failed at /tmp/tmpmhgh9kak.jl:36\n\
    \  Expression: candidate(12) == 386\n   Evaluated: 744 == 386\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpmhgh9kak.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmhgh9kak.jl:32\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmhgh9kak.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 0\n        return 0\n    end\n    a = 0\n    b = 0\n    c = 2\n\
    \    d = 0\n    for i in 3:n\n        d = a + b + c\n        a = b\n        b\
    \ = c\n        c = d\n    end\n    return d\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\t@test(candidate(8) == 28)\n\
    \t@test(candidate(10) == 104)\n\t@test(candidate(12) == 386)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbjidlwkd.jl:36\n  Expression: candidate(5)\
    \ == 4\n   Evaluated: 8 == 4\nStacktrace:\n [1] top-level scope at /tmp/tmpbjidlwkd.jl:36\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbjidlwkd.jl:35\ntest set: Test Failed at /tmp/tmpbjidlwkd.jl:37\n\
    \  Expression: candidate(8) == 28\n   Evaluated: 48 == 28\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpbjidlwkd.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbjidlwkd.jl:35\ntest set: Test Failed at /tmp/tmpbjidlwkd.jl:38\n\
    \  Expression: candidate(10) == 104\n   Evaluated: 162 == 104\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpbjidlwkd.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbjidlwkd.jl:35\ntest set: Test Failed at /tmp/tmpbjidlwkd.jl:39\n\
    \  Expression: candidate(12) == 386\n   Evaluated: 548 == 386\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpbjidlwkd.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbjidlwkd.jl:35\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbjidlwkd.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 0\n        return -1\n    end\n    if n == 0\n        return 0\n\
    \    end\n    if n == 1\n        return 0\n    end\n    if n == 2\n        return\
    \ 2\n    end\n    if n == 3\n        return 0\n    end\n    a = 0\n    b = 0\n\
    \    c = 2\n    d = 0\n    for i in 4:n\n        a = b\n        b = c\n      \
    \  c = d\n        d = a + b + c\n    end\n    return d\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\t@test(candidate(8)\
    \ == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12) == 386)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9cdc_zpp.jl:49\n  Expression: candidate(8)\
    \ == 28\n   Evaluated: 22 == 28\nStacktrace:\n [1] top-level scope at /tmp/tmp9cdc_zpp.jl:49\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9cdc_zpp.jl:47\ntest set: Test Failed at /tmp/tmp9cdc_zpp.jl:50\n\
    \  Expression: candidate(10) == 104\n   Evaluated: 74 == 104\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp9cdc_zpp.jl:50\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9cdc_zpp.jl:47\ntest set: Test Failed at /tmp/tmp9cdc_zpp.jl:51\n\
    \  Expression: candidate(12) == 386\n   Evaluated: 250 == 386\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp9cdc_zpp.jl:51\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9cdc_zpp.jl:47\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9cdc_zpp.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 3\n        return n\n    end\n    a = 0\n    b = 0\n    c = 2\n\
    \    d = 0\n    for i in 3:n\n        d = a + b + c\n        a = b\n        b\
    \ = c\n        c = d\n    end\n    return d\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\t@test(candidate(8) == 28)\n\
    \t@test(candidate(10) == 104)\n\t@test(candidate(12) == 386)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphnboo75m.jl:36\n  Expression: candidate(5)\
    \ == 4\n   Evaluated: 8 == 4\nStacktrace:\n [1] top-level scope at /tmp/tmphnboo75m.jl:36\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphnboo75m.jl:35\ntest set: Test Failed at /tmp/tmphnboo75m.jl:37\n\
    \  Expression: candidate(8) == 28\n   Evaluated: 48 == 28\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmphnboo75m.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphnboo75m.jl:35\ntest set: Test Failed at /tmp/tmphnboo75m.jl:38\n\
    \  Expression: candidate(10) == 104\n   Evaluated: 162 == 104\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmphnboo75m.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphnboo75m.jl:35\ntest set: Test Failed at /tmp/tmphnboo75m.jl:39\n\
    \  Expression: candidate(12) == 386\n   Evaluated: 548 == 386\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmphnboo75m.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphnboo75m.jl:35\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphnboo75m.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 0\n        error(\"n must be non-negative\")\n    end\n    if n\
    \ == 0\n        return 0\n    end\n    if n == 1\n        return 0\n    end\n\
    \    if n == 2\n        return 2\n    end\n    if n == 3\n        return 0\n \
    \   end\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in 4:n\n      \
    \  a, b, c, d = b, c, d, a + b + c + d\n    end\n    return d\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\t@test(candidate(8)\
    \ == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12) == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            temp = a + b + c + d\n            a = b\n            b = c\n\
    \            c = d\n            d = temp\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 4\n        return n\n    end\n    a, b, c, d = 0, 0, 2, 0\n   \
    \ for i in 4:n\n        a, b, c, d = b, c, d, a + b + c + d\n    end\n    return\
    \ d\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i = 4:n\n\
    \            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 4\n        return n\n    end\n    a = 0\n    b = 0\n    c = 2\n\
    \    d = 0\n    for i in 4:n\n        d = a + b + c\n        a = b\n        b\
    \ = c\n        c = d\n    end\n    return d\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\t@test(candidate(8) == 28)\n\
    \t@test(candidate(10) == 104)\n\t@test(candidate(12) == 386)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9oxn3teu.jl:37\n  Expression: candidate(8)\
    \ == 28\n   Evaluated: 26 == 28\nStacktrace:\n [1] top-level scope at /tmp/tmp9oxn3teu.jl:37\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9oxn3teu.jl:35\ntest set: Test Failed at /tmp/tmp9oxn3teu.jl:38\n\
    \  Expression: candidate(10) == 104\n   Evaluated: 88 == 104\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp9oxn3teu.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9oxn3teu.jl:35\ntest set: Test Failed at /tmp/tmp9oxn3teu.jl:39\n\
    \  Expression: candidate(12) == 386\n   Evaluated: 298 == 386\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp9oxn3teu.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9oxn3teu.jl:35\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9oxn3teu.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i = 4:n\n\
    \            temp = a + b + c + d\n            a = b\n            b = c\n    \
    \        c = d\n            d = temp\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in 1:n-3\n        a,b,c,d\
    \ = b,c,d,a+b+c+d\n    end\n    return d\nend\nusing Test\n\n@testset begin\n\n\
    candidate = fib4;\n\t@test(candidate(5) == 4)\n\t@test(candidate(8) == 28)\n\t\
    @test(candidate(10) == 104)\n\t@test(candidate(12) == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 4\n        return n\n    end\n    a, b, c, d = 0, 0, 2, 0\n   \
    \ for i in 4:n\n        a, b, c, d = b, c, d, a + b + c + d\n    end\n    return\
    \ d\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a = b + c + d\n            b = c\n            c = d\n     \
    \       d = a\n        end\n        return a\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\t@test(candidate(8)\
    \ == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12) == 386)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwfboneau.jl:44\n  Expression: candidate(8)\
    \ == 28\n   Evaluated: 22 == 28\nStacktrace:\n [1] top-level scope at /tmp/tmpwfboneau.jl:44\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwfboneau.jl:42\ntest set: Test Failed at /tmp/tmpwfboneau.jl:45\n\
    \  Expression: candidate(10) == 104\n   Evaluated: 74 == 104\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpwfboneau.jl:45\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwfboneau.jl:42\ntest set: Test Failed at /tmp/tmpwfboneau.jl:46\n\
    \  Expression: candidate(12) == 386\n   Evaluated: 250 == 386\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpwfboneau.jl:46\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwfboneau.jl:42\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwfboneau.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 4\n        return n\n    end\n    a, b, c, d = 0, 0, 2, 0\n   \
    \ for i in 4:n\n        a, b, c, d = b, c, d, a + b + c + d\n    end\n    return\
    \ d\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            temp = a + b + c + d\n            a = b\n            b = c\n\
    \            c = d\n            d = temp\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            temp = a + b + c + d\n            a = b\n            b = c\n\
    \            c = d\n            d = temp\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 0\n        throw(ArgumentError(\"n must be non-negative\"))\n \
    \   end\n    if n == 0\n        return 0\n    end\n    if n == 1\n        return\
    \ 0\n    end\n    if n == 2\n        return 2\n    end\n    if n == 3\n      \
    \  return 0\n    end\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in\
    \ 4:n\n        a, b, c, d = b, c, d, a + b + c + d\n    end\n    return d\nend\n\
    using Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\
    \t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0 \n        return 0\n    elseif n == 1 \n        return 0\n \
    \   elseif n == 2 \n        return 2\n    elseif n == 3 \n        return 0\n \
    \   else \n        a = 0\n        b = 0\n        c = 2\n        d = 0\n      \
    \  for i in 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n\
    \        return d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\
    \t@test(candidate(5) == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10)\
    \ == 104)\n\t@test(candidate(12) == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 4\n        return n\n    end\n    a, b, c, d = 0, 0, 2, 0\n   \
    \ for i in 4:n\n        a, b, c, d = b, c, d, a + b + c + d\n    end\n    return\
    \ d\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 0\n        error(\"n must be positive\")\n    end\n    if n ==\
    \ 0\n        return 0\n    end\n    if n == 1\n        return 0\n    end\n   \
    \ if n == 2\n        return 2\n    end\n    if n == 3\n        return 0\n    end\n\
    \    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in 4:n\n        a, b, c,\
    \ d = b, c, d, a + b + c + d\n    end\n    return d\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\t@test(candidate(8)\
    \ == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12) == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 0\n        error(\"n must be non-negative\")\n    end\n    if n\
    \ == 0\n        return 0\n    end\n    if n == 1\n        return 0\n    end\n\
    \    if n == 2\n        return 2\n    end\n    if n == 3\n        return 0\n \
    \   end\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in 4:n\n      \
    \  a, b, c, d = b, c, d, a + b + c + d\n    end\n    return d\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\t@test(candidate(8)\
    \ == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12) == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 4\n        return n\n    end\n    a = 0\n    b = 0\n    c = 2\n\
    \    d = 0\n    for i in 4:n\n        d = a + b + c\n        a = b\n        b\
    \ = c\n        c = d\n    end\n    return d\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\t@test(candidate(8) == 28)\n\
    \t@test(candidate(10) == 104)\n\t@test(candidate(12) == 386)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2aqcg6fw.jl:37\n  Expression: candidate(8)\
    \ == 28\n   Evaluated: 26 == 28\nStacktrace:\n [1] top-level scope at /tmp/tmp2aqcg6fw.jl:37\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2aqcg6fw.jl:35\ntest set: Test Failed at /tmp/tmp2aqcg6fw.jl:38\n\
    \  Expression: candidate(10) == 104\n   Evaluated: 88 == 104\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp2aqcg6fw.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2aqcg6fw.jl:35\ntest set: Test Failed at /tmp/tmp2aqcg6fw.jl:39\n\
    \  Expression: candidate(12) == 386\n   Evaluated: 298 == 386\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp2aqcg6fw.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2aqcg6fw.jl:35\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2aqcg6fw.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 0\n        throw(ArgumentError(\"n must be non-negative\"))\n \
    \   end\n    if n == 0\n        return 0\n    end\n    if n == 1\n        return\
    \ 0\n    end\n    if n == 2\n        return 2\n    end\n    if n == 3\n      \
    \  return 0\n    end\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in\
    \ 4:n\n        a, b, c, d = b, c, d, a + b + c + d\n    end\n    return d\nend\n\
    using Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\
    \t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 4\n        return n\n    end\n    a, b, c, d = 0, 0, 2, 0\n   \
    \ for i in 4:n\n        a, b, c, d = b, c, d, a + b + c + d\n    end\n    return\
    \ d\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 0\n        return 0\n    end\n    if n == 0\n        return 0\n\
    \    end\n    if n == 1\n        return 0\n    end\n    if n == 2\n        return\
    \ 2\n    end\n    if n == 3\n        return 0\n    end\n    a = 0\n    b = 0\n\
    \    c = 2\n    d = 0\n    for i in 4:n\n        a, b, c, d = b, c, d, a + b +\
    \ c + d\n    end\n    return d\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib4;\n\t@test(candidate(5) == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10)\
    \ == 104)\n\t@test(candidate(12) == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 0\n        return 0\n    end\n    if n == 0\n        return 0\n\
    \    end\n    if n == 1\n        return 0\n    end\n    if n == 2\n        return\
    \ 2\n    end\n    if n == 3\n        return 0\n    end\n    a = 0\n    b = 0\n\
    \    c = 2\n    d = 0\n    for i in 4:n\n        e = a + b + c + d\n        a\
    \ = b\n        b = c\n        c = d\n        d = e\n    end\n    return d\nend\n\
    using Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\
    \t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n <= 0\n        return 0\n    end\n    if n == 1\n        return 0\n\
    \    end\n    if n == 2\n        return 2\n    end\n    if n == 3\n        return\
    \ 0\n    end\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in 4:n\n \
    \       a, b, c, d = b, c, d, a + b + c + d\n    end\n    return d\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\t\
    @test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 0\n        error(\"n must be a positive integer\")\n    end\n \
    \   if n == 0\n        return 0\n    end\n    if n == 1\n        return 0\n  \
    \  end\n    if n == 2\n        return 2\n    end\n    if n == 3\n        return\
    \ 0\n    end\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in 4:n\n \
    \       a, b, c, d = b, c, d, a + b + c + d\n    end\n    return d\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\t\
    @test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 0\n        error(\"n must be a non-negative integer\")\n    end\n\
    \    if n == 0\n        return 0\n    end\n    if n == 1\n        return 0\n \
    \   end\n    if n == 2\n        return 2\n    end\n    if n == 3\n        return\
    \ 0\n    end\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in 4:n\n \
    \       a, b, c, d = b, c, d, a + b + c + d\n    end\n    return d\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\t\
    @test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 4\n        return n\n    end\n    a = 0\n    b = 0\n    c = 2\n\
    \    d = 0\n    for i in 4:n\n        d = a + b + c\n        a = b\n        b\
    \ = c\n        c = d\n    end\n    return d\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\t@test(candidate(8) == 28)\n\
    \t@test(candidate(10) == 104)\n\t@test(candidate(12) == 386)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp075_8hs1.jl:37\n  Expression: candidate(8)\
    \ == 28\n   Evaluated: 26 == 28\nStacktrace:\n [1] top-level scope at /tmp/tmp075_8hs1.jl:37\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp075_8hs1.jl:35\ntest set: Test Failed at /tmp/tmp075_8hs1.jl:38\n\
    \  Expression: candidate(10) == 104\n   Evaluated: 88 == 104\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp075_8hs1.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp075_8hs1.jl:35\ntest set: Test Failed at /tmp/tmp075_8hs1.jl:39\n\
    \  Expression: candidate(12) == 386\n   Evaluated: 298 == 386\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp075_8hs1.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp075_8hs1.jl:35\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp075_8hs1.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 0\n        return 0\n    end\n    a = 0\n    b = 0\n    c = 2\n\
    \    d = 0\n    for i in 3:n\n        d = a + b + c\n        a = b\n        b\
    \ = c\n        c = d\n    end\n    return d\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\t@test(candidate(8) == 28)\n\
    \t@test(candidate(10) == 104)\n\t@test(candidate(12) == 386)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptl__xdyc.jl:36\n  Expression: candidate(5)\
    \ == 4\n   Evaluated: 8 == 4\nStacktrace:\n [1] top-level scope at /tmp/tmptl__xdyc.jl:36\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptl__xdyc.jl:35\ntest set: Test Failed at /tmp/tmptl__xdyc.jl:37\n\
    \  Expression: candidate(8) == 28\n   Evaluated: 48 == 28\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmptl__xdyc.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptl__xdyc.jl:35\ntest set: Test Failed at /tmp/tmptl__xdyc.jl:38\n\
    \  Expression: candidate(10) == 104\n   Evaluated: 162 == 104\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmptl__xdyc.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptl__xdyc.jl:35\ntest set: Test Failed at /tmp/tmptl__xdyc.jl:39\n\
    \  Expression: candidate(12) == 386\n   Evaluated: 548 == 386\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmptl__xdyc.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptl__xdyc.jl:35\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptl__xdyc.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            temp = a + b + c + d\n            a = b\n            b = c\n\
    \            c = d\n            d = temp\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n <= 0\n        return 0\n    end\n    if n == 1\n        return 0\n\
    \    end\n    if n == 2\n        return 2\n    end\n    if n == 3\n        return\
    \ 0\n    end\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in 4:n\n \
    \       a = b\n        b = c\n        c = d\n        d = a + b + c + d\n    end\n\
    \    return d\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwi4pmdue.jl:45\n  Expression: candidate(5)\
    \ == 4\n   Evaluated: 6 == 4\nStacktrace:\n [1] top-level scope at /tmp/tmpwi4pmdue.jl:45\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwi4pmdue.jl:44\ntest set: Test Failed at /tmp/tmpwi4pmdue.jl:46\n\
    \  Expression: candidate(8) == 28\n   Evaluated: 92 == 28\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpwi4pmdue.jl:46\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwi4pmdue.jl:44\ntest set: Test Failed at /tmp/tmpwi4pmdue.jl:47\n\
    \  Expression: candidate(10) == 104\n   Evaluated: 596 == 104\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpwi4pmdue.jl:47\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwi4pmdue.jl:44\ntest set: Test Failed at /tmp/tmpwi4pmdue.jl:48\n\
    \  Expression: candidate(12) == 386\n   Evaluated: 3866 == 386\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwi4pmdue.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwi4pmdue.jl:44\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwi4pmdue.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 4\n        return n\n    end\n    a, b, c, d = 0, 0, 2, 0\n   \
    \ for i in 4:n\n        a, b, c, d = b, c, d, a + b + c + d\n    end\n    return\
    \ d\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 0\n        return 0\n    end\n    if n == 0\n        return 0\n\
    \    end\n    if n == 1\n        return 0\n    end\n    if n == 2\n        return\
    \ 2\n    end\n    if n == 3\n        return 0\n    end\n    n1 = 0\n    n2 = 0\n\
    \    n3 = 2\n    n4 = 0\n    for i in 4:n\n        n5 = n1 + n2 + n3 + n4\n  \
    \      n1 = n2\n        n2 = n3\n        n3 = n4\n        n4 = n5\n    end\n \
    \   return n4\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 4\n        return n\n    end\n    a = 0\n    b = 0\n    c = 2\n\
    \    d = 0\n    for i in 4:n\n        d = a + b + c\n        a = b\n        b\
    \ = c\n        c = d\n    end\n    return d\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\t@test(candidate(8) == 28)\n\
    \t@test(candidate(10) == 104)\n\t@test(candidate(12) == 386)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0lwj59pi.jl:37\n  Expression: candidate(8)\
    \ == 28\n   Evaluated: 26 == 28\nStacktrace:\n [1] top-level scope at /tmp/tmp0lwj59pi.jl:37\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0lwj59pi.jl:35\ntest set: Test Failed at /tmp/tmp0lwj59pi.jl:38\n\
    \  Expression: candidate(10) == 104\n   Evaluated: 88 == 104\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp0lwj59pi.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0lwj59pi.jl:35\ntest set: Test Failed at /tmp/tmp0lwj59pi.jl:39\n\
    \  Expression: candidate(12) == 386\n   Evaluated: 298 == 386\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp0lwj59pi.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0lwj59pi.jl:35\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0lwj59pi.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 0\n        return 0\n    end\n    if n == 0\n        return 0\n\
    \    end\n    if n == 1\n        return 0\n    end\n    if n == 2\n        return\
    \ 2\n    end\n    if n == 3\n        return 0\n    end\n    a = 0\n    b = 0\n\
    \    c = 2\n    d = 0\n    for i in 4:n\n        a, b, c, d = b, c, d, a + b +\
    \ c + d\n    end\n    return d\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = fib4;\n\t@test(candidate(5) == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10)\
    \ == 104)\n\t@test(candidate(12) == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 4\n        return n\n    end\n    a, b, c, d = 0, 0, 2, 0\n   \
    \ for i in 4:n\n        a, b, c, d = b, c, d, a + b + c + d\n    end\n    return\
    \ d\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a, b, c, d = 0, 0, 2, 0\n        for i in 4:n\n            a, b, c, d\
    \ = b, c, d, a + b + c + d\n        end\n        return d\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\t\
    @test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 4\n        return n\n    end\n    a = 0\n    b = 0\n    c = 2\n\
    \    d = 0\n    for i in 4:n\n        d = a + b + c\n        a = b\n        b\
    \ = c\n        c = d\n    end\n    return d\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\t@test(candidate(8) == 28)\n\
    \t@test(candidate(10) == 104)\n\t@test(candidate(12) == 386)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzvdz12ve.jl:37\n  Expression: candidate(8)\
    \ == 28\n   Evaluated: 26 == 28\nStacktrace:\n [1] top-level scope at /tmp/tmpzvdz12ve.jl:37\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzvdz12ve.jl:35\ntest set: Test Failed at /tmp/tmpzvdz12ve.jl:38\n\
    \  Expression: candidate(10) == 104\n   Evaluated: 88 == 104\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpzvdz12ve.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzvdz12ve.jl:35\ntest set: Test Failed at /tmp/tmpzvdz12ve.jl:39\n\
    \  Expression: candidate(12) == 386\n   Evaluated: 298 == 386\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpzvdz12ve.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzvdz12ve.jl:35\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzvdz12ve.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 0\n        error(\"n must be a non-negative integer\")\n    end\n\
    \    if n == 0\n        return 0\n    end\n    if n == 1\n        return 0\n \
    \   end\n    if n == 2\n        return 2\n    end\n    if n == 3\n        return\
    \ 0\n    end\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in 4:n\n \
    \       a, b, c, d = b, c, d, a + b + c + d\n    end\n    return d\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\t\
    @test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 0\n        throw(ArgumentError(\"n must be non-negative\"))\n \
    \   end\n    if n < 4\n        return n\n    end\n    a = 0\n    b = 0\n    c\
    \ = 2\n    d = 0\n    for i in 4:n\n        d = a + b + c\n        a = b\n   \
    \     b = c\n        c = d\n    end\n    return d\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\t@test(candidate(8)\
    \ == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12) == 386)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwv4ik7ax.jl:40\n  Expression: candidate(8)\
    \ == 28\n   Evaluated: 26 == 28\nStacktrace:\n [1] top-level scope at /tmp/tmpwv4ik7ax.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwv4ik7ax.jl:38\ntest set: Test Failed at /tmp/tmpwv4ik7ax.jl:41\n\
    \  Expression: candidate(10) == 104\n   Evaluated: 88 == 104\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpwv4ik7ax.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwv4ik7ax.jl:38\ntest set: Test Failed at /tmp/tmpwv4ik7ax.jl:42\n\
    \  Expression: candidate(12) == 386\n   Evaluated: 298 == 386\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpwv4ik7ax.jl:42\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwv4ik7ax.jl:38\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwv4ik7ax.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 4\n        return n\n    end\n    a, b, c, d = 0, 0, 2, 0\n   \
    \ for i in 5:n\n        a, b, c, d = b, c, d, a + b + c + d\n    end\n    return\
    \ d\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp73_jg0g8.jl:30\n  Expression: candidate(5)\
    \ == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] top-level scope at /tmp/tmp73_jg0g8.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp73_jg0g8.jl:29\ntest set: Test Failed at /tmp/tmp73_jg0g8.jl:31\n\
    \  Expression: candidate(8) == 28\n   Evaluated: 14 == 28\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp73_jg0g8.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp73_jg0g8.jl:29\ntest set: Test Failed at /tmp/tmp73_jg0g8.jl:32\n\
    \  Expression: candidate(10) == 104\n   Evaluated: 54 == 104\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp73_jg0g8.jl:32\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp73_jg0g8.jl:29\ntest set: Test Failed at /tmp/tmp73_jg0g8.jl:33\n\
    \  Expression: candidate(12) == 386\n   Evaluated: 200 == 386\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp73_jg0g8.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp73_jg0g8.jl:29\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp73_jg0g8.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 0\n        error(\"n must be non-negative\")\n    end\n    if n\
    \ == 0\n        return 0\n    end\n    if n == 1\n        return 0\n    end\n\
    \    if n == 2\n        return 2\n    end\n    if n == 3\n        return 0\n \
    \   end\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in 4:n\n      \
    \  a, b, c, d = b, c, d, a + b + c + d\n    end\n    return d\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\t@test(candidate(8)\
    \ == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12) == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 0\n        error(\"n must be positive\")\n    end\n    if n < 4\n\
    \        return n\n    end\n    a, b, c, d = 0, 0, 2, 0\n    for i in 4:n\n  \
    \      a, b, c, d = b, c, d, a + b + c + d\n    end\n    return d\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\t\
    @test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            a, b, c, d = b, c, d, a + b + c + d\n        end\n        return\
    \ d\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 0\n        throw(ArgumentError(\"n must be non-negative\"))\n \
    \   end\n    if n == 0\n        return 0\n    end\n    if n == 1\n        return\
    \ 0\n    end\n    if n == 2\n        return 2\n    end\n    if n == 3\n      \
    \  return 0\n    end\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in\
    \ 4:n\n        a, b, c, d = b, c, d, a + b + c + d\n    end\n    return d\nend\n\
    using Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\
    \t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n <= 1\n        return 0\n    elseif n == 2\n        return 2\n   \
    \ elseif n == 3\n        return 0\n    else\n        a = 0\n        b = 0\n  \
    \      c = 2\n        d = 0\n        for i in 4:n\n            e = a + b + c +\
    \ d\n            a = b\n            b = c\n            c = d\n            d =\
    \ e\n        end\n        return d\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\t@test(candidate(8) == 28)\n\
    \t@test(candidate(10) == 104)\n\t@test(candidate(12) == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 0\n        return 0\n    end\n    if n == 0\n        return 0\n\
    \    end\n    if n == 1\n        return 0\n    end\n    if n == 2\n        return\
    \ 2\n    end\n    if n == 3\n        return 0\n    end\n    a = 0\n    b = 0\n\
    \    c = 2\n    d = 0\n    for i in 4:n\n        a = b + c + d\n        b = c\n\
    \        c = d\n        d = a\n    end\n    return a\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\t@test(candidate(8)\
    \ == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12) == 386)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu6ihgoi5.jl:49\n  Expression: candidate(8)\
    \ == 28\n   Evaluated: 22 == 28\nStacktrace:\n [1] top-level scope at /tmp/tmpu6ihgoi5.jl:49\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu6ihgoi5.jl:47\ntest set: Test Failed at /tmp/tmpu6ihgoi5.jl:50\n\
    \  Expression: candidate(10) == 104\n   Evaluated: 74 == 104\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpu6ihgoi5.jl:50\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu6ihgoi5.jl:47\ntest set: Test Failed at /tmp/tmpu6ihgoi5.jl:51\n\
    \  Expression: candidate(12) == 386\n   Evaluated: 250 == 386\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpu6ihgoi5.jl:51\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu6ihgoi5.jl:47\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu6ihgoi5.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n == 0\n        return 0\n    elseif n == 1\n        return 0\n   \
    \ elseif n == 2\n        return 2\n    elseif n == 3\n        return 0\n    else\n\
    \        a = 0\n        b = 0\n        c = 2\n        d = 0\n        for i in\
    \ 4:n\n            e = a + b + c + d\n            a = b\n            b = c\n \
    \           c = d\n            d = e\n        end\n        return d\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5) ==\
    \ 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in 1:n-2\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    end\n    return\
    \ d\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq1pwwn56.jl:33\n  Expression: candidate(5)\
    \ == 4\n   Evaluated: 8 == 4\nStacktrace:\n [1] top-level scope at /tmp/tmpq1pwwn56.jl:33\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq1pwwn56.jl:32\ntest set: Test Failed at /tmp/tmpq1pwwn56.jl:34\n\
    \  Expression: candidate(8) == 28\n   Evaluated: 48 == 28\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpq1pwwn56.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq1pwwn56.jl:32\ntest set: Test Failed at /tmp/tmpq1pwwn56.jl:35\n\
    \  Expression: candidate(10) == 104\n   Evaluated: 162 == 104\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpq1pwwn56.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq1pwwn56.jl:32\ntest set: Test Failed at /tmp/tmpq1pwwn56.jl:36\n\
    \  Expression: candidate(12) == 386\n   Evaluated: 548 == 386\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpq1pwwn56.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq1pwwn56.jl:32\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq1pwwn56.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in 1:n-3\n        d\
    \ = a + b + c\n        a = b\n        b = c\n        c = d\n    end\n    return\
    \ d\nend\nusing Test\n\n@testset begin\n\ncandidate = fib4;\n\t@test(candidate(5)\
    \ == 4)\n\t@test(candidate(8) == 28)\n\t@test(candidate(10) == 104)\n\t@test(candidate(12)\
    \ == 386)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe1s37sp3.jl:34\n  Expression: candidate(8)\
    \ == 28\n   Evaluated: 26 == 28\nStacktrace:\n [1] top-level scope at /tmp/tmpe1s37sp3.jl:34\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpe1s37sp3.jl:32\ntest set: Test Failed at /tmp/tmpe1s37sp3.jl:35\n\
    \  Expression: candidate(10) == 104\n   Evaluated: 88 == 104\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpe1s37sp3.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpe1s37sp3.jl:32\ntest set: Test Failed at /tmp/tmpe1s37sp3.jl:36\n\
    \  Expression: candidate(12) == 386\n   Evaluated: 298 == 386\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpe1s37sp3.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpe1s37sp3.jl:32\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe1s37sp3.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n  \
    \  fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n    Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n\
    \    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\nfunction fib4(n::Int64)::Int64\
    \ \n    if n < 0\n        return 0\n    end\n    a = 0\n    b = 0\n    c = 2\n\
    \    d = 0\n    for i in 3:n\n        d = a + b + c\n        a = b\n        b\
    \ = c\n        c = d\n    end\n    return d\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fib4;\n\t@test(candidate(5) == 4)\n\t@test(candidate(8) == 28)\n\
    \t@test(candidate(10) == 104)\n\t@test(candidate(12) == 386)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1anlka5w.jl:36\n  Expression: candidate(5)\
    \ == 4\n   Evaluated: 8 == 4\nStacktrace:\n [1] top-level scope at /tmp/tmp1anlka5w.jl:36\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1anlka5w.jl:35\ntest set: Test Failed at /tmp/tmp1anlka5w.jl:37\n\
    \  Expression: candidate(8) == 28\n   Evaluated: 48 == 28\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp1anlka5w.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1anlka5w.jl:35\ntest set: Test Failed at /tmp/tmp1anlka5w.jl:38\n\
    \  Expression: candidate(10) == 104\n   Evaluated: 162 == 104\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp1anlka5w.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1anlka5w.jl:35\ntest set: Test Failed at /tmp/tmp1anlka5w.jl:39\n\
    \  Expression: candidate(12) == 386\n   Evaluated: 548 == 386\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp1anlka5w.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1anlka5w.jl:35\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1anlka5w.jl:33\n"
  exit_code: 1
  status: SyntaxError
