name: HumanEval_72_will_it_fly
language: julia
results:
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ (sum(q) <= w) && (q == reverse(q))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w && q == reverse(q)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ > w\n        return false\n    elseif sum(q) <= w\n        if q == reverse(q)\n\
    \            return true\n        else\n            return false\n        end\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && isequal(q, reverse(q))\nend\nusing Test\n\n@testset begin\n\n\
    candidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w && q == reverse(q)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w && ispalindrome(q)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmccflabs.jl:30\n  Test threw exception\n\
    \  Expression: candidate([3, 2, 3], 9) == true\n  UndefVarError: ispalindrome\
    \ not defined\n  Stacktrace:\n   [1] will_it_fly(::Array{Int64,1}, ::Int64) at\
    \ /tmp/tmpmccflabs.jl:19\n   [2] top-level scope at /tmp/tmpmccflabs.jl:30\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpmccflabs.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpmccflabs.jl:31\n  Test threw exception\n  Expression: candidate([1,\
    \ 2], 5) == false\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpmccflabs.jl:19\n   [2]\
    \ top-level scope at /tmp/tmpmccflabs.jl:31\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpmccflabs.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpmccflabs.jl:32\n  Test threw exception\n  Expression: candidate([3],\
    \ 5) == true\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n   [1]\
    \ will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpmccflabs.jl:19\n   [2] top-level\
    \ scope at /tmp/tmpmccflabs.jl:32\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpmccflabs.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpmccflabs.jl:34\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3], 6) == false\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpmccflabs.jl:19\n   [2]\
    \ top-level scope at /tmp/tmpmccflabs.jl:34\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpmccflabs.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpmccflabs.jl:35\n  Test threw exception\n  Expression: candidate([5],\
    \ 5) == true\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n   [1]\
    \ will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpmccflabs.jl:19\n   [2] top-level\
    \ scope at /tmp/tmpmccflabs.jl:35\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpmccflabs.jl:29\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmccflabs.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ (sum(q) <= w) && (q == reverse(q))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && isequal(q, reverse(q))\nend\nusing Test\n\n@testset begin\n\n\
    candidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && isequal(q, reverse(q))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w && ispalindrome(q)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpde3_rlhm.jl:30\n  Test threw exception\n\
    \  Expression: candidate([3, 2, 3], 9) == true\n  UndefVarError: ispalindrome\
    \ not defined\n  Stacktrace:\n   [1] will_it_fly(::Array{Int64,1}, ::Int64) at\
    \ /tmp/tmpde3_rlhm.jl:19\n   [2] top-level scope at /tmp/tmpde3_rlhm.jl:30\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpde3_rlhm.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpde3_rlhm.jl:31\n  Test threw exception\n  Expression: candidate([1,\
    \ 2], 5) == false\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpde3_rlhm.jl:19\n   [2]\
    \ top-level scope at /tmp/tmpde3_rlhm.jl:31\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpde3_rlhm.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpde3_rlhm.jl:32\n  Test threw exception\n  Expression: candidate([3],\
    \ 5) == true\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n   [1]\
    \ will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpde3_rlhm.jl:19\n   [2] top-level\
    \ scope at /tmp/tmpde3_rlhm.jl:32\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpde3_rlhm.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpde3_rlhm.jl:34\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3], 6) == false\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpde3_rlhm.jl:19\n   [2]\
    \ top-level scope at /tmp/tmpde3_rlhm.jl:34\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpde3_rlhm.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpde3_rlhm.jl:35\n  Test threw exception\n  Expression: candidate([5],\
    \ 5) == true\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n   [1]\
    \ will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpde3_rlhm.jl:19\n   [2] top-level\
    \ scope at /tmp/tmpde3_rlhm.jl:35\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpde3_rlhm.jl:29\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpde3_rlhm.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w && isequal(q, reverse(q))\n        return true\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w && q == reverse(q)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    # check\
    \ if it's balanced\n    if ispalindrome(q)\n        # check if the sum of its\
    \ elements is less than or equal the maximum possible weight w\n        if sum(q)\
    \ <= w\n            return true\n        else\n            return false\n    \
    \    end\n    else\n        return false\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\
    \t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t\
    @test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\
    \t@test(candidate([5], 5) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyhgsvhzh.jl:36\n  Test threw exception\n\
    \  Expression: candidate([3, 2, 3], 9) == true\n  UndefVarError: ispalindrome\
    \ not defined\n  Stacktrace:\n   [1] will_it_fly(::Array{Int64,1}, ::Int64) at\
    \ /tmp/tmpyhgsvhzh.jl:20\n   [2] top-level scope at /tmp/tmpyhgsvhzh.jl:36\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpyhgsvhzh.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmpyhgsvhzh.jl:37\n  Test threw exception\n  Expression: candidate([1,\
    \ 2], 5) == false\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpyhgsvhzh.jl:20\n   [2]\
    \ top-level scope at /tmp/tmpyhgsvhzh.jl:37\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpyhgsvhzh.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmpyhgsvhzh.jl:38\n  Test threw exception\n  Expression: candidate([3],\
    \ 5) == true\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n   [1]\
    \ will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpyhgsvhzh.jl:20\n   [2] top-level\
    \ scope at /tmp/tmpyhgsvhzh.jl:38\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpyhgsvhzh.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmpyhgsvhzh.jl:39\n  Test threw exception\n  Expression: candidate([3,\
    \ 2, 3], 1) == false\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpyhgsvhzh.jl:20\n   [2]\
    \ top-level scope at /tmp/tmpyhgsvhzh.jl:39\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpyhgsvhzh.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmpyhgsvhzh.jl:40\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3], 6) == false\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpyhgsvhzh.jl:20\n   [2]\
    \ top-level scope at /tmp/tmpyhgsvhzh.jl:40\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpyhgsvhzh.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmpyhgsvhzh.jl:41\n  Test threw exception\n  Expression: candidate([5],\
    \ 5) == true\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n   [1]\
    \ will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpyhgsvhzh.jl:20\n   [2] top-level\
    \ scope at /tmp/tmpyhgsvhzh.jl:41\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpyhgsvhzh.jl:35\n  \nTest Summary: | Error \
    \ Total\ntest set      |     6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyhgsvhzh.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ (sum(q) <= w) && (q == reverse(q))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w && q == reverse(q)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w && q == reverse(q)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && ispalindrome(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpn2cjf4cv.jl:26\n  Test threw exception\n\
    \  Expression: candidate([3, 2, 3], 9) == true\n  UndefVarError: ispalindrome\
    \ not defined\n  Stacktrace:\n   [1] will_it_fly(::Array{Int64,1}, ::Int64) at\
    \ /tmp/tmpn2cjf4cv.jl:19\n   [2] top-level scope at /tmp/tmpn2cjf4cv.jl:26\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpn2cjf4cv.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpn2cjf4cv.jl:27\n  Test threw exception\n  Expression: candidate([1,\
    \ 2], 5) == false\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpn2cjf4cv.jl:19\n   [2]\
    \ top-level scope at /tmp/tmpn2cjf4cv.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpn2cjf4cv.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpn2cjf4cv.jl:28\n  Test threw exception\n  Expression: candidate([3],\
    \ 5) == true\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n   [1]\
    \ will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpn2cjf4cv.jl:19\n   [2] top-level\
    \ scope at /tmp/tmpn2cjf4cv.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpn2cjf4cv.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpn2cjf4cv.jl:30\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3], 6) == false\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpn2cjf4cv.jl:19\n   [2]\
    \ top-level scope at /tmp/tmpn2cjf4cv.jl:30\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpn2cjf4cv.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpn2cjf4cv.jl:31\n  Test threw exception\n  Expression: candidate([5],\
    \ 5) == true\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n   [1]\
    \ will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpn2cjf4cv.jl:19\n   [2] top-level\
    \ scope at /tmp/tmpn2cjf4cv.jl:31\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpn2cjf4cv.jl:25\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn2cjf4cv.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w && q == reverse(q)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w && q == reverse(q)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w && q == reverse(q)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && ispalindrome(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5x463pzq.jl:26\n  Test threw exception\n\
    \  Expression: candidate([3, 2, 3], 9) == true\n  UndefVarError: ispalindrome\
    \ not defined\n  Stacktrace:\n   [1] will_it_fly(::Array{Int64,1}, ::Int64) at\
    \ /tmp/tmp5x463pzq.jl:19\n   [2] top-level scope at /tmp/tmp5x463pzq.jl:26\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp5x463pzq.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp5x463pzq.jl:27\n  Test threw exception\n  Expression: candidate([1,\
    \ 2], 5) == false\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmp5x463pzq.jl:19\n   [2]\
    \ top-level scope at /tmp/tmp5x463pzq.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp5x463pzq.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp5x463pzq.jl:28\n  Test threw exception\n  Expression: candidate([3],\
    \ 5) == true\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n   [1]\
    \ will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmp5x463pzq.jl:19\n   [2] top-level\
    \ scope at /tmp/tmp5x463pzq.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp5x463pzq.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp5x463pzq.jl:30\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3], 6) == false\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmp5x463pzq.jl:19\n   [2]\
    \ top-level scope at /tmp/tmp5x463pzq.jl:30\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp5x463pzq.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp5x463pzq.jl:31\n  Test threw exception\n  Expression: candidate([5],\
    \ 5) == true\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n   [1]\
    \ will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmp5x463pzq.jl:19\n   [2] top-level\
    \ scope at /tmp/tmp5x463pzq.jl:31\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp5x463pzq.jl:25\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5x463pzq.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ > w\n        return false\n    elseif sum(q) <= w\n        if q == reverse(q)\n\
    \            return true\n        else\n            return false\n        end\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w && q == reverse(q)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ > w\n        return false\n    elseif sum(q) <= w\n        if q == reverse(q)\n\
    \            return true\n        else\n            return false\n        end\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ (sum(q) <= w) && (q == reverse(q))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && isequal(q, reverse(q))\nend\nusing Test\n\n@testset begin\n\n\
    candidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && isequal(q, reverse(q))\nend\nusing Test\n\n@testset begin\n\n\
    candidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w && q == reverse(q)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && ispalindrome(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbwgvtw1h.jl:26\n  Test threw exception\n\
    \  Expression: candidate([3, 2, 3], 9) == true\n  UndefVarError: ispalindrome\
    \ not defined\n  Stacktrace:\n   [1] will_it_fly(::Array{Int64,1}, ::Int64) at\
    \ /tmp/tmpbwgvtw1h.jl:19\n   [2] top-level scope at /tmp/tmpbwgvtw1h.jl:26\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpbwgvtw1h.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpbwgvtw1h.jl:27\n  Test threw exception\n  Expression: candidate([1,\
    \ 2], 5) == false\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpbwgvtw1h.jl:19\n   [2]\
    \ top-level scope at /tmp/tmpbwgvtw1h.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpbwgvtw1h.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpbwgvtw1h.jl:28\n  Test threw exception\n  Expression: candidate([3],\
    \ 5) == true\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n   [1]\
    \ will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpbwgvtw1h.jl:19\n   [2] top-level\
    \ scope at /tmp/tmpbwgvtw1h.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpbwgvtw1h.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpbwgvtw1h.jl:30\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3], 6) == false\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpbwgvtw1h.jl:19\n   [2]\
    \ top-level scope at /tmp/tmpbwgvtw1h.jl:30\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpbwgvtw1h.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpbwgvtw1h.jl:31\n  Test threw exception\n  Expression: candidate([5],\
    \ 5) == true\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n   [1]\
    \ will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpbwgvtw1h.jl:19\n   [2] top-level\
    \ scope at /tmp/tmpbwgvtw1h.jl:31\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpbwgvtw1h.jl:25\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbwgvtw1h.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && ispalindrome(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpjo41_err.jl:26\n  Test threw exception\n\
    \  Expression: candidate([3, 2, 3], 9) == true\n  UndefVarError: ispalindrome\
    \ not defined\n  Stacktrace:\n   [1] will_it_fly(::Array{Int64,1}, ::Int64) at\
    \ /tmp/tmpjo41_err.jl:19\n   [2] top-level scope at /tmp/tmpjo41_err.jl:26\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpjo41_err.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpjo41_err.jl:27\n  Test threw exception\n  Expression: candidate([1,\
    \ 2], 5) == false\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpjo41_err.jl:19\n   [2]\
    \ top-level scope at /tmp/tmpjo41_err.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpjo41_err.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpjo41_err.jl:28\n  Test threw exception\n  Expression: candidate([3],\
    \ 5) == true\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n   [1]\
    \ will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpjo41_err.jl:19\n   [2] top-level\
    \ scope at /tmp/tmpjo41_err.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpjo41_err.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpjo41_err.jl:30\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3], 6) == false\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpjo41_err.jl:19\n   [2]\
    \ top-level scope at /tmp/tmpjo41_err.jl:30\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpjo41_err.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpjo41_err.jl:31\n  Test threw exception\n  Expression: candidate([5],\
    \ 5) == true\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n   [1]\
    \ will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpjo41_err.jl:19\n   [2] top-level\
    \ scope at /tmp/tmpjo41_err.jl:31\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpjo41_err.jl:25\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjo41_err.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ (sum(q) <= w) && (q == reverse(q))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && ispalindrome(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqxgl1uxn.jl:26\n  Test threw exception\n\
    \  Expression: candidate([3, 2, 3], 9) == true\n  UndefVarError: ispalindrome\
    \ not defined\n  Stacktrace:\n   [1] will_it_fly(::Array{Int64,1}, ::Int64) at\
    \ /tmp/tmpqxgl1uxn.jl:19\n   [2] top-level scope at /tmp/tmpqxgl1uxn.jl:26\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqxgl1uxn.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpqxgl1uxn.jl:27\n  Test threw exception\n  Expression: candidate([1,\
    \ 2], 5) == false\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpqxgl1uxn.jl:19\n   [2]\
    \ top-level scope at /tmp/tmpqxgl1uxn.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqxgl1uxn.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpqxgl1uxn.jl:28\n  Test threw exception\n  Expression: candidate([3],\
    \ 5) == true\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n   [1]\
    \ will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpqxgl1uxn.jl:19\n   [2] top-level\
    \ scope at /tmp/tmpqxgl1uxn.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqxgl1uxn.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpqxgl1uxn.jl:30\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3], 6) == false\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpqxgl1uxn.jl:19\n   [2]\
    \ top-level scope at /tmp/tmpqxgl1uxn.jl:30\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqxgl1uxn.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpqxgl1uxn.jl:31\n  Test threw exception\n  Expression: candidate([5],\
    \ 5) == true\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n   [1]\
    \ will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpqxgl1uxn.jl:19\n   [2] top-level\
    \ scope at /tmp/tmpqxgl1uxn.jl:31\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqxgl1uxn.jl:25\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqxgl1uxn.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ > w\n        return false\n    elseif sum(q) <= w\n        if q == reverse(q)\n\
    \            return true\n        else\n            return false\n        end\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && ispalindrome(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpttv6zcfc.jl:26\n  Test threw exception\n\
    \  Expression: candidate([3, 2, 3], 9) == true\n  UndefVarError: ispalindrome\
    \ not defined\n  Stacktrace:\n   [1] will_it_fly(::Array{Int64,1}, ::Int64) at\
    \ /tmp/tmpttv6zcfc.jl:19\n   [2] top-level scope at /tmp/tmpttv6zcfc.jl:26\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpttv6zcfc.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpttv6zcfc.jl:27\n  Test threw exception\n  Expression: candidate([1,\
    \ 2], 5) == false\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpttv6zcfc.jl:19\n   [2]\
    \ top-level scope at /tmp/tmpttv6zcfc.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpttv6zcfc.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpttv6zcfc.jl:28\n  Test threw exception\n  Expression: candidate([3],\
    \ 5) == true\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n   [1]\
    \ will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpttv6zcfc.jl:19\n   [2] top-level\
    \ scope at /tmp/tmpttv6zcfc.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpttv6zcfc.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpttv6zcfc.jl:30\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3], 6) == false\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpttv6zcfc.jl:19\n   [2]\
    \ top-level scope at /tmp/tmpttv6zcfc.jl:30\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpttv6zcfc.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpttv6zcfc.jl:31\n  Test threw exception\n  Expression: candidate([5],\
    \ 5) == true\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n   [1]\
    \ will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpttv6zcfc.jl:19\n   [2] top-level\
    \ scope at /tmp/tmpttv6zcfc.jl:31\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpttv6zcfc.jl:25\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpttv6zcfc.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && ispalindrome(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmplqtvdkf_.jl:26\n  Test threw exception\n\
    \  Expression: candidate([3, 2, 3], 9) == true\n  UndefVarError: ispalindrome\
    \ not defined\n  Stacktrace:\n   [1] will_it_fly(::Array{Int64,1}, ::Int64) at\
    \ /tmp/tmplqtvdkf_.jl:19\n   [2] top-level scope at /tmp/tmplqtvdkf_.jl:26\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmplqtvdkf_.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmplqtvdkf_.jl:27\n  Test threw exception\n  Expression: candidate([1,\
    \ 2], 5) == false\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmplqtvdkf_.jl:19\n   [2]\
    \ top-level scope at /tmp/tmplqtvdkf_.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmplqtvdkf_.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmplqtvdkf_.jl:28\n  Test threw exception\n  Expression: candidate([3],\
    \ 5) == true\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n   [1]\
    \ will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmplqtvdkf_.jl:19\n   [2] top-level\
    \ scope at /tmp/tmplqtvdkf_.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmplqtvdkf_.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmplqtvdkf_.jl:30\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3], 6) == false\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmplqtvdkf_.jl:19\n   [2]\
    \ top-level scope at /tmp/tmplqtvdkf_.jl:30\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmplqtvdkf_.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmplqtvdkf_.jl:31\n  Test threw exception\n  Expression: candidate([5],\
    \ 5) == true\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n   [1]\
    \ will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmplqtvdkf_.jl:19\n   [2] top-level\
    \ scope at /tmp/tmplqtvdkf_.jl:31\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmplqtvdkf_.jl:25\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplqtvdkf_.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ (sum(q) <= w) && (q == reverse(q))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ > w\n        return false\n    elseif sum(q) <= w\n        if q == reverse(q)\n\
    \            return true\n        else\n            return false\n        end\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w && q == reverse(q)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ (sum(q) <= w) && (q == reverse(q))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ > w\n        return false\n    elseif sum(q) <= w\n        return true\n   \
    \ end\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvaujj4ez.jl:31\n  Expression: candidate([1,\
    \ 2], 5) == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpvaujj4ez.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvaujj4ez.jl:29\ntest set: Test Failed at /tmp/tmpvaujj4ez.jl:34\n\
    \  Expression: candidate([1, 2, 3], 6) == false\n   Evaluated: true == false\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpvaujj4ez.jl:34\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvaujj4ez.jl:29\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvaujj4ez.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ (sum(q) <= w) && (q == reverse(q))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ > w\n        return false\n    elseif sum(q) <= w\n        if q == reverse(q)\n\
    \            return true\n        else\n            return false\n        end\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w && q == reverse(q)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && ispalindrome(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp3cctt7zm.jl:26\n  Test threw exception\n\
    \  Expression: candidate([3, 2, 3], 9) == true\n  UndefVarError: ispalindrome\
    \ not defined\n  Stacktrace:\n   [1] will_it_fly(::Array{Int64,1}, ::Int64) at\
    \ /tmp/tmp3cctt7zm.jl:19\n   [2] top-level scope at /tmp/tmp3cctt7zm.jl:26\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3cctt7zm.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp3cctt7zm.jl:27\n  Test threw exception\n  Expression: candidate([1,\
    \ 2], 5) == false\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmp3cctt7zm.jl:19\n   [2]\
    \ top-level scope at /tmp/tmp3cctt7zm.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3cctt7zm.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp3cctt7zm.jl:28\n  Test threw exception\n  Expression: candidate([3],\
    \ 5) == true\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n   [1]\
    \ will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmp3cctt7zm.jl:19\n   [2] top-level\
    \ scope at /tmp/tmp3cctt7zm.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3cctt7zm.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp3cctt7zm.jl:30\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3], 6) == false\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmp3cctt7zm.jl:19\n   [2]\
    \ top-level scope at /tmp/tmp3cctt7zm.jl:30\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3cctt7zm.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp3cctt7zm.jl:31\n  Test threw exception\n  Expression: candidate([5],\
    \ 5) == true\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n   [1]\
    \ will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmp3cctt7zm.jl:19\n   [2] top-level\
    \ scope at /tmp/tmp3cctt7zm.jl:31\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3cctt7zm.jl:25\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3cctt7zm.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ (sum(q) <= w) && (q == reverse(q))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w && q == reverse(q)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w && q == reverse(q)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && isequal(q, reverse(q))\nend\nusing Test\n\n@testset begin\n\n\
    candidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && ispalindrome(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpa3jqoacs.jl:26\n  Test threw exception\n\
    \  Expression: candidate([3, 2, 3], 9) == true\n  UndefVarError: ispalindrome\
    \ not defined\n  Stacktrace:\n   [1] will_it_fly(::Array{Int64,1}, ::Int64) at\
    \ /tmp/tmpa3jqoacs.jl:19\n   [2] top-level scope at /tmp/tmpa3jqoacs.jl:26\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpa3jqoacs.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpa3jqoacs.jl:27\n  Test threw exception\n  Expression: candidate([1,\
    \ 2], 5) == false\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpa3jqoacs.jl:19\n   [2]\
    \ top-level scope at /tmp/tmpa3jqoacs.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpa3jqoacs.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpa3jqoacs.jl:28\n  Test threw exception\n  Expression: candidate([3],\
    \ 5) == true\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n   [1]\
    \ will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpa3jqoacs.jl:19\n   [2] top-level\
    \ scope at /tmp/tmpa3jqoacs.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpa3jqoacs.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpa3jqoacs.jl:30\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3], 6) == false\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpa3jqoacs.jl:19\n   [2]\
    \ top-level scope at /tmp/tmpa3jqoacs.jl:30\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpa3jqoacs.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpa3jqoacs.jl:31\n  Test threw exception\n  Expression: candidate([5],\
    \ 5) == true\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n   [1]\
    \ will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpa3jqoacs.jl:19\n   [2] top-level\
    \ scope at /tmp/tmpa3jqoacs.jl:31\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpa3jqoacs.jl:25\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa3jqoacs.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w && ispalindrome(q)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpo6tal7t0.jl:30\\n  Test threw\
    \ exception\\n  Expression: candidate([3, 2, 3], 9) == true\\n  UndefVarError:\
    \ ispalindrome not defined\\n  Stacktrace:\\n   [1] will_it_fly(::Array{Int64,1},\
    \ ::Int64) at /tmp/tmpo6tal7t0.jl:19\\n   [2] top-level scope at /tmp/tmpo6tal7t0.jl:30\\\
    n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpo6tal7t0.jl:29\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpo6tal7t0.jl:31\\n  Test threw exception\\n  Expression: candidate([1,\
    \ 2], 5) == false\\n  UndefVarError: ispalindrome not defined\\n  Stacktrace:\\\
    n   [1] will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpo6tal7t0.jl:19\\n  \
    \ [2] top-level scope at /tmp/tmpo6tal7t0.jl:31\\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpo6tal7t0.jl:29\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpo6tal7t0.jl:32\\n  Test threw exception\\n  Expression: candidate([3],\
    \ 5) == true\\n  UndefVarError: ispalindrome not defined\\n  Stacktrace:\\n  \
    \ [1] will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpo6tal7t0.jl:19\\n   [2]\
    \ top-level scope at /tmp/tmpo6tal7t0.jl:32\\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpo6tal7t0.jl:29\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpo6tal7t0.jl:34\\n  Test threw exception\\n  Expression: candidate([1,\
    \ 2, 3], 6) == false\\n  UndefVarError: ispalindrome not defined\\n  Stacktrace:\\\
    n   [1] will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpo6tal7t0.jl:19\\n  \
    \ [2] top-level scope at /tmp/tmpo6tal7t0.jl:34\\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpo6tal7t0.jl:29\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpo6tal7t0.jl:35\\n  Test threw exception\\n  Expression: candidate([5],\
    \ 5) == true\\n  UndefVarError: ispalindrome not defined\\n  Stacktrace:\\n  \
    \ [1] will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpo6tal7t0.jl:19\\n   [2]\
    \ top-level scope at /tmp/tmpo6tal7t0.jl:35\\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpo6tal7t0.jl:29\\n  \\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && isequal(q, reverse(q))\nend\nusing Test\n\n@testset begin\n\n\
    candidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ (sum(q) <= w) && (q == reverse(q))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ (sum(q) <= w) && (q == reverse(q))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w && q == reverse(q)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w && isequal(q, reverse(q))\n        return true\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ (sum(q) <= w) && (q == reverse(q))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ (sum(q) <= w) && (q == reverse(q))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && ispalindrome(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpgmjluh6a.jl:26\n  Test threw exception\n\
    \  Expression: candidate([3, 2, 3], 9) == true\n  UndefVarError: ispalindrome\
    \ not defined\n  Stacktrace:\n   [1] will_it_fly(::Array{Int64,1}, ::Int64) at\
    \ /tmp/tmpgmjluh6a.jl:19\n   [2] top-level scope at /tmp/tmpgmjluh6a.jl:26\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpgmjluh6a.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpgmjluh6a.jl:27\n  Test threw exception\n  Expression: candidate([1,\
    \ 2], 5) == false\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpgmjluh6a.jl:19\n   [2]\
    \ top-level scope at /tmp/tmpgmjluh6a.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpgmjluh6a.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpgmjluh6a.jl:28\n  Test threw exception\n  Expression: candidate([3],\
    \ 5) == true\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n   [1]\
    \ will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpgmjluh6a.jl:19\n   [2] top-level\
    \ scope at /tmp/tmpgmjluh6a.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpgmjluh6a.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpgmjluh6a.jl:30\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3], 6) == false\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpgmjluh6a.jl:19\n   [2]\
    \ top-level scope at /tmp/tmpgmjluh6a.jl:30\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpgmjluh6a.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpgmjluh6a.jl:31\n  Test threw exception\n  Expression: candidate([5],\
    \ 5) == true\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n   [1]\
    \ will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpgmjluh6a.jl:19\n   [2] top-level\
    \ scope at /tmp/tmpgmjluh6a.jl:31\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpgmjluh6a.jl:25\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgmjluh6a.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ > w\n        return false\n    elseif sum(q) <= w\n        if q == reverse(q)\n\
    \            return true\n        else\n            return false\n        end\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ (sum(q) <= w) && (q == reverse(q))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ (sum(q) <= w) && (q == reverse(q))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && isequal(q, reverse(q))\nend\nusing Test\n\n@testset begin\n\n\
    candidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && ispalindrome(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpuaootaso.jl:26\n  Test threw exception\n\
    \  Expression: candidate([3, 2, 3], 9) == true\n  UndefVarError: ispalindrome\
    \ not defined\n  Stacktrace:\n   [1] will_it_fly(::Array{Int64,1}, ::Int64) at\
    \ /tmp/tmpuaootaso.jl:19\n   [2] top-level scope at /tmp/tmpuaootaso.jl:26\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpuaootaso.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpuaootaso.jl:27\n  Test threw exception\n  Expression: candidate([1,\
    \ 2], 5) == false\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpuaootaso.jl:19\n   [2]\
    \ top-level scope at /tmp/tmpuaootaso.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpuaootaso.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpuaootaso.jl:28\n  Test threw exception\n  Expression: candidate([3],\
    \ 5) == true\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n   [1]\
    \ will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpuaootaso.jl:19\n   [2] top-level\
    \ scope at /tmp/tmpuaootaso.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpuaootaso.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpuaootaso.jl:30\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3], 6) == false\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpuaootaso.jl:19\n   [2]\
    \ top-level scope at /tmp/tmpuaootaso.jl:30\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpuaootaso.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpuaootaso.jl:31\n  Test threw exception\n  Expression: candidate([5],\
    \ 5) == true\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n   [1]\
    \ will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpuaootaso.jl:19\n   [2] top-level\
    \ scope at /tmp/tmpuaootaso.jl:31\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpuaootaso.jl:25\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuaootaso.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ (sum(q) <= w) && (q == reverse(q))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && isequal(q, reverse(q))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && ispalindrome(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8sc8xlzq.jl:26\n  Test threw exception\n\
    \  Expression: candidate([3, 2, 3], 9) == true\n  UndefVarError: ispalindrome\
    \ not defined\n  Stacktrace:\n   [1] will_it_fly(::Array{Int64,1}, ::Int64) at\
    \ /tmp/tmp8sc8xlzq.jl:19\n   [2] top-level scope at /tmp/tmp8sc8xlzq.jl:26\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp8sc8xlzq.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp8sc8xlzq.jl:27\n  Test threw exception\n  Expression: candidate([1,\
    \ 2], 5) == false\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmp8sc8xlzq.jl:19\n   [2]\
    \ top-level scope at /tmp/tmp8sc8xlzq.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp8sc8xlzq.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp8sc8xlzq.jl:28\n  Test threw exception\n  Expression: candidate([3],\
    \ 5) == true\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n   [1]\
    \ will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmp8sc8xlzq.jl:19\n   [2] top-level\
    \ scope at /tmp/tmp8sc8xlzq.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp8sc8xlzq.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp8sc8xlzq.jl:30\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3], 6) == false\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmp8sc8xlzq.jl:19\n   [2]\
    \ top-level scope at /tmp/tmp8sc8xlzq.jl:30\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp8sc8xlzq.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp8sc8xlzq.jl:31\n  Test threw exception\n  Expression: candidate([5],\
    \ 5) == true\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n   [1]\
    \ will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmp8sc8xlzq.jl:19\n   [2] top-level\
    \ scope at /tmp/tmp8sc8xlzq.jl:31\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp8sc8xlzq.jl:25\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8sc8xlzq.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && ispalindrome(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpz280tk54.jl:26\n  Test threw exception\n\
    \  Expression: candidate([3, 2, 3], 9) == true\n  UndefVarError: ispalindrome\
    \ not defined\n  Stacktrace:\n   [1] will_it_fly(::Array{Int64,1}, ::Int64) at\
    \ /tmp/tmpz280tk54.jl:19\n   [2] top-level scope at /tmp/tmpz280tk54.jl:26\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpz280tk54.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpz280tk54.jl:27\n  Test threw exception\n  Expression: candidate([1,\
    \ 2], 5) == false\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpz280tk54.jl:19\n   [2]\
    \ top-level scope at /tmp/tmpz280tk54.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpz280tk54.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpz280tk54.jl:28\n  Test threw exception\n  Expression: candidate([3],\
    \ 5) == true\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n   [1]\
    \ will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpz280tk54.jl:19\n   [2] top-level\
    \ scope at /tmp/tmpz280tk54.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpz280tk54.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpz280tk54.jl:30\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3], 6) == false\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpz280tk54.jl:19\n   [2]\
    \ top-level scope at /tmp/tmpz280tk54.jl:30\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpz280tk54.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpz280tk54.jl:31\n  Test threw exception\n  Expression: candidate([5],\
    \ 5) == true\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n   [1]\
    \ will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpz280tk54.jl:19\n   [2] top-level\
    \ scope at /tmp/tmpz280tk54.jl:31\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpz280tk54.jl:25\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz280tk54.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w && ispalindrome(q)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpokmk1la0.jl:30\n  Test threw exception\n\
    \  Expression: candidate([3, 2, 3], 9) == true\n  UndefVarError: ispalindrome\
    \ not defined\n  Stacktrace:\n   [1] will_it_fly(::Array{Int64,1}, ::Int64) at\
    \ /tmp/tmpokmk1la0.jl:19\n   [2] top-level scope at /tmp/tmpokmk1la0.jl:30\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpokmk1la0.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpokmk1la0.jl:31\n  Test threw exception\n  Expression: candidate([1,\
    \ 2], 5) == false\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpokmk1la0.jl:19\n   [2]\
    \ top-level scope at /tmp/tmpokmk1la0.jl:31\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpokmk1la0.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpokmk1la0.jl:32\n  Test threw exception\n  Expression: candidate([3],\
    \ 5) == true\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n   [1]\
    \ will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpokmk1la0.jl:19\n   [2] top-level\
    \ scope at /tmp/tmpokmk1la0.jl:32\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpokmk1la0.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpokmk1la0.jl:34\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3], 6) == false\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpokmk1la0.jl:19\n   [2]\
    \ top-level scope at /tmp/tmpokmk1la0.jl:34\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpokmk1la0.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpokmk1la0.jl:35\n  Test threw exception\n  Expression: candidate([5],\
    \ 5) == true\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n   [1]\
    \ will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpokmk1la0.jl:19\n   [2] top-level\
    \ scope at /tmp/tmpokmk1la0.jl:35\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpokmk1la0.jl:29\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpokmk1la0.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w && q == reverse(q)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ ispalindrome(q) && sum(q) <= w\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2jdf0ojn.jl:26\n  Test threw exception\n\
    \  Expression: candidate([3, 2, 3], 9) == true\n  UndefVarError: ispalindrome\
    \ not defined\n  Stacktrace:\n   [1] will_it_fly(::Array{Int64,1}, ::Int64) at\
    \ /tmp/tmp2jdf0ojn.jl:19\n   [2] top-level scope at /tmp/tmp2jdf0ojn.jl:26\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp2jdf0ojn.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp2jdf0ojn.jl:27\n  Test threw exception\n  Expression: candidate([1,\
    \ 2], 5) == false\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmp2jdf0ojn.jl:19\n   [2]\
    \ top-level scope at /tmp/tmp2jdf0ojn.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp2jdf0ojn.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp2jdf0ojn.jl:28\n  Test threw exception\n  Expression: candidate([3],\
    \ 5) == true\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n   [1]\
    \ will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmp2jdf0ojn.jl:19\n   [2] top-level\
    \ scope at /tmp/tmp2jdf0ojn.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp2jdf0ojn.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp2jdf0ojn.jl:29\n  Test threw exception\n  Expression: candidate([3,\
    \ 2, 3], 1) == false\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmp2jdf0ojn.jl:19\n   [2]\
    \ top-level scope at /tmp/tmp2jdf0ojn.jl:29\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp2jdf0ojn.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp2jdf0ojn.jl:30\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3], 6) == false\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmp2jdf0ojn.jl:19\n   [2]\
    \ top-level scope at /tmp/tmp2jdf0ojn.jl:30\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp2jdf0ojn.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp2jdf0ojn.jl:31\n  Test threw exception\n  Expression: candidate([5],\
    \ 5) == true\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n   [1]\
    \ will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmp2jdf0ojn.jl:19\n   [2] top-level\
    \ scope at /tmp/tmp2jdf0ojn.jl:31\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp2jdf0ojn.jl:25\n  \nTest Summary: | Error \
    \ Total\ntest set      |     6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2jdf0ojn.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && ispalindrome(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpjs6jbof4.jl:26\n  Test threw exception\n\
    \  Expression: candidate([3, 2, 3], 9) == true\n  UndefVarError: ispalindrome\
    \ not defined\n  Stacktrace:\n   [1] will_it_fly(::Array{Int64,1}, ::Int64) at\
    \ /tmp/tmpjs6jbof4.jl:19\n   [2] top-level scope at /tmp/tmpjs6jbof4.jl:26\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpjs6jbof4.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpjs6jbof4.jl:27\n  Test threw exception\n  Expression: candidate([1,\
    \ 2], 5) == false\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpjs6jbof4.jl:19\n   [2]\
    \ top-level scope at /tmp/tmpjs6jbof4.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpjs6jbof4.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpjs6jbof4.jl:28\n  Test threw exception\n  Expression: candidate([3],\
    \ 5) == true\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n   [1]\
    \ will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpjs6jbof4.jl:19\n   [2] top-level\
    \ scope at /tmp/tmpjs6jbof4.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpjs6jbof4.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpjs6jbof4.jl:30\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3], 6) == false\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n\
    \   [1] will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpjs6jbof4.jl:19\n   [2]\
    \ top-level scope at /tmp/tmpjs6jbof4.jl:30\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpjs6jbof4.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpjs6jbof4.jl:31\n  Test threw exception\n  Expression: candidate([5],\
    \ 5) == true\n  UndefVarError: ispalindrome not defined\n  Stacktrace:\n   [1]\
    \ will_it_fly(::Array{Int64,1}, ::Int64) at /tmp/tmpjs6jbof4.jl:19\n   [2] top-level\
    \ scope at /tmp/tmpjs6jbof4.jl:31\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpjs6jbof4.jl:25\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjs6jbof4.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    if sum(q)\
    \ <= w && q == reverse(q)\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\t@test(candidate([3,\
    \ 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\t@test(candidate([3],\
    \ 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\t@test(candidate([1,\
    \ 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    return\
    \ sum(q) <= w && isequal(q, reverse(q))\nend\nusing Test\n\n@testset begin\n\n\
    candidate = will_it_fly;\n\t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1,\
    \ 2], 5) == false)\n\t@test(candidate([3], 5) == true)\n\t@test(candidate([3,\
    \ 2, 3], 1) == false)\n\t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5],\
    \ 5) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Write a function that returns True if the object q will fly,\
    \ and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic\
    \ list) and the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279E False \n    # 1+2\
    \ is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3,\
    \ 2, 3], 1) \u279E False\n    # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279E True\n    # 3+2+3 is\
    \ less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3],\
    \ 5) \u279E True\n    # 3 is less than the maximum possible weight, and it's balanced.\n\
    \    \"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool \n    sum(q)\
    \ <= w && q == reverse(q)\nend\nusing Test\n\n@testset begin\n\ncandidate = will_it_fly;\n\
    \t@test(candidate([3, 2, 3], 9) == true)\n\t@test(candidate([1, 2], 5) == false)\n\
    \t@test(candidate([3], 5) == true)\n\t@test(candidate([3, 2, 3], 1) == false)\n\
    \t@test(candidate([1, 2, 3], 6) == false)\n\t@test(candidate([5], 5) == true)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    6      6\n"
  exit_code: 0
  status: OK
