name: HumanEval_56_correct_bracketing
language: julia
prompt: "\"\"\" brackets is a string of \"<\" and \">\".\n    return True if every\
  \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
  <\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"\
  <<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\
  \nfunction correct_bracketing(brackets::String)::Bool \n"
tests: "using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
  <>\") == true)\n\t@test(candidate(\"<<><>>\") == true)\n\t@test(candidate(\"<><><<><>><>\"\
  ) == true)\n\t@test(candidate(\"<><><<<><><>><>><<><><<>>>\") == true)\n\t@test(candidate(\"\
  <<<><>>>>\") == false)\n\t@test(candidate(\"><<>\") == false)\n\t@test(candidate(\"\
  <\") == false)\n\t@test(candidate(\"<<<<\") == false)\n\t@test(candidate(\">\")\
  \ == false)\n\t@test(candidate(\"<<>\") == false)\n\t@test(candidate(\"<><><<><>><>><<>\"\
  ) == false)\n\t@test(candidate(\"<><><<><>><>>><>\") == false)\nend\n"
completions: ["    count = 0\n    for i in brackets\n        if i == \"<\"\n     \
    \       count += 1\n        elseif i == \">\"\n            count -= 1\n      \
    \  end\n        if count < 0\n            return false\n        end\n    end\n\
    \    return count == 0\nend", "    count = 0\n    for i in brackets\n        if\
    \ i == \"<\"\n            count += 1\n        elseif i == \">\"\n            count\
    \ -= 1\n        end\n        if count < 0\n            return false\n        end\n\
    \    end\n    return count == 0\nend", "    if length(brackets) == 0\n       \
    \ return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend", "    count\
    \ = 0\n    for i in brackets\n        if i == \"<\"\n            count += 1\n\
    \        elseif i == \">\"\n            count -= 1\n        end\n        if count\
    \ < 0\n            return false\n        end\n    end\n    if count == 0\n   \
    \     return true\n    else\n        return false\n    end\nend", "    count =\
    \ 0\n    for i in brackets\n        if i == \"<\"\n            count += 1\n  \
    \      elseif i == \">\"\n            count -= 1\n        end\n        if count\
    \ < 0\n            return false\n        end\n    end\n    return count == 0\n\
    end", "    count = 0\n    for i in brackets\n        if i == \"<\"\n         \
    \   count += 1\n        elseif i == \">\"\n            count -= 1\n        end\n\
    \        if count < 0\n            return false\n        end\n    end\n    return\
    \ count == 0\nend", "    # YOUR CODE HERE\n    open_brackets = 0\n    for bracket\
    \ in brackets\n        if bracket == '<'\n            open_brackets += 1\n   \
    \     elseif bracket == '>'\n            open_brackets -= 1\n        end\n   \
    \     if open_brackets < 0\n            return false\n        end\n    end\n \
    \   return open_brackets == 0\nend", "    if brackets == \"\"\n        return\
    \ true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend", "    count\
    \ = 0\n    for i in brackets\n        if i == '<'\n            count += 1\n  \
    \      elseif i == '>'\n            count -= 1\n        end\n        if count\
    \ < 0\n            return false\n        end\n    end\n    return count == 0\n\
    end", "    open_brackets = 0\n    for bracket in brackets\n        if bracket\
    \ == '<'\n            open_brackets += 1\n        elseif bracket == '>'\n    \
    \        open_brackets -= 1\n        end\n        if open_brackets < 0\n     \
    \       return false\n        end\n    end\n    return open_brackets == 0\nend",
  "    open_brackets = 0\n    for bracket in brackets\n        if bracket == '<'\n\
    \            open_brackets += 1\n        elseif bracket == '>'\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend", "    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend", "    n = length(brackets)\n   \
    \ if n == 0\n        return true\n    end\n    if brackets[1] == '>'\n       \
    \ return false\n    end\n    if brackets[n] == '<'\n        return false\n   \
    \ end\n    open_count = 0\n    for i in 1:n\n        if brackets[i] == '<'\n \
    \           open_count += 1\n        elseif brackets[i] == '>'\n            open_count\
    \ -= 1\n        end\n        if open_count < 0\n            return false\n   \
    \     end\n    end\n    return open_count == 0\nend", "    count = 0\n    for\
    \ i in brackets\n        if i == '<'\n            count += 1\n        elseif i\
    \ == '>'\n            count -= 1\n        end\n        if count < 0\n        \
    \    return false\n        end\n    end\n    return count == 0\nend", "    n =\
    \ 0\n    for i in 1:length(brackets)\n        if brackets[i] == '<'\n        \
    \    n += 1\n        elseif brackets[i] == '>'\n            n -= 1\n        end\n\
    \        if n < 0\n            return false\n        end\n    end\n    return\
    \ n == 0\nend", "    n = 0\n    for i in brackets\n        if i == '<'\n     \
    \       n += 1\n        elseif i == '>'\n            n -= 1\n        end\n   \
    \     if n < 0\n            return false\n        end\n    end\n    return n ==\
    \ 0\nend", "    open_brackets = 0\n    for c in brackets\n        if c == '<'\n\
    \            open_brackets += 1\n        elseif c == '>'\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend", "    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend", "    if length(brackets) == 0\n\
    \        return true\n    elseif length(brackets) == 1\n        return false\n\
    \    elseif brackets[1] == '<' && brackets[end] == '>'\n        return correct_bracketing(brackets[2:end-1])\n\
    \    else\n        return false\n    end\nend", "    if length(brackets) == 0\n\
    \        return true\n    elseif length(brackets) == 1\n        return false\n\
    \    elseif brackets[1] == \">\"\n        return false\n    elseif brackets[1]\
    \ == \"<\"\n        if brackets[2] == \">\"\n            return correct_bracketing(brackets[3:end])\n\
    \        else\n            return correct_bracketing(brackets[2:end])\n      \
    \  end\n    end\nend", "    # YOUR CODE HERE\n    return false\nend", "    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend", "    n = length(brackets)\n   \
    \ if n == 0\n        return true\n    end\n    if n == 1\n        return false\n\
    \    end\n    if brackets[1] == '>'\n        return false\n    end\n    if brackets[n]\
    \ == '<'\n        return false\n    end\n    for i in 1:n\n        if brackets[i]\
    \ == '<'\n            for j in i:n\n                if brackets[j] == '>'\n  \
    \                  return correct_bracketing(brackets[i+1:j-1])\n            \
    \    end\n            end\n        end\n    end\n    return true\nend", "    n\
    \ = 0\n    for i in brackets\n        if i == '<'\n            n += 1\n      \
    \  elseif i == '>'\n            n -= 1\n        end\n        if n < 0\n      \
    \      return false\n        end\n    end\n    return n == 0\nend", "    if brackets\
    \ == \"\"\n        return true\n    elseif brackets[1] == '<'\n        return\
    \ correct_bracketing(brackets[2:end])\n    elseif brackets[1] == '>'\n       \
    \ return false\n    end\nend", "    # YOUR CODE HERE\n    count = 0\n    for i\
    \ in brackets\n        if i == '<'\n            count += 1\n        elseif i ==\
    \ '>'\n            count -= 1\n        end\n        if count < 0\n           \
    \ return false\n        end\n    end\n    if count == 0\n        return true\n\
    \    else\n        return false\n    end\nend", "    if length(brackets) == 0\n\
    \        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend", "    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend", "    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend", "    count = 0\n    for i in brackets\n\
    \        if i == \"<\"\n            count += 1\n        elseif i == \">\"\n  \
    \          count -= 1\n        end\n        if count < 0\n            return false\n\
    \        end\n    end\n    if count == 0\n        return true\n    else\n    \
    \    return false\n    end\nend", "    count = 0\n    for i in brackets\n    \
    \    if i == \"<\"\n            count += 1\n        elseif i == \">\"\n      \
    \      count -= 1\n        end\n        if count < 0\n            return false\n\
    \        end\n    end\n    return count == 0\nend", "    if length(brackets) ==\
    \ 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend", "    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend", "    # YOUR CODE HERE\n    return\
    \ false\nend", "    bracket_count = 0\n    for bracket in brackets\n        if\
    \ bracket == '<'\n            bracket_count += 1\n        elseif bracket == '>'\n\
    \            bracket_count -= 1\n        end\n        if bracket_count < 0\n \
    \           return false\n        end\n    end\n    return bracket_count == 0\n\
    end", "    open_brackets = 0\n    for i in 1:length(brackets)\n        if brackets[i]\
    \ == '<'\n            open_brackets += 1\n        elseif brackets[i] == '>'\n\
    \            open_brackets -= 1\n        end\n        if open_brackets < 0\n \
    \           return false\n        end\n    end\n    return open_brackets == 0\n\
    end", "    open_brackets = 0\n    for bracket in brackets\n        if bracket\
    \ == '<'\n            open_brackets += 1\n        elseif bracket == '>'\n    \
    \        open_brackets -= 1\n        end\n        if open_brackets < 0\n     \
    \       return false\n        end\n    end\n    return open_brackets == 0\nend",
  "    open_brackets = 0\n    for bracket in brackets\n        if bracket == '<'\n\
    \            open_brackets += 1\n        elseif bracket == '>'\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend", "    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend", "    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend", "    if length(brackets)\
    \ == 0\n        return true\n    elseif length(brackets) == 1\n        return\
    \ false\n    elseif brackets[1] == '>'\n        return false\n    elseif brackets[1]\
    \ == '<' && brackets[2] == '>'\n        return correct_bracketing(brackets[3:end])\n\
    \    elseif brackets[1] == '<' && brackets[2] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    else\n        return false\n    end\nend", "    if length(brackets) == 0\n\
    \        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend", "    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend", "    count = 0\n    for i in brackets\n\
    \        if i == \"<\"\n            count += 1\n        elseif i == \">\"\n  \
    \          count -= 1\n        end\n        if count < 0\n            return false\n\
    \        end\n    end\n    if count == 0\n        return true\n    else\n    \
    \    return false\n    end\nend", "    if length(brackets) == 0\n        return\
    \ true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend", "    # YOUR\
    \ CODE HERE\n    open_count = 0\n    for i in 1:length(brackets)\n        if brackets[i]\
    \ == '<'\n            open_count += 1\n        elseif brackets[i] == '>'\n   \
    \         open_count -= 1\n        end\n        if open_count < 0\n          \
    \  return false\n        end\n    end\n    if open_count == 0\n        return\
    \ true\n    else\n        return false\n    end\nend", "    count = 0\n    for\
    \ i in brackets\n        if i == '<'\n            count += 1\n        elseif i\
    \ == '>'\n            count -= 1\n        end\n        if count < 0\n        \
    \    return false\n        end\n    end\n    return count == 0\nend", "    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend", "    open_brackets = 0\n    for\
    \ bracket in brackets\n        if bracket == '<'\n            open_brackets +=\
    \ 1\n        elseif bracket == '>'\n            open_brackets -= 1\n        end\n\
    \        if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend", "    if brackets == \"\"\n        return\
    \ true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend", "    n =\
    \ length(brackets)\n    if n == 0\n        return true\n    end\n    if n == 1\n\
    \        return false\n    end\n    if brackets[1] == \">\"\n        return false\n\
    \    end\n    if brackets[n] == \"<\"\n        return false\n    end\n    if brackets[1]\
    \ == \"<\" && brackets[n] == \">\"\n        return correct_bracketing(brackets[2:n-1])\n\
    \    end\n    if brackets[1] == \"<\" && brackets[n] != \">\"\n        return\
    \ correct_bracketing(brackets[2:n])\n    end\n    if brackets[1] != \"<\" && brackets[n]\
    \ == \">\"\n        return correct_bracketing(brackets[1:n-1])\n    end\nend",
  "    if brackets == \"\"\n        return true\n    elseif brackets[1] == '<'\n \
    \       return correct_bracketing(brackets[2:end])\n    elseif brackets[1] ==\
    \ '>'\n        return false\n    end\nend", "    open_brackets = 0\n    for bracket\
    \ in brackets\n        if bracket == '<'\n            open_brackets += 1\n   \
    \     elseif bracket == '>'\n            open_brackets -= 1\n        end\n   \
    \     if open_brackets < 0\n            return false\n        end\n    end\n \
    \   return open_brackets == 0\nend", "    open_brackets = 0\n    for bracket in\
    \ brackets\n        if bracket == '<'\n            open_brackets += 1\n      \
    \  elseif bracket == '>'\n            open_brackets -= 1\n        end\n      \
    \  if open_brackets < 0\n            return false\n        end\n    end\n    if\
    \ open_brackets == 0\n        return true\n    else\n        return false\n  \
    \  end\nend", "    open_brackets = 0\n    for b in brackets\n        if b == '<'\n\
    \            open_brackets += 1\n        elseif b == '>'\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend", "    count = 0\n \
    \   for i in brackets\n        if i == '<'\n            count += 1\n        elseif\
    \ i == '>'\n            count -= 1\n        end\n        if count < 0\n      \
    \      return false\n        end\n    end\n    return count == 0\nend", "    if\
    \ length(brackets) == 0\n        return true\n    elseif brackets[1] == '<'\n\
    \        return correct_bracketing(brackets[2:end])\n    elseif brackets[1] ==\
    \ '>'\n        return correct_bracketing(brackets[2:end])\n    else\n        return\
    \ false\n    end\nend", "    num_open = 0\n    for c in brackets\n        if c\
    \ == '<'\n            num_open += 1\n        elseif c == '>'\n            num_open\
    \ -= 1\n        end\n        if num_open < 0\n            return false\n     \
    \   end\n    end\n    return num_open == 0\nend", "    open_brackets = 0\n   \
    \ for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend", "    if length(brackets) == 0\n\
    \        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend", "    open_count\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            open_count\
    \ += 1\n        elseif bracket == '>'\n            open_count -= 1\n        end\n\
    \        if open_count < 0\n            return false\n        end\n    end\n \
    \   return open_count == 0\nend", "    if length(brackets) == 0\n        return\
    \ true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend", "    count\
    \ = 0\n    for i in brackets\n        if i == \"<\"\n            count += 1\n\
    \        elseif i == \">\"\n            count -= 1\n        end\n        if count\
    \ < 0\n            return false\n        end\n    end\n    return count == 0\n\
    end", "    if length(brackets) == 0\n        return true\n    elseif brackets[1]\
    \ == '<'\n        return correct_bracketing(brackets[2:end])\n    elseif brackets[1]\
    \ == '>'\n        return false\n    end\nend", "    open_brackets = 0\n    for\
    \ bracket in brackets\n        if bracket == '<'\n            open_brackets +=\
    \ 1\n        elseif bracket == '>'\n            open_brackets -= 1\n        end\n\
    \        if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend", "    open_brackets = 0\n    for bracket\
    \ in brackets\n        if bracket == '<'\n            open_brackets += 1\n   \
    \     elseif bracket == '>'\n            open_brackets -= 1\n        end\n   \
    \     if open_brackets < 0\n            return false\n        end\n    end\n \
    \   return open_brackets == 0\nend", "    open_count = 0\n    for i in 1:length(brackets)\n\
    \        if brackets[i] == '<'\n            open_count += 1\n        elseif brackets[i]\
    \ == '>'\n            open_count -= 1\n        end\n        if open_count < 0\n\
    \            return false\n        end\n    end\n    return open_count == 0\n\
    end", "    open_count = 0\n    for c in brackets\n        if c == '<'\n      \
    \      open_count += 1\n        elseif c == '>'\n            open_count -= 1\n\
    \        end\n        if open_count < 0\n            return false\n        end\n\
    \    end\n    return open_count == 0\nend", "    open_brackets = 0\n    for c\
    \ in brackets\n        if c == '<'\n            open_brackets += 1\n        elseif\
    \ c == '>'\n            open_brackets -= 1\n        end\n        if open_brackets\
    \ < 0\n            return false\n        end\n    end\n    return open_brackets\
    \ == 0\nend", "    bracket_count = 0\n    for bracket in brackets\n        if\
    \ bracket == \"<\"\n            bracket_count += 1\n        elseif bracket ==\
    \ \">\"\n            bracket_count -= 1\n        end\n        if bracket_count\
    \ < 0\n            return false\n        end\n    end\n    return bracket_count\
    \ == 0\nend", "    if length(brackets) == 0\n        return true\n    elseif brackets[1]\
    \ == '<'\n        return correct_bracketing(brackets[2:end])\n    elseif brackets[1]\
    \ == '>'\n        return false\n    end\nend", "    open_brackets = 0\n    for\
    \ bracket in brackets\n        if bracket == '<'\n            open_brackets +=\
    \ 1\n        elseif bracket == '>'\n            open_brackets -= 1\n        end\n\
    \        if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend", "    if brackets == \"\"\n        return\
    \ true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend", "    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend", "    open_brackets = 0\n    for\
    \ bracket in brackets\n        if bracket == '<'\n            open_brackets +=\
    \ 1\n        elseif bracket == '>'\n            open_brackets -= 1\n        end\n\
    \        if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend", "    count = 0\n    for i in brackets\n\
    \        if i == '<'\n            count += 1\n        elseif i == '>'\n      \
    \      count -= 1\n        end\n        if count < 0\n            return false\n\
    \        end\n    end\n    return count == 0\nend", "    open_brackets = 0\n \
    \   for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend", "    if brackets == \"\"\n    \
    \    return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend", "    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend", "    count = 0\n    for i in brackets\n\
    \        if i == \"<\"\n            count += 1\n        elseif i == \">\"\n  \
    \          count -= 1\n        end\n        if count < 0\n            return false\n\
    \        end\n    end\n    if count == 0\n        return true\n    else\n    \
    \    return false\n    end\nend", "    bracket_count = 0\n    for bracket in brackets\n\
    \        if bracket == '<'\n            bracket_count += 1\n        elseif bracket\
    \ == '>'\n            bracket_count -= 1\n        end\n        if bracket_count\
    \ < 0\n            return false\n        end\n    end\n    return bracket_count\
    \ == 0\nend", "    if brackets == \"\"\n        return true\n    elseif brackets[1]\
    \ == '<'\n        return correct_bracketing(brackets[2:end])\n    elseif brackets[1]\
    \ == '>'\n        return false\n    end\nend", "    open_brackets = 0\n    for\
    \ bracket in brackets\n        if bracket == '<'\n            open_brackets +=\
    \ 1\n        elseif bracket == '>'\n            open_brackets -= 1\n        end\n\
    \        if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend", "    n = length(brackets)\n    i = 1\n \
    \   count = 0\n    while i <= n\n        if brackets[i] == '<'\n            count\
    \ += 1\n        elseif brackets[i] == '>'\n            count -= 1\n        end\n\
    \        if count < 0\n            return false\n        end\n        i += 1\n\
    \    end\n    return count == 0\nend", "    if length(brackets) == 0\n       \
    \ return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend", "    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend", "    if length(brackets) == 0\n\
    \        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend", "    n =\
    \ length(brackets)\n    if n == 0\n        return true\n    end\n    if n == 1\n\
    \        return false\n    end\n    if brackets[1] == '>'\n        return false\n\
    \    end\n    if brackets[n] == '<'\n        return false\n    end\n    if brackets[1]\
    \ == '<'\n        return correct_bracketing(brackets[2:n])\n    end\n    if brackets[n]\
    \ == '>'\n        return correct_bracketing(brackets[1:n-1])\n    end\n    if\
    \ brackets[1] == '>'\n        return false\n    end\n    if brackets[n] == '<'\n\
    \        return false\n    end\n    return correct_bracketing(brackets[2:n-1])\n\
    end", "    open_brackets = 0\n    for bracket in brackets\n        if bracket\
    \ == '<'\n            open_brackets += 1\n        elseif bracket == '>'\n    \
    \        open_brackets -= 1\n        end\n        if open_brackets < 0\n     \
    \       return false\n        end\n    end\n    return open_brackets == 0\nend",
  "    if length(brackets) == 0\n        return true\n    elseif brackets[1] == '<'\n\
    \        return correct_bracketing(brackets[2:end])\n    elseif brackets[1] ==\
    \ '>'\n        return false\n    end\nend", "    count = 0\n    for i in brackets\n\
    \        if i == \"<\"\n            count += 1\n        elseif i == \">\"\n  \
    \          count -= 1\n        end\n        if count < 0\n            return false\n\
    \        end\n    end\n    return count == 0\nend", "    count = 0\n    for i\
    \ in brackets\n        if i == \"<\"\n            count += 1\n        elseif i\
    \ == \">\"\n            count -= 1\n        end\n        if count < 0\n      \
    \      return false\n        end\n    end\n    return count == 0\nend", "    count\
    \ = 0\n    for i in 1:length(brackets)\n        if brackets[i] == '<'\n      \
    \      count += 1\n        elseif brackets[i] == '>'\n            count -= 1\n\
    \        end\n        if count < 0\n            return false\n        end\n  \
    \  end\n    return count == 0\nend", "    open_brackets = 0\n    for bracket in\
    \ brackets\n        if bracket == '<'\n            open_brackets += 1\n      \
    \  elseif bracket == '>'\n            open_brackets -= 1\n        end\n      \
    \  if open_brackets < 0\n            return false\n        end\n    end\n    return\
    \ open_brackets == 0\nend", "    if length(brackets) == 0\n        return true\n\
    \    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend", "    count\
    \ = 0\n    for i in brackets\n        if i == \"<\"\n            count += 1\n\
    \        elseif i == \">\"\n            count -= 1\n        end\n        if count\
    \ < 0\n            return false\n        end\n    end\n    return count == 0\n\
    end", "    open_brackets = 0\n    for bracket in brackets\n        if bracket\
    \ == '<'\n            open_brackets += 1\n        elseif bracket == '>'\n    \
    \        open_brackets -= 1\n        end\n        if open_brackets < 0\n     \
    \       return false\n        end\n    end\n    return open_brackets == 0\nend",
  "    if length(brackets) == 0\n        return true\n    elseif brackets[1] == '<'\n\
    \        return correct_bracketing(brackets[2:end])\n    elseif brackets[1] ==\
    \ '>'\n        return false\n    end\nend", "    count = 0\n    for i in brackets\n\
    \        if i == \"<\"\n            count += 1\n        elseif i == \">\"\n  \
    \          count -= 1\n        end\n        if count < 0\n            return false\n\
    \        end\n    end\n    if count == 0\n        return true\n    else\n    \
    \    return false\n    end\nend", "    if length(brackets) == 0\n        return\
    \ true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return correct_bracketing(brackets[2:end])\n\
    \    else\n        return false\n    end\nend", "    # YOUR CODE HERE\n    return\
    \ true\nend", "    if brackets == \"\"\n        return true\n    elseif brackets[1]\
    \ == '<'\n        return correct_bracketing(brackets[2:end])\n    elseif brackets[1]\
    \ == '>'\n        return false\n    end\nend", "    # YOUR CODE HERE\n    open_count\
    \ = 0\n    for i in brackets\n        if i == '<'\n            open_count += 1\n\
    \        elseif i == '>'\n            open_count -= 1\n        end\n        if\
    \ open_count < 0\n            return false\n        end\n    end\n    return open_count\
    \ == 0\nend", "    n = 0\n    for i in brackets\n        if i == '<'\n       \
    \     n += 1\n        elseif i == '>'\n            n -= 1\n        end\n     \
    \   if n < 0\n            return false\n        end\n    end\n    return n ==\
    \ 0\nend", "    if length(brackets) == 0\n        return true\n    elseif brackets[1]\
    \ == '<'\n        return correct_bracketing(brackets[2:end])\n    elseif brackets[1]\
    \ == '>'\n        return false\n    end\nend", "    count = 0\n    for bracket\
    \ in brackets\n        if bracket == '<'\n            count += 1\n        elseif\
    \ bracket == '>'\n            count -= 1\n        end\n        if count < 0\n\
    \            return false\n        end\n    end\n    return count == 0\nend",
  "    bracket_stack = []\n    for bracket in brackets\n        if bracket == \"<\"\
    \n            push!(bracket_stack, \"<\")\n        elseif bracket == \">\"\n \
    \           if isempty(bracket_stack)\n                return false\n        \
    \    else\n                pop!(bracket_stack)\n            end\n        end\n\
    \    end\n    return isempty(bracket_stack)\nend", "    if length(brackets) ==\
    \ 0\n        return true\n    elseif brackets[1] == '<'\n        if length(brackets)\
    \ == 1\n            return false\n        elseif brackets[2] == '>'\n        \
    \    return correct_bracketing(brackets[3:end])\n        else\n            return\
    \ correct_bracketing(brackets[2:end])\n        end\n    else\n        return false\n\
    \    end\nend", "    if brackets == \"\"\n        return true\n    elseif brackets[1]\
    \ == '<'\n        return correct_bracketing(brackets[2:end])\n    elseif brackets[1]\
    \ == '>'\n        return false\n    end\nend", "    count = 0\n    for i in 1:length(brackets)\n\
    \        if brackets[i] == '<'\n            count += 1\n        elseif brackets[i]\
    \ == '>'\n            count -= 1\n        end\n        if count < 0\n        \
    \    return false\n        end\n    end\n    return count == 0\nend", "    count\
    \ = 0\n    for i in brackets\n        if i == \"<\"\n            count += 1\n\
    \        elseif i == \">\"\n            count -= 1\n        end\n        if count\
    \ < 0\n            return false\n        end\n    end\n    if count == 0\n   \
    \     return true\n    else\n        return false\n    end\nend", "    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend", "    open_brackets = 0\n    for\
    \ bracket in brackets\n        if bracket == '<'\n            open_brackets +=\
    \ 1\n        elseif bracket == '>'\n            open_brackets -= 1\n        end\n\
    \        if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend", "    stack = []\n    for i in brackets\n\
    \        if i == \"<\"\n            push!(stack, i)\n        elseif i == \">\"\
    \n            if isempty(stack)\n                return false\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    if isempty(stack)\n\
    \        return true\n    else\n        return false\n    end\nend", "    n =\
    \ length(brackets)\n    if n == 0\n        return true\n    end\n    if n == 1\n\
    \        return false\n    end\n    if brackets[1] == '>'\n        return false\n\
    \    end\n    if brackets[n] == '<'\n        return false\n    end\n    if brackets[1]\
    \ == '<'\n        return correct_bracketing(brackets[2:n])\n    end\n    if brackets[n]\
    \ == '>'\n        return correct_bracketing(brackets[1:n-1])\n    end\n    return\
    \ false\nend", "    if length(brackets) == 0\n        return true\n    elseif\
    \ length(brackets) == 1\n        return false\n    elseif brackets[1] == '<'\n\
    \        if brackets[end] == '>'\n            return correct_bracketing(brackets[2:end-1])\n\
    \        else\n            return false\n        end\n    else\n        return\
    \ false\n    end\nend", "    n = length(brackets)\n    if n == 0\n        return\
    \ true\n    end\n    if n == 1\n        return false\n    end\n    if brackets[1]\
    \ == \">\"\n        return false\n    end\n    if brackets[n] == \"<\"\n     \
    \   return false\n    end\n    if brackets[1] == \"<\" && brackets[n] == \">\"\
    \n        return correct_bracketing(brackets[2:n-1])\n    end\n    return false\n\
    end", "    if length(brackets) == 0\n        return true\n    elseif brackets[1]\
    \ == '<'\n        if length(brackets) == 1\n            return false\n       \
    \ elseif brackets[end] == '>'\n            return correct_bracketing(brackets[2:end-1])\n\
    \        else\n            return false\n        end\n    else\n        return\
    \ false\n    end\nend", "    bracket_count = 0\n    for bracket in brackets\n\
    \        if bracket == \"<\"\n            bracket_count += 1\n        elseif bracket\
    \ == \">\"\n            bracket_count -= 1\n        end\n        if bracket_count\
    \ < 0\n            return false\n        end\n    end\n    return bracket_count\
    \ == 0\nend", "    open_brackets = 0\n    for bracket in brackets\n        if\
    \ bracket == '<'\n            open_brackets += 1\n        elseif bracket == '>'\n\
    \            open_brackets -= 1\n        end\n        if open_brackets < 0\n \
    \           return false\n        end\n    end\n    return open_brackets == 0\n\
    end", "    open_brackets = 0\n    for bracket in brackets\n        if bracket\
    \ == '<'\n            open_brackets += 1\n        elseif bracket == '>'\n    \
    \        open_brackets -= 1\n        end\n        if open_brackets < 0\n     \
    \       return false\n        end\n    end\n    return open_brackets == 0\nend",
  "    open_brackets = 0\n    for bracket in brackets\n        if bracket == '<'\n\
    \            open_brackets += 1\n        elseif bracket == '>'\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend", "    count = 0\n \
    \   for i in brackets\n        if i == \"<\"\n            count += 1\n       \
    \ elseif i == \">\"\n            count -= 1\n        end\n        if count < 0\n\
    \            return false\n        end\n    end\n    if count == 0\n        return\
    \ true\n    else\n        return false\n    end\nend", "    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend", "    if brackets\
    \ == \"\"\n        return true\n    elseif brackets[1] == '<'\n        return\
    \ correct_bracketing(brackets[2:end])\n    elseif brackets[1] == '>'\n       \
    \ return false\n    end\nend", "    open_brackets = 0\n    for bracket in brackets\n\
    \        if bracket == '<'\n            open_brackets += 1\n        elseif bracket\
    \ == '>'\n            open_brackets -= 1\n        end\n        if open_brackets\
    \ < 0\n            return false\n        end\n    end\n    return open_brackets\
    \ == 0\nend", "    # YOUR CODE HERE\n    open_brackets = 0\n    for i in brackets\n\
    \        if i == '<'\n            open_brackets += 1\n        elseif i == '>'\n\
    \            open_brackets -= 1\n        end\n        if open_brackets < 0\n \
    \           return false\n        end\n    end\n    return open_brackets == 0\n\
    end", "    if length(brackets) == 0\n        return true\n    elseif brackets[1]\
    \ == '<'\n        return correct_bracketing(brackets[2:end])\n    elseif brackets[1]\
    \ == '>'\n        return false\n    end\nend", "    open_brackets = 0\n    for\
    \ bracket in brackets\n        if bracket == '<'\n            open_brackets +=\
    \ 1\n        elseif bracket == '>'\n            open_brackets -= 1\n        end\n\
    \        if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend", "    if length(brackets) == 0\n        return\
    \ true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend", "    if brackets\
    \ == \"\"\n        return true\n    elseif brackets[1] == '<'\n        return\
    \ correct_bracketing(brackets[2:end])\n    elseif brackets[1] == '>'\n       \
    \ return false\n    end\nend", "    if length(brackets) == 0\n        return true\n\
    \    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend", "    count\
    \ = 0\n    for i in brackets\n        if i == \"<\"\n            count += 1\n\
    \        elseif i == \">\"\n            count -= 1\n        end\n        if count\
    \ < 0\n            return false\n        end\n    end\n    return count == 0\n\
    end", "    if length(brackets) == 0\n        return true\n    elseif length(brackets)\
    \ == 1\n        return false\n    elseif brackets[1] == \">\"\n        return\
    \ false\n    elseif brackets[end] == \"<\"\n        return false\n    else\n \
    \       return correct_bracketing(brackets[2:end-1])\n    end\nend", "    n =\
    \ 0\n    for i in 1:length(brackets)\n        if brackets[i] == '<'\n        \
    \    n += 1\n        elseif brackets[i] == '>'\n            n -= 1\n        end\n\
    \        if n < 0\n            return false\n        end\n    end\n    return\
    \ n == 0\nend", "    open_brackets = 0\n    for bracket in brackets\n        if\
    \ bracket == '<'\n            open_brackets += 1\n        elseif bracket == '>'\n\
    \            open_brackets -= 1\n        end\n        if open_brackets < 0\n \
    \           return false\n        end\n    end\n    return open_brackets == 0\n\
    end", "    if length(brackets) == 0\n        return true\n    elseif length(brackets)\
    \ == 1\n        return false\n    elseif brackets[1] == '<' && brackets[end] ==\
    \ '>'\n        return correct_bracketing(brackets[2:end-1])\n    else\n      \
    \  return false\n    end\nend", "    count = 0\n    for i in brackets\n      \
    \  if i == \"<\"\n            count += 1\n        elseif i == \">\"\n        \
    \    count -= 1\n        end\n        if count < 0\n            return false\n\
    \        end\n    end\n    return count == 0\nend", "    if brackets == \"\"\n\
    \        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend", "    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend", "    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend", "    open_brackets = 0\n    for\
    \ bracket in brackets\n        if bracket == '<'\n            open_brackets +=\
    \ 1\n        elseif bracket == '>'\n            open_brackets -= 1\n        end\n\
    \        if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend", "    open_brackets = 0\n    for bracket\
    \ in brackets\n        if bracket == '<'\n            open_brackets += 1\n   \
    \     elseif bracket == '>'\n            open_brackets -= 1\n        end\n   \
    \     if open_brackets < 0\n            return false\n        end\n    end\n \
    \   return open_brackets == 0\nend", "    if length(brackets) == 0\n        return\
    \ true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend", "    count\
    \ = 0\n    for i in brackets\n        if i == '<'\n            count += 1\n  \
    \      elseif i == '>'\n            count -= 1\n        end\n        if count\
    \ < 0\n            return false\n        end\n    end\n    return count == 0\n\
    end", "    open_brackets = 0\n    for i in 1:length(brackets)\n        if brackets[i]\
    \ == '<'\n            open_brackets += 1\n        elseif brackets[i] == '>'\n\
    \            open_brackets -= 1\n        end\n        if open_brackets < 0\n \
    \           return false\n        end\n    end\n    return open_brackets == 0\n\
    end", "    open_brackets = 0\n    for bracket in brackets\n        if bracket\
    \ == '<'\n            open_brackets += 1\n        elseif bracket == '>'\n    \
    \        open_brackets -= 1\n        end\n        if open_brackets < 0\n     \
    \       return false\n        end\n    end\n    return open_brackets == 0\nend",
  "    count = 0\n    for i in brackets\n        if i == \"<\"\n            count\
    \ += 1\n        elseif i == \">\"\n            count -= 1\n        end\n     \
    \   if count < 0\n            return false\n        end\n    end\n    if count\
    \ == 0\n        return true\n    else\n        return false\n    end\nend", " \
    \   if length(brackets) == 0\n        return true\n    elseif brackets[1] == '<'\n\
    \        return correct_bracketing(brackets[2:end])\n    elseif brackets[1] ==\
    \ '>'\n        return false\n    end\nend", "    open_brackets = 0\n    for bracket\
    \ in brackets\n        if bracket == '<'\n            open_brackets += 1\n   \
    \     elseif bracket == '>'\n            open_brackets -= 1\n        end\n   \
    \     if open_brackets < 0\n            return false\n        end\n    end\n \
    \   return open_brackets == 0\nend", "    if length(brackets) == 0\n        return\
    \ true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend", "    count\
    \ = 0\n    for i in brackets\n        if i == \"<\"\n            count += 1\n\
    \        elseif i == \">\"\n            count -= 1\n        end\n        if count\
    \ < 0\n            return false\n        end\n    end\n    if count == 0\n   \
    \     return true\n    else\n        return false\n    end\nend", "    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend", "    if brackets\
    \ == \"\"\n        return true\n    elseif brackets[1] == '<'\n        return\
    \ correct_bracketing(brackets[2:end])\n    elseif brackets[1] == '>'\n       \
    \ return false\n    end\nend", "    if length(brackets) == 0\n        return true\n\
    \    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend", "    count\
    \ = 0\n    for i in brackets\n        if i == \"<\"\n            count += 1\n\
    \        elseif i == \">\"\n            count -= 1\n        end\n        if count\
    \ < 0\n            return false\n        end\n    end\n    return count == 0\n\
    end", "    if brackets == \"\"\n        return true\n    elseif brackets[1] ==\
    \ '<'\n        return correct_bracketing(brackets[2:end])\n    elseif brackets[1]\
    \ == '>'\n        return false\n    end\nend", "    open_brackets = 0\n    for\
    \ bracket in brackets\n        if bracket == '<'\n            open_brackets +=\
    \ 1\n        elseif bracket == '>'\n            open_brackets -= 1\n        end\n\
    \        if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend", "    count = 0\n    for i in brackets\n\
    \        if i == \"<\"\n            count += 1\n        elseif i == \">\"\n  \
    \          count -= 1\n        end\n        if count < 0\n            return false\n\
    \        end\n    end\n    return count == 0\nend", "    if brackets == \"\"\n\
    \        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend", "    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend", "    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend", "    open_brackets = 0\n    for\
    \ bracket in brackets\n        if bracket == '<'\n            open_brackets +=\
    \ 1\n        elseif bracket == '>'\n            open_brackets -= 1\n        end\n\
    \        if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend", "    if brackets == \"\"\n        return\
    \ true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend", "    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend", "    if length(brackets) == 0\n\
    \        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend", "    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend", "    if brackets\
    \ == \"\"\n        return true\n    elseif brackets[1] == '<'\n        return\
    \ correct_bracketing(brackets[2:end])\n    elseif brackets[1] == '>'\n       \
    \ return false\n    end\nend", "    if length(brackets) == 0\n        return true\n\
    \    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend", "    open_brackets\
    \ = 0\n    for bracket in brackets\n        if bracket == '<'\n            open_brackets\
    \ += 1\n        elseif bracket == '>'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend", "    open_brackets = 0\n    for\
    \ bracket in brackets\n        if bracket == '<'\n            open_brackets +=\
    \ 1\n        elseif bracket == '>'\n            open_brackets -= 1\n        end\n\
    \        if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend", "    count = 0\n    for i in brackets\n\
    \        if i == \"<\"\n            count += 1\n        elseif i == \">\"\n  \
    \          count -= 1\n        end\n        if count < 0\n            return false\n\
    \        end\n    end\n    return count == 0\nend", "    if brackets == \"\"\n\
    \        return true\n    elseif brackets[1] == '<'\n        if brackets[end]\
    \ == '>'\n            return correct_bracketing(brackets[2:end-1])\n        else\n\
    \            return false\n        end\n    else\n        return false\n    end\n\
    end", "    if length(brackets) == 0\n        return true\n    elseif brackets[1]\
    \ == '<'\n        return correct_bracketing(brackets[2:end])\n    elseif brackets[1]\
    \ == '>'\n        return false\n    end\nend", "    if length(brackets) == 0\n\
    \        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend", "    if length(brackets)\
    \ == 0\n        return true\n    elseif length(brackets) == 1\n        return\
    \ false\n    else\n        if brackets[1] == \"<\"\n            if brackets[end]\
    \ == \">\"\n                return correct_bracketing(brackets[2:end-1])\n   \
    \         else\n                return false\n            end\n        else\n\
    \            return false\n        end\n    end\nend", "    n = 0\n    for b in\
    \ brackets\n        if b == '<'\n            n += 1\n        elseif b == '>'\n\
    \            n -= 1\n        end\n        if n < 0\n            return false\n\
    \        end\n    end\n    return n == 0\nend", "    if length(brackets) == 0\n\
    \        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend", "    count\
    \ = 0\n    for i in 1:length(brackets)\n        if brackets[i] == '<'\n      \
    \      count += 1\n        elseif brackets[i] == '>'\n            count -= 1\n\
    \        end\n        if count < 0\n            return false\n        end\n  \
    \  end\n    if count == 0\n        return true\n    else\n        return false\n\
    \    end\nend", "    if brackets == \"\"\n        return true\n    elseif brackets[1]\
    \ == '<'\n        return correct_bracketing(brackets[2:end])\n    elseif brackets[1]\
    \ == '>'\n        return false\n    end\nend", "    # YOUR CODE HERE\n    return\
    \ true\nend", "    if length(brackets) == 0\n        return true\n    elseif length(brackets)\
    \ == 1\n        return false\n    elseif brackets[1] == '>'\n        return false\n\
    \    elseif brackets[1] == '<' && brackets[2] == '>'\n        return correct_bracketing(brackets[3:end])\n\
    \    elseif brackets[1] == '<' && brackets[2] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    end\nend", "    open_brackets = 0\n    for bracket in brackets\n        if\
    \ bracket == '<'\n            open_brackets += 1\n        elseif bracket == '>'\n\
    \            open_brackets -= 1\n        end\n        if open_brackets < 0\n \
    \           return false\n        end\n    end\n    return open_brackets == 0\n\
    end", "    if length(brackets) == 0\n        return true\n    elseif length(brackets)\
    \ == 1\n        return false\n    elseif brackets[1] == '>'\n        return false\n\
    \    elseif brackets[end] == '<'\n        return false\n    else\n        return\
    \ correct_bracketing(brackets[2:end-1])\n    end\nend", "    bracket_stack = Stack()\n\
    \    for bracket in brackets\n        if bracket == \"<\"\n            push!(bracket_stack,\
    \ bracket)\n        elseif bracket == \">\"\n            if isempty(bracket_stack)\n\
    \                return false\n            else\n                pop!(bracket_stack)\n\
    \            end\n        end\n    end\n    return isempty(bracket_stack)\nend",
  "    if brackets == \"\"\n        return true\n    elseif brackets[1] == '<'\n \
    \       return correct_bracketing(brackets[2:end])\n    elseif brackets[1] ==\
    \ '>'\n        return correct_bracketing(brackets[2:end])\n    else\n        return\
    \ false\n    end\nend", "    # YOUR CODE HERE\n    return false\nend", "    if\
    \ length(brackets) == 0\n        return true\n    elseif length(brackets) == 1\n\
    \        return false\n    elseif brackets[1] == '>'\n        return false\n \
    \   elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[end] == '<'\n        return false\n    elseif brackets[end]\
    \ == '>'\n        return correct_bracketing(brackets[1:end-1])\n    else\n   \
    \     return correct_bracketing(brackets[2:end-1])\n    end\nend", "    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend", "    count\
    \ = 0\n    for i in brackets\n        if i == \"<\"\n            count += 1\n\
    \        elseif i == \">\"\n            count -= 1\n        end\n        if count\
    \ < 0\n            return false\n        end\n    end\n    return count == 0\n\
    end", "    if brackets == \"\"\n        return true\n    elseif brackets[1] ==\
    \ '<'\n        return correct_bracketing(brackets[2:end])\n    elseif brackets[1]\
    \ == '>'\n        return false\n    end\nend", "    open_brackets = 0\n    for\
    \ bracket in brackets\n        if bracket == '<'\n            open_brackets +=\
    \ 1\n        elseif bracket == '>'\n            open_brackets -= 1\n        end\n\
    \        if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend", "    bracket_count = 0\n    for bracket\
    \ in brackets\n        if bracket == '<'\n            bracket_count += 1\n   \
    \     elseif bracket == '>'\n            bracket_count -= 1\n        end\n   \
    \     if bracket_count < 0\n            return false\n        end\n    end\n \
    \   return bracket_count == 0\nend", "    stack = []\n    for i in brackets\n\
    \        if i == \"<\"\n            push!(stack, i)\n        elseif i == \">\"\
    \n            if isempty(stack)\n                return false\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    return\
    \ isempty(stack)\nend", "    left_bracket_count = 0\n    right_bracket_count =\
    \ 0\n    for bracket in brackets\n        if bracket == \"<\"\n            left_bracket_count\
    \ += 1\n        elseif bracket == \">\"\n            right_bracket_count += 1\n\
    \        end\n    end\n    return left_bracket_count == right_bracket_count\n\
    end", "    count = 0\n    for i in brackets\n        if i == \"<\"\n         \
    \   count += 1\n        elseif i == \">\"\n            count -= 1\n        end\n\
    \        if count < 0\n            return false\n        end\n    end\n    return\
    \ count == 0\nend", "    if length(brackets) == 0\n        return true\n    elseif\
    \ length(brackets) == 1\n        return false\n    elseif brackets[1] == '>'\n\
    \        return false\n    elseif brackets[1] == '<' && brackets[2] == '>'\n \
    \       return correct_bracketing(brackets[3:end])\n    elseif brackets[1] ==\
    \ '<' && brackets[2] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '<' && brackets[2] == '>'\n        return correct_bracketing(brackets[3:end])\n\
    \    else\n        return false\n    end\nend", "    n = length(brackets)\n  \
    \  if n == 0\n        return true\n    end\n    if n % 2 != 0\n        return\
    \ false\n    end\n    if brackets[1] == \">\"\n        return false\n    end\n\
    \    if brackets[n] == \"<\"\n        return false\n    end\n    i = 1\n    while\
    \ i < n\n        if brackets[i] == \"<\"\n            if brackets[i+1] == \">\"\
    \n                brackets = brackets[1:i-1] * brackets[i+2:n]\n             \
    \   n = length(brackets)\n                i = 1\n            else\n          \
    \      i += 1\n            end\n        else\n            i += 1\n        end\n\
    \    end\n    if length(brackets) == 0\n        return true\n    else\n      \
    \  return false\n    end\nend", "    if length(brackets) == 0\n        return\
    \ true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend", "    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '<'\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == '>'\n        return false\n    end\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
