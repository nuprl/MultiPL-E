name: HumanEval_149_sorted_list_sum
language: julia
results:
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    lst_len =\
    \ length(lst)\n    lst_len_odd = lst_len % 2 == 1\n    if lst_len_odd\n      \
    \  lst = lst[1:end-1]\n    end\n    return sort(lst)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"\
    aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\",\
    \ \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"abcd\"\
    , \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"au\"\
    ]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp72m8en35.jl:28\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\"] == [\"aa\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp72m8en35.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp72m8en35.jl:27\ntest set: Test Failed at /tmp/tmp72m8en35.jl:29\n\
    \  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\n   Evaluated: [\"AI\", \"asdf\", \"b\", \"school\"] == [\"\
    AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp72m8en35.jl:29\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp72m8en35.jl:27\ntest set: Test Failed at /tmp/tmp72m8en35.jl:30\n\
    \  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"b\", \"c\", \"d\"] == String[]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp72m8en35.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp72m8en35.jl:27\ntest set: Test Failed at /tmp/tmp72m8en35.jl:31\n\
    \  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\n   Evaluated: [\"a\", \"abcd\", \"d\", \"dcba\"] == [\"abcd\", \"dcba\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmp72m8en35.jl:31\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp72m8en35.jl:27\ntest set: Test Failed at /tmp/tmp72m8en35.jl:32\n\
    \  Expression: candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"\
    ]\n   Evaluated: [\"AI\", \"ai\"] == [\"AI\", \"ai\", \"au\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp72m8en35.jl:32\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp72m8en35.jl:27\ntest set: Test Failed at /tmp/tmp72m8en35.jl:33\n\
    \  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"a\", \"b\", \"b\", \"c\", \"c\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp72m8en35.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp72m8en35.jl:27\ntest set: Test Failed at /tmp/tmp72m8en35.jl:34\n\
    \  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"]\
    \ == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp72m8en35.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp72m8en35.jl:27\nTest Summary: | Fail  Total\n\
    test set      |    7      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp72m8en35.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    lst_len =\
    \ length(lst)\n    lst_len_odd = lst_len % 2 == 1\n    lst_len_even = lst_len\
    \ % 2 == 0\n    if lst_len_odd\n        lst_len_odd_idx = lst_len_odd ? 1 : 2\n\
    \        lst_len_odd_idx_end = lst_len_odd ? lst_len : lst_len - 1\n        lst_len_odd_idx_end_step\
    \ = lst_len_odd ? 1 : 2\n        lst_len_odd_idx_end_step_end = lst_len_odd ?\
    \ lst_len : lst_len - 1\n        lst_len_odd_idx_end_step_end_step = lst_len_odd\
    \ ? 1 : 2\n        lst_len_odd_idx_end_step_end_step_end = lst_len_odd ? lst_len\
    \ : lst_len - 1\n        lst_len_odd_idx_end_step_end_step_end_step = lst_len_odd\
    \ ? 1 : 2\n        lst_len_odd_idx_end_step_end_step_end_step_end = lst_len_odd\
    \ ? lst_len : lst_len - 1\n        lst_len_odd_idx_end_step_end_step_end_step_end_step\
    \ = lst_len_odd ? 1 : 2\n        lst_len_odd_idx_end_step_end_step_end_step_end_step_end\
    \ = lst_len_odd ? lst_len : lst_len - 1\n        lst_len_odd_idx_end_step_end_step_end_step_end_step_end_step\
    \ = lst_len_odd ? 1 : 2\n        lst_len_odd_idx_end_step_end_step_end_step_end_step_end_step_end\
    \ = lst_len_odd ? lst_len : lst_len - 1\n        lst_len_odd_idx_end\nusing Test\n\
    \n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp96wi9mrw.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp96wi9mrw.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # your code\
    \ here\n    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmpr_y615y9.jl:24\\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\\n   Evaluated: [\"aa\", \"a\", \"aaa\"] ==\
    \ [\"aa\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpr_y615y9.jl:24\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpr_y615y9.jl:23\\ntest set: Test Failed at /tmp/tmpr_y615y9.jl:25\\\
    n  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\\n   Evaluated: [\"school\", \"AI\", \"asdf\", \"b\"] == [\"\
    AI\", \"asdf\", \"school\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpr_y615y9.jl:25\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpr_y615y9.jl:23\\ntest set: Test Failed at /tmp/tmpr_y615y9.jl:26\\\
    n  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\\\
    n   Evaluated: [\"d\", \"b\", \"c\", \"a\"] == String[]\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmpr_y615y9.jl:26\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpr_y615y9.jl:23\\ntest set: Test Failed at /tmp/tmpr_y615y9.jl:27\\\
    n  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\\n   Evaluated: [\"d\", \"dcba\", \"abcd\", \"a\"] == [\"abcd\", \"dcba\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpr_y615y9.jl:27\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpr_y615y9.jl:23\\ntest set: Test Failed at /tmp/tmpr_y615y9.jl:29\\\
    n  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\\\
    n   Evaluated: [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"] == String[]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpr_y615y9.jl:29\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpr_y615y9.jl:23\\ntest set: Test Failed at /tmp/tmpr_y615y9.jl:30\\\
    n  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\\n   Evaluated: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    ] == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpr_y615y9.jl:30\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpr_y615y9.jl:23\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    lst_len =\
    \ length(lst)\n    lst_len_odd = lst_len % 2 == 1\n    if lst_len_odd\n      \
    \  lst = lst[1:end-1]\n    end\n    lst = sort(lst)\n    return lst\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdn24g5ge.jl:29\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\"] == [\"aa\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpdn24g5ge.jl:29\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdn24g5ge.jl:28\ntest set: Test Failed at /tmp/tmpdn24g5ge.jl:30\n\
    \  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\n   Evaluated: [\"AI\", \"asdf\", \"b\", \"school\"] == [\"\
    AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpdn24g5ge.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdn24g5ge.jl:28\ntest set: Test Failed at /tmp/tmpdn24g5ge.jl:31\n\
    \  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"b\", \"c\", \"d\"] == String[]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpdn24g5ge.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdn24g5ge.jl:28\ntest set: Test Failed at /tmp/tmpdn24g5ge.jl:32\n\
    \  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\n   Evaluated: [\"a\", \"abcd\", \"d\", \"dcba\"] == [\"abcd\", \"dcba\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpdn24g5ge.jl:32\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdn24g5ge.jl:28\ntest set: Test Failed at /tmp/tmpdn24g5ge.jl:33\n\
    \  Expression: candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"\
    ]\n   Evaluated: [\"AI\", \"ai\"] == [\"AI\", \"ai\", \"au\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpdn24g5ge.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdn24g5ge.jl:28\ntest set: Test Failed at /tmp/tmpdn24g5ge.jl:34\n\
    \  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"a\", \"b\", \"b\", \"c\", \"c\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdn24g5ge.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdn24g5ge.jl:28\ntest set: Test Failed at /tmp/tmpdn24g5ge.jl:35\n\
    \  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"]\
    \ == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpdn24g5ge.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdn24g5ge.jl:28\nTest Summary: | Fail  Total\n\
    test set      |    7      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdn24g5ge.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # your code\
    \ here\n    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmplggnm0sa.jl:24\\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\\n   Evaluated: [\"aa\", \"a\", \"aaa\"] ==\
    \ [\"aa\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmplggnm0sa.jl:24\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmplggnm0sa.jl:23\\ntest set: Test Failed at /tmp/tmplggnm0sa.jl:25\\\
    n  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\\n   Evaluated: [\"school\", \"AI\", \"asdf\", \"b\"] == [\"\
    AI\", \"asdf\", \"school\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmplggnm0sa.jl:25\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmplggnm0sa.jl:23\\ntest set: Test Failed at /tmp/tmplggnm0sa.jl:26\\\
    n  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\\\
    n   Evaluated: [\"d\", \"b\", \"c\", \"a\"] == String[]\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmplggnm0sa.jl:26\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmplggnm0sa.jl:23\\ntest set: Test Failed at /tmp/tmplggnm0sa.jl:27\\\
    n  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\\n   Evaluated: [\"d\", \"dcba\", \"abcd\", \"a\"] == [\"abcd\", \"dcba\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmplggnm0sa.jl:27\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmplggnm0sa.jl:23\\ntest set: Test Failed at /tmp/tmplggnm0sa.jl:29\\\
    n  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\\\
    n   Evaluated: [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"] == String[]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmplggnm0sa.jl:29\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmplggnm0sa.jl:23\\ntest set: Test Failed at /tmp/tmplggnm0sa.jl:30\\\
    n  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\\n   Evaluated: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    ] == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmplggnm0sa.jl:30\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmplggnm0sa.jl:23\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    1     6      7\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    #sorted_list\
    \ = sort(lst, by = length)\n    #sorted_list = sort(lst, by = length, rev = true)\n\
    \    #sorted_list = sort(lst, by = length, rev = true, alg = MergeSort)\n    #sorted_list\
    \ = sort(lst, by = length, rev = true, alg = QuickSort)\n    #sorted_list = sort(lst,\
    \ by = length, rev = true, alg = InsertionSort)\n    #sorted_list = sort(lst,\
    \ by = length, rev = true, alg = HeapSort)\n    #sorted_list = sort(lst, by =\
    \ length, rev = true, alg = TimSort)\n    #sorted_list = sort(lst, by = length,\
    \ rev = true, alg = RadixSort)\n    #sorted_list = sort(lst, by = length, rev\
    \ = true, alg = IntroSort)\n    #sorted_list = sort(lst, by = length, rev = true,\
    \ alg = CountingSort)\n    #sorted_list = sort(lst, by = length, rev = true, alg\
    \ = BucketSort)\n    #sorted_list = sort(lst, by = length, rev = true, alg = ShellSort)\n\
    \    #sorted_list = sort(lst, by = length, rev = true, alg = CombSort)\n    #sorted_list\
    \ = sort(lst, by = length, rev = true, alg = CycleSort)\n    #sorted_list = sort(lst,\
    \ by = length, rev = true, alg = GnomeSort)\n    #sorted_list = sort(lst, by =\
    \ length, rev = true, alg = StrandSort)\n    #sorted_list = sort(lst, by = length,\
    \ rev = true, alg = SmoothSort)\n    #sorted_list = sort(lst, by = length, rev\
    \ = true, alg = OddEvenSort)\n    #sorted_list = sort(lst, by = length, rev =\
    \ true, alg = BitonicSort)\n    #sorted_list\nusing Test\n\n@testset begin\n\n\
    candidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpt79iboj9.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpt79iboj9.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpt79iboj9.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # sort the\
    \ list by length of each word\n    sorted_lst = sort(lst, by=length)\n    # filter\
    \ the list by even length words\n    even_lst = filter(x -> length(x) % 2 == 0,\
    \ sorted_lst)\n    # return the list\n    return even_lst\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo8w_xm42.jl:31\n  Expression: candidate([\"\
    d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"dcba\"\
    , \"abcd\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpo8w_xm42.jl:31\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpo8w_xm42.jl:27\ntest set: Test Failed at /tmp/tmpo8w_xm42.jl:34\n\
    \  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"dd\", \"cc\", \"aaaa\", \"bbbb\"]\
    \ == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpo8w_xm42.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpo8w_xm42.jl:27\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo8w_xm42.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # lst = [\"\
    aa\", \"a\", \"aaa\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\"]\n    # lst\
    \ = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"]\n    # lst\
    \ = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"\
    a\", \"aaa\", \"cd\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"\
    a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\",\
    \ \"cd\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\"\
    , \"a\", \"aaa\", \"cd\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\"\
    , \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"]\n  \
    \  # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"\
    ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"\
    ]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"\
    , \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\"\
    , \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"\
    cd\", \"ab\", \"a\", \"aaa\", \"cd\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"\
    cd\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp83w6k0e4.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp83w6k0e4.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp83w6k0e4.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    lst = sort(lst,\
    \ by=length)\n    lst = sort(lst, by=x->x[1])\n    return lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy4lubl9x.jl:25\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpy4lubl9x.jl:25\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy4lubl9x.jl:24\ntest set: Test Failed at /tmp/tmpy4lubl9x.jl:26\n\
    \  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\n   Evaluated: [\"AI\", \"asdf\", \"b\", \"school\"] == [\"\
    AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpy4lubl9x.jl:26\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy4lubl9x.jl:24\ntest set: Test Failed at /tmp/tmpy4lubl9x.jl:27\n\
    \  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"b\", \"c\", \"d\"] == String[]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpy4lubl9x.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy4lubl9x.jl:24\ntest set: Test Failed at /tmp/tmpy4lubl9x.jl:28\n\
    \  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\n   Evaluated: [\"a\", \"abcd\", \"d\", \"dcba\"] == [\"abcd\", \"dcba\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpy4lubl9x.jl:28\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy4lubl9x.jl:24\ntest set: Test Failed at /tmp/tmpy4lubl9x.jl:30\n\
    \  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"a\", \"b\", \"b\", \"c\", \"c\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy4lubl9x.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy4lubl9x.jl:24\ntest set: Test Failed at /tmp/tmpy4lubl9x.jl:31\n\
    \  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"]\
    \ == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpy4lubl9x.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy4lubl9x.jl:24\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy4lubl9x.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    new_lst =\
    \ []\n    for i in lst\n        if length(i) % 2 == 0\n            push!(new_lst,\
    \ i)\n        end\n    end\n    return sort(new_lst)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"\
    aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\",\
    \ \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"abcd\"\
    , \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"au\"\
    ]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp48zgjqjy.jl:35\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp48zgjqjy.jl:35\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp48zgjqjy.jl:28\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp48zgjqjy.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # sort the\
    \ list by length of each word\n    sorted_lst = sort(lst, by=length)\n    # delete\
    \ the strings that have odd lengths\n    for i in 1:length(sorted_lst)\n     \
    \   if length(sorted_lst[i]) % 2 != 0\n            deleteat!(sorted_lst, i)\n\
    \        end\n    end\n    return sorted_lst\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "b'test set: Error During Test at /tmp/tmp3h1_4ktn.jl:31\\n  Test threw\
    \ exception\\n  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\\\
    n  BoundsError: attempt to access 1-element Array{String,1} at index [3]\\n  Stacktrace:\\\
    n   [1] getindex at ./array.jl:788 [inlined]\\n   [2] sorted_list_sum(::Array{String,1})\
    \ at /tmp/tmp3h1_4ktn.jl:20\\n   [3] top-level scope at /tmp/tmp3h1_4ktn.jl:31\\\
    n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [5] top-level scope at /tmp/tmp3h1_4ktn.jl:30\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp3h1_4ktn.jl:32\\n  Test threw exception\\n  Expression: candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\\n  BoundsError:\
    \ attempt to access 3-element Array{String,1} at index [4]\\n  Stacktrace:\\n\
    \   [1] getindex at ./array.jl:788 [inlined]\\n   [2] sorted_list_sum(::Array{String,1})\
    \ at /tmp/tmp3h1_4ktn.jl:20\\n   [3] top-level scope at /tmp/tmp3h1_4ktn.jl:32\\\
    n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [5] top-level scope at /tmp/tmp3h1_4ktn.jl:30\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp3h1_4ktn.jl:33\\n  Test threw exception\\n  Expression: candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\\n  BoundsError: attempt to access\
    \ 2-element Array{String,1} at index [3]\\n  Stacktrace:\\n   [1] getindex at\
    \ ./array.jl:788 [inlined]\\n   [2] sorted_list_sum(::Array{String,1}) at /tmp/tmp3h1_4ktn.jl:20\\\
    n   [3] top-level scope at /tmp/tmp3h1_4ktn.jl:33\\n   [4] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [5] top-level scope at /tmp/tmp3h1_4ktn.jl:30\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp3h1_4ktn.jl:34\\n  Test threw exception\\n  Expression: candidate([\"\
    d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\\n  BoundsError: attempt\
    \ to access 3-element Array{String,1} at index [4]\\n  Stacktrace:\\n   [1] getindex\
    \ at ./array.jl:788 [inlined]\\n   [2] sorted_list_sum(::Array{String,1}) at /tmp/tmp3h1_4ktn.jl:20\\\
    n   [3] top-level scope at /tmp/tmp3h1_4ktn.jl:34\\n   [4] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [5] top-level scope at /tmp/tmp3h1_4ktn.jl:30\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp3h1_4ktn.jl:36\\n  Test threw exception\\n  Expression: candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\\n  BoundsError:\
    \ attempt to access 3-element Array{String,1} at index [4]\\n  Stacktrace:\\n\
    \   [1] getindex at ./array.jl:788 [inlined]\\n   [2] sorted_list_sum(::Array{String,1})\
    \ at /tmp/tmp3h1_4ktn.jl:20\\n   [3] top-level scope at /tmp/tmp3h1_4ktn.jl:36\\\
    n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [5] top-level scope at /tmp/tmp3h1_4ktn.jl:30\\n  \\ntest set: Test Failed\
    \ at /tmp/tmp3h1_4ktn.jl:37\\n  Expression: candidate([\"aaaa\", \"bbbb\", \"\
    dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\\n   Evaluated: [\"dd\"\
    , \"cc\", \"aaaa\", \"bbbb\"] == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp3h1_4ktn.jl:37\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp3h1_4ktn.jl:30\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    lst = sort(lst,\
    \ by=length)\n    lst = sort(lst, by=x->x[1])\n    return lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpazcgxjwa.jl:25\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpazcgxjwa.jl:25\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpazcgxjwa.jl:24\ntest set: Test Failed at /tmp/tmpazcgxjwa.jl:26\n\
    \  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\n   Evaluated: [\"AI\", \"asdf\", \"b\", \"school\"] == [\"\
    AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpazcgxjwa.jl:26\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpazcgxjwa.jl:24\ntest set: Test Failed at /tmp/tmpazcgxjwa.jl:27\n\
    \  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"b\", \"c\", \"d\"] == String[]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpazcgxjwa.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpazcgxjwa.jl:24\ntest set: Test Failed at /tmp/tmpazcgxjwa.jl:28\n\
    \  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\n   Evaluated: [\"a\", \"abcd\", \"d\", \"dcba\"] == [\"abcd\", \"dcba\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpazcgxjwa.jl:28\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpazcgxjwa.jl:24\ntest set: Test Failed at /tmp/tmpazcgxjwa.jl:30\n\
    \  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"a\", \"b\", \"b\", \"c\", \"c\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpazcgxjwa.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpazcgxjwa.jl:24\ntest set: Test Failed at /tmp/tmpazcgxjwa.jl:31\n\
    \  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"]\
    \ == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpazcgxjwa.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpazcgxjwa.jl:24\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpazcgxjwa.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # lst = [\"\
    aa\", \"a\", \"aaa\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\"]\n    # lst\
    \ = [\"ab\", \"a\", \"aaa\", \"cd\", \"aaa\"]\n    # lst = [\"ab\", \"a\", \"\
    aaa\", \"cd\", \"aaa\", \"aaa\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\"\
    , \"aaa\", \"aaa\", \"aaa\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"\
    aaa\", \"aaa\", \"aaa\", \"aaa\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\"\
    , \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\"]\n    # lst = [\"ab\", \"a\", \"\
    aaa\", \"cd\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\"]\n    # lst\
    \ = [\"ab\", \"a\", \"aaa\", \"cd\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\"\
    , \"aaa\", \"aaa\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"aaa\", \"\
    aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\"]\n    # lst = [\"\
    ab\", \"a\", \"aaa\", \"cd\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"\
    aaa\", \"aaa\", \"aaa\", \"aaa\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\"\
    , \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\"\
    , \"aaa\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"aaa\", \"aaa\", \"\
    aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\"\
    ]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"aaa\", \"aaa\", \"aaa\", \"\
    aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\"\
    ]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"aaa\", \"aaa\", \"aaa\", \"\
    aaa\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp93iun_na.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp93iun_na.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp93iun_na.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    lst = sort(lst,\
    \ by=length)\n    lst = sort(lst, by=x->x[1])\n    return lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphuiouca8.jl:25\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] top-level scope at /tmp/tmphuiouca8.jl:25\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphuiouca8.jl:24\ntest set: Test Failed at /tmp/tmphuiouca8.jl:26\n\
    \  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\n   Evaluated: [\"AI\", \"asdf\", \"b\", \"school\"] == [\"\
    AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] top-level scope at /tmp/tmphuiouca8.jl:26\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphuiouca8.jl:24\ntest set: Test Failed at /tmp/tmphuiouca8.jl:27\n\
    \  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"b\", \"c\", \"d\"] == String[]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmphuiouca8.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphuiouca8.jl:24\ntest set: Test Failed at /tmp/tmphuiouca8.jl:28\n\
    \  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\n   Evaluated: [\"a\", \"abcd\", \"d\", \"dcba\"] == [\"abcd\", \"dcba\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmphuiouca8.jl:28\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphuiouca8.jl:24\ntest set: Test Failed at /tmp/tmphuiouca8.jl:30\n\
    \  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"a\", \"b\", \"b\", \"c\", \"c\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphuiouca8.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphuiouca8.jl:24\ntest set: Test Failed at /tmp/tmphuiouca8.jl:31\n\
    \  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"]\
    \ == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmphuiouca8.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphuiouca8.jl:24\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphuiouca8.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # create a\
    \ new list\n    new_lst = []\n    # loop through the list\n    for i in lst\n\
    \        # if the length of the string is even\n        if length(i) % 2 == 0\n\
    \            # append the string to the new list\n            push!(new_lst, i)\n\
    \        end\n    end\n    # sort the list\n    sort!(new_lst)\n    # return the\
    \ new list\n    return new_lst\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmplkp9b14n.jl:42\\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\\n\
    \   Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmplkp9b14n.jl:42\\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmplkp9b14n.jl:35\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    6     1      7\\n'"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmplkp9b14n.jl:33\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    #lst = [\"\
    aa\", \"a\", \"aaa\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\"]\n    lst_len\
    \ = length(lst)\n    lst_len_unique = unique(map(length, lst))\n    lst_len_unique_len\
    \ = length(lst_len_unique)\n    lst_len_unique_len_max = maximum(lst_len_unique)\n\
    \    lst_len_unique_len_min = minimum(lst_len_unique)\n    lst_len_unique_len_range\
    \ = lst_len_unique_len_max - lst_len_unique_len_min\n    lst_len_unique_len_range_max\
    \ = lst_len_unique_len_range + 1\n    lst_len_unique_len_range_max_range = 1:lst_len_unique_len_range_max\n\
    \    lst_len_unique_len_range_max_range_len = length(lst_len_unique_len_range_max_range)\n\
    \    lst_len_unique_len_range_max_range_len_range = 1:lst_len_unique_len_range_max_range_len\n\
    \    lst_len_unique_len_range_max_range_len_range_len = length(lst_len_unique_len_range_max_range_len_range)\n\
    \    lst_len_unique_len_range_max_range_len_range_len_range = 1:lst_len_unique_len_range_max_range_len_range_len\n\
    \    lst_len_unique_len_range_max_range_len_range_len_range_len = length(lst_len_unique_len_range_max_range_len_range_len_range)\n\
    \    lst_len_unique_len_range_max_range_len_range_len_range_len_range = 1:lst_len_unique_len_range_max_range_len_range_len_range_len\n\
    \    lst_len_unique_len_range_max_range_len_range\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxydvasn0.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpxydvasn0.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpxydvasn0.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # sort by\
    \ length\n    sorted_lst = sort(lst, by=length)\n    # remove duplicates\n   \
    \ sorted_lst = unique(sorted_lst)\n    # remove odd length strings\n    sorted_lst\
    \ = filter(x -> length(x) % 2 == 0, sorted_lst)\n    return sorted_lst\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp9oqcgda3.jl:32\\n  Expression: candidate([\"\
    d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\\n   Evaluated: [\"dcba\"\
    , \"abcd\"] == [\"abcd\", \"dcba\"]\\nStacktrace:\\n [1] top-level scope at '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # sort the\
    \ list by length of each word\n    sorted_lst = sort(lst, by=length)\n    # create\
    \ a new list to store the result\n    result = []\n    # iterate over the sorted\
    \ list\n    for i in sorted_lst\n        # if the length of the word is even\n\
    \        if length(i) % 2 == 0\n            # append the word to the result list\n\
    \            push!(result, i)\n        end\n    end\n    # return the result list\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmpvn4yu37s.jl:39\\n  Expression: candidate([\"\
    d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\\n   Evaluated: [\"dcba\"\
    , \"abcd\"] == [\"abcd\", \"dcba\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpvn4yu37s.jl:39\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpvn4yu37s.jl:35\\ntest set: Test Failed at /tmp/tmpvn4yu37s.jl:42\\\
    n  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\\n   Evaluated: [\"dd\", \"cc\", \"aaaa\", \"bbbb\"\
    ] == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpvn4yu37s.jl:42\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpvn4yu37s.jl:35\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    lst = filter(x\
    \ -> length(x) % 2 == 0, lst)\n    sort(lst)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp_8s954qz.jl:30\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp_8s954qz.jl:30\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_8s954qz.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_8s954qz.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # sort by\
    \ length\n    sorted_lst = sort(lst, by=length)\n    # remove duplicates\n   \
    \ unique_lst = unique(sorted_lst)\n    # remove odd length strings\n    even_lst\
    \ = unique_lst[mod.(length.(unique_lst), 2) .== 0]\n    return even_lst\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpn67b4pfv.jl:32\\n  Expression: candidate([\"\
    d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\\n   Evaluated: [\"dcba\"\
    , \"abcd\"] == [\"abcd\", \"dcba\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpn67b4pfv.jl:32\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpn67b4pfv.jl:28\\ntest set: Test Failed at /tmp/tmpn67b4pfv.jl:35\\\
    n  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\\n   Evaluated: [\"dd\", \"cc\", \"aaaa\", \"bbbb\"\
    ] == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpn67b4pfv.jl:35\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpn67b4pfv.jl:28\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    new_lst =\
    \ []\n    for i in lst\n        if length(i) % 2 == 0\n            push!(new_lst,\
    \ i)\n        end\n    end\n    sort(new_lst)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpbcm61r3h.jl:35\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpbcm61r3h.jl:35\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbcm61r3h.jl:28\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbcm61r3h.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # lst = [\"\
    aa\", \"a\", \"aaa\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\"]\n    # lst\
    \ = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\"]\n    # lst = [\"ab\", \"a\", \"aaa\"\
    , \"cd\", \"a\", \"a\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"\
    a\", \"a\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"a\", \"a\"\
    , \"a\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"a\", \"a\", \"\
    a\", \"a\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"a\", \"a\"\
    , \"a\", \"a\", \"a\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\"]\n    # lst = [\"ab\", \"a\", \"aaa\",\
    \ \"cd\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"]\n    # lst =\
    \ [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"\
    a\", \"a\", \"a\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"a\"\
    , \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"]\n    # lst = [\"ab\"\
    , \"a\", \"aaa\", \"cd\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"\
    a\", \"a\", \"a\", \"a\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\"\
    , \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"\
    ]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"a\", \"a\", \"a\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1qn_0rcl.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp1qn_0rcl.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp1qn_0rcl.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # sort the\
    \ list by length of each word\n    sorted_list = sort(lst, by=length)\n    # filter\
    \ the list by even length\n    even_list = filter(x -> length(x) % 2 == 0, sorted_list)\n\
    \    # sort the list alphabetically\n    sorted_even_list = sort(even_list)\n\
    \    return sorted_even_list\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp54j_dhde.jl:35\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp54j_dhde.jl:35\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp54j_dhde.jl:28\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp54j_dhde.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    new_lst =\
    \ []\n    for i in lst\n        if length(i) % 2 == 0\n            push!(new_lst,\
    \ i)\n        end\n    end\n    sort(new_lst)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpby1ke8aa.jl:35\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpby1ke8aa.jl:35\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpby1ke8aa.jl:28\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpby1ke8aa.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    lst_sorted\
    \ = sort(lst, by=x->length(x))\n    lst_sorted = sort(lst_sorted, by=x->x)\n \
    \   lst_sorted = lst_sorted[1:2:end]\n    return lst_sorted\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp82nurcbp.jl:26\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aaa\"] == [\"aa\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmp82nurcbp.jl:26\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp82nurcbp.jl:25\ntest set: Test Failed at /tmp/tmp82nurcbp.jl:27\n\
    \  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\n   Evaluated: [\"AI\", \"b\"] == [\"AI\", \"asdf\", \"school\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmp82nurcbp.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp82nurcbp.jl:25\ntest set: Test Failed at /tmp/tmp82nurcbp.jl:28\n\
    \  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"c\"] == String[]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp82nurcbp.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp82nurcbp.jl:25\ntest set: Test Failed at /tmp/tmp82nurcbp.jl:29\n\
    \  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\n   Evaluated: [\"a\", \"d\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp82nurcbp.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp82nurcbp.jl:25\ntest set: Test Failed at /tmp/tmp82nurcbp.jl:30\n\
    \  Expression: candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"\
    ]\n   Evaluated: [\"AI\", \"au\"] == [\"AI\", \"ai\", \"au\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp82nurcbp.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp82nurcbp.jl:25\ntest set: Test Failed at /tmp/tmp82nurcbp.jl:31\n\
    \  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"b\", \"c\"] == String[]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp82nurcbp.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp82nurcbp.jl:25\ntest set: Test Failed at /tmp/tmp82nurcbp.jl:32\n\
    \  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"aaaa\", \"cc\"] == [\"cc\", \"dd\"\
    , \"aaaa\", \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp82nurcbp.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp82nurcbp.jl:25\nTest Summary: | Fail  Total\n\
    test set      |    7      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp82nurcbp.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # sort by\
    \ length\n    lst = sort(lst, by=length)\n    # sort by alphabet\n    lst = sort(lst)\n\
    \    # remove odd length strings\n    lst = [x for x in lst if length(x) % 2 ==\
    \ 0]\n    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmp6dc_dd9d.jl:35\\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\\n\
    \   Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp6dc_dd9d.jl:35\\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp6dc_dd9d.jl:28\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    6     1      7\\n'"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    lst_new =\
    \ []\n    for i in lst\n        if length(i) % 2 == 0\n            push!(lst_new,\
    \ i)\n        end\n    end\n    sort(lst_new)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpmkgx_qd1.jl:35\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpmkgx_qd1.jl:35\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmkgx_qd1.jl:28\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmkgx_qd1.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    lst = sort(lst,\
    \ by=length)\n    for i in 1:length(lst)\n        if length(lst[i]) % 2 == 1\n\
    \            deleteat!(lst, i)\n        end\n    end\n    return lst\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp48dtxe1l.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\\\
    n  BoundsError: attempt to access 1-element Array{String,1} at index [3]\\n  Stacktrace:\\\
    n   [1] getindex at ./array.jl:788 [inlined]\\n   [2] sorted_list_sum(::Array{String,1})\
    \ at /tmp/tmp48dtxe1l.jl:18\\n   [3] top-level scope at /tmp/tmp48dtxe1l.jl:29\\\
    n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [5] top-level scope at /tmp/tmp48dtxe1l.jl:28\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp48dtxe1l.jl:30\\n  Test threw exception\\n  Expression: candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\\n  BoundsError:\
    \ attempt to access 3-element Array{String,1} at index [4]\\n  Stacktrace:\\n\
    \   [1] getindex at ./array.jl:788 [inlined]\\n   [2] sorted_list_sum(::Array{String,1})\
    \ at /tmp/tmp48dtxe1l.jl:18\\n   [3] top-level scope at /tmp/tmp48dtxe1l.jl:30\\\
    n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [5] top-level scope at /tmp/tmp48dtxe1l.jl:28\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp48dtxe1l.jl:31\\n  Test threw exception\\n  Expression: candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\\n  BoundsError: attempt to access\
    \ 2-element Array{String,1} at index [3]\\n  Stacktrace:\\n   [1] getindex at\
    \ ./array.jl:788 [inlined]\\n   [2] sorted_list_sum(::Array{String,1}) at /tmp/tmp48dtxe1l.jl:18\\\
    n   [3] top-level scope at /tmp/tmp48dtxe1l.jl:31\\n   [4] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [5] top-level scope at /tmp/tmp48dtxe1l.jl:28\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp48dtxe1l.jl:32\\n  Test threw exception\\n  Expression: candidate([\"\
    d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\\n  BoundsError: attempt\
    \ to access 3-element Array{String,1} at index [4]\\n  Stacktrace:\\n   [1] getindex\
    \ at ./array.jl:788 [inlined]\\n   [2] sorted_list_sum(::Array{String,1}) at /tmp/tmp48dtxe1l.jl:18\\\
    n   [3] top-level scope at /tmp/tmp48dtxe1l.jl:32\\n   [4] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [5] top-level scope at /tmp/tmp48dtxe1l.jl:28\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp48dtxe1l.jl:34\\n  Test threw exception\\n  Expression: candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\\n  BoundsError:\
    \ attempt to access 3-element Array{String,1} at index [4]\\n  Stacktrace:\\n\
    \   [1] getindex at ./array.jl:788 [inlined]\\n   [2] sorted_list_sum(::Array{String,1})\
    \ at /tmp/tmp48dtxe1l.jl:18\\n   [3] top-level scope at /tmp/tmp48dtxe1l.jl:34\\\
    n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [5] top-level scope at /tmp/tmp48dtxe1l.jl:28\\n  \\ntest set: Test Failed\
    \ at /tmp/tmp48dtxe1l.jl:35\\n  Expression: candidate([\"aaaa\", \"bbbb\", \"\
    dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\\n   Evaluated: [\"dd\"\
    , \"cc\", \"aaaa\", \"bbbb\"] == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\\nStacktrace:'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # sort by\
    \ length\n    sorted_lst = sort(lst, by=length)\n    # filter by length\n    filtered_lst\
    \ = filter(x -> length(x) % 2 == 0, sorted_lst)\n    # sort by alphabet\n    sorted_lst\
    \ = sort(filtered_lst)\n    return sorted_lst\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpc3tk8g9p.jl:35\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpc3tk8g9p.jl:35\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc3tk8g9p.jl:28\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc3tk8g9p.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # sort the\
    \ list by length of each word\n    sorted_lst = sort(lst, by=length)\n    # filter\
    \ the list to remove words with odd length\n    filtered_lst = filter(x -> length(x)\
    \ % 2 == 0, sorted_lst)\n    # sort the list alphabetically\n    sorted_filtered_lst\
    \ = sort(filtered_lst)\n    return sorted_filtered_lst\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"\
    aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\",\
    \ \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"abcd\"\
    , \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"au\"\
    ]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpidi9_v2i.jl:35\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpidi9_v2i.jl:35\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpidi9_v2i.jl:28\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpidi9_v2i.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # your code\
    \ here\n    # you can use the following functions:\n    # sort(lst)\n    # length(lst)\n\
    \    # push!(lst, item)\n    # pop!(lst)\n    # deleteat!(lst, index)\n    # lst[index]\n\
    \    # lst[start_index:end_index]\n    # lst[start_index:end_index:step]\n   \
    \ # lst[index] = value\n    # lst[start_index:end_index] = value\n    # lst[start_index:end_index:step]\
    \ = value\n    # for item in lst\n    # for i in 1:length(lst)\n    # for i in\
    \ 1:length(lst):step\n    # for i in 1:length(lst):step:end_index\n    # for i\
    \ in 1:length(lst):step:end_index:start_index\n    # while condition\n    # while\
    \ condition\n        # your code here\n    # end\n    # if condition\n    # if\
    \ condition\n        # your code here\n    # else\n        # your code here\n\
    \    # end\n    # if condition\n    # if condition\n        # your code here\n\
    \    # elseif condition\n        # your code here\n    # else\n        # your\
    \ code here\n    # end\n    # if condition\n    # if condition\n        # your\
    \ code here\n    # elseif condition\n        # your code here\n    # elseif condition\n\
    \        # your code here\n    # else\n        # your code here\n    # end\n \
    \   # if condition\n    # if condition\n        # your code here\n    # elseif\
    \ condition\n        # your code here\n    # elseif condition\n        # your\
    \ code here\n    # elseif condition\n        # your code here\n    # else\n  \
    \      # your code here\n    # end\n    # return value\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"\
    aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\",\
    \ \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"abcd\"\
    , \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"au\"\
    ]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpdvnn3ake.jl:81\\n  Test threw\
    \ exception\\n  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\\\
    n  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Array{String,1}\\n  Closest candidates are:\\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] sorted_list_sum(::Array{String,1}) at /tmp/tmpdvnn3ake.jl:75\\\
    n   [2] top-level scope at /tmp/tmpdvnn3ake.jl:81\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpdvnn3ake.jl:80\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpdvnn3ake.jl:82\\n  Test threw exception\\n  Expression: candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Array{String,1}\\\
    n  Closest candidates are:\\n    convert(::Type{Array{String,1}}, !Matched::LibGit2.StrArrayStruct)\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] sorted_list_sum(::Array{String,1}) at /tmp/tmpdvnn3ake.jl:75\\\
    n   [2] top-level scope at /tmp/tmpdvnn3ake.jl:82\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpdvnn3ake.jl:80\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpdvnn3ake.jl:83\\n  Test threw exception\\n  Expression: candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{String,1}\\n  Closest candidates\
    \ are:\\n    convert(::Type{Array{String,1}}, !Matched::LibGit2.StrArrayStruct)\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] sorted_list_sum(::Array{String,1}) at /tmp/tmpdvnn3ake.jl:75\\\
    n   [2] top-level scope at /tmp/tmpdvnn3ake.jl:83\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpdvnn3ake.jl:80\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpdvnn3ake.jl:84\\n  Test threw exception\\n  Expression: candidate([\"\
    d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Array{String,1}\\n\
    \  Closest candidates are:\\n    convert(::Type{Array{String,1}}, !Matched::LibGit2.StrArrayStruct)\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] sorted_list_sum(::Array{String,1}) at /tmp/tmpdvnn3ake.jl:75\\\
    n   [2] top-level scope at /tmp/tmpdvnn3ake.jl:84\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpdvnn3ake.jl:80\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpdvnn3ake.jl:85\\n  Test threw exception\\n  Expression: candidate([\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{String,1}\\n  Closest candidates\
    \ are:\\n    convert(::Type{Array{String,1}}, !Matched::LibGit2.StrArrayStruct)\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] sorted_list_sum(::Array{String,1}) at /tmp/tmpdvnn3ake.jl:75\\\
    n   [2] top-level scope at /tmp/tmpdvnn3ake.jl:85\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpdvnn3ake.jl:80\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpdvnn3ake.jl:86\\n  Test threw exception\\n  Expression: candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Array{String,1}\\\
    n  Closest candidates are:\\n    convert(::Type{Array{String,1}}, !Matched::LibGit2.StrArrayStruct)\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] sorted_list_sum(::Array{String,1}) at /tmp/tmpdvnn3ake.jl:75\\\
    n   [2] top-level scope at /tmp/tmpdvnn3ake.jl:86\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpdvnn3ake.jl:80\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpdvnn3ake.jl:87\\n  Test threw exception\\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Array{String,1}\\n  Closest candidates are:\\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] sorted_list_sum(::Array{String,1}) at /tmp/tmpdvnn3ake.jl:75\\\
    n   [2] top-level scope at /tmp/tmpdvnn3ake.jl:87\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmpdvnn3ake.jl:80\\n  \\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # your code\
    \ here\n    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp2c6v3qqt.jl:24\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"aa\", \"a\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp2c6v3qqt.jl:24\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2c6v3qqt.jl:23\ntest set: Test Failed at /tmp/tmp2c6v3qqt.jl:25\n\
    \  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\n   Evaluated: [\"school\", \"AI\", \"asdf\", \"b\"] == [\"\
    AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp2c6v3qqt.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2c6v3qqt.jl:23\ntest set: Test Failed at /tmp/tmp2c6v3qqt.jl:26\n\
    \  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"d\", \"b\", \"c\", \"a\"] == String[]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp2c6v3qqt.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2c6v3qqt.jl:23\ntest set: Test Failed at /tmp/tmp2c6v3qqt.jl:27\n\
    \  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\n   Evaluated: [\"d\", \"dcba\", \"abcd\", \"a\"] == [\"abcd\", \"dcba\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmp2c6v3qqt.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2c6v3qqt.jl:23\ntest set: Test Failed at /tmp/tmp2c6v3qqt.jl:29\n\
    \  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2c6v3qqt.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2c6v3qqt.jl:23\ntest set: Test Failed at /tmp/tmp2c6v3qqt.jl:30\n\
    \  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]\
    \ == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp2c6v3qqt.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2c6v3qqt.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2c6v3qqt.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # delete all\
    \ odd length strings\n    for i in 1:length(lst)\n        if length(lst[i]) %\
    \ 2 != 0\n            deleteat!(lst, i)\n        end\n    end\n    # sort the\
    \ list\n    sort(lst)\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "b'test set: Error During Test at /tmp/tmpnlo9pvoh.jl:30\\n  Test threw\
    \ exception\\n  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\\\
    n  BoundsError: attempt to access 2-element Array{String,1} at index [3]\\n  Stacktrace:\\\
    n   [1] getindex at ./array.jl:788 [inlined]\\n   [2] sorted_list_sum(::Array{String,1})\
    \ at /tmp/tmpnlo9pvoh.jl:18\\n   [3] top-level scope at /tmp/tmpnlo9pvoh.jl:30\\\
    n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [5] top-level scope at /tmp/tmpnlo9pvoh.jl:29\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpnlo9pvoh.jl:32\\n  Test threw exception\\n  Expression: candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\\n  BoundsError: attempt to access\
    \ 2-element Array{String,1} at index [3]\\n  Stacktrace:\\n   [1] getindex at\
    \ ./array.jl:788 [inlined]\\n   [2] sorted_list_sum(::Array{String,1}) at /tmp/tmpnlo9pvoh.jl:18\\\
    n   [3] top-level scope at /tmp/tmpnlo9pvoh.jl:32\\n   [4] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [5] top-level scope at /tmp/tmpnlo9pvoh.jl:29\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpnlo9pvoh.jl:33\\n  Test threw exception\\n  Expression: candidate([\"\
    d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\\n  BoundsError: attempt\
    \ to access 2-element Array{String,1} at index [4]\\n  Stacktrace:\\n   [1] getindex\
    \ at ./array.jl:788 [inlined]\\n   [2] sorted_list_sum(::Array{String,1}) at /tmp/tmpnlo9pvoh.jl:18\\\
    n   [3] top-level scope at /tmp/tmpnlo9pvoh.jl:33\\n   [4] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [5] top-level scope at /tmp/tmpnlo9pvoh.jl:29\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpnlo9pvoh.jl:35\\n  Test threw exception\\n  Expression: candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\\n  BoundsError:\
    \ attempt to access 3-element Array{String,1} at index [4]\\n  Stacktrace:\\n\
    \   [1] getindex at ./array.jl:788 [inlined]\\n   [2] sorted_list_sum(::Array{String,1})\
    \ at /tmp/tmpnlo9pvoh.jl:18\\n   [3] top-level scope at /tmp/tmpnlo9pvoh.jl:35\\\
    n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [5] top-level scope at /tmp/tmpnlo9pvoh.jl:29\\n  \\ntest set: Test Failed\
    \ at /tmp/tmpnlo9pvoh.jl:36\\n  Expression: candidate([\"aaaa\", \"bbbb\", \"\
    dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\\n   Evaluated: [\"aaaa\"\
    , \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpnlo9pvoh.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpnlo9pvoh.jl:29\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # delete all\
    \ odd length strings\n    lst = filter(x -> length(x) % 2 == 0, lst)\n    # sort\
    \ by length\n    lst = sort(lst, by = x -> length(x))\n    # sort by alphabet\n\
    \    lst = sort(lst)\n    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpyktze0k7.jl:35\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpyktze0k7.jl:35\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyktze0k7.jl:28\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyktze0k7.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    return sort(filter(x\
    \ -> length(x) % 2 == 0, lst))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmprtdntvnw.jl:29\\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\\n\
    \   Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmprtdntvnw.jl:29\\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmprtdntvnw.jl:22\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    6     1      7\\n'"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # your code\
    \ here\n    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmpcfznqjz5.jl:24\\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\\n   Evaluated: [\"aa\", \"a\", \"aaa\"] ==\
    \ [\"aa\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpcfznqjz5.jl:24\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpcfznqjz5.jl:23\\ntest set: Test Failed at /tmp/tmpcfznqjz5.jl:25\\\
    n  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\\n   Evaluated: [\"school\", \"AI\", \"asdf\", \"b\"] == [\"\
    AI\", \"asdf\", \"school\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpcfznqjz5.jl:25\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpcfznqjz5.jl:23\\ntest set: Test Failed at /tmp/tmpcfznqjz5.jl:26\\\
    n  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\\\
    n   Evaluated: [\"d\", \"b\", \"c\", \"a\"] == String[]\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmpcfznqjz5.jl:26\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpcfznqjz5.jl:23\\ntest set: Test Failed at /tmp/tmpcfznqjz5.jl:27\\\
    n  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\\n   Evaluated: [\"d\", \"dcba\", \"abcd\", \"a\"] == [\"abcd\", \"dcba\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpcfznqjz5.jl:27\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpcfznqjz5.jl:23\\ntest set: Test Failed at /tmp/tmpcfznqjz5.jl:29\\\
    n  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\\\
    n   Evaluated: [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"] == String[]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpcfznqjz5.jl:29\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpcfznqjz5.jl:23\\ntest set: Test Failed at /tmp/tmpcfznqjz5.jl:30\\\
    n  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\\n   Evaluated: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    ] == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpcfznqjz5.jl:30\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpcfznqjz5.jl:23\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    1     6      7\\n'"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # Create a\
    \ new vector to store the results\n    result = Vector{String}()\n    # Create\
    \ a dictionary to store the length of each word\n    dict = Dict{Int, Vector{String}}()\n\
    \    # Iterate through the list\n    for word in lst\n        # If the length\
    \ of the word is not in the dictionary, add it\n        if !(length(word) in keys(dict))\n\
    \            dict[length(word)] = Vector{String}()\n        end\n        # Add\
    \ the word to the dictionary\n        push!(dict[length(word)], word)\n    end\n\
    \    # Sort the dictionary by the length of the words\n    dict = sort(dict)\n\
    \    # Iterate through the dictionary\n    for key in keys(dict)\n        # Sort\
    \ the words in the dictionary\n        sort!(dict[key])\n        # Add the words\
    \ to the result\n        for word in dict[key]\n            push!(result, word)\n\
    \        end\n    end\n    # Return the result\n    return result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3zzppetc.jl:48\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  MethodError:\
    \ no method matching sort(::Dict{Int64,Array{String,1}})\n  Closest candidates\
    \ are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n    sort(!Matched::AbstractRange)\
    \ at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti}; kws...)\
    \ where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] sorted_list_sum(::Array{String,1}) at /tmp/tmp3zzppetc.jl:30\n\
    \   [2] top-level scope at /tmp/tmp3zzppetc.jl:48\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3zzppetc.jl:47\n  \ntest set: Error During\
    \ Test at /tmp/tmp3zzppetc.jl:49\n  Test threw exception\n  Expression: candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n  MethodError:\
    \ no method matching sort(::Dict{Int64,Array{String,1}})\n  Closest candidates\
    \ are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n    sort(!Matched::AbstractRange)\
    \ at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti}; kws...)\
    \ where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] sorted_list_sum(::Array{String,1}) at /tmp/tmp3zzppetc.jl:30\n\
    \   [2] top-level scope at /tmp/tmp3zzppetc.jl:49\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3zzppetc.jl:47\n  \ntest set: Error During\
    \ Test at /tmp/tmp3zzppetc.jl:50\n  Test threw exception\n  Expression: candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n  MethodError: no method matching\
    \ sort(::Dict{Int64,Array{String,1}})\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:969\n    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] sorted_list_sum(::Array{String,1}) at /tmp/tmp3zzppetc.jl:30\n\
    \   [2] top-level scope at /tmp/tmp3zzppetc.jl:50\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3zzppetc.jl:47\n  \ntest set: Error During\
    \ Test at /tmp/tmp3zzppetc.jl:51\n  Test threw exception\n  Expression: candidate([\"\
    d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n  MethodError: no method\
    \ matching sort(::Dict{Int64,Array{String,1}})\n  Closest candidates are:\n  \
    \  sort(!Matched::AbstractUnitRange) at range.jl:969\n    sort(!Matched::AbstractRange)\
    \ at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti}; kws...)\
    \ where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] sorted_list_sum(::Array{String,1}) at /tmp/tmp3zzppetc.jl:30\n\
    \   [2] top-level scope at /tmp/tmp3zzppetc.jl:51\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3zzppetc.jl:47\n  \ntest set: Error During\
    \ Test at /tmp/tmp3zzppetc.jl:52\n  Test threw exception\n  Expression: candidate([\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]\n  MethodError: no method matching\
    \ sort(::Dict{Int64,Array{String,1}})\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:969\n    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] sorted_list_sum(::Array{String,1}) at /tmp/tmp3zzppetc.jl:30\n\
    \   [2] top-level scope at /tmp/tmp3zzppetc.jl:52\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3zzppetc.jl:47\n  \ntest set: Error During\
    \ Test at /tmp/tmp3zzppetc.jl:53\n  Test threw exception\n  Expression: candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\n  MethodError:\
    \ no method matching sort(::Dict{Int64,Array{String,1}})\n  Closest candidates\
    \ are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n    sort(!Matched::AbstractRange)\
    \ at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti}; kws...)\
    \ where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] sorted_list_sum(::Array{String,1}) at /tmp/tmp3zzppetc.jl:30\n\
    \   [2] top-level scope at /tmp/tmp3zzppetc.jl:53\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3zzppetc.jl:47\n  \ntest set: Error During\
    \ Test at /tmp/tmp3zzppetc.jl:54\n  Test threw exception\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \ MethodError: no method matching sort(::Dict{Int64,Array{String,1}})\n  Closest\
    \ candidates are:\n    sort(!Matched::AbstractUnitRange) at range.jl:969\n   \
    \ sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] sorted_list_sum(::Array{String,1}) at /tmp/tmp3zzppetc.jl:30\n\
    \   [2] top-level scope at /tmp/tmp3zzppetc.jl:54\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3zzppetc.jl:47\n  \nTest Summary: | Error \
    \ Total\ntest set      |     7      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3zzppetc.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # lst = [\"\
    aa\", \"a\", \"aaa\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\"]\n    # lst\
    \ = [\"ab\", \"a\", \"aaa\", \"cd\", \"b\"]\n    # lst = [\"ab\", \"a\", \"aaa\"\
    , \"cd\", \"b\", \"a\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"b\", \"\
    a\", \"a\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"b\", \"a\", \"a\"\
    , \"a\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"b\", \"a\", \"a\", \"\
    a\", \"a\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"b\", \"a\", \"a\"\
    , \"a\", \"a\", \"a\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"b\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\"]\n    # lst = [\"ab\", \"a\", \"aaa\",\
    \ \"cd\", \"b\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"]\n    # lst =\
    \ [\"ab\", \"a\", \"aaa\", \"cd\", \"b\", \"a\", \"a\", \"a\", \"a\", \"a\", \"\
    a\", \"a\", \"a\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"b\", \"a\"\
    , \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"]\n    # lst = [\"ab\"\
    , \"a\", \"aaa\", \"cd\", \"b\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"\
    a\", \"a\", \"a\", \"a\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"b\"\
    , \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"\
    ]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"b\", \"a\", \"a\", \"a\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkkpcxt7d.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpkkpcxt7d.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpkkpcxt7d.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    return sort(lst,\
    \ by=x->(length(x), x))\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmpt9soy2ui.jl:23\\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\\n   Evaluated: [\"a\", \"aa\", \"aaa\"] ==\
    \ [\"aa\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpt9soy2ui.jl:23\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpt9soy2ui.jl:22\\ntest set: Test Failed at /tmp/tmpt9soy2ui.jl:24\\\
    n  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\\n   Evaluated: [\"b\", \"AI\", \"asdf\", \"school\"] == [\"\
    AI\", \"asdf\", \"school\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpt9soy2ui.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpt9soy2ui.jl:22\\ntest set: Test Failed at /tmp/tmpt9soy2ui.jl:25\\\
    n  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\\\
    n   Evaluated: [\"a\", \"b\", \"c\", \"d\"] == String[]\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmpt9soy2ui.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpt9soy2ui.jl:22\\ntest set: Test Failed at /tmp/tmpt9soy2ui.jl:26\\\
    n  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\\n   Evaluated: [\"a\", \"d\", \"abcd\", \"dcba\"] == [\"abcd\", \"dcba\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpt9soy2ui.jl:26\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpt9soy2ui.jl:22\\ntest set: Test Failed at /tmp/tmpt9soy2ui.jl:28\\\
    n  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\\\
    n   Evaluated: [\"a\", \"a\", \"b\", \"b\", \"c\", \"c\"] == String[]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpt9soy2ui.jl:28\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpt9soy2ui.jl:22\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    2     5      7\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # your code\
    \ here\n    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpjw01ec2l.jl:24\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"aa\", \"a\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpjw01ec2l.jl:24\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjw01ec2l.jl:23\ntest set: Test Failed at /tmp/tmpjw01ec2l.jl:25\n\
    \  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\n   Evaluated: [\"school\", \"AI\", \"asdf\", \"b\"] == [\"\
    AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpjw01ec2l.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjw01ec2l.jl:23\ntest set: Test Failed at /tmp/tmpjw01ec2l.jl:26\n\
    \  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"d\", \"b\", \"c\", \"a\"] == String[]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpjw01ec2l.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjw01ec2l.jl:23\ntest set: Test Failed at /tmp/tmpjw01ec2l.jl:27\n\
    \  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\n   Evaluated: [\"d\", \"dcba\", \"abcd\", \"a\"] == [\"abcd\", \"dcba\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpjw01ec2l.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjw01ec2l.jl:23\ntest set: Test Failed at /tmp/tmpjw01ec2l.jl:29\n\
    \  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjw01ec2l.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjw01ec2l.jl:23\ntest set: Test Failed at /tmp/tmpjw01ec2l.jl:30\n\
    \  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]\
    \ == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpjw01ec2l.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjw01ec2l.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjw01ec2l.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # lst = [\"\
    aa\", \"a\", \"aaa\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\"]\n    # lst\
    \ = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\"]\n    # lst = [\"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"a\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\"\
    , \"a\", \"a\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    a\", \"a\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"a\"\
    , \"a\", \"a\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    a\", \"a\", \"a\", \"a\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\"\
    , \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"]\n    # lst = [\"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"]\n    # lst\
    \ = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"a\", \"a\", \"a\", \"a\"\
    , \"a\", \"a\", \"a\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"]\n    # lst = [\"\
    ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"\
    , \"a\", \"a\", \"a\", \"a\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"\
    ab\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"\
    a\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"a\", \"a\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpx68ltois.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpx68ltois.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpx68ltois.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    lst_len =\
    \ length(lst)\n    lst_len_odd = lst_len % 2 == 1\n    lst_len_even = lst_len\
    \ % 2 == 0\n    lst_len_even_half = lst_len_even ? lst_len / 2 : 0\n    lst_len_odd_half\
    \ = lst_len_odd ? (lst_len + 1) / 2 : 0\n    lst_len_half = lst_len_even_half\
    \ + lst_len_odd_half\n    lst_len_half_odd = lst_len_half % 2 == 1\n    lst_len_half_even\
    \ = lst_len_half % 2 == 0\n    lst_len_half_even_half = lst_len_half_even ? lst_len_half\
    \ / 2 : 0\n    lst_len_half_odd_half = lst_len_half_odd ? (lst_len_half + 1) /\
    \ 2 : 0\n    lst_len_half_half = lst_len_half_even_half + lst_len_half_odd_half\n\
    \    lst_len_half_half_odd = lst_len_half_half % 2 == 1\n    lst_len_half_half_even\
    \ = lst_len_half_half % 2 == 0\n    lst_len_half_half_even_half = lst_len_half_half_even\
    \ ? lst_len_half_half / 2 : 0\n    lst_len_half_half_odd_half = lst_len_half_half_odd\
    \ ? (lst_len_half_half + 1) / 2 : 0\n    lst_len_half_half_half = lst_len_half_half_even_half\
    \ + lst_len_half_half_odd_half\n    lst_len_half_half_half_odd = lst_len_half_half_half\
    \ % 2 == 1\n    lst_len_half_half_half_even = lst_len_half_half_half % 2 == 0\n\
    \    lst_len_half_half_half_even_half\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9hbo7inf.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp9hbo7inf.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp9hbo7inf.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # sort the\
    \ list by length\n    sorted_lst = sort(lst, by=length)\n    # filter out the\
    \ odd length strings\n    filtered_lst = filter(x -> length(x) % 2 == 0, sorted_lst)\n\
    \    # sort the list alphabetically\n    sorted_lst = sort(filtered_lst)\n   \
    \ return sorted_lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpb7tkcqys.jl:35\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpb7tkcqys.jl:35\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpb7tkcqys.jl:28\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb7tkcqys.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # sort the\
    \ list by length of each word\n    sorted_list = sort(lst, by=length)\n    # delete\
    \ the strings that have odd lengths\n    new_list = filter(x -> length(x) % 2\
    \ == 0, sorted_list)\n    # sort the list alphabetically\n    return sort(new_list)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj_6yt08g.jl:34\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpj_6yt08g.jl:34\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj_6yt08g.jl:27\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj_6yt08g.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # your code\
    \ here\n    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmp347lhe6g.jl:24\\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\\n   Evaluated: [\"aa\", \"a\", \"aaa\"] ==\
    \ [\"aa\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp347lhe6g.jl:24\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp347lhe6g.jl:23\\ntest set: Test Failed at /tmp/tmp347lhe6g.jl:25\\\
    n  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\\n   Evaluated: [\"school\", \"AI\", \"asdf\", \"b\"] == [\"\
    AI\", \"asdf\", \"school\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp347lhe6g.jl:25\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp347lhe6g.jl:23\\ntest set: Test Failed at /tmp/tmp347lhe6g.jl:26\\\
    n  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\\\
    n   Evaluated: [\"d\", \"b\", \"c\", \"a\"] == String[]\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmp347lhe6g.jl:26\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp347lhe6g.jl:23\\ntest set: Test Failed at /tmp/tmp347lhe6g.jl:27\\\
    n  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\\n   Evaluated: [\"d\", \"dcba\", \"abcd\", \"a\"] == [\"abcd\", \"dcba\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp347lhe6g.jl:27\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp347lhe6g.jl:23\\ntest set: Test Failed at /tmp/tmp347lhe6g.jl:29\\\
    n  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\\\
    n   Evaluated: [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"] == String[]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp347lhe6g.jl:29\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp347lhe6g.jl:23\\ntest set: Test Failed at /tmp/tmp347lhe6g.jl:30\\\
    n  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\\n   Evaluated: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    ] == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmp347lhe6g.jl:30\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp347lhe6g.jl:23\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    1     6      7\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # your code\
    \ here\n    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpbgtlpch5.jl:24\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"aa\", \"a\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpbgtlpch5.jl:24\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbgtlpch5.jl:23\ntest set: Test Failed at /tmp/tmpbgtlpch5.jl:25\n\
    \  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\n   Evaluated: [\"school\", \"AI\", \"asdf\", \"b\"] == [\"\
    AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpbgtlpch5.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbgtlpch5.jl:23\ntest set: Test Failed at /tmp/tmpbgtlpch5.jl:26\n\
    \  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"d\", \"b\", \"c\", \"a\"] == String[]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpbgtlpch5.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbgtlpch5.jl:23\ntest set: Test Failed at /tmp/tmpbgtlpch5.jl:27\n\
    \  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\n   Evaluated: [\"d\", \"dcba\", \"abcd\", \"a\"] == [\"abcd\", \"dcba\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpbgtlpch5.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbgtlpch5.jl:23\ntest set: Test Failed at /tmp/tmpbgtlpch5.jl:29\n\
    \  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbgtlpch5.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbgtlpch5.jl:23\ntest set: Test Failed at /tmp/tmpbgtlpch5.jl:30\n\
    \  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]\
    \ == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpbgtlpch5.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbgtlpch5.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbgtlpch5.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    #lst = [\"\
    aa\", \"a\", \"aaa\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\"]\n    #lst =\
    \ [\"ab\", \"a\", \"aaa\", \"cd\", \"a\"]\n    #lst = [\"ab\", \"a\", \"aaa\"\
    , \"cd\", \"a\", \"a\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"\
    a\", \"a\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"a\", \"a\",\
    \ \"a\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"a\", \"a\", \"\
    a\", \"a\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"a\", \"a\",\
    \ \"a\", \"a\", \"a\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"\
    cd\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"]\n    #lst = [\"\
    ab\", \"a\", \"aaa\", \"cd\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"\
    , \"a\", \"a\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"a\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"]\n    #lst = [\"ab\", \"\
    a\", \"aaa\", \"cd\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\",\
    \ \"a\", \"a\", \"a\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"]\n \
    \   #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"a\", \"a\", \"a\nusing Test\n\
    \n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpib2bhknr.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpib2bhknr.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpib2bhknr.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # sort by\
    \ length\n    sorted_lst = sort(lst, by=length)\n    # remove odd length words\n\
    \    sorted_lst = [word for word in sorted_lst if length(word) % 2 == 0]\n   \
    \ # sort by alphabetical order\n    sorted_lst = sort(sorted_lst)\n    return\
    \ sorted_lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpb6ak3cip.jl:35\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpb6ak3cip.jl:35\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpb6ak3cip.jl:28\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb6ak3cip.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # create a\
    \ new vector to store the result\n    result = Vector{String}(undef, 0)\n    #\
    \ sort the list by length of each word\n    sorted_lst = sort(lst, by=length)\n\
    \    # loop through the sorted list\n    for i in sorted_lst\n        # if the\
    \ length of the word is even, append it to the result vector\n        if length(i)\
    \ % 2 == 0\n            push!(result, i)\n        end\n    end\n    # return the\
    \ result vector\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmp8sy33e5v.jl:38\\n  Expression: candidate([\"\
    d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\\n   Evaluated: [\"dcba\"\
    , \"abcd\"] == [\"abcd\", \"dcba\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp8sy33e5v.jl:38\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp8sy33e5v.jl:34\\ntest set: Test Failed at /tmp/tmp8sy33e5v.jl:41\\\
    n  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\\n   Evaluated: [\"dd\", \"cc\", \"aaaa\", \"bbbb\"\
    ] == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmp8sy33e5v.jl:41\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp8sy33e5v.jl:34\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    5     2      7\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    lst_new =\
    \ []\n    for i in lst\n        if length(i) % 2 == 0\n            push!(lst_new,\
    \ i)\n        end\n    end\n    sort(lst_new)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpbnzqeed8.jl:35\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpbnzqeed8.jl:35\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbnzqeed8.jl:28\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbnzqeed8.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # your code\
    \ here\n    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpzceccypn.jl:24\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"aa\", \"a\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpzceccypn.jl:24\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzceccypn.jl:23\ntest set: Test Failed at /tmp/tmpzceccypn.jl:25\n\
    \  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\n   Evaluated: [\"school\", \"AI\", \"asdf\", \"b\"] == [\"\
    AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpzceccypn.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzceccypn.jl:23\ntest set: Test Failed at /tmp/tmpzceccypn.jl:26\n\
    \  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"d\", \"b\", \"c\", \"a\"] == String[]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpzceccypn.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzceccypn.jl:23\ntest set: Test Failed at /tmp/tmpzceccypn.jl:27\n\
    \  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\n   Evaluated: [\"d\", \"dcba\", \"abcd\", \"a\"] == [\"abcd\", \"dcba\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpzceccypn.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzceccypn.jl:23\ntest set: Test Failed at /tmp/tmpzceccypn.jl:29\n\
    \  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzceccypn.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzceccypn.jl:23\ntest set: Test Failed at /tmp/tmpzceccypn.jl:30\n\
    \  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]\
    \ == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpzceccypn.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzceccypn.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzceccypn.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # sort by\
    \ length\n    sorted_lst = sort(lst, by=length)\n    # filter out odd length strings\n\
    \    filtered_lst = filter(s -> length(s) % 2 == 0, sorted_lst)\n    # sort alphabetically\n\
    \    return sort(filtered_lst)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmpu0ot2i16.jl:34\\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\\n\
    \   Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpu0ot2i16.jl:34\\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpu0ot2i16.jl:27\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    #sorted_list\
    \ = sort(lst, by=length)\n    sorted_list = sort(lst, by=x->length(x))\n    #sorted_list\
    \ = sort(lst, by=x->x[1])\n    #sorted_list = sort(lst, by=x->x[2])\n    #sorted_list\
    \ = sort(lst, by=x->x[3])\n    #sorted_list = sort(lst, by=x->x[4])\n    #sorted_list\
    \ = sort(lst, by=x->x[5])\n    #sorted_list = sort(lst, by=x->x[6])\n    #sorted_list\
    \ = sort(lst, by=x->x[7])\n    #sorted_list = sort(lst, by=x->x[8])\n    #sorted_list\
    \ = sort(lst, by=x->x[9])\n    #sorted_list = sort(lst, by=x->x[10])\n    #sorted_list\
    \ = sort(lst, by=x->x[11])\n    #sorted_list = sort(lst, by=x->x[12])\n    #sorted_list\
    \ = sort(lst, by=x->x[13])\n    #sorted_list = sort(lst, by=x->x[14])\n    #sorted_list\
    \ = sort(lst, by=x->x[15])\n    #sorted_list = sort(lst, by=x->x[16])\n    #sorted_list\
    \ = sort(lst, by=x->x[17])\n    #sorted_list = sort(lst, by=x->x[18])\n    #sorted_list\
    \ = sort(lst, by=x->x[19])\n    #sorted_list = sort(lst, by=x->x[20])\n    #sorted_list\
    \ = sort(lst, by=x->x[21])\n    #sorted_list = sort(lst, by=x->x[22])\n    #sorted_list\
    \ = sort(lst, by\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgfg8ecjb.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpgfg8ecjb.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpgfg8ecjb.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # Sort the\
    \ list by length of each word\n    sorted_list = sort(lst, by=length)\n    # Remove\
    \ the words with odd length\n    sorted_list = filter(x -> length(x) % 2 == 0,\
    \ sorted_list)\n    # Sort the list alphabetically\n    sorted_list = sort(sorted_list)\n\
    \    return sorted_list\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpbqk42ixa.jl:35\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpbqk42ixa.jl:35\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbqk42ixa.jl:28\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbqk42ixa.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    lst = sort(lst,\
    \ by=length)\n    lst = sort(lst, by=x->x[1])\n    return lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmppi7aciiw.jl:25\\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\\n   Evaluated: [\"a\", \"aa\", \"aaa\"] ==\
    \ [\"aa\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmppi7aciiw.jl:25\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmppi7aciiw.jl:24\\ntest set: Test Failed at /tmp/tmppi7aciiw.jl:26\\\
    n  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\\n   Evaluated: [\"AI\", \"asdf\", \"b\", \"school\"] == [\"\
    AI\", \"asdf\", \"school\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmppi7aciiw.jl:26\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmppi7aciiw.jl:24\\ntest set: Test Failed at /tmp/tmppi7aciiw.jl:27\\\
    n  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\\\
    n   Evaluated: [\"a\", \"b\", \"c\", \"d\"] == String[]\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmppi7aciiw.jl:27\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmppi7aciiw.jl:24\\ntest set: Test Failed at /tmp/tmppi7aciiw.jl:28\\\
    n  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\\n   Evaluated: [\"a\", \"abcd\", \"d\", \"dcba\"] == [\"abcd\", \"dcba\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmppi7aciiw.jl:28\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmppi7aciiw.jl:24\\ntest set: Test Failed at /tmp/tmppi7aciiw.jl:30\\\
    n  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\\\
    n   Evaluated: [\"a\", \"a\", \"b\", \"b\", \"c\", \"c\"] == String[]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmppi7aciiw.jl:30\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmppi7aciiw.jl:24\\ntest set: Test Failed at /tmp/tmppi7aciiw.jl:31\\\
    n  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\\n   Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"\
    ] == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmppi7aciiw.jl:31\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmppi7aciiw.jl:24\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    1     6      7\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # sort the\
    \ list by length\n    sorted_lst = sort(lst, by=length)\n    # remove the odd\
    \ length strings\n    odd_length_lst = filter(x -> length(x) % 2 == 0, sorted_lst)\n\
    \    # sort the list alphabetically\n    sorted_odd_length_lst = sort(odd_length_lst)\n\
    \    return sorted_odd_length_lst\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpgnntxbix.jl:35\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpgnntxbix.jl:35\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgnntxbix.jl:28\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgnntxbix.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # remove odd\
    \ length strings\n    lst = filter(x -> length(x) % 2 == 0, lst)\n    # sort by\
    \ length\n    lst = sort(lst, by = x -> length(x))\n    # sort by alphabetical\
    \ order\n    lst = sort(lst)\n    return lst\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmpngotrr5z.jl:35\\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\\n\
    \   Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpngotrr5z.jl:35\\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpngotrr5z.jl:28\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    6     1      7\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # sort the\
    \ list by length\n    sorted_lst = sort(lst, by=length)\n    # remove the odd\
    \ length strings\n    for i in 1:length(sorted_lst)\n        if length(sorted_lst[i])\
    \ % 2 != 0\n            sorted_lst = deleteat!(sorted_lst, i)\n        end\n \
    \   end\n    # sort the list alphabetically\n    sorted_lst = sort(sorted_lst)\n\
    \    return sorted_lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpwt3arax8.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  BoundsError:\
    \ attempt to access 1-element Array{String,1} at index [3]\n  Stacktrace:\n  \
    \ [1] getindex at ./array.jl:788 [inlined]\n   [2] sorted_list_sum(::Array{String,1})\
    \ at /tmp/tmpwt3arax8.jl:20\n   [3] top-level scope at /tmp/tmpwt3arax8.jl:33\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpwt3arax8.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpwt3arax8.jl:34\n  Test threw exception\n  Expression: candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n  BoundsError:\
    \ attempt to access 3-element Array{String,1} at index [4]\n  Stacktrace:\n  \
    \ [1] getindex at ./array.jl:788 [inlined]\n   [2] sorted_list_sum(::Array{String,1})\
    \ at /tmp/tmpwt3arax8.jl:20\n   [3] top-level scope at /tmp/tmpwt3arax8.jl:34\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpwt3arax8.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpwt3arax8.jl:35\n  Test threw exception\n  Expression: candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n  BoundsError: attempt to access\
    \ 2-element Array{String,1} at index [3]\n  Stacktrace:\n   [1] getindex at ./array.jl:788\
    \ [inlined]\n   [2] sorted_list_sum(::Array{String,1}) at /tmp/tmpwt3arax8.jl:20\n\
    \   [3] top-level scope at /tmp/tmpwt3arax8.jl:35\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpwt3arax8.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpwt3arax8.jl:36\n  Test threw exception\n  Expression: candidate([\"\
    d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n  BoundsError: attempt\
    \ to access 3-element Array{String,1} at index [4]\n  Stacktrace:\n   [1] getindex\
    \ at ./array.jl:788 [inlined]\n   [2] sorted_list_sum(::Array{String,1}) at /tmp/tmpwt3arax8.jl:20\n\
    \   [3] top-level scope at /tmp/tmpwt3arax8.jl:36\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpwt3arax8.jl:32\n  \ntest set: Error During\
    \ Test at /tmp/tmpwt3arax8.jl:38\n  Test threw exception\n  Expression: candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\n  BoundsError:\
    \ attempt to access 3-element Array{String,1} at index [4]\n  Stacktrace:\n  \
    \ [1] getindex at ./array.jl:788 [inlined]\n   [2] sorted_list_sum(::Array{String,1})\
    \ at /tmp/tmpwt3arax8.jl:20\n   [3] top-level scope at /tmp/tmpwt3arax8.jl:38\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpwt3arax8.jl:32\n  \ntest set: Test Failed at\
    \ /tmp/tmpwt3arax8.jl:39\n  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"aaaa\", \"\
    bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwt3arax8.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwt3arax8.jl:32\nTest Summary: | Pass  Fail  Error\
    \  Total\ntest set      |    1     1      5      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwt3arax8.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # your code\
    \ here\n    lst_new = []\n    for i in lst\n        if length(i) % 2 == 0\n  \
    \          push!(lst_new, i)\n        end\n    end\n    sort(lst_new)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcpij690l.jl:36\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpcpij690l.jl:36\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcpij690l.jl:29\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcpij690l.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    result = []\n\
    \    for i in lst\n        if length(i) % 2 == 0\n            push!(result, i)\n\
    \        end\n    end\n    return sort(result)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpk00vhnm8.jl:35\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpk00vhnm8.jl:35\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpk00vhnm8.jl:28\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk00vhnm8.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # sort the\
    \ list by length of each word\n    sorted_lst = sort(lst, by=length)\n    # get\
    \ the length of the first word\n    length_of_first_word = length(sorted_lst[1])\n\
    \    # get the index of the first word that has a different length\n    index_of_first_word_with_different_length\
    \ = findfirst(length.(sorted_lst) .!= length_of_first_word)\n    # if there is\
    \ no word with a different length, return the sorted list\n    if isnothing(index_of_first_word_with_different_length)\n\
    \        return sorted_lst\n    end\n    # get the sublist of words that have\
    \ the same length\n    sublist = sorted_lst[1:index_of_first_word_with_different_length-1]\n\
    \    # sort the sublist alphabetically\n    sorted_sublist = sort(sublist)\n \
    \   # return the sorted sublist\n    return sorted_sublist\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr0zli8we.jl:38\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\"] == [\"aa\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr0zli8we.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr0zli8we.jl:37\ntest set: Test Failed at /tmp/tmpr0zli8we.jl:39\n\
    \  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\n   Evaluated: [\"b\"] == [\"AI\", \"asdf\", \"school\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpr0zli8we.jl:39\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr0zli8we.jl:37\ntest set: Test Failed at /tmp/tmpr0zli8we.jl:40\n\
    \  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"d\", \"b\", \"c\", \"a\"] == String[]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpr0zli8we.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr0zli8we.jl:37\ntest set: Test Failed at /tmp/tmpr0zli8we.jl:41\n\
    \  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\n   Evaluated: [\"a\", \"d\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpr0zli8we.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr0zli8we.jl:37\ntest set: Test Failed at /tmp/tmpr0zli8we.jl:43\n\
    \  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr0zli8we.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr0zli8we.jl:37\ntest set: Test Failed at /tmp/tmpr0zli8we.jl:44\n\
    \  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"cc\", \"dd\"] == [\"cc\", \"dd\",\
    \ \"aaaa\", \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpr0zli8we.jl:44\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr0zli8we.jl:37\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr0zli8we.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    lst = filter(x\
    \ -> length(x) % 2 == 0, lst)\n    sort(lst)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmpgb3ilck2.jl:30\\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\\n\
    \   Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpgb3ilck2.jl:30\\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpgb3ilck2.jl:23\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    6     1      7\\n'"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # remove all\
    \ odd length strings\n    lst = filter(x -> length(x) % 2 == 0, lst)\n    # sort\
    \ by length\n    lst = sort(lst, by = length)\n    # sort by alphabetical order\n\
    \    lst = sort(lst)\n    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpv1b3hakd.jl:35\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpv1b3hakd.jl:35\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpv1b3hakd.jl:28\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv1b3hakd.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # your code\
    \ here\n    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmphwvgymd5.jl:24\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"aa\", \"a\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] top-level scope at /tmp/tmphwvgymd5.jl:24\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphwvgymd5.jl:23\ntest set: Test Failed at /tmp/tmphwvgymd5.jl:25\n\
    \  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\n   Evaluated: [\"school\", \"AI\", \"asdf\", \"b\"] == [\"\
    AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] top-level scope at /tmp/tmphwvgymd5.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphwvgymd5.jl:23\ntest set: Test Failed at /tmp/tmphwvgymd5.jl:26\n\
    \  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"d\", \"b\", \"c\", \"a\"] == String[]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmphwvgymd5.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphwvgymd5.jl:23\ntest set: Test Failed at /tmp/tmphwvgymd5.jl:27\n\
    \  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\n   Evaluated: [\"d\", \"dcba\", \"abcd\", \"a\"] == [\"abcd\", \"dcba\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmphwvgymd5.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphwvgymd5.jl:23\ntest set: Test Failed at /tmp/tmphwvgymd5.jl:29\n\
    \  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphwvgymd5.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphwvgymd5.jl:23\ntest set: Test Failed at /tmp/tmphwvgymd5.jl:30\n\
    \  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]\
    \ == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmphwvgymd5.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphwvgymd5.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphwvgymd5.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    lst_len =\
    \ length(lst)\n    lst_len_odd = lst_len % 2\n    if lst_len_odd == 0\n      \
    \  return lst\n    else\n        return lst[1:end-1]\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmprhsll8wb.jl:29\\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\\n   Evaluated: [\"aa\", \"a\"] == [\"aa\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmprhsll8wb.jl:29\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmprhsll8wb.jl:28\\ntest set: Test Failed at /tmp/tmprhsll8wb.jl:30\\\
    n  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\\n   Evaluated: [\"school\", \"AI\", \"asdf\", \"b\"] == [\"\
    AI\", \"asdf\", \"school\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmprhsll8wb.jl:30\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmprhsll8wb.jl:28\\ntest set: Test Failed at /tmp/tmprhsll8wb.jl:31\\\
    n  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\\\
    n   Evaluated: [\"d\", \"b\", \"c\", \"a\"] == String[]\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmprhsll8wb.jl:31\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmprhsll8wb.jl:28\\ntest set: Test Failed at /tmp/tmprhsll8wb.jl:32\\\
    n  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\\n   Evaluated: [\"d\", \"dcba\", \"abcd\", \"a\"] == [\"abcd\", \"dcba\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmprhsll8wb.jl:32\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmprhsll8wb.jl:28\\ntest set: Test Failed at /tmp/tmprhsll8wb.jl:33\\\
    n  Expression: candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"\
    ]\\n   Evaluated: [\"AI\", \"ai\"] == [\"AI\", \"ai\", \"au\"]\\nStacktrace:\\\
    n [1] top-level scope'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # create a\
    \ new vector to store the result\n    result = Vector{String}()\n    # sort the\
    \ list by length of each word\n    sorted_lst = sort(lst, by=length)\n    # loop\
    \ through the sorted list\n    for i in 1:length(sorted_lst)\n        # if the\
    \ length of the word is even\n        if length(sorted_lst[i]) % 2 == 0\n    \
    \        # append the word to the result vector\n            push!(result, sorted_lst[i])\n\
    \        end\n    end\n    # return the result vector\n    return result\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptsvhc9g8.jl:39\n  Expression: candidate([\"\
    d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"dcba\"\
    , \"abcd\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] top-level scope at /tmp/tmptsvhc9g8.jl:39\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptsvhc9g8.jl:35\ntest set: Test Failed at /tmp/tmptsvhc9g8.jl:42\n\
    \  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"dd\", \"cc\", \"aaaa\", \"bbbb\"]\
    \ == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmptsvhc9g8.jl:42\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptsvhc9g8.jl:35\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptsvhc9g8.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # your code\
    \ here\n    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpzk1xi9ya.jl:24\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"aa\", \"a\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpzk1xi9ya.jl:24\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzk1xi9ya.jl:23\ntest set: Test Failed at /tmp/tmpzk1xi9ya.jl:25\n\
    \  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\n   Evaluated: [\"school\", \"AI\", \"asdf\", \"b\"] == [\"\
    AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpzk1xi9ya.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzk1xi9ya.jl:23\ntest set: Test Failed at /tmp/tmpzk1xi9ya.jl:26\n\
    \  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"d\", \"b\", \"c\", \"a\"] == String[]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpzk1xi9ya.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzk1xi9ya.jl:23\ntest set: Test Failed at /tmp/tmpzk1xi9ya.jl:27\n\
    \  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\n   Evaluated: [\"d\", \"dcba\", \"abcd\", \"a\"] == [\"abcd\", \"dcba\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpzk1xi9ya.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzk1xi9ya.jl:23\ntest set: Test Failed at /tmp/tmpzk1xi9ya.jl:29\n\
    \  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzk1xi9ya.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzk1xi9ya.jl:23\ntest set: Test Failed at /tmp/tmpzk1xi9ya.jl:30\n\
    \  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]\
    \ == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpzk1xi9ya.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzk1xi9ya.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzk1xi9ya.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # remove all\
    \ odd length strings\n    lst = filter(x -> length(x) % 2 == 0, lst)\n    # sort\
    \ by length\n    lst = sort(lst, by = length)\n    # sort by alphabetical order\n\
    \    lst = sort(lst)\n    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp49vvczwt.jl:35\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp49vvczwt.jl:35\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp49vvczwt.jl:28\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp49vvczwt.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # your code\
    \ here\n    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpzxr_hpn6.jl:24\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"aa\", \"a\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpzxr_hpn6.jl:24\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzxr_hpn6.jl:23\ntest set: Test Failed at /tmp/tmpzxr_hpn6.jl:25\n\
    \  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\n   Evaluated: [\"school\", \"AI\", \"asdf\", \"b\"] == [\"\
    AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpzxr_hpn6.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzxr_hpn6.jl:23\ntest set: Test Failed at /tmp/tmpzxr_hpn6.jl:26\n\
    \  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"d\", \"b\", \"c\", \"a\"] == String[]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpzxr_hpn6.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzxr_hpn6.jl:23\ntest set: Test Failed at /tmp/tmpzxr_hpn6.jl:27\n\
    \  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\n   Evaluated: [\"d\", \"dcba\", \"abcd\", \"a\"] == [\"abcd\", \"dcba\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpzxr_hpn6.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzxr_hpn6.jl:23\ntest set: Test Failed at /tmp/tmpzxr_hpn6.jl:29\n\
    \  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzxr_hpn6.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzxr_hpn6.jl:23\ntest set: Test Failed at /tmp/tmpzxr_hpn6.jl:30\n\
    \  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]\
    \ == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpzxr_hpn6.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzxr_hpn6.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzxr_hpn6.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    lst = sort(lst,\
    \ by=length)\n    lst = sort(lst, by=x->x[1])\n    return lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpi924j_ql.jl:25\\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\\n   Evaluated: [\"a\", \"aa\", \"aaa\"] ==\
    \ [\"aa\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpi924j_ql.jl:25\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpi924j_ql.jl:24\\ntest set: Test Failed at /tmp/tmpi924j_ql.jl:26\\\
    n  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\\n   Evaluated: [\"AI\", \"asdf\", \"b\", \"school\"] == [\"\
    AI\", \"asdf\", \"school\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpi924j_ql.jl:26\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpi924j_ql.jl:24\\ntest set: Test Failed at /tmp/tmpi924j_ql.jl:27\\\
    n  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\\\
    n   Evaluated: [\"a\", \"b\", \"c\", \"d\"] == String[]\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmpi924j_ql.jl:27\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpi924j_ql.jl:24\\ntest set: Test Failed at /tmp/tmpi924j_ql.jl:28\\\
    n  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\\n   Evaluated: [\"a\", \"abcd\", \"d\", \"dcba\"] == [\"abcd\", \"dcba\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpi924j_ql.jl:28\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpi924j_ql.jl:24\\ntest set: Test Failed at /tmp/tmpi924j_ql.jl:30\\\
    n  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\\\
    n   Evaluated: [\"a\", \"a\", \"b\", \"b\", \"c\", \"c\"] == String[]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpi924j_ql.jl:30\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpi924j_ql.jl:24\\ntest set: Test Failed at /tmp/tmpi924j_ql.jl:31\\\
    n  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\\n   Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"\
    ] == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpi924j_ql.jl:31\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpi924j_ql.jl:24\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    1     6      7\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    lst_len =\
    \ length(lst)\n    lst_len_odd = []\n    for i in 1:lst_len\n        if length(lst[i])\
    \ % 2 == 1\n            push!(lst_len_odd, lst[i])\n        end\n    end\n   \
    \ return sort(lst_len_odd)\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmpjp4xupy7.jl:30\\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\\n   Evaluated: [\"a\", \"aaa\"] == [\"aa\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpjp4xupy7.jl:30\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpjp4xupy7.jl:29\\ntest set: Test Failed at /tmp/tmpjp4xupy7.jl:31\\\
    n  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\\n   Evaluated: [\"b\"] == [\"AI\", \"asdf\", \"school\"]\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpjp4xupy7.jl:31\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpjp4xupy7.jl:29\\ntest set: Test Failed at /tmp/tmpjp4xupy7.jl:32\\\
    n  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\\\
    n   Evaluated: [\"a\", \"b\", \"c\", \"d\"] == String[]\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmpjp4xupy7.jl:32\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpjp4xupy7.jl:29\\ntest set: Test Failed at /tmp/tmpjp4xupy7.jl:33\\\
    n  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\\n   Evaluated: [\"a\", \"d\"] == [\"abcd\", \"dcba\"]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpjp4xupy7.jl:33\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpjp4xupy7.jl:29\\ntest set: Test Failed at /tmp/tmpjp4xupy7.jl:34\\\
    n  Expression: candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"\
    ]\\n   Evaluated: String[] == [\"AI\", \"ai\", \"au\"]\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmpjp4xupy7.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpjp4xupy7.jl:29\\ntest set: Test Failed at /tmp/tmpjp4xupy7.jl:35\\\
    n  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\\\
    n   Evaluated: [\"a\", \"a\", \"b\", \"b\", \"c\", \"c\"] == String[]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpjp4xupy7.jl:35\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpjp4xupy7.jl:29\\ntest set: Test Failed at /tmp/tmpjp4xupy7.jl:36\\\
    n  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\\n   Evaluated: String[] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpjp4xupy7.jl:36\\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpjp4xupy7.jl:29\\nTest Summary: | Fail  Total\\\
    ntest set      |    7      7\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # delete the\
    \ strings that have odd lengths from it\n    lst = [x for x in lst if length(x)\
    \ % 2 == 0]\n    # sort the list alphabetically\n    sort(lst)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9wt801ej.jl:32\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp9wt801ej.jl:32\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9wt801ej.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9wt801ej.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # remove odd\
    \ length strings\n    lst = filter(x -> length(x) % 2 == 0, lst)\n    # sort by\
    \ length\n    lst = sort(lst, by = x -> length(x))\n    # sort by alphabetical\
    \ order\n    lst = sort(lst)\n    return lst\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp2y8iu6qi.jl:35\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp2y8iu6qi.jl:35\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2y8iu6qi.jl:28\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2y8iu6qi.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # your code\
    \ here\n    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpxggz3h6c.jl:24\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"aa\", \"a\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpxggz3h6c.jl:24\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxggz3h6c.jl:23\ntest set: Test Failed at /tmp/tmpxggz3h6c.jl:25\n\
    \  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\n   Evaluated: [\"school\", \"AI\", \"asdf\", \"b\"] == [\"\
    AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpxggz3h6c.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxggz3h6c.jl:23\ntest set: Test Failed at /tmp/tmpxggz3h6c.jl:26\n\
    \  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"d\", \"b\", \"c\", \"a\"] == String[]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpxggz3h6c.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxggz3h6c.jl:23\ntest set: Test Failed at /tmp/tmpxggz3h6c.jl:27\n\
    \  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\n   Evaluated: [\"d\", \"dcba\", \"abcd\", \"a\"] == [\"abcd\", \"dcba\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpxggz3h6c.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxggz3h6c.jl:23\ntest set: Test Failed at /tmp/tmpxggz3h6c.jl:29\n\
    \  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxggz3h6c.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxggz3h6c.jl:23\ntest set: Test Failed at /tmp/tmpxggz3h6c.jl:30\n\
    \  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]\
    \ == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpxggz3h6c.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxggz3h6c.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxggz3h6c.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # sort by\
    \ length\n    sorted_lst = sort(lst, by=length)\n    # remove odd length strings\n\
    \    sorted_lst = [x for x in sorted_lst if length(x) % 2 == 0]\n    # sort by\
    \ alphabetical order\n    sorted_lst = sort(sorted_lst)\n    return sorted_lst\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpufabcfa5.jl:35\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpufabcfa5.jl:35\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpufabcfa5.jl:28\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpufabcfa5.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # sort by\
    \ length\n    lst = sort(lst, by=length)\n    # sort by alphabet\n    lst = sort(lst)\n\
    \    # remove odd length strings\n    lst = filter(x -> length(x) % 2 == 0, lst)\n\
    \    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpi3zccxl3.jl:35\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpi3zccxl3.jl:35\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi3zccxl3.jl:28\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi3zccxl3.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    lst_sorted\
    \ = sort(lst, by=x->(length(x), x))\n    lst_sorted_even = filter(x->length(x)%2==0,\
    \ lst_sorted)\n    return lst_sorted_even\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    lst = sort(lst,\
    \ by=length)\n    lst = sort(lst, by=x->x[1])\n    return lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4quq186x.jl:25\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp4quq186x.jl:25\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4quq186x.jl:24\ntest set: Test Failed at /tmp/tmp4quq186x.jl:26\n\
    \  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\n   Evaluated: [\"AI\", \"asdf\", \"b\", \"school\"] == [\"\
    AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp4quq186x.jl:26\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4quq186x.jl:24\ntest set: Test Failed at /tmp/tmp4quq186x.jl:27\n\
    \  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"b\", \"c\", \"d\"] == String[]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp4quq186x.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4quq186x.jl:24\ntest set: Test Failed at /tmp/tmp4quq186x.jl:28\n\
    \  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\n   Evaluated: [\"a\", \"abcd\", \"d\", \"dcba\"] == [\"abcd\", \"dcba\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmp4quq186x.jl:28\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4quq186x.jl:24\ntest set: Test Failed at /tmp/tmp4quq186x.jl:30\n\
    \  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"a\", \"b\", \"b\", \"c\", \"c\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4quq186x.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4quq186x.jl:24\ntest set: Test Failed at /tmp/tmp4quq186x.jl:31\n\
    \  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"]\
    \ == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp4quq186x.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4quq186x.jl:24\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4quq186x.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    lst = filter(x\
    \ -> length(x) % 2 == 0, lst)\n    sort(lst)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpwymry0m8.jl:30\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpwymry0m8.jl:30\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwymry0m8.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwymry0m8.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    lst_len =\
    \ length(lst)\n    lst_len_odd = []\n    for i in 1:lst_len\n        if length(lst[i])\
    \ % 2 == 1\n            push!(lst_len_odd, lst[i])\n        end\n    end\n   \
    \ return sort(lst_len_odd)\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmpdjpei687.jl:30\\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\\n   Evaluated: [\"a\", \"aaa\"] == [\"aa\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpdjpei687.jl:30\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpdjpei687.jl:29\\ntest set: Test Failed at /tmp/tmpdjpei687.jl:31\\\
    n  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\\n   Evaluated: [\"b\"] == [\"AI\", \"asdf\", \"school\"]\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpdjpei687.jl:31\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpdjpei687.jl:29\\ntest set: Test Failed at /tmp/tmpdjpei687.jl:32\\\
    n  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\\\
    n   Evaluated: [\"a\", \"b\", \"c\", \"d\"] == String[]\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmpdjpei687.jl:32\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpdjpei687.jl:29\\ntest set: Test Failed at /tmp/tmpdjpei687.jl:33\\\
    n  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\\n   Evaluated: [\"a\", \"d\"] == [\"abcd\", \"dcba\"]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpdjpei687.jl:33\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpdjpei687.jl:29\\ntest set: Test Failed at /tmp/tmpdjpei687.jl:34\\\
    n  Expression: candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"\
    ]\\n   Evaluated: String[] == [\"AI\", \"ai\", \"au\"]\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmpdjpei687.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpdjpei687.jl:29\\ntest set: Test Failed at /tmp/tmpdjpei687.jl:35\\\
    n  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\\\
    n   Evaluated: [\"a\", \"a\", \"b\", \"b\", \"c\", \"c\"] == String[]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpdjpei687.jl:35\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpdjpei687.jl:29\\ntest set: Test Failed at /tmp/tmpdjpei687.jl:36\\\
    n  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\\n   Evaluated: String[] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpdjpei687.jl:36\\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpdjpei687.jl:29\\nTest Summary: | '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # create a\
    \ new list to store the result\n    result = []\n    # loop through the list\n\
    \    for i in lst\n        # if the length of the word is even\n        if length(i)\
    \ % 2 == 0\n            # append the word to the result list\n            push!(result,\
    \ i)\n        end\n    end\n    # sort the result list by length of each word\n\
    \    sort!(result, by = length)\n    # return the result list\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp44z8ef7g.jl:39\\n  Expression: candidate([\"\
    d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\\n   Evaluated: [\"dcba\"\
    , \"abcd\"] == [\"abcd\", \"dcba\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp44z8ef7g.jl:39\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp44z8ef7g.jl:35\\ntest set: Test Failed at /tmp/tmp44z8ef7g.jl:42\\\
    n  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\\n   Evaluated: [\"dd\", \"cc\", \"aaaa\", \"bbbb\"\
    ] == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmp44z8ef7g.jl:42\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp44z8ef7g.jl:35\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    5     2      7\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    #lst = [\"\
    aa\", \"a\", \"aaa\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\"]\n    #lst =\
    \ [\"ab\", \"a\", \"aaa\", \"cd\", \"a\"]\n    #lst = [\"ab\", \"a\", \"aaa\"\
    , \"cd\", \"a\", \"aa\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"\
    aa\", \"a\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"aa\", \"a\"\
    , \"a\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"aa\", \"a\", \"\
    a\", \"a\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"aa\", \"a\"\
    , \"a\", \"a\", \"a\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"\
    aa\", \"a\", \"a\", \"a\", \"a\", \"a\"]\n    #lst = [\"ab\", \"a\", \"aaa\",\
    \ \"cd\", \"a\", \"aa\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"]\n    #lst =\
    \ [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"aa\", \"a\", \"a\", \"a\", \"a\",\
    \ \"a\", \"a\", \"a\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"\
    aa\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"]\n    #lst = [\"\
    ab\", \"a\", \"aaa\", \"cd\", \"a\", \"aa\", \"a\", \"a\", \"a\", \"a\", \"a\"\
    , \"a\", \"a\", \"a\", \"a\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"\
    a\", \"aa\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"\
    a\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"aa\", \"a\", \"a\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7sdx42az.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp7sdx42az.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp7sdx42az.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    lst_len =\
    \ length(lst)\n    lst_len_odd = lst_len % 2 == 1\n    lst_len_even = lst_len\
    \ % 2 == 0\n    if lst_len_odd\n        lst_len_odd = lst_len - 1\n    end\n \
    \   if lst_len_even\n        lst_len_even = lst_len - 2\n    end\n    lst_odd\
    \ = lst[1:lst_len_odd]\n    lst_even = lst[lst_len_odd+1:lst_len_even]\n    return\
    \ sort(lst_even)\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp119_udqs.jl:34\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: String[] == [\"aa\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp119_udqs.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp119_udqs.jl:33\ntest set: Test Failed at /tmp/tmp119_udqs.jl:35\n\
    \  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\n   Evaluated: [\"AI\", \"school\"] == [\"AI\", \"asdf\",\
    \ \"school\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp119_udqs.jl:35\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp119_udqs.jl:33\ntest set: Test Failed at /tmp/tmp119_udqs.jl:36\n\
    \  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"b\", \"d\"] == String[]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp119_udqs.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp119_udqs.jl:33\ntest set: Test Failed at /tmp/tmp119_udqs.jl:37\n\
    \  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\n   Evaluated: [\"d\", \"dcba\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp119_udqs.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp119_udqs.jl:33\ntest set: Test Failed at /tmp/tmp119_udqs.jl:38\n\
    \  Expression: candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"\
    ]\n   Evaluated: String[] == [\"AI\", \"ai\", \"au\"]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp119_udqs.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp119_udqs.jl:33\ntest set: Test Failed at /tmp/tmp119_udqs.jl:39\n\
    \  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"b\", \"b\", \"c\"] == String[]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp119_udqs.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp119_udqs.jl:33\ntest set: Test Failed at /tmp/tmp119_udqs.jl:40\n\
    \  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"aaaa\", \"bbbb\"] == [\"cc\", \"dd\"\
    , \"aaaa\", \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp119_udqs.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp119_udqs.jl:33\nTest Summary: | Fail  Total\n\
    test set      |    7      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp119_udqs.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    lst_length\
    \ = length(lst)\n    lst_length_odd = []\n    for i in 1:lst_length\n        if\
    \ length(lst[i]) % 2 == 1\n            push!(lst_length_odd, lst[i])\n       \
    \ end\n    end\n    return sort(lst_length_odd)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmp5ugcds5_.jl:30\\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\\n   Evaluated: [\"a\", \"aaa\"] == [\"aa\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp5ugcds5_.jl:30\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp5ugcds5_.jl:29\\ntest set: Test Failed at /tmp/tmp5ugcds5_.jl:31\\\
    n  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\\n   Evaluated: [\"b\"] == [\"AI\", \"asdf\", \"school\"]\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmp5ugcds5_.jl:31\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp5ugcds5_.jl:29\\ntest set: Test Failed at /tmp/tmp5ugcds5_.jl:32\\\
    n  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\\\
    n   Evaluated: [\"a\", \"b\", \"c\", \"d\"] == String[]\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmp5ugcds5_.jl:32\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp5ugcds5_.jl:29\\ntest set: Test Failed at /tmp/tmp5ugcds5_.jl:33\\\
    n  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\\n   Evaluated: [\"a\", \"d\"] == [\"abcd\", \"dcba\"]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp5ugcds5_.jl:33\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp5ugcds5_.jl:29\\ntest set: Test Failed at /tmp/tmp5ugcds5_.jl:34\\\
    n  Expression: candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"\
    ]\\n   Evaluated: String[] == [\"AI\", \"ai\", \"au\"]\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmp5ugcds5_.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp5ugcds5_.jl:29\\ntest set: Test Failed at /tmp/tmp5ugcds5_.jl:35\\\
    n  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\\\
    n   Evaluated: [\"a\", \"a\", \"b\", \"b\", \"c\", \"c\"] == String[]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp5ugcds5_.jl:35\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp5ugcds5_.jl:29\\ntest set: Test Failed at /tmp/tmp5ugcds5_.jl:36\\\
    n  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\\n   Evaluated: String[] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp5ugcds5_.jl:36\\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp5ugcds5_.jl:29\\nTest Summary: | Fail  Total\\\
    ntest set      |    7      7\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    lst_sorted\
    \ = sort(lst, by = length)\n    lst_sorted = sort(lst_sorted, by = sort)\n   \
    \ return lst_sorted\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpiyk_0euu.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  MethodError:\
    \ no method matching sort(::String)\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:969\n    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] lt(::Base.Order.By{typeof(sort)}, ::String, ::String)\
    \ at ./ordering.jl:52\n   [2] sort! at ./sort.jl:480 [inlined]\n   [3] sort!(::Array{String,1},\
    \ ::Int64, ::Int64, ::Base.Sort.MergeSortAlg, ::Base.Order.By{typeof(sort)}, ::Array{String,1})\
    \ at ./sort.jl:565\n   [4] sort! at ./sort.jl:564 [inlined]\n   [5] sort! at ./sort.jl:655\
    \ [inlined]\n   [6] #sort!#7 at ./sort.jl:715 [inlined]\n   [7] #sort#8 at ./sort.jl:763\
    \ [inlined]\n   [8] sorted_list_sum(::Array{String,1}) at /tmp/tmpiyk_0euu.jl:17\n\
    \   [9] top-level scope at /tmp/tmpiyk_0euu.jl:25\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpiyk_0euu.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpiyk_0euu.jl:26\n  Test threw exception\n  Expression: candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n  MethodError:\
    \ no method matching sort(::String)\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:969\n    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] lt(::Base.Order.By{typeof(sort)}, ::String, ::String)\
    \ at ./ordering.jl:52\n   [2] sort! at ./sort.jl:480 [inlined]\n   [3] sort!(::Array{String,1},\
    \ ::Int64, ::Int64, ::Base.Sort.MergeSortAlg, ::Base.Order.By{typeof(sort)}, ::Array{String,1})\
    \ at ./sort.jl:565\n   [4] sort! at ./sort.jl:564 [inlined]\n   [5] sort! at ./sort.jl:655\
    \ [inlined]\n   [6] #sort!#7 at ./sort.jl:715 [inlined]\n   [7] #sort#8 at ./sort.jl:763\
    \ [inlined]\n   [8] sorted_list_sum(::Array{String,1}) at /tmp/tmpiyk_0euu.jl:17\n\
    \   [9] top-level scope at /tmp/tmpiyk_0euu.jl:26\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpiyk_0euu.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpiyk_0euu.jl:27\n  Test threw exception\n  Expression: candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n  MethodError: no method matching\
    \ sort(::String)\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:969\n    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] lt(::Base.Order.By{typeof(sort)}, ::String, ::String)\
    \ at ./ordering.jl:52\n   [2] sort! at ./sort.jl:480 [inlined]\n   [3] sort!(::Array{String,1},\
    \ ::Int64, ::Int64, ::Base.Sort.MergeSortAlg, ::Base.Order.By{typeof(sort)}, ::Array{String,1})\
    \ at ./sort.jl:565\n   [4] sort! at ./sort.jl:564 [inlined]\n   [5] sort! at ./sort.jl:655\
    \ [inlined]\n   [6] #sort!#7 at ./sort.jl:715 [inlined]\n   [7] #sort#8 at ./sort.jl:763\
    \ [inlined]\n   [8] sorted_list_sum(::Array{String,1}) at /tmp/tmpiyk_0euu.jl:17\n\
    \   [9] top-level scope at /tmp/tmpiyk_0euu.jl:27\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpiyk_0euu.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpiyk_0euu.jl:28\n  Test threw exception\n  Expression: candidate([\"\
    d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n  MethodError: no method\
    \ matching sort(::String)\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:969\n    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] lt(::Base.Order.By{typeof(sort)}, ::String, ::String)\
    \ at ./ordering.jl:52\n   [2] sort! at ./sort.jl:480 [inlined]\n   [3] sort!(::Array{String,1},\
    \ ::Int64, ::Int64, ::Base.Sort.MergeSortAlg, ::Base.Order.By{typeof(sort)}, ::Array{String,1})\
    \ at ./sort.jl:565\n   [4] sort! at ./sort.jl:564 [inlined]\n   [5] sort! at ./sort.jl:655\
    \ [inlined]\n   [6] #sort!#7 at ./sort.jl:715 [inlined]\n   [7] #sort#8 at ./sort.jl:763\
    \ [inlined]\n   [8] sorted_list_sum(::Array{String,1}) at /tmp/tmpiyk_0euu.jl:17\n\
    \   [9] top-level scope at /tmp/tmpiyk_0euu.jl:28\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpiyk_0euu.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpiyk_0euu.jl:29\n  Test threw exception\n  Expression: candidate([\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]\n  MethodError: no method matching\
    \ sort(::String)\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:969\n    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] lt(::Base.Order.By{typeof(sort)}, ::String, ::String)\
    \ at ./ordering.jl:52\n   [2] sort! at ./sort.jl:480 [inlined]\n   [3] sort!(::Array{String,1},\
    \ ::Int64, ::Int64, ::Base.Sort.MergeSortAlg, ::Base.Order.By{typeof(sort)}, ::Array{String,1})\
    \ at ./sort.jl:565\n   [4] sort! at ./sort.jl:564 [inlined]\n   [5] sort! at ./sort.jl:655\
    \ [inlined]\n   [6] #sort!#7 at ./sort.jl:715 [inlined]\n   [7] #sort#8 at ./sort.jl:763\
    \ [inlined]\n   [8] sorted_list_sum(::Array{String,1}) at /tmp/tmpiyk_0euu.jl:17\n\
    \   [9] top-level scope at /tmp/tmpiyk_0euu.jl:29\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpiyk_0euu.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpiyk_0euu.jl:30\n  Test threw exception\n  Expression: candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\n  MethodError:\
    \ no method matching sort(::String)\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:969\n    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] lt(::Base.Order.By{typeof(sort)}, ::String, ::String)\
    \ at ./ordering.jl:52\n   [2] sort! at ./sort.jl:480 [inlined]\n   [3] sort!(::Array{String,1},\
    \ ::Int64, ::Int64, ::Base.Sort.MergeSortAlg, ::Base.Order.By{typeof(sort)}, ::Array{String,1})\
    \ at ./sort.jl:565\n   [4] sort! at ./sort.jl:564 [inlined]\n   [5] sort! at ./sort.jl:655\
    \ [inlined]\n   [6] #sort!#7 at ./sort.jl:715 [inlined]\n   [7] #sort#8 at ./sort.jl:763\
    \ [inlined]\n   [8] sorted_list_sum(::Array{String,1}) at /tmp/tmpiyk_0euu.jl:17\n\
    \   [9] top-level scope at /tmp/tmpiyk_0euu.jl:30\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpiyk_0euu.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpiyk_0euu.jl:31\n  Test threw exception\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \ MethodError: no method matching sort(::String)\n  Closest candidates are:\n\
    \    sort(!Matched::AbstractUnitRange) at range.jl:969\n    sort(!Matched::AbstractRange)\
    \ at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti}; kws...)\
    \ where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] lt(::Base.Order.By{typeof(sort)}, ::String, ::String)\
    \ at ./ordering.jl:52\n   [2] sort! at ./sort.jl:480 [inlined]\n   [3] sort!(::Array{String,1},\
    \ ::Int64, ::Int64, ::Base.Sort.MergeSortAlg, ::Base.Order.By{typeof(sort)}, ::Array{String,1})\
    \ at ./sort.jl:565\n   [4] sort! at ./sort.jl:564 [inlined]\n   [5] sort! at ./sort.jl:655\
    \ [inlined]\n   [6] #sort!#7 at ./sort.jl:715 [inlined]\n   [7] #sort#8 at ./sort.jl:763\
    \ [inlined]\n   [8] sorted_list_sum(::Array{String,1}) at /tmp/tmpiyk_0euu.jl:17\n\
    \   [9] top-level scope at /tmp/tmpiyk_0euu.jl:31\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpiyk_0euu.jl:24\n  \nTest Summary: | Error\
    \  Total\ntest set      |     7      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiyk_0euu.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # your code\
    \ here\n    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpwobrh1wb.jl:24\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"aa\", \"a\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpwobrh1wb.jl:24\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwobrh1wb.jl:23\ntest set: Test Failed at /tmp/tmpwobrh1wb.jl:25\n\
    \  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\n   Evaluated: [\"school\", \"AI\", \"asdf\", \"b\"] == [\"\
    AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpwobrh1wb.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwobrh1wb.jl:23\ntest set: Test Failed at /tmp/tmpwobrh1wb.jl:26\n\
    \  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"d\", \"b\", \"c\", \"a\"] == String[]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpwobrh1wb.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwobrh1wb.jl:23\ntest set: Test Failed at /tmp/tmpwobrh1wb.jl:27\n\
    \  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\n   Evaluated: [\"d\", \"dcba\", \"abcd\", \"a\"] == [\"abcd\", \"dcba\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpwobrh1wb.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwobrh1wb.jl:23\ntest set: Test Failed at /tmp/tmpwobrh1wb.jl:29\n\
    \  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwobrh1wb.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwobrh1wb.jl:23\ntest set: Test Failed at /tmp/tmpwobrh1wb.jl:30\n\
    \  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]\
    \ == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpwobrh1wb.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwobrh1wb.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwobrh1wb.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    #lst = [\"\
    aa\", \"a\", \"aaa\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\"]\n    #lst =\
    \ [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"]\n    #lst =\
    \ [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"\
    a\", \"aaa\", \"cd\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"\
    a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\",\
    \ \"cd\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\"\
    , \"a\", \"aaa\", \"cd\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\"\
    , \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"]\n  \
    \  #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"\
    ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"\
    ]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"\
    , \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\"\
    , \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"\
    cd\", \"ab\", \"a\", \"aaa\", \"cd\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"\
    cd\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmf23m7sf.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpmf23m7sf.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpmf23m7sf.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # remove all\
    \ odd length strings\n    lst = filter(x -> length(x) % 2 == 0, lst)\n    # sort\
    \ by length\n    sorted_lst = sort(lst, by = x -> length(x))\n    # sort by alphabet\n\
    \    sorted_lst = sort(sorted_lst)\n    return sorted_lst\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc85esgf5.jl:35\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpc85esgf5.jl:35\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc85esgf5.jl:28\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc85esgf5.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # your code\
    \ here\n    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmphysw7wus.jl:24\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"aa\", \"a\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] top-level scope at /tmp/tmphysw7wus.jl:24\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphysw7wus.jl:23\ntest set: Test Failed at /tmp/tmphysw7wus.jl:25\n\
    \  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\n   Evaluated: [\"school\", \"AI\", \"asdf\", \"b\"] == [\"\
    AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] top-level scope at /tmp/tmphysw7wus.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphysw7wus.jl:23\ntest set: Test Failed at /tmp/tmphysw7wus.jl:26\n\
    \  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"d\", \"b\", \"c\", \"a\"] == String[]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmphysw7wus.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphysw7wus.jl:23\ntest set: Test Failed at /tmp/tmphysw7wus.jl:27\n\
    \  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\n   Evaluated: [\"d\", \"dcba\", \"abcd\", \"a\"] == [\"abcd\", \"dcba\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmphysw7wus.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphysw7wus.jl:23\ntest set: Test Failed at /tmp/tmphysw7wus.jl:29\n\
    \  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphysw7wus.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphysw7wus.jl:23\ntest set: Test Failed at /tmp/tmphysw7wus.jl:30\n\
    \  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]\
    \ == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmphysw7wus.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphysw7wus.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphysw7wus.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # lst = [\"\
    aa\", \"a\", \"aaa\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\"]\n    # lst\
    \ = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\"]\n    # lst = [\"ab\", \"a\", \"aaa\"\
    , \"cd\", \"a\", \"a\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"\
    a\", \"a\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"a\", \"a\"\
    , \"a\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"a\", \"a\", \"\
    a\", \"a\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"a\", \"a\"\
    , \"a\", \"a\", \"a\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\"]\n    # lst = [\"ab\", \"a\", \"aaa\",\
    \ \"cd\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"]\n    # lst =\
    \ [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"\
    a\", \"a\", \"a\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"a\"\
    , \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"]\n    # lst = [\"ab\"\
    , \"a\", \"aaa\", \"cd\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"\
    a\", \"a\", \"a\", \"a\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\"\
    , \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"\
    ]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"a\", \"a\", \"a\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5snajgpn.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp5snajgpn.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp5snajgpn.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # your code\
    \ here\n    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpo468w5uw.jl:24\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"aa\", \"a\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpo468w5uw.jl:24\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpo468w5uw.jl:23\ntest set: Test Failed at /tmp/tmpo468w5uw.jl:25\n\
    \  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\n   Evaluated: [\"school\", \"AI\", \"asdf\", \"b\"] == [\"\
    AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpo468w5uw.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpo468w5uw.jl:23\ntest set: Test Failed at /tmp/tmpo468w5uw.jl:26\n\
    \  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"d\", \"b\", \"c\", \"a\"] == String[]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpo468w5uw.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpo468w5uw.jl:23\ntest set: Test Failed at /tmp/tmpo468w5uw.jl:27\n\
    \  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\n   Evaluated: [\"d\", \"dcba\", \"abcd\", \"a\"] == [\"abcd\", \"dcba\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpo468w5uw.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpo468w5uw.jl:23\ntest set: Test Failed at /tmp/tmpo468w5uw.jl:29\n\
    \  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo468w5uw.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpo468w5uw.jl:23\ntest set: Test Failed at /tmp/tmpo468w5uw.jl:30\n\
    \  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]\
    \ == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpo468w5uw.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpo468w5uw.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo468w5uw.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # your code\
    \ here\n    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpklyywsr5.jl:24\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"aa\", \"a\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpklyywsr5.jl:24\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpklyywsr5.jl:23\ntest set: Test Failed at /tmp/tmpklyywsr5.jl:25\n\
    \  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\n   Evaluated: [\"school\", \"AI\", \"asdf\", \"b\"] == [\"\
    AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpklyywsr5.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpklyywsr5.jl:23\ntest set: Test Failed at /tmp/tmpklyywsr5.jl:26\n\
    \  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"d\", \"b\", \"c\", \"a\"] == String[]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpklyywsr5.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpklyywsr5.jl:23\ntest set: Test Failed at /tmp/tmpklyywsr5.jl:27\n\
    \  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\n   Evaluated: [\"d\", \"dcba\", \"abcd\", \"a\"] == [\"abcd\", \"dcba\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpklyywsr5.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpklyywsr5.jl:23\ntest set: Test Failed at /tmp/tmpklyywsr5.jl:29\n\
    \  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpklyywsr5.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpklyywsr5.jl:23\ntest set: Test Failed at /tmp/tmpklyywsr5.jl:30\n\
    \  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]\
    \ == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpklyywsr5.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpklyywsr5.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpklyywsr5.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # sort by\
    \ length\n    sorted_lst = sort(lst, by=length)\n    # filter out odd length strings\n\
    \    filtered_lst = filter(x -> length(x) % 2 == 0, sorted_lst)\n    # sort by\
    \ alphabetical order\n    sorted_lst = sort(filtered_lst)\n    return sorted_lst\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp6_0zq422.jl:35\\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\\n\
    \   Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp6_0zq422.jl:35\\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp6_0zq422.jl:28\\nTest Summary: | Pass  Fail \
    \ Total\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # your code\
    \ here\n    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp6qtffx86.jl:24\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"aa\", \"a\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp6qtffx86.jl:24\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6qtffx86.jl:23\ntest set: Test Failed at /tmp/tmp6qtffx86.jl:25\n\
    \  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\n   Evaluated: [\"school\", \"AI\", \"asdf\", \"b\"] == [\"\
    AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp6qtffx86.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6qtffx86.jl:23\ntest set: Test Failed at /tmp/tmp6qtffx86.jl:26\n\
    \  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"d\", \"b\", \"c\", \"a\"] == String[]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp6qtffx86.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6qtffx86.jl:23\ntest set: Test Failed at /tmp/tmp6qtffx86.jl:27\n\
    \  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\n   Evaluated: [\"d\", \"dcba\", \"abcd\", \"a\"] == [\"abcd\", \"dcba\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmp6qtffx86.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6qtffx86.jl:23\ntest set: Test Failed at /tmp/tmp6qtffx86.jl:29\n\
    \  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6qtffx86.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6qtffx86.jl:23\ntest set: Test Failed at /tmp/tmp6qtffx86.jl:30\n\
    \  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]\
    \ == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp6qtffx86.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6qtffx86.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6qtffx86.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    lst_sorted\
    \ = sort(lst, by=length)\n    lst_sorted_odd = []\n    for i in lst_sorted\n \
    \       if length(i) % 2 == 0\n            push!(lst_sorted_odd, i)\n        end\n\
    \    end\n    return lst_sorted_odd\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp3lxyj4sy.jl:33\n  Expression: candidate([\"\
    d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"dcba\"\
    , \"abcd\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp3lxyj4sy.jl:33\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3lxyj4sy.jl:29\ntest set: Test Failed at /tmp/tmp3lxyj4sy.jl:36\n\
    \  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"dd\", \"cc\", \"aaaa\", \"bbbb\"]\
    \ == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp3lxyj4sy.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3lxyj4sy.jl:29\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3lxyj4sy.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    lst_len =\
    \ length(lst)\n    lst_len_odd = lst_len % 2 == 1\n    if lst_len_odd\n      \
    \  return lst\n    else\n        return lst[1:end-1]\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpilim37pc.jl:29\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"aa\", \"a\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpilim37pc.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpilim37pc.jl:28\ntest set: Test Failed at /tmp/tmpilim37pc.jl:30\n\
    \  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\n   Evaluated: [\"school\", \"AI\", \"asdf\"] == [\"AI\",\
    \ \"asdf\", \"school\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpilim37pc.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpilim37pc.jl:28\ntest set: Test Failed at /tmp/tmpilim37pc.jl:31\n\
    \  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"d\", \"b\", \"c\"] == String[]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpilim37pc.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpilim37pc.jl:28\ntest set: Test Failed at /tmp/tmpilim37pc.jl:32\n\
    \  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\n   Evaluated: [\"d\", \"dcba\", \"abcd\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpilim37pc.jl:32\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpilim37pc.jl:28\ntest set: Test Failed at /tmp/tmpilim37pc.jl:34\n\
    \  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"b\", \"b\", \"c\", \"c\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpilim37pc.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpilim37pc.jl:28\ntest set: Test Failed at /tmp/tmpilim37pc.jl:35\n\
    \  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"aaaa\", \"bbbb\", \"dd\"] == [\"cc\"\
    , \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpilim37pc.jl:35\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpilim37pc.jl:28\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpilim37pc.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    lst_sorted\
    \ = sort(lst, by = length)\n    lst_sorted = sort(lst_sorted, by = sort)\n   \
    \ lst_sorted = lst_sorted[1:2:end]\n    return lst_sorted\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgflotpo2.jl:26\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  MethodError:\
    \ no method matching sort(::String)\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:969\n    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] lt(::Base.Order.By{typeof(sort)}, ::String, ::String)\
    \ at ./ordering.jl:52\n   [2] sort! at ./sort.jl:480 [inlined]\n   [3] sort!(::Array{String,1},\
    \ ::Int64, ::Int64, ::Base.Sort.MergeSortAlg, ::Base.Order.By{typeof(sort)}, ::Array{String,1})\
    \ at ./sort.jl:565\n   [4] sort! at ./sort.jl:564 [inlined]\n   [5] sort! at ./sort.jl:655\
    \ [inlined]\n   [6] #sort!#7 at ./sort.jl:715 [inlined]\n   [7] #sort#8 at ./sort.jl:763\
    \ [inlined]\n   [8] sorted_list_sum(::Array{String,1}) at /tmp/tmpgflotpo2.jl:17\n\
    \   [9] top-level scope at /tmp/tmpgflotpo2.jl:26\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpgflotpo2.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpgflotpo2.jl:27\n  Test threw exception\n  Expression: candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n  MethodError:\
    \ no method matching sort(::String)\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:969\n    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] lt(::Base.Order.By{typeof(sort)}, ::String, ::String)\
    \ at ./ordering.jl:52\n   [2] sort! at ./sort.jl:480 [inlined]\n   [3] sort!(::Array{String,1},\
    \ ::Int64, ::Int64, ::Base.Sort.MergeSortAlg, ::Base.Order.By{typeof(sort)}, ::Array{String,1})\
    \ at ./sort.jl:565\n   [4] sort! at ./sort.jl:564 [inlined]\n   [5] sort! at ./sort.jl:655\
    \ [inlined]\n   [6] #sort!#7 at ./sort.jl:715 [inlined]\n   [7] #sort#8 at ./sort.jl:763\
    \ [inlined]\n   [8] sorted_list_sum(::Array{String,1}) at /tmp/tmpgflotpo2.jl:17\n\
    \   [9] top-level scope at /tmp/tmpgflotpo2.jl:27\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpgflotpo2.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpgflotpo2.jl:28\n  Test threw exception\n  Expression: candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n  MethodError: no method matching\
    \ sort(::String)\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:969\n    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] lt(::Base.Order.By{typeof(sort)}, ::String, ::String)\
    \ at ./ordering.jl:52\n   [2] sort! at ./sort.jl:480 [inlined]\n   [3] sort!(::Array{String,1},\
    \ ::Int64, ::Int64, ::Base.Sort.MergeSortAlg, ::Base.Order.By{typeof(sort)}, ::Array{String,1})\
    \ at ./sort.jl:565\n   [4] sort! at ./sort.jl:564 [inlined]\n   [5] sort! at ./sort.jl:655\
    \ [inlined]\n   [6] #sort!#7 at ./sort.jl:715 [inlined]\n   [7] #sort#8 at ./sort.jl:763\
    \ [inlined]\n   [8] sorted_list_sum(::Array{String,1}) at /tmp/tmpgflotpo2.jl:17\n\
    \   [9] top-level scope at /tmp/tmpgflotpo2.jl:28\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpgflotpo2.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpgflotpo2.jl:29\n  Test threw exception\n  Expression: candidate([\"\
    d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n  MethodError: no method\
    \ matching sort(::String)\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:969\n    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] lt(::Base.Order.By{typeof(sort)}, ::String, ::String)\
    \ at ./ordering.jl:52\n   [2] sort! at ./sort.jl:480 [inlined]\n   [3] sort!(::Array{String,1},\
    \ ::Int64, ::Int64, ::Base.Sort.MergeSortAlg, ::Base.Order.By{typeof(sort)}, ::Array{String,1})\
    \ at ./sort.jl:565\n   [4] sort! at ./sort.jl:564 [inlined]\n   [5] sort! at ./sort.jl:655\
    \ [inlined]\n   [6] #sort!#7 at ./sort.jl:715 [inlined]\n   [7] #sort#8 at ./sort.jl:763\
    \ [inlined]\n   [8] sorted_list_sum(::Array{String,1}) at /tmp/tmpgflotpo2.jl:17\n\
    \   [9] top-level scope at /tmp/tmpgflotpo2.jl:29\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpgflotpo2.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpgflotpo2.jl:30\n  Test threw exception\n  Expression: candidate([\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]\n  MethodError: no method matching\
    \ sort(::String)\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:969\n    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] lt(::Base.Order.By{typeof(sort)}, ::String, ::String)\
    \ at ./ordering.jl:52\n   [2] sort! at ./sort.jl:480 [inlined]\n   [3] sort!(::Array{String,1},\
    \ ::Int64, ::Int64, ::Base.Sort.MergeSortAlg, ::Base.Order.By{typeof(sort)}, ::Array{String,1})\
    \ at ./sort.jl:565\n   [4] sort! at ./sort.jl:564 [inlined]\n   [5] sort! at ./sort.jl:655\
    \ [inlined]\n   [6] #sort!#7 at ./sort.jl:715 [inlined]\n   [7] #sort#8 at ./sort.jl:763\
    \ [inlined]\n   [8] sorted_list_sum(::Array{String,1}) at /tmp/tmpgflotpo2.jl:17\n\
    \   [9] top-level scope at /tmp/tmpgflotpo2.jl:30\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpgflotpo2.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpgflotpo2.jl:31\n  Test threw exception\n  Expression: candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\n  MethodError:\
    \ no method matching sort(::String)\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:969\n    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] lt(::Base.Order.By{typeof(sort)}, ::String, ::String)\
    \ at ./ordering.jl:52\n   [2] sort! at ./sort.jl:480 [inlined]\n   [3] sort!(::Array{String,1},\
    \ ::Int64, ::Int64, ::Base.Sort.MergeSortAlg, ::Base.Order.By{typeof(sort)}, ::Array{String,1})\
    \ at ./sort.jl:565\n   [4] sort! at ./sort.jl:564 [inlined]\n   [5] sort! at ./sort.jl:655\
    \ [inlined]\n   [6] #sort!#7 at ./sort.jl:715 [inlined]\n   [7] #sort#8 at ./sort.jl:763\
    \ [inlined]\n   [8] sorted_list_sum(::Array{String,1}) at /tmp/tmpgflotpo2.jl:17\n\
    \   [9] top-level scope at /tmp/tmpgflotpo2.jl:31\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpgflotpo2.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpgflotpo2.jl:32\n  Test threw exception\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \ MethodError: no method matching sort(::String)\n  Closest candidates are:\n\
    \    sort(!Matched::AbstractUnitRange) at range.jl:969\n    sort(!Matched::AbstractRange)\
    \ at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti}; kws...)\
    \ where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] lt(::Base.Order.By{typeof(sort)}, ::String, ::String)\
    \ at ./ordering.jl:52\n   [2] sort! at ./sort.jl:480 [inlined]\n   [3] sort!(::Array{String,1},\
    \ ::Int64, ::Int64, ::Base.Sort.MergeSortAlg, ::Base.Order.By{typeof(sort)}, ::Array{String,1})\
    \ at ./sort.jl:565\n   [4] sort! at ./sort.jl:564 [inlined]\n   [5] sort! at ./sort.jl:655\
    \ [inlined]\n   [6] #sort!#7 at ./sort.jl:715 [inlined]\n   [7] #sort#8 at ./sort.jl:763\
    \ [inlined]\n   [8] sorted_list_sum(::Array{String,1}) at /tmp/tmpgflotpo2.jl:17\n\
    \   [9] top-level scope at /tmp/tmpgflotpo2.jl:32\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpgflotpo2.jl:25\n  \nTest Summary: | Error\
    \  Total\ntest set      |     7      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgflotpo2.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # sort the\
    \ list by length\n    sorted_lst = sort(lst, by=length)\n    # get the length\
    \ of the first element\n    first_len = length(sorted_lst[1])\n    # get the index\
    \ of the first element that is not the same length as the first element\n    index\
    \ = findfirst(x -> length(x) != first_len, sorted_lst)\n    # return the list\
    \ from the first element to the index\n    return sorted_lst[1:index-1]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfy49m3qt.jl:30\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\"] == [\"aa\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfy49m3qt.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfy49m3qt.jl:29\ntest set: Test Failed at /tmp/tmpfy49m3qt.jl:31\n\
    \  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\n   Evaluated: [\"b\"] == [\"AI\", \"asdf\", \"school\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpfy49m3qt.jl:31\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfy49m3qt.jl:29\ntest set: Error During Test at\
    \ /tmp/tmpfy49m3qt.jl:32\n  Test threw exception\n  Expression: candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n  MethodError: no method matching\
    \ -(::Nothing, ::Int64)\n  Closest candidates are:\n    -(!Matched::Complex{Bool},\
    \ ::Real) at complex.jl:307\n    -(!Matched::Missing, ::Number) at missing.jl:115\n\
    \    -(!Matched::Base.CoreLogging.LogLevel, ::Integer) at logging.jl:108\n   \
    \ ...\n  Stacktrace:\n   [1] sorted_list_sum(::Array{String,1}) at /tmp/tmpfy49m3qt.jl:23\n\
    \   [2] top-level scope at /tmp/tmpfy49m3qt.jl:32\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpfy49m3qt.jl:29\n  \ntest set: Test Failed at\
    \ /tmp/tmpfy49m3qt.jl:33\n  Expression: candidate([\"d\", \"dcba\", \"abcd\",\
    \ \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"d\", \"a\"] == [\"abcd\",\
    \ \"dcba\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpfy49m3qt.jl:33\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfy49m3qt.jl:29\ntest set: Error During Test at\
    \ /tmp/tmpfy49m3qt.jl:34\n  Test threw exception\n  Expression: candidate([\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]\n  MethodError: no method matching\
    \ -(::Nothing, ::Int64)\n  Closest candidates are:\n    -(!Matched::Complex{Bool},\
    \ ::Real) at complex.jl:307\n    -(!Matched::Missing, ::Number) at missing.jl:115\n\
    \    -(!Matched::Base.CoreLogging.LogLevel, ::Integer) at logging.jl:108\n   \
    \ ...\n  Stacktrace:\n   [1] sorted_list_sum(::Array{String,1}) at /tmp/tmpfy49m3qt.jl:23\n\
    \   [2] top-level scope at /tmp/tmpfy49m3qt.jl:34\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpfy49m3qt.jl:29\n  \ntest set: Error During\
    \ Test at /tmp/tmpfy49m3qt.jl:35\n  Test threw exception\n  Expression: candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\n  MethodError:\
    \ no method matching -(::Nothing, ::Int64)\n  Closest candidates are:\n    -(!Matched::Complex{Bool},\
    \ ::Real) at complex.jl:307\n    -(!Matched::Missing, ::Number) at missing.jl:115\n\
    \    -(!Matched::Base.CoreLogging.LogLevel, ::Integer) at logging.jl:108\n   \
    \ ...\n  Stacktrace:\n   [1] sorted_list_sum(::Array{String,1}) at /tmp/tmpfy49m3qt.jl:23\n\
    \   [2] top-level scope at /tmp/tmpfy49m3qt.jl:35\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpfy49m3qt.jl:29\n  \ntest set: Test Failed at\
    \ /tmp/tmpfy49m3qt.jl:36\n  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"dd\", \"\
    cc\"] == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpfy49m3qt.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfy49m3qt.jl:29\nTest Summary: | Fail  Error \
    \ Total\ntest set      |    4      3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfy49m3qt.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    #lst = [\"\
    aa\", \"a\", \"aaa\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\"]\n    #lst =\
    \ [\"ab\", \"a\", \"aaa\", \"cd\", \"a\"]\n    #lst = [\"ab\", \"a\", \"aaa\"\
    , \"cd\", \"a\", \"a\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"\
    a\", \"a\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"a\", \"a\",\
    \ \"a\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"a\", \"a\", \"\
    a\", \"a\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"a\", \"a\",\
    \ \"a\", \"a\", \"a\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"\
    cd\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"]\n    #lst = [\"\
    ab\", \"a\", \"aaa\", \"cd\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"\
    , \"a\", \"a\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"a\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"]\n    #lst = [\"ab\", \"\
    a\", \"aaa\", \"cd\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\",\
    \ \"a\", \"a\", \"a\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"]\n \
    \   #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"a\", \"a\", \"a\nusing Test\n\
    \n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpce8nzbf6.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpce8nzbf6.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpce8nzbf6.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    lst = filter(x\
    \ -> length(x) % 2 == 0, lst)\n    sort(lst)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpfk_5zp93.jl:30\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpfk_5zp93.jl:30\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfk_5zp93.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfk_5zp93.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # create a\
    \ new list of strings\n    new_lst = []\n    # iterate through the list\n    for\
    \ i in lst\n        # if the length of the string is even\n        if length(i)\
    \ % 2 == 0\n            # append the string to the new list\n            push!(new_lst,\
    \ i)\n        end\n    end\n    # sort the list by length\n    sort!(new_lst,\
    \ by = length)\n    # return the list\n    return new_lst\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5h8su0xp.jl:39\n  Expression: candidate([\"\
    d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"dcba\"\
    , \"abcd\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp5h8su0xp.jl:39\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5h8su0xp.jl:35\ntest set: Test Failed at /tmp/tmp5h8su0xp.jl:42\n\
    \  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"dd\", \"cc\", \"aaaa\", \"bbbb\"]\
    \ == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp5h8su0xp.jl:42\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5h8su0xp.jl:35\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5h8su0xp.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # your code\
    \ here\n    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmp7fvqkq4m.jl:24\\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\\n   Evaluated: [\"aa\", \"a\", \"aaa\"] ==\
    \ [\"aa\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp7fvqkq4m.jl:24\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp7fvqkq4m.jl:23\\ntest set: Test Failed at /tmp/tmp7fvqkq4m.jl:25\\\
    n  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\\n   Evaluated: [\"school\", \"AI\", \"asdf\", \"b\"] == [\"\
    AI\", \"asdf\", \"school\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp7fvqkq4m.jl:25\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp7fvqkq4m.jl:23\\ntest set: Test Failed at /tmp/tmp7fvqkq4m.jl:26\\\
    n  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\\\
    n   Evaluated: [\"d\", \"b\", \"c\", \"a\"] == String[]\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmp7fvqkq4m.jl:26\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp7fvqkq4m.jl:23\\ntest set: Test Failed at /tmp/tmp7fvqkq4m.jl:27\\\
    n  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\\n   Evaluated: [\"d\", \"dcba\", \"abcd\", \"a\"] == [\"abcd\", \"dcba\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp7fvqkq4m.jl:27\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp7fvqkq4m.jl:23\\ntest set: Test Failed at /tmp/tmp7fvqkq4m.jl:29\\\
    n  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\\\
    n   Evaluated: [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"] == String[]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp7fvqkq4m.jl:29\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp7fvqkq4m.jl:23\\ntest set: Test Failed at /tmp/tmp7fvqkq4m.jl:30\\\
    n  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\\n   Evaluated: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    ] == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmp7fvqkq4m.jl:30\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp7fvqkq4m.jl:23\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    lst = filter(x\
    \ -> length(x) % 2 == 0, lst)\n    return sort(lst)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"\
    aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\",\
    \ \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"abcd\"\
    , \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"au\"\
    ]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpqsp10n6e.jl:30\\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\\n\
    \   Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpqsp10n6e.jl:30\\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpqsp10n6e.jl:23\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    6     1      7\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # remove odd\
    \ length strings\n    lst = filter(x -> length(x) % 2 == 0, lst)\n    # sort by\
    \ length\n    sorted_lst = sort(lst, by = x -> length(x))\n    # sort by alphabetical\
    \ order\n    sorted_lst = sort(sorted_lst)\n    return sorted_lst\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpncorupsc.jl:35\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpncorupsc.jl:35\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpncorupsc.jl:28\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpncorupsc.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # sort the\
    \ list by length\n    sorted_lst = sort(lst, by=length)\n    # remove all the\
    \ odd length strings\n    odd_length_strings = sorted_lst[mod.(length.(sorted_lst),\
    \ 2) .== 1]\n    # remove the odd length strings from the list\n    even_length_strings\
    \ = setdiff(sorted_lst, odd_length_strings)\n    # sort the list alphabetically\n\
    \    sorted_even_length_strings = sort(even_length_strings)\n    return sorted_even_length_strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphcqeqr2x.jl:37\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmphcqeqr2x.jl:37\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphcqeqr2x.jl:30\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphcqeqr2x.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # sort by\
    \ length\n    sorted_lst = sort(lst, by=length)\n    # sort by alphabetical order\n\
    \    sorted_lst = sort(sorted_lst)\n    return sorted_lst\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphhp2rclf.jl:27\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] top-level scope at /tmp/tmphhp2rclf.jl:27\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphhp2rclf.jl:26\ntest set: Test Failed at /tmp/tmphhp2rclf.jl:28\n\
    \  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\n   Evaluated: [\"AI\", \"asdf\", \"b\", \"school\"] == [\"\
    AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] top-level scope at /tmp/tmphhp2rclf.jl:28\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphhp2rclf.jl:26\ntest set: Test Failed at /tmp/tmphhp2rclf.jl:29\n\
    \  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"b\", \"c\", \"d\"] == String[]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmphhp2rclf.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphhp2rclf.jl:26\ntest set: Test Failed at /tmp/tmphhp2rclf.jl:30\n\
    \  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\n   Evaluated: [\"a\", \"abcd\", \"d\", \"dcba\"] == [\"abcd\", \"dcba\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmphhp2rclf.jl:30\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphhp2rclf.jl:26\ntest set: Test Failed at /tmp/tmphhp2rclf.jl:32\n\
    \  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"a\", \"b\", \"b\", \"c\", \"c\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphhp2rclf.jl:32\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphhp2rclf.jl:26\ntest set: Test Failed at /tmp/tmphhp2rclf.jl:33\n\
    \  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"]\
    \ == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmphhp2rclf.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphhp2rclf.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphhp2rclf.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # Your code\
    \ here\n    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmpr7lb18uc.jl:24\\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\\n   Evaluated: [\"aa\", \"a\", \"aaa\"] ==\
    \ [\"aa\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpr7lb18uc.jl:24\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpr7lb18uc.jl:23\\ntest set: Test Failed at /tmp/tmpr7lb18uc.jl:25\\\
    n  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\\n   Evaluated: [\"school\", \"AI\", \"asdf\", \"b\"] == [\"\
    AI\", \"asdf\", \"school\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpr7lb18uc.jl:25\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpr7lb18uc.jl:23\\ntest set: Test Failed at /tmp/tmpr7lb18uc.jl:26\\\
    n  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    lst = sort(lst,\
    \ by = length)\n    lst = sort(lst, by = sort)\n    return lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp25xu6txa.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  MethodError:\
    \ no method matching sort(::String)\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:969\n    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] lt(::Base.Order.By{typeof(sort)}, ::String, ::String)\
    \ at ./ordering.jl:52\n   [2] sort! at ./sort.jl:480 [inlined]\n   [3] sort!(::Array{String,1},\
    \ ::Int64, ::Int64, ::Base.Sort.MergeSortAlg, ::Base.Order.By{typeof(sort)}, ::Array{String,1})\
    \ at ./sort.jl:565\n   [4] sort! at ./sort.jl:564 [inlined]\n   [5] sort! at ./sort.jl:655\
    \ [inlined]\n   [6] #sort!#7 at ./sort.jl:715 [inlined]\n   [7] #sort#8 at ./sort.jl:763\
    \ [inlined]\n   [8] sorted_list_sum(::Array{String,1}) at /tmp/tmp25xu6txa.jl:17\n\
    \   [9] top-level scope at /tmp/tmp25xu6txa.jl:25\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp25xu6txa.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp25xu6txa.jl:26\n  Test threw exception\n  Expression: candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n  MethodError:\
    \ no method matching sort(::String)\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:969\n    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] lt(::Base.Order.By{typeof(sort)}, ::String, ::String)\
    \ at ./ordering.jl:52\n   [2] sort! at ./sort.jl:480 [inlined]\n   [3] sort!(::Array{String,1},\
    \ ::Int64, ::Int64, ::Base.Sort.MergeSortAlg, ::Base.Order.By{typeof(sort)}, ::Array{String,1})\
    \ at ./sort.jl:565\n   [4] sort! at ./sort.jl:564 [inlined]\n   [5] sort! at ./sort.jl:655\
    \ [inlined]\n   [6] #sort!#7 at ./sort.jl:715 [inlined]\n   [7] #sort#8 at ./sort.jl:763\
    \ [inlined]\n   [8] sorted_list_sum(::Array{String,1}) at /tmp/tmp25xu6txa.jl:17\n\
    \   [9] top-level scope at /tmp/tmp25xu6txa.jl:26\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp25xu6txa.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp25xu6txa.jl:27\n  Test threw exception\n  Expression: candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n  MethodError: no method matching\
    \ sort(::String)\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:969\n    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] lt(::Base.Order.By{typeof(sort)}, ::String, ::String)\
    \ at ./ordering.jl:52\n   [2] sort! at ./sort.jl:480 [inlined]\n   [3] sort!(::Array{String,1},\
    \ ::Int64, ::Int64, ::Base.Sort.MergeSortAlg, ::Base.Order.By{typeof(sort)}, ::Array{String,1})\
    \ at ./sort.jl:565\n   [4] sort! at ./sort.jl:564 [inlined]\n   [5] sort! at ./sort.jl:655\
    \ [inlined]\n   [6] #sort!#7 at ./sort.jl:715 [inlined]\n   [7] #sort#8 at ./sort.jl:763\
    \ [inlined]\n   [8] sorted_list_sum(::Array{String,1}) at /tmp/tmp25xu6txa.jl:17\n\
    \   [9] top-level scope at /tmp/tmp25xu6txa.jl:27\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp25xu6txa.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp25xu6txa.jl:28\n  Test threw exception\n  Expression: candidate([\"\
    d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n  MethodError: no method\
    \ matching sort(::String)\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:969\n    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] lt(::Base.Order.By{typeof(sort)}, ::String, ::String)\
    \ at ./ordering.jl:52\n   [2] sort! at ./sort.jl:480 [inlined]\n   [3] sort!(::Array{String,1},\
    \ ::Int64, ::Int64, ::Base.Sort.MergeSortAlg, ::Base.Order.By{typeof(sort)}, ::Array{String,1})\
    \ at ./sort.jl:565\n   [4] sort! at ./sort.jl:564 [inlined]\n   [5] sort! at ./sort.jl:655\
    \ [inlined]\n   [6] #sort!#7 at ./sort.jl:715 [inlined]\n   [7] #sort#8 at ./sort.jl:763\
    \ [inlined]\n   [8] sorted_list_sum(::Array{String,1}) at /tmp/tmp25xu6txa.jl:17\n\
    \   [9] top-level scope at /tmp/tmp25xu6txa.jl:28\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp25xu6txa.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp25xu6txa.jl:29\n  Test threw exception\n  Expression: candidate([\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]\n  MethodError: no method matching\
    \ sort(::String)\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:969\n    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] lt(::Base.Order.By{typeof(sort)}, ::String, ::String)\
    \ at ./ordering.jl:52\n   [2] sort! at ./sort.jl:480 [inlined]\n   [3] sort!(::Array{String,1},\
    \ ::Int64, ::Int64, ::Base.Sort.MergeSortAlg, ::Base.Order.By{typeof(sort)}, ::Array{String,1})\
    \ at ./sort.jl:565\n   [4] sort! at ./sort.jl:564 [inlined]\n   [5] sort! at ./sort.jl:655\
    \ [inlined]\n   [6] #sort!#7 at ./sort.jl:715 [inlined]\n   [7] #sort#8 at ./sort.jl:763\
    \ [inlined]\n   [8] sorted_list_sum(::Array{String,1}) at /tmp/tmp25xu6txa.jl:17\n\
    \   [9] top-level scope at /tmp/tmp25xu6txa.jl:29\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp25xu6txa.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp25xu6txa.jl:30\n  Test threw exception\n  Expression: candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\n  MethodError:\
    \ no method matching sort(::String)\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:969\n    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] lt(::Base.Order.By{typeof(sort)}, ::String, ::String)\
    \ at ./ordering.jl:52\n   [2] sort! at ./sort.jl:480 [inlined]\n   [3] sort!(::Array{String,1},\
    \ ::Int64, ::Int64, ::Base.Sort.MergeSortAlg, ::Base.Order.By{typeof(sort)}, ::Array{String,1})\
    \ at ./sort.jl:565\n   [4] sort! at ./sort.jl:564 [inlined]\n   [5] sort! at ./sort.jl:655\
    \ [inlined]\n   [6] #sort!#7 at ./sort.jl:715 [inlined]\n   [7] #sort#8 at ./sort.jl:763\
    \ [inlined]\n   [8] sorted_list_sum(::Array{String,1}) at /tmp/tmp25xu6txa.jl:17\n\
    \   [9] top-level scope at /tmp/tmp25xu6txa.jl:30\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp25xu6txa.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp25xu6txa.jl:31\n  Test threw exception\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \ MethodError: no method matching sort(::String)\n  Closest candidates are:\n\
    \    sort(!Matched::AbstractUnitRange) at range.jl:969\n    sort(!Matched::AbstractRange)\
    \ at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti}; kws...)\
    \ where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] lt(::Base.Order.By{typeof(sort)}, ::String, ::String)\
    \ at ./ordering.jl:52\n   [2] sort! at ./sort.jl:480 [inlined]\n   [3] sort!(::Array{String,1},\
    \ ::Int64, ::Int64, ::Base.Sort.MergeSortAlg, ::Base.Order.By{typeof(sort)}, ::Array{String,1})\
    \ at ./sort.jl:565\n   [4] sort! at ./sort.jl:564 [inlined]\n   [5] sort! at ./sort.jl:655\
    \ [inlined]\n   [6] #sort!#7 at ./sort.jl:715 [inlined]\n   [7] #sort#8 at ./sort.jl:763\
    \ [inlined]\n   [8] sorted_list_sum(::Array{String,1}) at /tmp/tmp25xu6txa.jl:17\n\
    \   [9] top-level scope at /tmp/tmp25xu6txa.jl:31\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmp25xu6txa.jl:24\n  \nTest Summary: | Error\
    \  Total\ntest set      |     7      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp25xu6txa.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # your code\
    \ here\n    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpwhmwlpl6.jl:24\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"aa\", \"a\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpwhmwlpl6.jl:24\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwhmwlpl6.jl:23\ntest set: Test Failed at /tmp/tmpwhmwlpl6.jl:25\n\
    \  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\n   Evaluated: [\"school\", \"AI\", \"asdf\", \"b\"] == [\"\
    AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpwhmwlpl6.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwhmwlpl6.jl:23\ntest set: Test Failed at /tmp/tmpwhmwlpl6.jl:26\n\
    \  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"d\", \"b\", \"c\", \"a\"] == String[]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpwhmwlpl6.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwhmwlpl6.jl:23\ntest set: Test Failed at /tmp/tmpwhmwlpl6.jl:27\n\
    \  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\n   Evaluated: [\"d\", \"dcba\", \"abcd\", \"a\"] == [\"abcd\", \"dcba\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpwhmwlpl6.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwhmwlpl6.jl:23\ntest set: Test Failed at /tmp/tmpwhmwlpl6.jl:29\n\
    \  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwhmwlpl6.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwhmwlpl6.jl:23\ntest set: Test Failed at /tmp/tmpwhmwlpl6.jl:30\n\
    \  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]\
    \ == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpwhmwlpl6.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwhmwlpl6.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwhmwlpl6.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    #lst = [\"\
    aa\", \"a\", \"aaa\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\"]\n    #lst =\
    \ [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"]\n    #lst =\
    \ [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"\
    a\", \"aaa\", \"cd\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"\
    a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\",\
    \ \"cd\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\"\
    , \"a\", \"aaa\", \"cd\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\"\
    , \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"]\n  \
    \  #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"\
    ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"\
    ]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"\
    , \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\"\
    , \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"\
    cd\", \"ab\", \"a\", \"aaa\", \"cd\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"\
    cd\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1eph_61h.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp1eph_61h.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp1eph_61h.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    lst = filter(x\
    \ -> length(x) % 2 == 0, lst)\n    sort(lst)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmp4eqvk7nu.jl:30\\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\\n\
    \   Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp4eqvk7nu.jl:30\\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp4eqvk7nu.jl:23\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    lst = filter(x\
    \ -> length(x) % 2 == 0, lst)\n    sort(lst)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpzv_r3lnm.jl:30\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpzv_r3lnm.jl:30\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzv_r3lnm.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzv_r3lnm.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # Create a\
    \ new vector to store the result\n    result = Vector{String}()\n    # Create\
    \ a dictionary to store the length of each string\n    dict = Dict{String, Int}()\n\
    \    # Loop through the list\n    for i in 1:length(lst)\n        # If the length\
    \ of the string is even\n        if length(lst[i]) % 2 == 0\n            # Store\
    \ the string in the dictionary with its length as the value\n            dict[lst[i]]\
    \ = length(lst[i])\n        end\n    end\n    # Sort the dictionary by its values\n\
    \    dict = sort(collect(dict), by=x->x[2])\n    # Loop through the dictionary\n\
    \    for i in 1:length(dict)\n        # Store the key of the dictionary in the\
    \ result vector\n        push!(result, dict[i][1])\n    end\n    # Return the\
    \ result vector\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # your code\
    \ here\n    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmpkpi28ddv.jl:24\\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\\n   Evaluated: [\"aa\", \"a\", \"aaa\"] ==\
    \ [\"aa\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpkpi28ddv.jl:24\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpkpi28ddv.jl:23\\ntest set: Test Failed at /tmp/tmpkpi28ddv.jl:25\\\
    n  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\\n   Evaluated: [\"school\", \"AI\", \"asdf\", \"b\"] == [\"\
    AI\", \"asdf\", \"school\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpkpi28ddv.jl:25\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpkpi28ddv.jl:23\\ntest set: Test Failed at /tmp/tmpkpi28ddv.jl:26\\\
    n  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\\\
    n   Evaluated: [\"d\", \"b\", \"c\", \"a\"] == String[]\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmpkpi28ddv.jl:26\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpkpi28ddv.jl:23\\ntest set: Test Failed at /tmp/tmpkpi28ddv.jl:27\\\
    n  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\\n   Evaluated: [\"d\", \"dcba\", \"abcd\", \"a\"] == [\"abcd\", \"dcba\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpkpi28ddv.jl:27\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpkpi28ddv.jl:23\\ntest set: Test Failed at /tmp/tmpkpi28ddv.jl:29\\\
    n  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\\\
    n   Evaluated: [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"] == String[]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpkpi28ddv.jl:29\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpkpi28ddv.jl:23\\ntest set: Test Failed at /tmp/tmpkpi28ddv.jl:30\\\
    n  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\\n   Evaluated: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    ] == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpkpi28ddv.jl:30\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpkpi28ddv.jl:23\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    1     6      7\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    lst = filter(x\
    \ -> length(x) % 2 == 0, lst)\n    sort(lst)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp54pwqcq3.jl:30\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp54pwqcq3.jl:30\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp54pwqcq3.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp54pwqcq3.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    lst_odd =\
    \ filter(x -> length(x) % 2 == 1, lst)\n    lst_even = filter(x -> length(x) %\
    \ 2 == 0, lst)\n    lst_even = sort(lst_even)\n    lst_odd = sort(lst_odd)\n \
    \   return vcat(lst_even, lst_odd)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpsgzvbxkc.jl:27\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"aa\", \"a\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpsgzvbxkc.jl:27\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsgzvbxkc.jl:26\ntest set: Test Failed at /tmp/tmpsgzvbxkc.jl:28\n\
    \  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\n   Evaluated: [\"AI\", \"asdf\", \"school\", \"b\"] == [\"\
    AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpsgzvbxkc.jl:28\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsgzvbxkc.jl:26\ntest set: Test Failed at /tmp/tmpsgzvbxkc.jl:29\n\
    \  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"b\", \"c\", \"d\"] == String[]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpsgzvbxkc.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsgzvbxkc.jl:26\ntest set: Test Failed at /tmp/tmpsgzvbxkc.jl:30\n\
    \  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\n   Evaluated: [\"abcd\", \"dcba\", \"a\", \"d\"] == [\"abcd\", \"dcba\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpsgzvbxkc.jl:30\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsgzvbxkc.jl:26\ntest set: Test Failed at /tmp/tmpsgzvbxkc.jl:32\n\
    \  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"a\", \"b\", \"b\", \"c\", \"c\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsgzvbxkc.jl:32\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsgzvbxkc.jl:26\ntest set: Test Failed at /tmp/tmpsgzvbxkc.jl:33\n\
    \  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"]\
    \ == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpsgzvbxkc.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsgzvbxkc.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsgzvbxkc.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    lst_new =\
    \ []\n    for i in lst\n        if length(i) % 2 == 0\n            push!(lst_new,\
    \ i)\n        end\n    end\n    sort(lst_new)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpizekgu8_.jl:35\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpizekgu8_.jl:35\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpizekgu8_.jl:28\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpizekgu8_.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    lst_sorted\
    \ = sort(lst, by = x -> length(x))\n    lst_sorted = sort(lst_sorted, by = x ->\
    \ x)\n    lst_sorted = lst_sorted[1:2:end]\n    return lst_sorted\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpi3whn9sp.jl:26\\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\\n   Evaluated: [\"a\", \"aaa\"] == [\"aa\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpi3whn9sp.jl:26\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpi3whn9sp.jl:25\\ntest set: Test Failed at /tmp/tmpi3whn9sp.jl:27\\\
    n  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\\n   Evaluated: [\"AI\", \"b\"] == [\"AI\", \"asdf\", \"school\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpi3whn9sp.jl:27\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpi3whn9sp.jl:25\\ntest set: Test Failed at /tmp/tmpi3whn9sp.jl:28\\\
    n  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\\\
    n   Evaluated: [\"a\", \"c\"] == String[]\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpi3whn9sp.jl:28\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpi3whn9sp.jl:25\\ntest set: Test Failed at /tmp/tmpi3whn9sp.jl:29\\\
    n  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\\n   Evaluated: [\"a\", \"d\"] == [\"abcd\", \"dcba\"]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpi3whn9sp.jl:29\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpi3whn9sp.jl:25\\ntest set: Test Failed at /tmp/tmpi3whn9sp.jl:30\\\
    n  Expression: candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"\
    ]\\n   Evaluated: [\"AI\", \"au\"] == [\"AI\", \"ai\", \"au\"]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpi3whn9sp.jl:30\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpi3whn9sp.jl:25\\ntest set: Test Failed at /tmp/tmpi3whn9sp.jl:31\\\
    n  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\\\
    n   Evaluated: [\"a\", \"b\", \"c\"] == String[]\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmpi3whn9sp.jl:31\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpi3whn9sp.jl:25\\ntest set: Test Failed at /tmp/tmpi3whn9sp.jl:32\\\
    n  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\\n   Evaluated: [\"aaaa\", \"cc\"] == [\"cc\", \"dd\"\
    , \"aaaa\", \"bbbb\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpi3whn9sp.jl:32\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpi3whn9sp.jl:25\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # your code\
    \ here\n    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpdz5cin1h.jl:24\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"aa\", \"a\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpdz5cin1h.jl:24\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdz5cin1h.jl:23\ntest set: Test Failed at /tmp/tmpdz5cin1h.jl:25\n\
    \  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\n   Evaluated: [\"school\", \"AI\", \"asdf\", \"b\"] == [\"\
    AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpdz5cin1h.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdz5cin1h.jl:23\ntest set: Test Failed at /tmp/tmpdz5cin1h.jl:26\n\
    \  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"d\", \"b\", \"c\", \"a\"] == String[]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpdz5cin1h.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdz5cin1h.jl:23\ntest set: Test Failed at /tmp/tmpdz5cin1h.jl:27\n\
    \  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\n   Evaluated: [\"d\", \"dcba\", \"abcd\", \"a\"] == [\"abcd\", \"dcba\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpdz5cin1h.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdz5cin1h.jl:23\ntest set: Test Failed at /tmp/tmpdz5cin1h.jl:29\n\
    \  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdz5cin1h.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdz5cin1h.jl:23\ntest set: Test Failed at /tmp/tmpdz5cin1h.jl:30\n\
    \  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]\
    \ == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpdz5cin1h.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdz5cin1h.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdz5cin1h.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    lst_sorted\
    \ = sort(lst, by=x->length(x))\n    lst_sorted = sort(lst_sorted, by=x->x)\n \
    \   lst_sorted = lst_sorted[1:2:end]\n    return lst_sorted\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq8rphk1v.jl:26\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aaa\"] == [\"aa\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpq8rphk1v.jl:26\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq8rphk1v.jl:25\ntest set: Test Failed at /tmp/tmpq8rphk1v.jl:27\n\
    \  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\n   Evaluated: [\"AI\", \"b\"] == [\"AI\", \"asdf\", \"school\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpq8rphk1v.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq8rphk1v.jl:25\ntest set: Test Failed at /tmp/tmpq8rphk1v.jl:28\n\
    \  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"c\"] == String[]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpq8rphk1v.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq8rphk1v.jl:25\ntest set: Test Failed at /tmp/tmpq8rphk1v.jl:29\n\
    \  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\n   Evaluated: [\"a\", \"d\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpq8rphk1v.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq8rphk1v.jl:25\ntest set: Test Failed at /tmp/tmpq8rphk1v.jl:30\n\
    \  Expression: candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"\
    ]\n   Evaluated: [\"AI\", \"au\"] == [\"AI\", \"ai\", \"au\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpq8rphk1v.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq8rphk1v.jl:25\ntest set: Test Failed at /tmp/tmpq8rphk1v.jl:31\n\
    \  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"b\", \"c\"] == String[]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpq8rphk1v.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq8rphk1v.jl:25\ntest set: Test Failed at /tmp/tmpq8rphk1v.jl:32\n\
    \  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"aaaa\", \"cc\"] == [\"cc\", \"dd\"\
    , \"aaaa\", \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpq8rphk1v.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq8rphk1v.jl:25\nTest Summary: | Fail  Total\n\
    test set      |    7      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq8rphk1v.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # sort by\
    \ length\n    sorted_lst = sort(lst, by=length)\n    # sort by alphabet\n    sorted_lst\
    \ = sort(sorted_lst)\n    return sorted_lst\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpokoh7vid.jl:27\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpokoh7vid.jl:27\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpokoh7vid.jl:26\ntest set: Test Failed at /tmp/tmpokoh7vid.jl:28\n\
    \  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\n   Evaluated: [\"AI\", \"asdf\", \"b\", \"school\"] == [\"\
    AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpokoh7vid.jl:28\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpokoh7vid.jl:26\ntest set: Test Failed at /tmp/tmpokoh7vid.jl:29\n\
    \  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"b\", \"c\", \"d\"] == String[]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpokoh7vid.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpokoh7vid.jl:26\ntest set: Test Failed at /tmp/tmpokoh7vid.jl:30\n\
    \  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\n   Evaluated: [\"a\", \"abcd\", \"d\", \"dcba\"] == [\"abcd\", \"dcba\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpokoh7vid.jl:30\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpokoh7vid.jl:26\ntest set: Test Failed at /tmp/tmpokoh7vid.jl:32\n\
    \  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"a\", \"b\", \"b\", \"c\", \"c\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpokoh7vid.jl:32\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpokoh7vid.jl:26\ntest set: Test Failed at /tmp/tmpokoh7vid.jl:33\n\
    \  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"]\
    \ == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpokoh7vid.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpokoh7vid.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpokoh7vid.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    lst_len =\
    \ length(lst)\n    lst_new = []\n    for i in 1:lst_len\n        if length(lst[i])\
    \ % 2 == 0\n            push!(lst_new, lst[i])\n        end\n    end\n    sort(lst_new)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_zbnl3en.jl:36\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp_zbnl3en.jl:36\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_zbnl3en.jl:29\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_zbnl3en.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # lst = [\"\
    aa\", \"a\", \"aaa\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\"]\n    # lst\
    \ = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"ab\"]\n    # lst = [\"ab\", \"a\"\
    , \"aaa\", \"cd\", \"a\", \"ab\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"\
    a\", \"a\", \"a\", \"a\", \"a\", \"a\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnkzq865u.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpnkzq865u.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpnkzq865u.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    new_lst =\
    \ []\n    for i in lst\n        if length(i) % 2 == 0\n            push!(new_lst,\
    \ i)\n        end\n    end\n    return sort(new_lst)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"\
    aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\",\
    \ \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"abcd\"\
    , \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"au\"\
    ]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptzz4f8hs.jl:35\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmptzz4f8hs.jl:35\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptzz4f8hs.jl:28\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptzz4f8hs.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # your code\
    \ here\n    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp9j2nf0hx.jl:24\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"aa\", \"a\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp9j2nf0hx.jl:24\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9j2nf0hx.jl:23\ntest set: Test Failed at /tmp/tmp9j2nf0hx.jl:25\n\
    \  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\n   Evaluated: [\"school\", \"AI\", \"asdf\", \"b\"] == [\"\
    AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp9j2nf0hx.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9j2nf0hx.jl:23\ntest set: Test Failed at /tmp/tmp9j2nf0hx.jl:26\n\
    \  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"d\", \"b\", \"c\", \"a\"] == String[]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp9j2nf0hx.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9j2nf0hx.jl:23\ntest set: Test Failed at /tmp/tmp9j2nf0hx.jl:27\n\
    \  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\n   Evaluated: [\"d\", \"dcba\", \"abcd\", \"a\"] == [\"abcd\", \"dcba\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmp9j2nf0hx.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9j2nf0hx.jl:23\ntest set: Test Failed at /tmp/tmp9j2nf0hx.jl:29\n\
    \  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9j2nf0hx.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9j2nf0hx.jl:23\ntest set: Test Failed at /tmp/tmp9j2nf0hx.jl:30\n\
    \  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]\
    \ == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp9j2nf0hx.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9j2nf0hx.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9j2nf0hx.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # Sort the\
    \ list by length of each word\n    sorted_lst = sort(lst, by=x->length(x))\n \
    \   # Filter the list by even length words\n    even_lst = filter(x->length(x)%2==0,\
    \ sorted_lst)\n    # Sort the list alphabetically\n    sorted_even_lst = sort(even_lst)\n\
    \    return sorted_even_lst\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmp8f29deyw.jl:35\\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\\n\
    \   Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp8f29deyw.jl:35\\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp8f29deyw.jl:28\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # sort the\
    \ list by length\n    sorted_lst = sort(lst, by=length)\n    # get the length\
    \ of the shortest string\n    shortest_length = length(sorted_lst[1])\n    # filter\
    \ out the strings that are not the shortest length\n    return filter(x -> length(x)\
    \ == shortest_length, sorted_lst)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmphl2_1ggw.jl:28\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\"] == [\"aa\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphl2_1ggw.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphl2_1ggw.jl:27\ntest set: Test Failed at /tmp/tmphl2_1ggw.jl:29\n\
    \  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\n   Evaluated: [\"b\"] == [\"AI\", \"asdf\", \"school\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmphl2_1ggw.jl:29\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphl2_1ggw.jl:27\ntest set: Test Failed at /tmp/tmphl2_1ggw.jl:30\n\
    \  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"d\", \"b\", \"c\", \"a\"] == String[]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmphl2_1ggw.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphl2_1ggw.jl:27\ntest set: Test Failed at /tmp/tmphl2_1ggw.jl:31\n\
    \  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\n   Evaluated: [\"d\", \"a\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmphl2_1ggw.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphl2_1ggw.jl:27\ntest set: Test Failed at /tmp/tmphl2_1ggw.jl:33\n\
    \  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphl2_1ggw.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphl2_1ggw.jl:27\ntest set: Test Failed at /tmp/tmphl2_1ggw.jl:34\n\
    \  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"dd\", \"cc\"] == [\"cc\", \"dd\",\
    \ \"aaaa\", \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmphl2_1ggw.jl:34\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphl2_1ggw.jl:27\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphl2_1ggw.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    lst_len =\
    \ length(lst)\n    lst_len_odd = lst_len % 2\n    if lst_len_odd == 0\n      \
    \  return lst\n    else\n        return lst[1:lst_len-1]\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp5ihcwxz5.jl:29\\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\\n   Evaluated: [\"aa\", \"a\"] == [\"aa\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp5ihcwxz5.jl:29\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp5ihcwxz5.jl:28\\ntest set: Test Failed at /tmp/tmp5ihcwxz5.jl:30\\\
    n  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\\n   Evaluated: [\"school\", \"AI\", \"asdf\", \"b\"] == [\"\
    AI\", \"asdf\", \"school\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp5ihcwxz5.jl:30\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp5ihcwxz5.jl:28\\ntest set: Test Failed at /tmp/tmp5ihcwxz5.jl:31\\\
    n  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\\\
    n   Evaluated: [\"d\", \"b\", \"c\", \"a\"] == String[]\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmp5ihcwxz5.jl:31\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp5ihcwxz5.jl:28\\ntest set: Test Failed at /tmp/tmp5ihcwxz5.jl:32\\\
    n  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\\n   Evaluated: [\"d\", \"dcba\", \"abcd\", \"a\"] == [\"abcd\", \"dcba\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp5ihcwxz5.jl:32\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp5ihcwxz5.jl:28\\ntest set: Test Failed at /tmp/tmp5ihcwxz5.jl:33\\\
    n  Expression: candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"\
    ]\\n   Evaluated: [\"AI\", \"ai\"] == [\"AI\", \"ai\", \"au\"]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp5ihcwxz5.jl:33\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp5ihcwxz5.jl:28\\ntest set: Test Failed at /tmp/tmp5ihcwxz5.jl:34\\\
    n  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\\\
    n   Evaluated: [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"] == String[]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp5ihcwxz5.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp5ihcwxz5.jl:28\\ntest set: Test Failed at /tmp/tmp5ihcwxz5.jl:35\\\
    n  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\\n   Evaluated: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    ] == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmp5ihcwxz5.jl:35\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp5ihcwxz5.jl:28\\nTest Summary: | Fail  Total\\\
    ntest set      |    7      7\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # lst = [\"\
    aa\", \"a\", \"aaa\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\"]\n    # lst\
    \ = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"]\n    # lst\
    \ = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"\
    a\", \"aaa\", \"cd\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"\
    a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\",\
    \ \"cd\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\"\
    , \"a\", \"aaa\", \"cd\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\"\
    , \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"]\n  \
    \  # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"\
    ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"\
    ]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"\
    , \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\"\
    , \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"\
    cd\", \"ab\", \"a\", \"aaa\", \"cd\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"\
    cd\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmzcitf3t.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpmzcitf3t.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpmzcitf3t.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t\
    @test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "b'test set: Error During Test at /tmp/tmp_kmgw0z2.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\\\
    n  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Array{String,1}\\n  Closest candidates are:\\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] sorted_list_sum(::Array{String,1}) at /tmp/tmp_kmgw0z2.jl:17\\\
    n   [2] top-level scope at /tmp/tmp_kmgw0z2.jl:23\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp_kmgw0z2.jl:22\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp_kmgw0z2.jl:24\\n  Test threw exception\\n  Expression: candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Array{String,1}\\\
    n  Closest candidates are:\\n    convert(::Type{Array{String,1}}, !Matched::LibGit2.StrArrayStruct)\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] sorted_list_sum(::Array{String,1}) at /tmp/tmp_kmgw0z2.jl:17\\\
    n   [2] top-level scope at /tmp/tmp_kmgw0z2.jl:24\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp_kmgw0z2.jl:22\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp_kmgw0z2.jl:25\\n  Test threw exception\\n  Expression: candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{String,1}\\n  Closest candidates\
    \ are:\\n    convert(::Type{Array{String,1}}, !Matched::LibGit2.StrArrayStruct)\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] sorted_list_sum(::Array{String,1}) at /tmp/tmp_kmgw0z2.jl:17\\\
    n   [2] top-level scope at /tmp/tmp_kmgw0z2.jl:25\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp_kmgw0z2.jl:22\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp_kmgw0z2.jl:26\\n  Test threw exception\\n  Expression: candidate([\"\
    d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\\n  MethodError: Cannot\
    \ `convert` an object of type Nothing to an object of type Array{String,1}\\n\
    \  Closest candidates are:\\n    convert(::Type{Array{String,1}}, !Matched::LibGit2.StrArrayStruct)\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] sorted_list_sum(::Array{String,1}) at /tmp/tmp_kmgw0z2.jl:17\\\
    n   [2] top-level scope at /tmp/tmp_kmgw0z2.jl:26\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp_kmgw0z2.jl:22\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp_kmgw0z2.jl:27\\n  Test threw exception\\n  Expression: candidate([\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Array{String,1}\\n  Closest candidates\
    \ are:\\n    convert(::Type{Array{String,1}}, !Matched::LibGit2.StrArrayStruct)\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] sorted_list_sum(::Array{String,1}) at /tmp/tmp_kmgw0z2.jl:17\\\
    n   [2] top-level scope at /tmp/tmp_kmgw0z2.jl:27\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp_kmgw0z2.jl:22\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp_kmgw0z2.jl:28\\n  Test threw exception\\n  Expression: candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Array{String,1}\\\
    n  Closest candidates are:\\n    convert(::Type{Array{String,1}}, !Matched::LibGit2.StrArrayStruct)\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] sorted_list_sum(::Array{String,1}) at /tmp/tmp_kmgw0z2.jl:17\\\
    n   [2] top-level scope at /tmp/tmp_kmgw0z2.jl:28\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp_kmgw0z2.jl:22\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp_kmgw0z2.jl:29\\n  Test threw exception\\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Array{String,1}\\n  Closest candidates are:\\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\\\
    n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] sorted_list_sum(::Array{String,1}) at /tmp/tmp_kmgw0z2.jl:17\\\
    n   [2] top-level scope at /tmp/tmp_kmgw0z2.jl:29\\n   [3] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [4] top-level scope at /tmp/tmp_kmgw0z2.jl:22\\n  \\nTest Summary: | Error\
    \  Total\\ntest set      |     7      7\\n'"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # remove odd\
    \ length strings\n    lst = [x for x in lst if length(x) % 2 == 0]\n    # sort\
    \ by length\n    lst = sort(lst, by=length)\n    # sort by alphabetical order\n\
    \    lst = sort(lst)\n    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmpj5wg6kc7.jl:35\\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\\n\
    \   Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpj5wg6kc7.jl:35\\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpj5wg6kc7.jl:28\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    6     1      7\\n'"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmpj5wg6kc7.jl:26\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    return sort(filter(x\
    \ -> length(x) % 2 == 0, lst))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpug4wsgly.jl:29\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpug4wsgly.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpug4wsgly.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpug4wsgly.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    #lst = [\"\
    aa\", \"a\", \"aaa\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\"]\n    #lst =\
    \ [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"]\n    #lst =\
    \ [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"\
    a\", \"aaa\", \"cd\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"\
    a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\",\
    \ \"cd\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\"\
    , \"a\", \"aaa\", \"cd\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\"\
    , \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"]\n  \
    \  #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"\
    ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"\
    ]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"\
    , \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\"\
    , \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"\
    cd\", \"ab\", \"a\", \"aaa\", \"cd\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"\
    cd\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpb1mw6enu.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpb1mw6enu.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpb1mw6enu.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # sort by\
    \ length\n    lst = sort(lst, by=length)\n    # remove odd length strings\n  \
    \  lst = filter(x -> length(x) % 2 == 0, lst)\n    # sort alphabetically\n   \
    \ lst = sort(lst)\n    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpc02d80f8.jl:35\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpc02d80f8.jl:35\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc02d80f8.jl:28\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc02d80f8.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    return sort(lst,\
    \ by=x->(length(x), x))\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp0a_qi5sf.jl:23\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp0a_qi5sf.jl:23\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0a_qi5sf.jl:22\ntest set: Test Failed at /tmp/tmp0a_qi5sf.jl:24\n\
    \  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\n   Evaluated: [\"b\", \"AI\", \"asdf\", \"school\"] == [\"\
    AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp0a_qi5sf.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0a_qi5sf.jl:22\ntest set: Test Failed at /tmp/tmp0a_qi5sf.jl:25\n\
    \  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"b\", \"c\", \"d\"] == String[]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp0a_qi5sf.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0a_qi5sf.jl:22\ntest set: Test Failed at /tmp/tmp0a_qi5sf.jl:26\n\
    \  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\n   Evaluated: [\"a\", \"d\", \"abcd\", \"dcba\"] == [\"abcd\", \"dcba\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmp0a_qi5sf.jl:26\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0a_qi5sf.jl:22\ntest set: Test Failed at /tmp/tmp0a_qi5sf.jl:28\n\
    \  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"a\", \"b\", \"b\", \"c\", \"c\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0a_qi5sf.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0a_qi5sf.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     5      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0a_qi5sf.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # sort the\
    \ list by length\n    sorted_lst = sort(lst, by=length)\n    # filter out odd\
    \ length strings\n    filtered_lst = filter(x -> length(x) % 2 == 0, sorted_lst)\n\
    \    return filtered_lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpbl4noiqo.jl:30\n  Expression: candidate([\"\
    d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"dcba\"\
    , \"abcd\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpbl4noiqo.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbl4noiqo.jl:26\ntest set: Test Failed at /tmp/tmpbl4noiqo.jl:33\n\
    \  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"dd\", \"cc\", \"aaaa\", \"bbbb\"]\
    \ == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpbl4noiqo.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbl4noiqo.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbl4noiqo.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    lst = sort(lst,\
    \ by = length)\n    lst = sort(lst, by = x -> x[1])\n    return lst\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9eubq10k.jl:25\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp9eubq10k.jl:25\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9eubq10k.jl:24\ntest set: Test Failed at /tmp/tmp9eubq10k.jl:26\n\
    \  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\n   Evaluated: [\"AI\", \"asdf\", \"b\", \"school\"] == [\"\
    AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp9eubq10k.jl:26\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9eubq10k.jl:24\ntest set: Test Failed at /tmp/tmp9eubq10k.jl:27\n\
    \  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"b\", \"c\", \"d\"] == String[]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp9eubq10k.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9eubq10k.jl:24\ntest set: Test Failed at /tmp/tmp9eubq10k.jl:28\n\
    \  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\n   Evaluated: [\"a\", \"abcd\", \"d\", \"dcba\"] == [\"abcd\", \"dcba\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmp9eubq10k.jl:28\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9eubq10k.jl:24\ntest set: Test Failed at /tmp/tmp9eubq10k.jl:30\n\
    \  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"a\", \"b\", \"b\", \"c\", \"c\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9eubq10k.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9eubq10k.jl:24\ntest set: Test Failed at /tmp/tmp9eubq10k.jl:31\n\
    \  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"]\
    \ == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp9eubq10k.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9eubq10k.jl:24\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9eubq10k.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # lst = [\"\
    aa\", \"a\", \"aaa\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\"]\n    # lst\
    \ = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\"]\n    # lst = [\"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"a\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\"\
    , \"a\", \"aaa\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\"\
    , \"aaa\", \"cd\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\"\
    , \"aaa\", \"cd\", \"ab\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\"\
    , \"a\", \"aaa\", \"cd\", \"ab\", \"a\"]\n    # lst = [\"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"]\n    # lst =\
    \ [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"\
    a\", \"aaa\", \"cd\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"\
    a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\"]\n    # lst = [\"\
    ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\", \"ab\", \"a\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"\
    ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"\
    cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"]\n    # lst\
    \ = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\nusing Test\n\
    \n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4t6in3dx.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp4t6in3dx.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp4t6in3dx.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    lst_len =\
    \ length(lst)\n    lst_len_odd = 0\n    for i in 1:lst_len\n        if length(lst[i])\
    \ % 2 == 1\n            lst_len_odd += 1\n        end\n    end\n    lst_len_even\
    \ = lst_len - lst_len_odd\n    lst_even = Vector{String}(undef, lst_len_even)\n\
    \    lst_odd = Vector{String}(undef, lst_len_odd)\n    lst_even_index = 1\n  \
    \  lst_odd_index = 1\n    for i in 1:lst_len\n        if length(lst[i]) % 2 ==\
    \ 1\n            lst_odd[lst_odd_index] = lst[i]\n            lst_odd_index +=\
    \ 1\n        else\n            lst_even[lst_even_index] = lst[i]\n           \
    \ lst_even_index += 1\n        end\n    end\n    sorted_lst_even = sort(lst_even)\n\
    \    sorted_lst_odd = sort(lst_odd)\n    return sorted_lst_even\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl0p3b85h.jl:52\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpl0p3b85h.jl:52\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl0p3b85h.jl:45\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl0p3b85h.jl:43\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    lst_new =\
    \ []\n    for i in lst\n        if length(i) % 2 == 0\n            push!(lst_new,\
    \ i)\n        end\n    end\n    sort(lst_new)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpgimawp4t.jl:35\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpgimawp4t.jl:35\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgimawp4t.jl:28\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgimawp4t.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # lst = [\"\
    aa\", \"a\", \"aaa\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\"]\n    # lst\
    \ = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"aaa\"]\n    # lst = [\"ab\", \"\
    a\", \"aaa\", \"cd\", \"a\", \"aaa\", \"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"\
    aaa\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"aaa\", \"ab\", \"\
    a\", \"aaa\", \"cd\", \"a\", \"aaa\", \"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"\
    aaa\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"aaa\", \"ab\", \"\
    a\", \"aaa\", \"cd\", \"a\", \"aaa\", \"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"\
    aaa\", \"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"aaa\"]\n    # lst = [\"ab\", \"\
    a\", \"aaa\", \"cd\", \"a\", \"aaa\", \"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"\
    aaa\", \"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"aaa\", \"ab\", \"a\", \"aaa\"\
    , \"cd\", \"a\", \"aaa\", \"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"aaa\"]\n  \
    \  # lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"aaa\", \"ab\", \"a\", \"\
    aaa\", \"cd\", \"a\", \"aaa\", \"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"aaa\"\
    , \"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"aaa\", \"ab\", \"a\", \"aaa\", \"cd\"\
    , \"a\", \"aaa\", \"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"aaa\"]\n    # lst =\
    \ [\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"aaa\", \"ab\", \"a\", \"aaa\", \"\
    cd\", \"a\", \"aaa\", \"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"aaa\", \"ab\",\
    \ \"a\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgixlk6d6.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpgixlk6d6.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpgixlk6d6.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # TODO: Implement\
    \ this function\n    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpn77d71s2.jl:24\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"aa\", \"a\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpn77d71s2.jl:24\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn77d71s2.jl:23\ntest set: Test Failed at /tmp/tmpn77d71s2.jl:25\n\
    \  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\n   Evaluated: [\"school\", \"AI\", \"asdf\", \"b\"] == [\"\
    AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpn77d71s2.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn77d71s2.jl:23\ntest set: Test Failed at /tmp/tmpn77d71s2.jl:26\n\
    \  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"d\", \"b\", \"c\", \"a\"] == String[]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpn77d71s2.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn77d71s2.jl:23\ntest set: Test Failed at /tmp/tmpn77d71s2.jl:27\n\
    \  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\n   Evaluated: [\"d\", \"dcba\", \"abcd\", \"a\"] == [\"abcd\", \"dcba\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpn77d71s2.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn77d71s2.jl:23\ntest set: Test Failed at /tmp/tmpn77d71s2.jl:29\n\
    \  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn77d71s2.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn77d71s2.jl:23\ntest set: Test Failed at /tmp/tmpn77d71s2.jl:30\n\
    \  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]\
    \ == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpn77d71s2.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn77d71s2.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn77d71s2.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # create a\
    \ new list\n    new_lst = []\n    # iterate over the list\n    for i in lst\n\
    \        # if the length of the string is even\n        if length(i) % 2 == 0\n\
    \            # append the string to the new list\n            push!(new_lst, i)\n\
    \        end\n    end\n    # sort the list by length and alphabetically\n    sort(new_lst,\
    \ by = x -> (length(x), x))\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # remove all\
    \ odd length strings\n    lst = filter(x -> length(x) % 2 == 0, lst)\n    # sort\
    \ by length\n    sort!(lst, by = x -> length(x))\n    return lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9a7w5khm.jl:30\n  Expression: candidate([\"\
    d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"dcba\"\
    , \"abcd\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp9a7w5khm.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9a7w5khm.jl:26\ntest set: Test Failed at /tmp/tmp9a7w5khm.jl:33\n\
    \  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"dd\", \"cc\", \"aaaa\", \"bbbb\"]\
    \ == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp9a7w5khm.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9a7w5khm.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9a7w5khm.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # remove all\
    \ odd length strings\n    lst = [x for x in lst if length(x) % 2 == 0]\n    #\
    \ sort the list by length\n    lst = sort(lst, by=length)\n    return lst\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkpx7dkwr.jl:30\n  Expression: candidate([\"\
    d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"dcba\"\
    , \"abcd\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpkpx7dkwr.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkpx7dkwr.jl:26\ntest set: Test Failed at /tmp/tmpkpx7dkwr.jl:33\n\
    \  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"dd\", \"cc\", \"aaaa\", \"bbbb\"]\
    \ == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpkpx7dkwr.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkpx7dkwr.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkpx7dkwr.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # sort by\
    \ length\n    sorted_lst = sort(lst, by=length)\n    # filter out odd length strings\n\
    \    filtered_lst = filter(x -> length(x) % 2 == 0, sorted_lst)\n    # sort alphabetically\n\
    \    sorted_filtered_lst = sort(filtered_lst)\n    return sorted_filtered_lst\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp97qz9y4y.jl:35\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp97qz9y4y.jl:35\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp97qz9y4y.jl:28\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp97qz9y4y.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # your code\
    \ here\n    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmpn49iy65c.jl:24\\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\\n   Evaluated: [\"aa\", \"a\", \"aaa\"] ==\
    \ [\"aa\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpn49iy65c.jl:24\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpn49iy65c.jl:23\\ntest set: Test Failed at /tmp/tmpn49iy65c.jl:25\\\
    n  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\\n   Evaluated: [\"school\", \"AI\", \"asdf\", \"b\"] == [\"\
    AI\", \"asdf\", \"school\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpn49iy65c.jl:25\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpn49iy65c.jl:23\\ntest set: Test Failed at /tmp/tmpn49iy65c.jl:26\\\
    n  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\\\
    n   Evaluated: [\"d\", \"b\", \"c\", \"a\"] == String[]\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmpn49iy65c.jl:26\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpn49iy65c.jl:23\\ntest set: Test Failed at /tmp/tmpn49iy65c.jl:27\\\
    n  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\\n   Evaluated: [\"d\", \"dcba\", \"abcd\", \"a\"] == [\"abcd\", \"dcba\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpn49iy65c.jl:27\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpn49iy65c.jl:23\\ntest set: Test Failed at /tmp/tmpn49iy65c.jl:29\\\
    n  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\\\
    n   Evaluated: [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"] == String[]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpn49iy65c.jl:29\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpn49iy65c.jl:23\\ntest set: Test Failed at /tmp/tmpn49iy65c.jl:30\\\
    n  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\\n   Evaluated: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    ] == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpn49iy65c.jl:30\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpn49iy65c.jl:23\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    1     6      7\\n'"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # sort the\
    \ list by length of the strings\n    sorted_lst = sort(lst, by=length)\n    #\
    \ create a new list to store the result\n    new_lst = []\n    # loop through\
    \ the sorted list\n    for i in 1:length(sorted_lst)\n        # if the length\
    \ of the string is even, append it to the new list\n        if length(sorted_lst[i])\
    \ % 2 == 0\n            push!(new_lst, sorted_lst[i])\n        end\n    end\n\
    \    # return the new list\n    return new_lst\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpr9w605ia.jl:38\n  Expression: candidate([\"\
    d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"dcba\"\
    , \"abcd\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpr9w605ia.jl:38\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr9w605ia.jl:34\ntest set: Test Failed at /tmp/tmpr9w605ia.jl:41\n\
    \  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"dd\", \"cc\", \"aaaa\", \"bbbb\"]\
    \ == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpr9w605ia.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr9w605ia.jl:34\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr9w605ia.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # remove all\
    \ odd length strings\n    lst = filter(x -> length(x) % 2 == 0, lst)\n    # sort\
    \ by length\n    lst = sort(lst, by = length)\n    # sort by alphabetical order\n\
    \    lst = sort(lst)\n    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmprcpsi7ew.jl:35\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmprcpsi7ew.jl:35\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprcpsi7ew.jl:28\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprcpsi7ew.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    lst_len =\
    \ length(lst)\n    lst_len_odd = lst_len % 2 == 1\n    if lst_len_odd\n      \
    \  return lst\n    else\n        return lst[1:end-1]\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpuwhk1w2n.jl:29\\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\\n   Evaluated: [\"aa\", \"a\", \"aaa\"] ==\
    \ [\"aa\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpuwhk1w2n.jl:29\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpuwhk1w2n.jl:28\\ntest set: Test Failed at /tmp/tmpuwhk1w2n.jl:30\\\
    n  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\\n   Evaluated: [\"school\", \"AI\", \"asdf\"] == [\"AI\"\
    , \"asdf\", \"school\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpuwhk1w2n.jl:30\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpuwhk1w2n.jl:28\\ntest set: Test Failed at /tmp/tmpuwhk1w2n.jl:31\\\
    n  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\\\
    n   Evaluated: [\"d\", \"b\", \"c\"] == String[]\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmpuwhk1w2n.jl:31\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpuwhk1w2n.jl:28\\ntest set: Test Failed at /tmp/tmpuwhk1w2n.jl:32\\\
    n  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\\n   Evaluated: [\"d\", \"dcba\", \"abcd\"] == [\"abcd\", \"dcba\"]\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpuwhk1w2n.jl:32\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpuwhk1w2n.jl:28\\ntest set: Test Failed at /tmp/tmpuwhk1w2n.jl:34\\\
    n  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\\\
    n   Evaluated: [\"a\", \"b\", \"b\", \"c\", \"c\"] == String[]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpuwhk1w2n.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpuwhk1w2n.jl:28\\ntest set: Test Failed at /tmp/tmpuwhk1w2n.jl:35\\\
    n  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\\n   Evaluated: [\"aaaa\", \"bbbb\", \"dd\"] == [\"\
    cc\", \"dd\", \"aaaa\", \"bbbb\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpuwhk1w2n.jl:35\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpuwhk1w2n.jl:28\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    lst_sorted\
    \ = sort(lst, by = length)\n    lst_sorted = sort(lst_sorted, by = sort)\n   \
    \ lst_sorted = lst_sorted[1:2:end]\n    return lst_sorted\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxh59592q.jl:26\n  Test threw exception\n\
    \  Expression: candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n  MethodError:\
    \ no method matching sort(::String)\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:969\n    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] lt(::Base.Order.By{typeof(sort)}, ::String, ::String)\
    \ at ./ordering.jl:52\n   [2] sort! at ./sort.jl:480 [inlined]\n   [3] sort!(::Array{String,1},\
    \ ::Int64, ::Int64, ::Base.Sort.MergeSortAlg, ::Base.Order.By{typeof(sort)}, ::Array{String,1})\
    \ at ./sort.jl:565\n   [4] sort! at ./sort.jl:564 [inlined]\n   [5] sort! at ./sort.jl:655\
    \ [inlined]\n   [6] #sort!#7 at ./sort.jl:715 [inlined]\n   [7] #sort#8 at ./sort.jl:763\
    \ [inlined]\n   [8] sorted_list_sum(::Array{String,1}) at /tmp/tmpxh59592q.jl:17\n\
    \   [9] top-level scope at /tmp/tmpxh59592q.jl:26\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpxh59592q.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpxh59592q.jl:27\n  Test threw exception\n  Expression: candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n  MethodError:\
    \ no method matching sort(::String)\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:969\n    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] lt(::Base.Order.By{typeof(sort)}, ::String, ::String)\
    \ at ./ordering.jl:52\n   [2] sort! at ./sort.jl:480 [inlined]\n   [3] sort!(::Array{String,1},\
    \ ::Int64, ::Int64, ::Base.Sort.MergeSortAlg, ::Base.Order.By{typeof(sort)}, ::Array{String,1})\
    \ at ./sort.jl:565\n   [4] sort! at ./sort.jl:564 [inlined]\n   [5] sort! at ./sort.jl:655\
    \ [inlined]\n   [6] #sort!#7 at ./sort.jl:715 [inlined]\n   [7] #sort#8 at ./sort.jl:763\
    \ [inlined]\n   [8] sorted_list_sum(::Array{String,1}) at /tmp/tmpxh59592q.jl:17\n\
    \   [9] top-level scope at /tmp/tmpxh59592q.jl:27\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpxh59592q.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpxh59592q.jl:28\n  Test threw exception\n  Expression: candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n  MethodError: no method matching\
    \ sort(::String)\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:969\n    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] lt(::Base.Order.By{typeof(sort)}, ::String, ::String)\
    \ at ./ordering.jl:52\n   [2] sort! at ./sort.jl:480 [inlined]\n   [3] sort!(::Array{String,1},\
    \ ::Int64, ::Int64, ::Base.Sort.MergeSortAlg, ::Base.Order.By{typeof(sort)}, ::Array{String,1})\
    \ at ./sort.jl:565\n   [4] sort! at ./sort.jl:564 [inlined]\n   [5] sort! at ./sort.jl:655\
    \ [inlined]\n   [6] #sort!#7 at ./sort.jl:715 [inlined]\n   [7] #sort#8 at ./sort.jl:763\
    \ [inlined]\n   [8] sorted_list_sum(::Array{String,1}) at /tmp/tmpxh59592q.jl:17\n\
    \   [9] top-level scope at /tmp/tmpxh59592q.jl:28\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpxh59592q.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpxh59592q.jl:29\n  Test threw exception\n  Expression: candidate([\"\
    d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n  MethodError: no method\
    \ matching sort(::String)\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:969\n    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] lt(::Base.Order.By{typeof(sort)}, ::String, ::String)\
    \ at ./ordering.jl:52\n   [2] sort! at ./sort.jl:480 [inlined]\n   [3] sort!(::Array{String,1},\
    \ ::Int64, ::Int64, ::Base.Sort.MergeSortAlg, ::Base.Order.By{typeof(sort)}, ::Array{String,1})\
    \ at ./sort.jl:565\n   [4] sort! at ./sort.jl:564 [inlined]\n   [5] sort! at ./sort.jl:655\
    \ [inlined]\n   [6] #sort!#7 at ./sort.jl:715 [inlined]\n   [7] #sort#8 at ./sort.jl:763\
    \ [inlined]\n   [8] sorted_list_sum(::Array{String,1}) at /tmp/tmpxh59592q.jl:17\n\
    \   [9] top-level scope at /tmp/tmpxh59592q.jl:29\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpxh59592q.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpxh59592q.jl:30\n  Test threw exception\n  Expression: candidate([\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]\n  MethodError: no method matching\
    \ sort(::String)\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:969\n    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] lt(::Base.Order.By{typeof(sort)}, ::String, ::String)\
    \ at ./ordering.jl:52\n   [2] sort! at ./sort.jl:480 [inlined]\n   [3] sort!(::Array{String,1},\
    \ ::Int64, ::Int64, ::Base.Sort.MergeSortAlg, ::Base.Order.By{typeof(sort)}, ::Array{String,1})\
    \ at ./sort.jl:565\n   [4] sort! at ./sort.jl:564 [inlined]\n   [5] sort! at ./sort.jl:655\
    \ [inlined]\n   [6] #sort!#7 at ./sort.jl:715 [inlined]\n   [7] #sort#8 at ./sort.jl:763\
    \ [inlined]\n   [8] sorted_list_sum(::Array{String,1}) at /tmp/tmpxh59592q.jl:17\n\
    \   [9] top-level scope at /tmp/tmpxh59592q.jl:30\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpxh59592q.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpxh59592q.jl:31\n  Test threw exception\n  Expression: candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\n  MethodError:\
    \ no method matching sort(::String)\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:969\n    sort(!Matched::AbstractRange) at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti};\
    \ kws...) where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] lt(::Base.Order.By{typeof(sort)}, ::String, ::String)\
    \ at ./ordering.jl:52\n   [2] sort! at ./sort.jl:480 [inlined]\n   [3] sort!(::Array{String,1},\
    \ ::Int64, ::Int64, ::Base.Sort.MergeSortAlg, ::Base.Order.By{typeof(sort)}, ::Array{String,1})\
    \ at ./sort.jl:565\n   [4] sort! at ./sort.jl:564 [inlined]\n   [5] sort! at ./sort.jl:655\
    \ [inlined]\n   [6] #sort!#7 at ./sort.jl:715 [inlined]\n   [7] #sort#8 at ./sort.jl:763\
    \ [inlined]\n   [8] sorted_list_sum(::Array{String,1}) at /tmp/tmpxh59592q.jl:17\n\
    \   [9] top-level scope at /tmp/tmpxh59592q.jl:31\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpxh59592q.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpxh59592q.jl:32\n  Test threw exception\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \ MethodError: no method matching sort(::String)\n  Closest candidates are:\n\
    \    sort(!Matched::AbstractUnitRange) at range.jl:969\n    sort(!Matched::AbstractRange)\
    \ at range.jl:972\n    sort(!Matched::SparseArrays.SparseVector{Tv,Ti}; kws...)\
    \ where {Tv, Ti} at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/SparseArrays/src/sparsevector.jl:1914\n\
    \    ...\n  Stacktrace:\n   [1] lt(::Base.Order.By{typeof(sort)}, ::String, ::String)\
    \ at ./ordering.jl:52\n   [2] sort! at ./sort.jl:480 [inlined]\n   [3] sort!(::Array{String,1},\
    \ ::Int64, ::Int64, ::Base.Sort.MergeSortAlg, ::Base.Order.By{typeof(sort)}, ::Array{String,1})\
    \ at ./sort.jl:565\n   [4] sort! at ./sort.jl:564 [inlined]\n   [5] sort! at ./sort.jl:655\
    \ [inlined]\n   [6] #sort!#7 at ./sort.jl:715 [inlined]\n   [7] #sort#8 at ./sort.jl:763\
    \ [inlined]\n   [8] sorted_list_sum(::Array{String,1}) at /tmp/tmpxh59592q.jl:17\n\
    \   [9] top-level scope at /tmp/tmpxh59592q.jl:32\n   [10] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [11] top-level scope at /tmp/tmpxh59592q.jl:25\n  \nTest Summary: | Error\
    \  Total\ntest set      |     7      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxh59592q.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    lst = sort(lst,\
    \ by=length)\n    lst = sort(lst, by=x->x[1])\n    return lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi0z99jyz.jl:25\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpi0z99jyz.jl:25\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi0z99jyz.jl:24\ntest set: Test Failed at /tmp/tmpi0z99jyz.jl:26\n\
    \  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\n   Evaluated: [\"AI\", \"asdf\", \"b\", \"school\"] == [\"\
    AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpi0z99jyz.jl:26\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi0z99jyz.jl:24\ntest set: Test Failed at /tmp/tmpi0z99jyz.jl:27\n\
    \  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"b\", \"c\", \"d\"] == String[]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpi0z99jyz.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi0z99jyz.jl:24\ntest set: Test Failed at /tmp/tmpi0z99jyz.jl:28\n\
    \  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\n   Evaluated: [\"a\", \"abcd\", \"d\", \"dcba\"] == [\"abcd\", \"dcba\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpi0z99jyz.jl:28\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi0z99jyz.jl:24\ntest set: Test Failed at /tmp/tmpi0z99jyz.jl:30\n\
    \  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"a\", \"b\", \"b\", \"c\", \"c\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi0z99jyz.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi0z99jyz.jl:24\ntest set: Test Failed at /tmp/tmpi0z99jyz.jl:31\n\
    \  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"]\
    \ == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpi0z99jyz.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi0z99jyz.jl:24\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi0z99jyz.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    lst_len =\
    \ length(lst)\n    lst_odd = []\n    lst_even = []\n    for i in 1:lst_len\n \
    \       if length(lst[i]) % 2 == 0\n            push!(lst_even, lst[i])\n    \
    \    else\n            push!(lst_odd, lst[i])\n        end\n    end\n    sort!(lst_even)\n\
    \    sort!(lst_odd)\n    return lst_even\nend\nusing Test\n\n@testset begin\n\n\
    candidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmpok0bypc7.jl:41\\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\\n\
    \   Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpok0bypc7.jl:41\\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpok0bypc7.jl:34\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    #lst = [\"\
    aa\", \"a\", \"aaa\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\"]\n    #lst =\
    \ [\"ab\", \"a\", \"aaa\", \"cd\", \"aa\"]\n    #lst = [\"ab\", \"a\", \"aaa\"\
    , \"cd\", \"aa\", \"a\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"aa\",\
    \ \"a\", \"aaa\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"aa\", \"a\",\
    \ \"aaa\", \"cd\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"aa\", \"a\"\
    , \"aaa\", \"cd\", \"aa\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"aa\"\
    , \"a\", \"aaa\", \"cd\", \"aa\", \"a\"]\n    #lst = [\"ab\", \"a\", \"aaa\",\
    \ \"cd\", \"aa\", \"a\", \"aaa\", \"cd\", \"aa\", \"a\", \"aaa\"]\n    #lst =\
    \ [\"ab\", \"a\", \"aaa\", \"cd\", \"aa\", \"a\", \"aaa\", \"cd\", \"aa\", \"\
    a\", \"aaa\", \"cd\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"aa\", \"\
    a\", \"aaa\", \"cd\", \"aa\", \"a\", \"aaa\", \"cd\", \"aa\"]\n    #lst = [\"\
    ab\", \"a\", \"aaa\", \"cd\", \"aa\", \"a\", \"aaa\", \"cd\", \"aa\", \"a\", \"\
    aaa\", \"cd\", \"aa\", \"a\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"\
    aa\", \"a\", \"aaa\", \"cd\", \"aa\", \"a\", \"aaa\", \"cd\", \"aa\", \"a\", \"\
    aaa\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"aa\", \"a\", \"aaa\", \"\
    cd\", \"aa\", \"a\", \"aaa\", \"cd\", \"aa\", \"a\", \"aaa\", \"cd\"]\n    #lst\
    \ = [\"ab\", \"a\", \"aaa\", \"cd\", \"aa\", \"a\", \"aaa\", \"cd\nusing Test\n\
    \n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpak5itwgf.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpak5itwgf.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpak5itwgf.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # remove all\
    \ odd length strings\n    lst = filter(x -> length(x) % 2 == 0, lst)\n    # sort\
    \ by length\n    lst = sort(lst, by = length)\n    # sort by alphabet\n    lst\
    \ = sort(lst)\n    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmp1h1fvx6f.jl:35\\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\\n\
    \   Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp1h1fvx6f.jl:35\\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp1h1fvx6f.jl:28\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # sort the\
    \ list by length\n    sorted_lst = sort(lst, by=length)\n    # remove the odd\
    \ length strings\n    sorted_lst = [x for x in sorted_lst if length(x) % 2 ==\
    \ 0]\n    # sort the list alphabetically\n    sorted_lst = sort(sorted_lst)\n\
    \    return sorted_lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmpy2t9k9ha.jl:35\\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\\n\
    \   Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpy2t9k9ha.jl:35\\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpy2t9k9ha.jl:28\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # sort by\
    \ length\n    sorted_lst = sort(lst, by=length)\n    # remove duplicates\n   \
    \ sorted_lst = unique(sorted_lst)\n    # remove odd length strings\n    sorted_lst\
    \ = filter(x -> length(x) % 2 == 0, sorted_lst)\n    return sorted_lst\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd_d_o6v6.jl:32\n  Expression: candidate([\"\
    d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"dcba\"\
    , \"abcd\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpd_d_o6v6.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpd_d_o6v6.jl:28\ntest set: Test Failed at /tmp/tmpd_d_o6v6.jl:35\n\
    \  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"dd\", \"cc\", \"aaaa\", \"bbbb\"]\
    \ == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpd_d_o6v6.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpd_d_o6v6.jl:28\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd_d_o6v6.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    return sort(filter(x\
    \ -> length(x) % 2 == 0, lst))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpq7rcgy65.jl:29\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpq7rcgy65.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq7rcgy65.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq7rcgy65.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # sort by\
    \ length\n    sorted_list = sort(lst, by=length)\n    # sort by alphabet\n   \
    \ sorted_list = sort(sorted_list)\n    # remove odd length\n    sorted_list =\
    \ [x for x in sorted_list if length(x) % 2 == 0]\n    return sorted_list\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptxhoejzx.jl:35\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmptxhoejzx.jl:35\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptxhoejzx.jl:28\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptxhoejzx.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    lst_sorted\
    \ = sort(lst, by=length)\n    lst_sorted = sort(lst_sorted, by=x->x[1])\n    return\
    \ lst_sorted\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpiqk11ndh.jl:25\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aa\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpiqk11ndh.jl:25\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpiqk11ndh.jl:24\ntest set: Test Failed at /tmp/tmpiqk11ndh.jl:26\n\
    \  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\n   Evaluated: [\"AI\", \"asdf\", \"b\", \"school\"] == [\"\
    AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpiqk11ndh.jl:26\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpiqk11ndh.jl:24\ntest set: Test Failed at /tmp/tmpiqk11ndh.jl:27\n\
    \  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"b\", \"c\", \"d\"] == String[]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpiqk11ndh.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpiqk11ndh.jl:24\ntest set: Test Failed at /tmp/tmpiqk11ndh.jl:28\n\
    \  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\n   Evaluated: [\"a\", \"abcd\", \"d\", \"dcba\"] == [\"abcd\", \"dcba\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpiqk11ndh.jl:28\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpiqk11ndh.jl:24\ntest set: Test Failed at /tmp/tmpiqk11ndh.jl:30\n\
    \  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"a\", \"b\", \"b\", \"c\", \"c\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpiqk11ndh.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpiqk11ndh.jl:24\ntest set: Test Failed at /tmp/tmpiqk11ndh.jl:31\n\
    \  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"]\
    \ == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpiqk11ndh.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpiqk11ndh.jl:24\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiqk11ndh.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # sort by\
    \ length\n    sorted_lst = sort(lst, by=length)\n    # remove odd length strings\n\
    \    sorted_lst = [x for x in sorted_lst if length(x) % 2 == 0]\n    # sort alphabetically\n\
    \    sorted_lst = sort(sorted_lst)\n    return sorted_lst\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfslcljli.jl:35\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpfslcljli.jl:35\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfslcljli.jl:28\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfslcljli.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # sort by\
    \ length\n    lst = sort(lst, by=length)\n    # sort by alphabet\n    lst = sort(lst)\n\
    \    # remove odd length strings\n    lst = filter(x -> length(x) % 2 == 0, lst)\n\
    \    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpmefukdlc.jl:35\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpmefukdlc.jl:35\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmefukdlc.jl:28\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmefukdlc.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    lst = sort(lst,\
    \ by=length)\n    lst = sort(lst, by=length)\n    return lst\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpnzyz7py0.jl:25\\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\\n   Evaluated: [\"a\", \"aa\", \"aaa\"] ==\
    \ [\"aa\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpnzyz7py0.jl:25\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpnzyz7py0.jl:24\\ntest set: Test Failed at /tmp/tmpnzyz7py0.jl:26\\\
    n  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\\n   Evaluated: [\"b\", \"AI\", \"asdf\", \"school\"] == [\"\
    AI\", \"asdf\", \"school\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpnzyz7py0.jl:26\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpnzyz7py0.jl:24\\ntest set: Test Failed at /tmp/tmpnzyz7py0.jl:27\\\
    n  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\\\
    n   Evaluated: [\"d\", \"b\", \"c\", \"a\"] == String[]\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmpnzyz7py0.jl:27\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpnzyz7py0.jl:24\\ntest set: Test Failed at /tmp/tmpnzyz7py0.jl:28\\\
    n  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\\n   Evaluated: [\"d\", \"a\", \"dcba\", \"abcd\"] == [\"abcd\", \"dcba\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpnzyz7py0.jl:28\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpnzyz7py0.jl:24\\ntest set: Test Failed at /tmp/tmpnzyz7py0.jl:30\\\
    n  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\\\
    n   Evaluated: [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"] == String[]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpnzyz7py0.jl:30\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpnzyz7py0.jl:24\\ntest set: Test Failed at /tmp/tmpnzyz7py0.jl:31\\\
    n  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\\n   Evaluated: [\"dd\", \"cc\", \"aaaa\", \"bbbb\"\
    ] == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpnzyz7py0.jl:31\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpnzyz7py0.jl:24\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    1     6      7\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # sort the\
    \ list by length\n    sorted_lst = sort(lst, by=length)\n    # filter the list\
    \ by even length\n    even_lst = filter(x -> length(x) % 2 == 0, sorted_lst)\n\
    \    # sort the list alphabetically\n    sorted_even_lst = sort(even_lst)\n  \
    \  return sorted_even_lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpl1ymuu1f.jl:35\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpl1ymuu1f.jl:35\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl1ymuu1f.jl:28\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl1ymuu1f.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    new_lst =\
    \ []\n    for i in lst\n        if length(i) % 2 == 0\n            push!(new_lst,\
    \ i)\n        end\n    end\n    sort(new_lst)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpsaiuaswx.jl:35\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpsaiuaswx.jl:35\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsaiuaswx.jl:28\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsaiuaswx.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # your code\
    \ here\n    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp9nmipyqg.jl:24\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"aa\", \"a\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp9nmipyqg.jl:24\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9nmipyqg.jl:23\ntest set: Test Failed at /tmp/tmp9nmipyqg.jl:25\n\
    \  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\n   Evaluated: [\"school\", \"AI\", \"asdf\", \"b\"] == [\"\
    AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp9nmipyqg.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9nmipyqg.jl:23\ntest set: Test Failed at /tmp/tmp9nmipyqg.jl:26\n\
    \  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"d\", \"b\", \"c\", \"a\"] == String[]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp9nmipyqg.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9nmipyqg.jl:23\ntest set: Test Failed at /tmp/tmp9nmipyqg.jl:27\n\
    \  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\n   Evaluated: [\"d\", \"dcba\", \"abcd\", \"a\"] == [\"abcd\", \"dcba\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmp9nmipyqg.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9nmipyqg.jl:23\ntest set: Test Failed at /tmp/tmp9nmipyqg.jl:29\n\
    \  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9nmipyqg.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9nmipyqg.jl:23\ntest set: Test Failed at /tmp/tmp9nmipyqg.jl:30\n\
    \  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]\
    \ == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp9nmipyqg.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9nmipyqg.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9nmipyqg.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # sort by\
    \ length\n    sorted_lst = sort(lst, by=length)\n    # filter out odd length words\n\
    \    filtered_lst = filter(x -> length(x) % 2 == 0, sorted_lst)\n    # sort by\
    \ alphabetical order\n    sorted_filtered_lst = sort(filtered_lst)\n    return\
    \ sorted_filtered_lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmps8746vxh.jl:35\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmps8746vxh.jl:35\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps8746vxh.jl:28\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps8746vxh.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # your code\
    \ goes here\n    lst = filter(x -> length(x) % 2 == 0, lst)\n    sort(lst)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp9bxf3e5p.jl:31\\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\\n\
    \   Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmp9bxf3e5p.jl:31\\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp9bxf3e5p.jl:24\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    6     1      7\\n'"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmp9bxf3e5p.jl:22\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # sort by\
    \ length\n    sorted_lst = sort(lst, by=length)\n    # filter out odd length strings\n\
    \    filtered_lst = filter(x -> length(x) % 2 == 0, sorted_lst)\n    # sort by\
    \ alphabetical order\n    sorted_lst = sort(filtered_lst)\n    return sorted_lst\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa58zw9yj.jl:35\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpa58zw9yj.jl:35\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa58zw9yj.jl:28\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa58zw9yj.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    lst_new =\
    \ []\n    for i in lst\n        if length(i) % 2 == 0\n            push!(lst_new,\
    \ i)\n        end\n    end\n    return sort(lst_new)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"\
    aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\",\
    \ \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"abcd\"\
    , \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"au\"\
    ]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph33yoyqu.jl:35\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmph33yoyqu.jl:35\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph33yoyqu.jl:28\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph33yoyqu.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # your code\
    \ here\n    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpufmzv9bu.jl:24\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"aa\", \"a\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpufmzv9bu.jl:24\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpufmzv9bu.jl:23\ntest set: Test Failed at /tmp/tmpufmzv9bu.jl:25\n\
    \  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\n   Evaluated: [\"school\", \"AI\", \"asdf\", \"b\"] == [\"\
    AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpufmzv9bu.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpufmzv9bu.jl:23\ntest set: Test Failed at /tmp/tmpufmzv9bu.jl:26\n\
    \  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"d\", \"b\", \"c\", \"a\"] == String[]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpufmzv9bu.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpufmzv9bu.jl:23\ntest set: Test Failed at /tmp/tmpufmzv9bu.jl:27\n\
    \  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\n   Evaluated: [\"d\", \"dcba\", \"abcd\", \"a\"] == [\"abcd\", \"dcba\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpufmzv9bu.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpufmzv9bu.jl:23\ntest set: Test Failed at /tmp/tmpufmzv9bu.jl:29\n\
    \  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpufmzv9bu.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpufmzv9bu.jl:23\ntest set: Test Failed at /tmp/tmpufmzv9bu.jl:30\n\
    \  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]\
    \ == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpufmzv9bu.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpufmzv9bu.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpufmzv9bu.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # your code\
    \ here\n    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpfszf_hf2.jl:24\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"aa\", \"a\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpfszf_hf2.jl:24\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfszf_hf2.jl:23\ntest set: Test Failed at /tmp/tmpfszf_hf2.jl:25\n\
    \  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\n   Evaluated: [\"school\", \"AI\", \"asdf\", \"b\"] == [\"\
    AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpfszf_hf2.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfszf_hf2.jl:23\ntest set: Test Failed at /tmp/tmpfszf_hf2.jl:26\n\
    \  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"d\", \"b\", \"c\", \"a\"] == String[]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpfszf_hf2.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfszf_hf2.jl:23\ntest set: Test Failed at /tmp/tmpfszf_hf2.jl:27\n\
    \  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\n   Evaluated: [\"d\", \"dcba\", \"abcd\", \"a\"] == [\"abcd\", \"dcba\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpfszf_hf2.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfszf_hf2.jl:23\ntest set: Test Failed at /tmp/tmpfszf_hf2.jl:29\n\
    \  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfszf_hf2.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfszf_hf2.jl:23\ntest set: Test Failed at /tmp/tmpfszf_hf2.jl:30\n\
    \  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]\
    \ == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpfszf_hf2.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfszf_hf2.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfszf_hf2.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    new_lst =\
    \ []\n    for i in lst\n        if length(i) % 2 == 0\n            push!(new_lst,\
    \ i)\n        end\n    end\n    sort(new_lst)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpccbknsir.jl:35\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpccbknsir.jl:35\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpccbknsir.jl:28\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpccbknsir.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    lst = filter(x\
    \ -> length(x) % 2 == 0, lst)\n    sort(lst)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmpggwlni5_.jl:30\\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\\n\
    \   Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpggwlni5_.jl:30\\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpggwlni5_.jl:23\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # remove all\
    \ odd length strings\n    lst = filter(x -> length(x) % 2 == 0, lst)\n    # sort\
    \ by length\n    lst = sort(lst, by = length)\n    # sort by alphabet\n    lst\
    \ = sort(lst)\n    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp2hn_zx6w.jl:35\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp2hn_zx6w.jl:35\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2hn_zx6w.jl:28\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2hn_zx6w.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # sort by\
    \ length\n    sorted_lst = sort(lst, by=length)\n    # remove odd length strings\n\
    \    sorted_lst = filter(x -> length(x) % 2 == 0, sorted_lst)\n    # sort alphabetically\n\
    \    sorted_lst = sort(sorted_lst)\n    return sorted_lst\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfnitlao9.jl:35\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpfnitlao9.jl:35\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfnitlao9.jl:28\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfnitlao9.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # Create a\
    \ new vector to store the result\n    result = Vector{String}()\n    # Create\
    \ a dictionary to store the length of each word\n    word_length = Dict{Int, Vector{String}}()\n\
    \    # Iterate over the list of words\n    for word in lst\n        # Check if\
    \ the length of the word is already in the dictionary\n        if haskey(word_length,\
    \ length(word))\n            # If it is, append the word to the list of words\
    \ with that length\n            push!(word_length[length(word)], word)\n     \
    \   else\n            # If it is not, create a new list with that word\n     \
    \       word_length[length(word)] = [word]\n        end\n    end\n    # Iterate\
    \ over the dictionary\n    for (key, value) in word_length\n        # Check if\
    \ the length of the word is even\n        if key % 2 == 0\n            # If it\
    \ is, append the list of words with that length to the result\n            append!(result,\
    \ value)\n        end\n    end\n    # Sort the result\n    sort!(result)\n   \
    \ # Return the result\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmpr2pqg09k.jl:55\\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\\n\
    \   Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpr2pqg09k.jl:55\\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpr2pqg09k.jl:48\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # your code\
    \ here\n    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmpobp_ar7v.jl:24\\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\\n   Evaluated: [\"aa\", \"a\", \"aaa\"] ==\
    \ [\"aa\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpobp_ar7v.jl:24\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpobp_ar7v.jl:23\\ntest set: Test Failed at /tmp/tmpobp_ar7v.jl:25\\\
    n  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\\n   Evaluated: [\"school\", \"AI\", \"asdf\", \"b\"] == [\"\
    AI\", \"asdf\", \"school\"]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpobp_ar7v.jl:25\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpobp_ar7v.jl:23\\ntest set: Test Failed at /tmp/tmpobp_ar7v.jl:26\\\
    n  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\\\
    n   Evaluated: [\"d\", \"b\", \"c\", \"a\"] == String[]\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmpobp_ar7v.jl:26\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpobp_ar7v.jl:23\\ntest set: Test Failed at /tmp/tmpobp_ar7v.jl:27\\\
    n  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\\n   Evaluated: [\"d\", \"dcba\", \"abcd\", \"a\"] == [\"abcd\", \"dcba\"\
    ]\\nStacktrace:\\n [1] top-level scope at /tmp/tmpobp_ar7v.jl:27\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpobp_ar7v.jl:23\\ntest set: Test Failed at /tmp/tmpobp_ar7v.jl:29\\\
    n  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\\\
    n   Evaluated: [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"] == String[]\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpobp_ar7v.jl:29\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpobp_ar7v.jl:23\\ntest set: Test Failed at /tmp/tmpobp_ar7v.jl:30\\\
    n  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\\n   Evaluated: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    ] == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpobp_ar7v.jl:30\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpobp_ar7v.jl:23\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    1     6      7\\n'"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmpobp_ar7v.jl:21\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    #lst = [\"\
    aa\", \"a\", \"aaa\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\"]\n    #lst =\
    \ [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"]\n    #lst =\
    \ [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"\
    a\", \"aaa\", \"cd\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"\
    a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\",\
    \ \"cd\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\"\
    , \"a\", \"aaa\", \"cd\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\"\
    , \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"]\n  \
    \  #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"\
    ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"\
    ]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"\
    , \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\"\
    , \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"\
    cd\", \"ab\", \"a\", \"aaa\", \"cd\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"\
    cd\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3cbw0532.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp3cbw0532.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp3cbw0532.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # sort the\
    \ list by length\n    sorted_lst = sort(lst, by=length)\n    # remove the odd\
    \ length strings\n    sorted_lst = filter(x -> length(x) % 2 == 0, sorted_lst)\n\
    \    # sort the list alphabetically\n    sorted_lst = sort(sorted_lst)\n    return\
    \ sorted_lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpcf1hd4y1.jl:35\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpcf1hd4y1.jl:35\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcf1hd4y1.jl:28\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcf1hd4y1.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    lst = filter(x\
    \ -> length(x) % 2 == 0, lst)\n    sort(lst)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp2s96g86y.jl:30\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp2s96g86y.jl:30\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2s96g86y.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2s96g86y.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    lst_new =\
    \ []\n    for i in lst\n        if length(i) % 2 == 0\n            push!(lst_new,\
    \ i)\n        end\n    end\n    sort(lst_new)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpumua5xeo.jl:35\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpumua5xeo.jl:35\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpumua5xeo.jl:28\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpumua5xeo.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    lst = filter(x\
    \ -> length(x) % 2 == 0, lst)\n    sort(lst)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp5h_pwcrd.jl:30\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp5h_pwcrd.jl:30\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5h_pwcrd.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5h_pwcrd.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # Sort the\
    \ list by length of each word\n    sorted_lst = sort(lst, by=length)\n    # Filter\
    \ out the words with odd length\n    filtered_lst = filter(x -> length(x) % 2\
    \ == 0, sorted_lst)\n    return filtered_lst\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpujdp6y9n.jl:30\n  Expression: candidate([\"\
    d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n   Evaluated: [\"dcba\"\
    , \"abcd\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpujdp6y9n.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpujdp6y9n.jl:26\ntest set: Test Failed at /tmp/tmpujdp6y9n.jl:33\n\
    \  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"dd\", \"cc\", \"aaaa\", \"bbbb\"]\
    \ == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpujdp6y9n.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpujdp6y9n.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpujdp6y9n.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # Create a\
    \ new vector to store the result\n    result = Vector{String}()\n    # Create\
    \ a dictionary to store the length of each word\n    # The key is the length of\
    \ the word, the value is the word\n    dict = Dict{Int, String}()\n    # Loop\
    \ through the list\n    for i in lst\n        # If the length of the word is not\
    \ in the dictionary\n        if !haskey(dict, length(i))\n            # Add the\
    \ length of the word and the word to the dictionary\n            dict[length(i)]\
    \ = i\n        # If the length of the word is in the dictionary\n        else\n\
    \            # If the word is not in the dictionary\n            if !haskey(dict,\
    \ i)\n                # Add the word to the dictionary\n                dict[i]\
    \ = i\n            end\n        end\n    end\n    # Loop through the dictionary\n\
    \    for (k, v) in dict\n        # If the key is even\n        if k % 2 == 0\n\
    \            # Add the value to the result\n            push!(result, v)\n   \
    \     end\n    end\n    # Sort the result\n    sort!(result)\n    # Return the\
    \ result\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp0eb4wy0c.jl:56\n  Test threw exception\n\
    \  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n\
    \  MethodError: Cannot `convert` an object of type String to an object of type\
    \ Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at pointer.jl:23\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(::Dict{Int64,String}, ::String, ::String)\
    \ at ./dict.jl:372\n   [2] sorted_list_sum(::Array{String,1}) at /tmp/tmp0eb4wy0c.jl:32\n\
    \   [3] top-level scope at /tmp/tmp0eb4wy0c.jl:56\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp0eb4wy0c.jl:53\n  \ntest set: Error During\
    \ Test at /tmp/tmp0eb4wy0c.jl:57\n  Test threw exception\n  Expression: candidate([\"\
    d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n  MethodError: Cannot\
    \ `convert` an object of type String to an object of type Int64\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n \
    \   convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\n    convert(::Type{T},\
    \ !Matched::Ptr) where T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n \
    \  [1] setindex!(::Dict{Int64,String}, ::String, ::String) at ./dict.jl:372\n\
    \   [2] sorted_list_sum(::Array{String,1}) at /tmp/tmp0eb4wy0c.jl:32\n   [3] top-level\
    \ scope at /tmp/tmp0eb4wy0c.jl:57\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp0eb4wy0c.jl:53\n  \ntest set: Error During\
    \ Test at /tmp/tmp0eb4wy0c.jl:58\n  Test threw exception\n  Expression: candidate([\"\
    AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]\n  MethodError: Cannot `convert`\
    \ an object of type String to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr)\
    \ where T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] setindex!(::Dict{Int64,String},\
    \ ::String, ::String) at ./dict.jl:372\n   [2] sorted_list_sum(::Array{String,1})\
    \ at /tmp/tmp0eb4wy0c.jl:32\n   [3] top-level scope at /tmp/tmp0eb4wy0c.jl:58\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp0eb4wy0c.jl:53\n  \ntest set: Error During\
    \ Test at /tmp/tmp0eb4wy0c.jl:59\n  Test threw exception\n  Expression: candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\n  MethodError:\
    \ Cannot `convert` an object of type String to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\n   \
    \ convert(::Type{T}, !Matched::Ptr) where T<:Integer at pointer.jl:23\n    ...\n\
    \  Stacktrace:\n   [1] setindex!(::Dict{Int64,String}, ::String, ::String) at\
    \ ./dict.jl:372\n   [2] sorted_list_sum(::Array{String,1}) at /tmp/tmp0eb4wy0c.jl:32\n\
    \   [3] top-level scope at /tmp/tmp0eb4wy0c.jl:59\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp0eb4wy0c.jl:53\n  \ntest set: Error During\
    \ Test at /tmp/tmp0eb4wy0c.jl:60\n  Test threw exception\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \ MethodError: Cannot `convert` an object of type String to an object of type\
    \ Int64\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer at pointer.jl:23\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(::Dict{Int64,String}, ::String, ::String)\
    \ at ./dict.jl:372\n   [2] sorted_list_sum(::Array{String,1}) at /tmp/tmp0eb4wy0c.jl:32\n\
    \   [3] top-level scope at /tmp/tmp0eb4wy0c.jl:60\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp0eb4wy0c.jl:53\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    2      5      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0eb4wy0c.jl:51\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    new_lst =\
    \ []\n    for i in lst\n        if length(i) % 2 == 0\n            push!(new_lst,\
    \ i)\n        end\n    end\n    sort(new_lst)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpofr131pb.jl:35\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpofr131pb.jl:35\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpofr131pb.jl:28\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpofr131pb.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # your code\
    \ here\n    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpvo4gffv7.jl:24\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"aa\", \"a\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpvo4gffv7.jl:24\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvo4gffv7.jl:23\ntest set: Test Failed at /tmp/tmpvo4gffv7.jl:25\n\
    \  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\n   Evaluated: [\"school\", \"AI\", \"asdf\", \"b\"] == [\"\
    AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpvo4gffv7.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvo4gffv7.jl:23\ntest set: Test Failed at /tmp/tmpvo4gffv7.jl:26\n\
    \  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"d\", \"b\", \"c\", \"a\"] == String[]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpvo4gffv7.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvo4gffv7.jl:23\ntest set: Test Failed at /tmp/tmpvo4gffv7.jl:27\n\
    \  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\n   Evaluated: [\"d\", \"dcba\", \"abcd\", \"a\"] == [\"abcd\", \"dcba\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpvo4gffv7.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvo4gffv7.jl:23\ntest set: Test Failed at /tmp/tmpvo4gffv7.jl:29\n\
    \  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvo4gffv7.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvo4gffv7.jl:23\ntest set: Test Failed at /tmp/tmpvo4gffv7.jl:30\n\
    \  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]\
    \ == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpvo4gffv7.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvo4gffv7.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvo4gffv7.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # your code\
    \ here\n    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpm5qslyyo.jl:24\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"aa\", \"a\", \"aaa\"] ==\
    \ [\"aa\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpm5qslyyo.jl:24\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpm5qslyyo.jl:23\ntest set: Test Failed at /tmp/tmpm5qslyyo.jl:25\n\
    \  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\n   Evaluated: [\"school\", \"AI\", \"asdf\", \"b\"] == [\"\
    AI\", \"asdf\", \"school\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpm5qslyyo.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpm5qslyyo.jl:23\ntest set: Test Failed at /tmp/tmpm5qslyyo.jl:26\n\
    \  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"d\", \"b\", \"c\", \"a\"] == String[]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpm5qslyyo.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpm5qslyyo.jl:23\ntest set: Test Failed at /tmp/tmpm5qslyyo.jl:27\n\
    \  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\n   Evaluated: [\"d\", \"dcba\", \"abcd\", \"a\"] == [\"abcd\", \"dcba\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpm5qslyyo.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpm5qslyyo.jl:23\ntest set: Test Failed at /tmp/tmpm5qslyyo.jl:29\n\
    \  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm5qslyyo.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpm5qslyyo.jl:23\ntest set: Test Failed at /tmp/tmpm5qslyyo.jl:30\n\
    \  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]\
    \ == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpm5qslyyo.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpm5qslyyo.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm5qslyyo.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    new_lst =\
    \ []\n    for i in lst\n        if length(i) % 2 == 0\n            push!(new_lst,\
    \ i)\n        end\n    end\n    sort(new_lst)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) ==\
    \ [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpeph5mtla.jl:35\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpeph5mtla.jl:35\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpeph5mtla.jl:28\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeph5mtla.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    lst_sorted\
    \ = sort(lst, by = x -> length(x))\n    lst_sorted = sort(lst_sorted, by = x ->\
    \ x)\n    lst_sorted = lst_sorted[1:2:end]\n    return lst_sorted\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpatgwqvgg.jl:26\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aaa\"] == [\"aa\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpatgwqvgg.jl:26\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpatgwqvgg.jl:25\ntest set: Test Failed at /tmp/tmpatgwqvgg.jl:27\n\
    \  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\n   Evaluated: [\"AI\", \"b\"] == [\"AI\", \"asdf\", \"school\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpatgwqvgg.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpatgwqvgg.jl:25\ntest set: Test Failed at /tmp/tmpatgwqvgg.jl:28\n\
    \  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"c\"] == String[]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpatgwqvgg.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpatgwqvgg.jl:25\ntest set: Test Failed at /tmp/tmpatgwqvgg.jl:29\n\
    \  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\n   Evaluated: [\"a\", \"d\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpatgwqvgg.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpatgwqvgg.jl:25\ntest set: Test Failed at /tmp/tmpatgwqvgg.jl:30\n\
    \  Expression: candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"\
    ]\n   Evaluated: [\"AI\", \"au\"] == [\"AI\", \"ai\", \"au\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpatgwqvgg.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpatgwqvgg.jl:25\ntest set: Test Failed at /tmp/tmpatgwqvgg.jl:31\n\
    \  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"b\", \"c\"] == String[]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpatgwqvgg.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpatgwqvgg.jl:25\ntest set: Test Failed at /tmp/tmpatgwqvgg.jl:32\n\
    \  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: [\"aaaa\", \"cc\"] == [\"cc\", \"dd\"\
    , \"aaaa\", \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpatgwqvgg.jl:32\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpatgwqvgg.jl:25\nTest Summary: | Fail  Total\n\
    test set      |    7      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpatgwqvgg.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # lst = [\"\
    aa\", \"a\", \"aaa\"]\n    # lst = [\"ab\", \"a\", \"aaa\", \"cd\"]\n    lst_len\
    \ = length(lst)\n    lst_len_set = Set(lst_len)\n    lst_len_set_len = length(lst_len_set)\n\
    \    lst_len_set_len_lst = collect(lst_len_set)\n    lst_len_set_len_lst_sorted\
    \ = sort(lst_len_set_len_lst)\n    lst_len_set_len_lst_sorted_len = length(lst_len_set_len_lst_sorted)\n\
    \    lst_len_set_len_lst_sorted_len_lst = collect(1:lst_len_set_len_lst_sorted_len)\n\
    \    lst_len_set_len_lst_sorted_len_lst_dict = Dict(zip(lst_len_set_len_lst_sorted,\
    \ lst_len_set_len_lst_sorted_len_lst))\n    lst_len_lst_dict = Dict(zip(lst, lst_len))\n\
    \    lst_len_lst_dict_sorted = sort(collect(lst_len_lst_dict))\n    lst_len_lst_dict_sorted_len\
    \ = length(lst_len_lst_dict_sorted)\n    lst_len_lst_dict_sorted_len_lst = collect(1:lst_len_lst_dict_sorted_len)\n\
    \    lst_len_lst_dict_sorted_len_lst_dict = Dict(zip(lst_len_lst_dict_sorted,\
    \ lst_len_lst_dict_sorted_len_lst))\n    lst_len_lst_dict_sorted_len_lst_dict_sorted\
    \ = sort(collect(lst_len_lst_dict_sorted_len_lst_dict))\n   \nusing Test\n\n@testset\
    \ begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"\
    aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\",\
    \ \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"abcd\"\
    , \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"au\"\
    ]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxjno47h6.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpxjno47h6.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpxjno47h6.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    lst_len =\
    \ length(lst)\n    lst_len_odd = []\n    for i in 1:lst_len\n        if length(lst[i])\
    \ % 2 == 1\n            push!(lst_len_odd, lst[i])\n        end\n    end\n   \
    \ lst_len_odd = sort(lst_len_odd)\n    return lst_len_odd\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\",\
    \ \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpruz8n5hb.jl:31\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aaa\"] == [\"aa\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpruz8n5hb.jl:31\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpruz8n5hb.jl:30\ntest set: Test Failed at /tmp/tmpruz8n5hb.jl:32\n\
    \  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\n   Evaluated: [\"b\"] == [\"AI\", \"asdf\", \"school\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpruz8n5hb.jl:32\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpruz8n5hb.jl:30\ntest set: Test Failed at /tmp/tmpruz8n5hb.jl:33\n\
    \  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"b\", \"c\", \"d\"] == String[]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpruz8n5hb.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpruz8n5hb.jl:30\ntest set: Test Failed at /tmp/tmpruz8n5hb.jl:34\n\
    \  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\n   Evaluated: [\"a\", \"d\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpruz8n5hb.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpruz8n5hb.jl:30\ntest set: Test Failed at /tmp/tmpruz8n5hb.jl:35\n\
    \  Expression: candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"\
    ]\n   Evaluated: String[] == [\"AI\", \"ai\", \"au\"]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpruz8n5hb.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpruz8n5hb.jl:30\ntest set: Test Failed at /tmp/tmpruz8n5hb.jl:36\n\
    \  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"a\", \"b\", \"b\", \"c\", \"c\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpruz8n5hb.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpruz8n5hb.jl:30\ntest set: Test Failed at /tmp/tmpruz8n5hb.jl:37\n\
    \  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: String[] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpruz8n5hb.jl:37\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpruz8n5hb.jl:30\nTest Summary: | Fail  Total\n\
    test set      |    7      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpruz8n5hb.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    lst_len =\
    \ length(lst)\n    new_lst = []\n    for i in 1:lst_len\n        if length(lst[i])\
    \ % 2 == 0\n            push!(new_lst, lst[i])\n        end\n    end\n    sort(new_lst)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4owl_0k9.jl:36\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp4owl_0k9.jl:36\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4owl_0k9.jl:29\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4owl_0k9.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    #lst = [\"\
    aa\", \"a\", \"aaa\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\"]\n    #lst =\
    \ [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"]\n    #lst =\
    \ [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"\
    a\", \"aaa\", \"cd\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"\
    a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\",\
    \ \"cd\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\"\
    , \"a\", \"aaa\", \"cd\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\"\
    , \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"]\n  \
    \  #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"\
    ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"\
    ]\n    #lst = [\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"\
    , \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\"\
    , \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"\
    cd\", \"ab\", \"a\", \"aaa\", \"cd\"]\n    #lst = [\"ab\", \"a\", \"aaa\", \"\
    cd\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"\
    asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\",\
    \ \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\"\
    , \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"\
    bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpibro8_1g.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpibro8_1g.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpibro8_1g.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # remove odd\
    \ length strings\n    lst = filter(x -> length(x) % 2 == 0, lst)\n    # sort by\
    \ length\n    lst = sort(lst, by = x -> length(x))\n    # sort by alphabet\n \
    \   lst = sort(lst)\n    return lst\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\
    \t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\"\
    , \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpo_afhpi6.jl:35\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpo_afhpi6.jl:35\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpo_afhpi6.jl:28\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo_afhpi6.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    lst = lst[length.(lst)\
    \ .% 2 .== 0]\n    sort(lst, by = x -> (length(x), x))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"\
    aaa\"]) == [\"aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\",\
    \ \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"dcba\", \"abcd\"\
    , \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\", \"ai\", \"au\"\
    ]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    lst_len =\
    \ length(lst)\n    lst_len_odd = []\n    for i in 1:lst_len\n        if length(lst[i])\
    \ % 2 == 1\n            push!(lst_len_odd, lst[i])\n        end\n    end\n   \
    \ return sort(lst_len_odd)\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp5xd5wp03.jl:30\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aaa\"] == [\"aa\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmp5xd5wp03.jl:30\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5xd5wp03.jl:29\ntest set: Test Failed at /tmp/tmp5xd5wp03.jl:31\n\
    \  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\n   Evaluated: [\"b\"] == [\"AI\", \"asdf\", \"school\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp5xd5wp03.jl:31\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5xd5wp03.jl:29\ntest set: Test Failed at /tmp/tmp5xd5wp03.jl:32\n\
    \  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"b\", \"c\", \"d\"] == String[]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp5xd5wp03.jl:32\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5xd5wp03.jl:29\ntest set: Test Failed at /tmp/tmp5xd5wp03.jl:33\n\
    \  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\n   Evaluated: [\"a\", \"d\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp5xd5wp03.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5xd5wp03.jl:29\ntest set: Test Failed at /tmp/tmp5xd5wp03.jl:34\n\
    \  Expression: candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"\
    ]\n   Evaluated: String[] == [\"AI\", \"ai\", \"au\"]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp5xd5wp03.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5xd5wp03.jl:29\ntest set: Test Failed at /tmp/tmp5xd5wp03.jl:35\n\
    \  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"a\", \"b\", \"b\", \"c\", \"c\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5xd5wp03.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5xd5wp03.jl:29\ntest set: Test Failed at /tmp/tmp5xd5wp03.jl:36\n\
    \  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: String[] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp5xd5wp03.jl:36\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5xd5wp03.jl:29\nTest Summary: | Fail  Total\n\
    test set      |    7      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5xd5wp03.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    # This function\
    \ takes a list of strings as an argument and returns a list of strings\n    #\
    \ sorted by length of each word, and if two words have the same length, sort the\
    \ list alphabetically.\n    # The function should return a list of strings in\
    \ sorted order.\n    # You may assume that all words will have the same length.\n\
    \    # For example:\n    # assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"\
    ]\n    # assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"\
    ]\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n\nusing Test\n\n@testset begin\n\n\
    candidate = sorted_list_sum;\n\t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"])\n\t@test(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"])\n\t@test(candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\
    \t@test(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\
    \t@test(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi49xjz7_.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpi49xjz7_.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpi49xjz7_.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    lst_len =\
    \ length(lst)\n    lst_len_odd = []\n    for i in 1:lst_len\n        if length(lst[i])\
    \ % 2 == 1\n            push!(lst_len_odd, lst[i])\n        end\n    end\n   \
    \ return sort(lst_len_odd)\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpb80vpzzs.jl:30\n  Expression: candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]\n   Evaluated: [\"a\", \"aaa\"] == [\"aa\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpb80vpzzs.jl:30\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpb80vpzzs.jl:29\ntest set: Test Failed at /tmp/tmpb80vpzzs.jl:31\n\
    \  Expression: candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]\n   Evaluated: [\"b\"] == [\"AI\", \"asdf\", \"school\"]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpb80vpzzs.jl:31\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpb80vpzzs.jl:29\ntest set: Test Failed at /tmp/tmpb80vpzzs.jl:32\n\
    \  Expression: candidate([\"d\", \"b\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"b\", \"c\", \"d\"] == String[]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpb80vpzzs.jl:32\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpb80vpzzs.jl:29\ntest set: Test Failed at /tmp/tmpb80vpzzs.jl:33\n\
    \  Expression: candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"\
    dcba\"]\n   Evaluated: [\"a\", \"d\"] == [\"abcd\", \"dcba\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpb80vpzzs.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpb80vpzzs.jl:29\ntest set: Test Failed at /tmp/tmpb80vpzzs.jl:34\n\
    \  Expression: candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"\
    ]\n   Evaluated: String[] == [\"AI\", \"ai\", \"au\"]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpb80vpzzs.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpb80vpzzs.jl:29\ntest set: Test Failed at /tmp/tmpb80vpzzs.jl:35\n\
    \  Expression: candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([])\n\
    \   Evaluated: [\"a\", \"a\", \"b\", \"b\", \"c\", \"c\"] == String[]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb80vpzzs.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpb80vpzzs.jl:29\ntest set: Test Failed at /tmp/tmpb80vpzzs.jl:36\n\
    \  Expression: candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"\
    dd\", \"aaaa\", \"bbbb\"]\n   Evaluated: String[] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpb80vpzzs.jl:36\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpb80vpzzs.jl:29\nTest Summary: | Fail  Total\n\
    test set      |    7      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb80vpzzs.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Write a function that accepts a list of strings as a parameter,\n\
    \    deletes the strings that have odd lengths from it,\n    and returns the resulted\
    \ list with a sorted order,\n    The list is always a list of strings and never\
    \ an array of numbers,\n    and it may contain duplicates.\n    The order of the\
    \ list should be ascending by length of each word, and you\n    should return\
    \ the list sorted by that rule.\n    If two words have the same length, sort the\
    \ list alphabetically.\n    The function should return a list of strings in sorted\
    \ order.\n    You may assume that all words will have the same length.\n    For\
    \ example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\
    function sorted_list_sum(lst::Vector{String})::Vector{String} \n    lst = sort(lst)\n\
    \    lst = unique(lst)\n    lst = [i for i in lst if length(i) % 2 == 0]\n   \
    \ return lst\nend\nusing Test\n\n@testset begin\n\ncandidate = sorted_list_sum;\n\
    \t@test(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\n\t@test(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\t@test(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"d\", \"\
    dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\n\t@test(candidate([\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\n\t@test(candidate([\"a\", \"\
    b\", \"b\", \"c\", \"c\", \"a\"]) == Vector{String}([]))\n\t@test(candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpapystxyc.jl:32\n  Expression: candidate([\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n \
    \  Evaluated: [\"aaaa\", \"bbbb\", \"cc\", \"dd\"] == [\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpapystxyc.jl:32\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpapystxyc.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpapystxyc.jl:23\n"
  exit_code: 1
  status: SyntaxError
