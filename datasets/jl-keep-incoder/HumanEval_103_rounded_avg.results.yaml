name: HumanEval_103_rounded_avg
language: julia
results:
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n >= m \n        rounded_avg = -1\n\
    \    else\n        rounded_avg = ((m+n)/2::Int64).round()\n    end\n    return\
    \ rounded_avg\nend\n</cell>\n<code language=julia-1.4>\nrounded_avg(1, 5)\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.4>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.\nusing Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t\
    @test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t\
    @test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) ==\
    \ \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185,\
    \ 546) == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t\
    @test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) ==\
    \ \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) ==\
    \ -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprxdo4mic.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprxdo4mic.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n == m \n        rounded_avg = -1\n\
    \    else \n        rounded_avg = ((n+m)/2::Int64).round()\n    end\n    return\
    \ rounded_avg\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise: Write a function that returns the factorial of a given\
    \ number. \n    Factorials are defined as $n! = n \\times n-1 \\times n-2 \\times\
    \ ...$. \n    For example, $5! = 5 \\times 4 \\times 3 \\times 2 \\times 1 = 120$.\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    Example:\n    factorial(5) => \"0b120\"\n    factorial(10) => \"0b3628800\"\
    \n    factorial(20) => \"0b2432902008176640000\"\n    factorial(33) => \"0b113372036854775808\"\
    \n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1,\
    \ 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
    \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\
    \t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546)\
    \ == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
    \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
    @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
    \ 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjep_ml7p.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjep_ml7p.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n >= m \n        rounded_avg = -1\n\
    \    else\n        rounded_avg = round(n/m) * m\n    end\n    return rounded_avg\n\
    end\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(7, 5)\n</cell\nusing Test\n\n@testset begin\n\
    \ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7,\
    \ 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996,\
    \ 997) == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\
    \t@test(candidate(185, 546) == \"0b101101110\")\n\t@test(candidate(362, 496) ==\
    \ \"0b110101101\")\n\t@test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197,\
    \ 233) == \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5,\
    \ 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6a1ag2a_.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6a1ag2a_.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if m > n \n        return -1\n    \n \
    \   sum = 0\n    for i in n:m\n        sum += i\n    \n    return sum / m\nend\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.\nusing Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t\
    @test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t\
    @test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) ==\
    \ \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185,\
    \ 546) == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t\
    @test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) ==\
    \ \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) ==\
    \ -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp553ih1gw.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp553ih1gw.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n >= m \n        rounded_avg = -1\n\
    \    else\n        rounded_avg = ceil(Int, n/m) * m\n    end\n    return rounded_avg\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1,\
    \ 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
    \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\
    \t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546)\
    \ == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
    \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
    @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
    \ 5) == \"0b101\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprvfqo_nn.jl:24\n  Expression: candidate(1,\
    \ 5) == \"0b11\"\n   Evaluated: 5 == \"0b11\"\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmprvfqo_nn.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprvfqo_nn.jl:23\ntest set: Test Failed at /tmp/tmprvfqo_nn.jl:25\n\
    \  Expression: candidate(7, 13) == \"0b1010\"\n   Evaluated: 13 == \"0b1010\"\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmprvfqo_nn.jl:25\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprvfqo_nn.jl:23\ntest set: Test Failed at /tmp/tmprvfqo_nn.jl:26\n\
    \  Expression: candidate(964, 977) == \"0b1111001010\"\n   Evaluated: 977 == \"\
    0b1111001010\"\nStacktrace:\n [1] top-level scope at /tmp/tmprvfqo_nn.jl:26\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprvfqo_nn.jl:23\ntest set: Test Failed at /tmp/tmprvfqo_nn.jl:27\n\
    \  Expression: candidate(996, 997) == \"0b1111100100\"\n   Evaluated: 997 == \"\
    0b1111100100\"\nStacktrace:\n [1] top-level scope at /tmp/tmprvfqo_nn.jl:27\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprvfqo_nn.jl:23\ntest set: Test Failed at /tmp/tmprvfqo_nn.jl:28\n\
    \  Expression: candidate(560, 851) == \"0b1011000010\"\n   Evaluated: 851 == \"\
    0b1011000010\"\nStacktrace:\n [1] top-level scope at /tmp/tmprvfqo_nn.jl:28\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprvfqo_nn.jl:23\ntest set: Test Failed at /tmp/tmprvfqo_nn.jl:29\n\
    \  Expression: candidate(185, 546) == \"0b101101110\"\n   Evaluated: 546 == \"\
    0b101101110\"\nStacktrace:\n [1] top-level scope at /tmp/tmprvfqo_nn.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprvfqo_nn.jl:23\ntest set: Test Failed at /tmp/tmprvfqo_nn.jl:30\n\
    \  Expression: candidate(362, 496) == \"0b110101101\"\n   Evaluated: 496 == \"\
    0b110101101\"\nStacktrace:\n [1] top-level scope at /tmp/tmprvfqo_nn.jl:30\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprvfqo_nn.jl:23\ntest set: Test Failed at /tmp/tmprvfqo_nn.jl:31\n\
    \  Expression: candidate(350, 902) == \"0b1001110010\"\n   Evaluated: 902 == \"\
    0b1001110010\"\nStacktrace:\n [1] top-level scope at /tmp/tmprvfqo_nn.jl:31\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprvfqo_nn.jl:23\ntest set: Test Failed at /tmp/tmprvfqo_nn.jl:32\n\
    \  Expression: candidate(197, 233) == \"0b11010111\"\n   Evaluated: 233 == \"\
    0b11010111\"\nStacktrace:\n [1] top-level scope at /tmp/tmprvfqo_nn.jl:32\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprvfqo_nn.jl:23\ntest set: Test Failed at /tmp/tmprvfqo_nn.jl:35\n\
    \  Expression: candidate(5, 5) == \"0b101\"\n   Evaluated: -1 == \"0b101\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprvfqo_nn.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprvfqo_nn.jl:23\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2    10     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 10 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprvfqo_nn.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(n/m)\n\
    \        return tobinary(rounded_avg)\n    else\n        return -1\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.\nusing Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t\
    @test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t\
    @test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) ==\
    \ \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185,\
    \ 546) == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t\
    @test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) ==\
    \ \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) ==\
    \ -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpaopukfva.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpaopukfva.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(Int64(n/m))\n\
    \        return String(rounded_avg)\n    else\n        return -1\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of digits in the binary representation\
    \ of an integer.\nusing Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t\
    @test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t\
    @test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) ==\
    \ \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185,\
    \ 546) == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t\
    @test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) ==\
    \ \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) ==\
    \ -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxogcaqyy.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxogcaqyy.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(n\
    \ / m) * m\n        return bin(rounded_avg)\n    else\n        return -1\n   \
    \ end\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code\
    \ language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.\nusing Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t\
    @test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t\
    @test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) ==\
    \ \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185,\
    \ 546) == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t\
    @test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) ==\
    \ \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) ==\
    \ -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4263r60i.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4263r60i.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if m > n \n        error(\"m must be less\
    \ than n\")\n    end\n    \n    avg = round(n/m)\n    binary = string(\"0b\",\
    \ Int64(avg))\n    return binary\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7,\
    \ 5)\n</cell>\n<text>\nExercise 2\nWrite a function that computes the factorial\
    \ of a given number. \n    Round the answer to the nearest integer and convert\
    \ that to binary.\n    Example:\n    factorial(5) => \"0b120\"\n    factorial(10)\
    \ => \"0b3628800\"\n    factorial(20) => \"0b2432902008176640000\"\n    factorial(33)\
    \ => \"0b1100099077695720753953770019\"\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7,\
    \ 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996,\
    \ 997) == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\
    \t@test(candidate(185, 546) == \"0b101101110\")\n\t@test(candidate(362, 496) ==\
    \ \"0b110101101\")\n\t@test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197,\
    \ 233) == \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5,\
    \ 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplrynx7lz.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplrynx7lz.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(n/m)*m\
    \ \n        rounded_avg = rounded_avg + round(n%m) \n        return rounded_avg\
    \ \n    else \n        return -1 \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the first n prime numbers. \nThe function should take in a positive integer\
    \ n and return the prime numbers from 2 to n. \nThe function should return an\
    \ empty array if n is less than or equal to 0.\nusing Test\n\n@testset begin\n\
    \ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7,\
    \ 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996,\
    \ 997) == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\
    \t@test(candidate(185, 546) == \"0b101101110\")\n\t@test(candidate(362, 496) ==\
    \ \"0b110101101\")\n\t@test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197,\
    \ 233) == \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5,\
    \ 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx_k_xbwa.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpx_k_xbwa.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n == m \n        rounded_avg = -1\n\
    \    else \n        rounded_avg = round(Int64(n)/Int64(m))*Int64(m) + Int64(n)\
    \ - Int64(m) \n        rounded_avg = Int64(rounded_avg)\n    end\n    return rounded_avg\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes in two integers n and m, and returns true if n is\
    \ divisible by m, and false otherwise. \nExample: \n    divisible_by_5(2, 3) =>\
    \ true\n    divisible_by_5(2, 4) => false\n    divisible_by_5(2, 5) => true\n\
    \    divisible_by_5(2, 6) => false\n    divisible_by_5(2, 7) => false\n    divisible_by_5(2,\
    \ 8) => false\n    divisible_by_5(2, 9) => false\n    divisible_by_5(2, 10) =>\
    \ false\n    divisible_by_5(2, 11) => false\n    divisible_by_5(2, 12) => false\n\
    \    divisible_by_5(2, 13) => false\n    divisible_by_5(2, 14) => false\n    divisible_by_5(2,\
    \ 15) => false\n    divisible_by_5(2, 16) => false\n    divisible_by_5(2, 17)\
    \ => false\n    divisible_by_5(2, 18) => false\n    divisible_by_5(2, 19) => false\n\
    \    divisible_by_5(2, 20) => false\n    divisible_by_5(2, 21) => false\n    divisible_by_5(2,\
    \ 22) => false\n    divisible_by_5(2, 23) => false\n    divisible_by_5(2, 24)\
    \ => false\n    divisible_by_5(2, 25) => false\n    divisible_by_5(2, 26) => false\n\
    \    divisible_by_5(2, 27) => false\n    divisible_by_5(2, 28) => false\n    divisible_by_5(2,\
    \ 29) => false\n    divisible_by_5(2, 30) => false\n    divisible_by_5(2, 31)\
    \ => false\n    divisible_by_5(2, 32) => false\n    divisible_by_5(2, 33) => false\n\
    \    divisible_by_5(2, 34) => false\n    divisible_by_5(2, 35) => false\n    divisible_by_5(2,\
    \ 36) => false\n    divisible_by_\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7, 13)\
    \ == \"0b1010\")\n\t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996,\
    \ 997) == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\
    \t@test(candidate(185, 546) == \"0b101101110\")\n\t@test(candidate(362, 496) ==\
    \ \"0b110101101\")\n\t@test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197,\
    \ 233) == \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5,\
    \ 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbn9ytccg.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbn9ytccg.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if m > n \n        error(\"m must be less\
    \ than n\")\n    else if m == n \n        return m\n    else \n        avg = floor((n\
    \ + m) / 2)\n        binary = \"\"\n        for i in (avg, avg - 1):\n       \
    \     binary += str((i >> 1) & 1)\n        return binary\nend\n</cell>\n<code\
    \ language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer.\nusing Test\n\
    \n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\"\
    )\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"\
    0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t@test(candidate(560,\
    \ 851) == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"0b101101110\")\n\
    \t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350, 902) ==\
    \ \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t@test(candidate(7,\
    \ 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp39sdnnzw.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp39sdnnzw.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n > m \n        rounded_avg(m, n)\n\
    \    else\n        rounded_avg(m, n-1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of characters in a string. \n    For example, length(\"hello\") =>\
    \ 5.\n    Write a function that returns the number of digits in a number. \n \
    \   For example, digits(100) => 4.\n    Write a function that returns the number\
    \ of digits in a number rounded up. \n    For example, digits(100) => 5.\n   \
    \ Write a function that returns the number of digits in a number rounded down.\
    \ \n    For example, digits(100) => 3.\n    Write a function that returns the\
    \ number of digits in a number rounded towards zero. \n    For example, digits(100)\
    \ => 2.\n    Write a function that returns the number of digits in a number rounded\
    \ towards positive infinity. \n    For example, digits(100) => 1.\n    Write a\
    \ function that returns the number of digits in a number rounded towards negative\
    \ infinity. \n    For example, digits(100) => 0.\n    Write a function that returns\
    \ the number of digits in a number rounded towards NaN. \n    For example, digits(100)\
    \ => 0.\n    Write a function that returns the number of digits in a number rounded\
    \ towards +Inf or -Inf. \n    For example, digits(100) => 0.\n    Write a function\
    \ that returns the number of digits in a number rounded towards +Inf or -Inf.\
    \ \n    For example, digits(100) => 0.\n    Write a function that returns the\
    \ number of digits in a number rounded towards +Inf or -Inf. \n    For example,\
    \ digits(100) => 0.\n    Write a function that returns the number of digits in\
    \ a number rounded towards +Inf or -Inf. \n    For example, digits(100) => 0.\n\
    \    Write a function that returns the number of digits in a number rounded towards\
    \ +Inf or -Inf. \n    For example, digits(100) => 0.\n    Write a function that\
    \ returns the number of digits in a number rounded towards +Inf or -Inf. \n  \
    \  For example, digits(100) => 0.\n    Write a function that returns the number\
    \ of digits in a number rounded towards +Inf or -Inf. \n    For example, digits(100)\
    \ => 0.\n    Write a function that returns the number of digits in a number rounded\
    \ towards +Inf or -Inf. \n    For example, digits(100) => 0.\n    Write a function\
    \ that returns the number of digits in a number rounded towards +Inf or -Inf.\
    \ \n    For example, digits(100) => 0.\n    Write a function that returns the\
    \ number of digits in a number rounded towards +Inf or -Inf. \n    For example,\
    \ digits(100) => 0.\n    Write \nusing Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\
    \t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\
    \t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996, 997)\
    \ == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185,\
    \ 546) == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t\
    @test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) ==\
    \ \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) ==\
    \ -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpze1hr33z.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpze1hr33z.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        return n\n    else\
    \ \n        return -1\n    end\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.\nusing Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t\
    @test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t\
    @test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) ==\
    \ \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185,\
    \ 546) == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t\
    @test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) ==\
    \ \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) ==\
    \ -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm1z9jkt5.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpm1z9jkt5.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(n/m)*m\n\
    \    else\n        rounded_avg = -1\n    end\n    return rounded_avg\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of digits in an integer.\nusing Test\n\
    \n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\"\
    )\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"\
    0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t@test(candidate(560,\
    \ 851) == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"0b101101110\")\n\
    \t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350, 902) ==\
    \ \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t@test(candidate(7,\
    \ 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3lgygr01.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3lgygr01.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(n/m)*m\
    \ \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ + m \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ + m \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ + m \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ + m \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ + m \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ + m \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ + m \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ + m \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ + m \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ + m \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ + m \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ + m \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ + m \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ + m \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ + m \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ + m \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ + m \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ + m \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ + m \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ + m \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ + m \n        rounded_avg = rounded_avg % m \n\nusing Test\n\n@testset begin\n\
    \ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7,\
    \ 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996,\
    \ 997) == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\
    \t@test(candidate(185, 546) == \"0b101101110\")\n\t@test(candidate(362, 496) ==\
    \ \"0b110101101\")\n\t@test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197,\
    \ 233) == \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5,\
    \ 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3b9jksex.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3b9jksex.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n == m \n        then \"0b0\"\n   \
    \ else if n > m \n        then \"-1\"\n    else if n < m \n        then \"0b\"\
    \ + bin(n - m).strip(\"0b\")\n    else \n        rounded_avg(n - m, m) + rounded_avg(n,\
    \ m - 1)\nend\n</cell>\n<code language=julia-1.0>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of digits in an integer.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7, 13)\
    \ == \"0b1010\")\n\t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996,\
    \ 997) == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\
    \t@test(candidate(185, 546) == \"0b101101110\")\n\t@test(candidate(362, 496) ==\
    \ \"0b110101101\")\n\t@test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197,\
    \ 233) == \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5,\
    \ 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"\"\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp1l2sddbi.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp1l2sddbi.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(n/m)*m\
    \ \n    else \n        rounded_avg = -1\n    end\n    return rounded_avg\nend\n\
    using Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1,\
    \ 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
    \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\
    \t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546)\
    \ == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
    \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
    @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
    \ 5) == \"0b101\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyp4iqdpk.jl:24\n  Test threw exception\n\
    \  Expression: candidate(1, 5) == \"0b11\"\n  MethodError: Cannot `convert` an\
    \ object of type \n    Float64 to an object of type \n    Union{Int64, String}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:171\n\
    \  Stacktrace:\n   [1] rounded_avg(::Int64, ::Int64) at /tmp/tmpyp4iqdpk.jl:17\n\
    \   [2] top-level scope at /tmp/tmpyp4iqdpk.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpyp4iqdpk.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpyp4iqdpk.jl:25\n  Test threw exception\n  Expression: candidate(7,\
    \ 13) == \"0b1010\"\n  MethodError: Cannot `convert` an object of type \n    Float64\
    \ to an object of type \n    Union{Int64, String}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T at essentials.jl:171\n  Stacktrace:\n\
    \   [1] rounded_avg(::Int64, ::Int64) at /tmp/tmpyp4iqdpk.jl:17\n   [2] top-level\
    \ scope at /tmp/tmpyp4iqdpk.jl:25\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpyp4iqdpk.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpyp4iqdpk.jl:26\n  Test threw exception\n  Expression: candidate(964,\
    \ 977) == \"0b1111001010\"\n  MethodError: Cannot `convert` an object of type\
    \ \n    Float64 to an object of type \n    Union{Int64, String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:171\n  Stacktrace:\n\
    \   [1] rounded_avg(::Int64, ::Int64) at /tmp/tmpyp4iqdpk.jl:17\n   [2] top-level\
    \ scope at /tmp/tmpyp4iqdpk.jl:26\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpyp4iqdpk.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpyp4iqdpk.jl:27\n  Test threw exception\n  Expression: candidate(996,\
    \ 997) == \"0b1111100100\"\n  MethodError: Cannot `convert` an object of type\
    \ \n    Float64 to an object of type \n    Union{Int64, String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:171\n  Stacktrace:\n\
    \   [1] rounded_avg(::Int64, ::Int64) at /tmp/tmpyp4iqdpk.jl:17\n   [2] top-level\
    \ scope at /tmp/tmpyp4iqdpk.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpyp4iqdpk.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpyp4iqdpk.jl:28\n  Test threw exception\n  Expression: candidate(560,\
    \ 851) == \"0b1011000010\"\n  MethodError: Cannot `convert` an object of type\
    \ \n    Float64 to an object of type \n    Union{Int64, String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:171\n  Stacktrace:\n\
    \   [1] rounded_avg(::Int64, ::Int64) at /tmp/tmpyp4iqdpk.jl:17\n   [2] top-level\
    \ scope at /tmp/tmpyp4iqdpk.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpyp4iqdpk.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpyp4iqdpk.jl:29\n  Test threw exception\n  Expression: candidate(185,\
    \ 546) == \"0b101101110\"\n  MethodError: Cannot `convert` an object of type \n\
    \    Float64 to an object of type \n    Union{Int64, String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:171\n  Stacktrace:\n\
    \   [1] rounded_avg(::Int64, ::Int64) at /tmp/tmpyp4iqdpk.jl:17\n   [2] top-level\
    \ scope at /tmp/tmpyp4iqdpk.jl:29\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpyp4iqdpk.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpyp4iqdpk.jl:30\n  Test threw exception\n  Expression: candidate(362,\
    \ 496) == \"0b110101101\"\n  MethodError: Cannot `convert` an object of type \n\
    \    Float64 to an object of type \n    Union{Int64, String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:171\n  Stacktrace:\n\
    \   [1] rounded_avg(::Int64, ::Int64) at /tmp/tmpyp4iqdpk.jl:17\n   [2] top-level\
    \ scope at /tmp/tmpyp4iqdpk.jl:30\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpyp4iqdpk.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpyp4iqdpk.jl:31\n  Test threw exception\n  Expression: candidate(350,\
    \ 902) == \"0b1001110010\"\n  MethodError: Cannot `convert` an object of type\
    \ \n    Float64 to an object of type \n    Union{Int64, String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:171\n  Stacktrace:\n\
    \   [1] rounded_avg(::Int64, ::Int64) at /tmp/tmpyp4iqdpk.jl:17\n   [2] top-level\
    \ scope at /tmp/tmpyp4iqdpk.jl:31\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpyp4iqdpk.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpyp4iqdpk.jl:32\n  Test threw exception\n  Expression: candidate(197,\
    \ 233) == \"0b11010111\"\n  MethodError: Cannot `convert` an object of type \n\
    \    Float64 to an object of type \n    Union{Int64, String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:171\n  Stacktrace:\n\
    \   [1] rounded_avg(::Int64, ::Int64) at /tmp/tmpyp4iqdpk.jl:17\n   [2] top-level\
    \ scope at /tmp/tmpyp4iqdpk.jl:32\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpyp4iqdpk.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpyp4iqdpk.jl:35\n  Test threw exception\n  Expression: candidate(5,\
    \ 5) == \"0b101\"\n  MethodError: Cannot `convert` an object of type \n    Float64\
    \ to an object of type \n    Union{Int64, String}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T at essentials.jl:171\n  Stacktrace:\n\
    \   [1] rounded_avg(::Int64, ::Int64) at /tmp/tmpyp4iqdpk.jl:17\n   [2] top-level\
    \ scope at /tmp/tmpyp4iqdpk.jl:35\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpyp4iqdpk.jl:23\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    2     10     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 10 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyp4iqdpk.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if m > n \n        return -1\n    else\
    \ \n        avg = floor((n+m)/2)\n        binary = bitstring(avg, 2)\n       \
    \ return binary\n    end\nend\n</cell>\n<code language=julia-1.0>\nrounded_avg(7,\
    \ 5)\n</cell>\n<text>\nExercise 3\nWrite a function that computes the factorial\
    \ of a given number. \n    Round the answer to the nearest integer and convert\
    \ that to binary.\n    Example:\n    factorial(5) => \"0b120\"\n    factorial(10)\
    \ => \"0b3628800\"\n    factorial(20) => \"0b2432902008176640000\"\n    factorial(30)\
    \ => \"0b1207215360839840000\"\n    factorial(40) => \"0b12044316439632003200\"\
    \n    factorial(50) => \"0b120209227898880640000\"\n    factorial(60) => \"0b1201094371757088640000\"\
    \n    factorial(70) => \"0b1199642825181040000640000\"\n    factorial(80) => \"\
    0b1199642825181040000640000\"\n    factorial(90) => \"0b1199642825181040000640000\"\
    \n    factorial(100) => \"0b1199642825181040000640000\"\n    factorial(110) =>\
    \ \"0b1199642825181040000640000\"\n    factorial(120) => \"0b1199642825181040000640000\"\
    \n    factorial(130) => \"0b1199642825181040000640000\"\n    factorial(140) =>\
    \ \"0b1199642825181040000640000\"\n    factorial(150) => \"0b1199642825181040000640000\"\
    \n    factorial(160) => \"0b1199642825181040000640000\"\n    factorial(170) =>\
    \ \"0b1199642825181040000640000\"\n    factorial(180) => \"0b1199642825181040000640000\"\
    \n    factorial(190) => \"0b1199642825181040000640000\"\n    factorial(200) =>\
    \ \"0b1199642825181040000640000\"\n    factorial(210) => \"0b1199642825181040000640000\"\
    \n    factorial(220) => \"0b1199642825181040000640000\"\n    factorial(230) =>\
    \ \nusing Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1,\
    \ 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
    \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\
    \t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546)\
    \ == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
    \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
    @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
    \ 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgcz0mfr9.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgcz0mfr9.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(n\
    \ / m) * m\n        rounded_avg = rounded_avg % m\n        return String(rounded_avg)\n\
    \    else\n        return -1\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer.\nusing Test\n\
    \n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\"\
    )\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"\
    0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t@test(candidate(560,\
    \ 851) == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"0b101101110\")\n\
    \t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350, 902) ==\
    \ \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t@test(candidate(7,\
    \ 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpe3u1beau.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpe3u1beau.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if m > n \n        error(\"m must be less\
    \ than n\")\n    end\n    \n    sum = 0\n    for i in n:m\n        sum += i\n\
    \    end\n    \n    if sum < 0\n        return -1\n    end\n    \n    rounded_sum\
    \ = 0\n    for i in sum:-1:1\n        rounded_sum += i\n    end\n    \n    if\
    \ rounded_sum < 0\n        return -1\n    end\n    \n    rounded_sum\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5)\
    \ == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
    \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\
    \t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546)\
    \ == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
    \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
    @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
    \ 5) == \"0b101\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpj17lw7ag.jl:41\n  Test threw exception\n\
    \  Expression: candidate(1, 5) == \"0b11\"\n  m must be less than n\n  Stacktrace:\n\
    \   [1] error(::String) at ./error.jl:33\n   [2] rounded_avg(::Int64, ::Int64)\
    \ at /tmp/tmpj17lw7ag.jl:13\n   [3] top-level scope at /tmp/tmpj17lw7ag.jl:41\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpj17lw7ag.jl:40\n  \ntest set: Error During\
    \ Test at /tmp/tmpj17lw7ag.jl:42\n  Test threw exception\n  Expression: candidate(7,\
    \ 13) == \"0b1010\"\n  m must be less than n\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] rounded_avg(::Int64, ::Int64) at /tmp/tmpj17lw7ag.jl:13\n\
    \   [3] top-level scope at /tmp/tmpj17lw7ag.jl:42\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpj17lw7ag.jl:40\n  \ntest set: Error During\
    \ Test at /tmp/tmpj17lw7ag.jl:43\n  Test threw exception\n  Expression: candidate(964,\
    \ 977) == \"0b1111001010\"\n  m must be less than n\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] rounded_avg(::Int64, ::Int64) at /tmp/tmpj17lw7ag.jl:13\n\
    \   [3] top-level scope at /tmp/tmpj17lw7ag.jl:43\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpj17lw7ag.jl:40\n  \ntest set: Error During\
    \ Test at /tmp/tmpj17lw7ag.jl:44\n  Test threw exception\n  Expression: candidate(996,\
    \ 997) == \"0b1111100100\"\n  m must be less than n\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] rounded_avg(::Int64, ::Int64) at /tmp/tmpj17lw7ag.jl:13\n\
    \   [3] top-level scope at /tmp/tmpj17lw7ag.jl:44\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpj17lw7ag.jl:40\n  \ntest set: Error During\
    \ Test at /tmp/tmpj17lw7ag.jl:45\n  Test threw exception\n  Expression: candidate(560,\
    \ 851) == \"0b1011000010\"\n  m must be less than n\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] rounded_avg(::Int64, ::Int64) at /tmp/tmpj17lw7ag.jl:13\n\
    \   [3] top-level scope at /tmp/tmpj17lw7ag.jl:45\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpj17lw7ag.jl:40\n  \ntest set: Error During\
    \ Test at /tmp/tmpj17lw7ag.jl:46\n  Test threw exception\n  Expression: candidate(185,\
    \ 546) == \"0b101101110\"\n  m must be less than n\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] rounded_avg(::Int64, ::Int64) at /tmp/tmpj17lw7ag.jl:13\n\
    \   [3] top-level scope at /tmp/tmpj17lw7ag.jl:46\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpj17lw7ag.jl:40\n  \ntest set: Error During\
    \ Test at /tmp/tmpj17lw7ag.jl:47\n  Test threw exception\n  Expression: candidate(362,\
    \ 496) == \"0b110101101\"\n  m must be less than n\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] rounded_avg(::Int64, ::Int64) at /tmp/tmpj17lw7ag.jl:13\n\
    \   [3] top-level scope at /tmp/tmpj17lw7ag.jl:47\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpj17lw7ag.jl:40\n  \ntest set: Error During\
    \ Test at /tmp/tmpj17lw7ag.jl:48\n  Test threw exception\n  Expression: candidate(350,\
    \ 902) == \"0b1001110010\"\n  m must be less than n\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] rounded_avg(::Int64, ::Int64) at /tmp/tmpj17lw7ag.jl:13\n\
    \   [3] top-level scope at /tmp/tmpj17lw7ag.jl:48\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpj17lw7ag.jl:40\n  \ntest set: Error During\
    \ Test at /tmp/tmpj17lw7ag.jl:49\n  Test threw exception\n  Expression: candidate(197,\
    \ 233) == \"0b11010111\"\n  m must be less than n\n  Stacktrace:\n   [1] error(::String)\
    \ at ./error.jl:33\n   [2] rounded_avg(::Int64, ::Int64) at /tmp/tmpj17lw7ag.jl:13\n\
    \   [3] top-level scope at /tmp/tmpj17lw7ag.jl:49\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpj17lw7ag.jl:40\n  \ntest set: Test Failed at\
    \ /tmp/tmpj17lw7ag.jl:50\n  Expression: candidate(7, 5) == -1\n   Evaluated: 0\
    \ == -1\nStacktrace:\n [1] top-level scope at /tmp/tmpj17lw7ag.jl:50\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj17lw7ag.jl:40\ntest set: Test Failed at /tmp/tmpj17lw7ag.jl:51\n\
    \  Expression: candidate(5, 1) == -1\n   Evaluated: 0 == -1\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpj17lw7ag.jl:51\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj17lw7ag.jl:40\ntest set: Test Failed at /tmp/tmpj17lw7ag.jl:52\n\
    \  Expression: candidate(5, 5) == \"0b101\"\n   Evaluated: 15 == \"0b101\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj17lw7ag.jl:52\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj17lw7ag.jl:40\nTest Summary: | Fail  Error \
    \ Total\ntest set      |    3      9     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj17lw7ag.jl:38\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m\n        return -1\n    \n \
    \   binary = \"\"\n    \n    for i in n:m-1\n        binary += str((i%2)+1)\n\
    \    \n    return Int64(binary)\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code\
    \ language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of digits in an integer.\nusing Test\n\n\
    @testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\"\
    )\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"\
    0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t@test(candidate(560,\
    \ 851) == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"0b101101110\")\n\
    \t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350, 902) ==\
    \ \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t@test(candidate(7,\
    \ 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2ixo33e9.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2ixo33e9.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(n/m)*m\
    \ \n        rounded_avg = Int64(rounded_avg)\n        return rounded_avg \n  \
    \  else \n        return -1\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise: Write a function that takes in\
    \ two integers and returns the sum of the integers from n through m. \n    Round\
    \ the answer to the nearest integer and convert that to binary.\n    Example:\n\
    \    sum(1, 5) => \"0b11\"\n    sum(7, 5) => -1\n    sum(10, 20) => \"0b1111\"\
    \n    sum(20, 33) => \"0b11010\"\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7,\
    \ 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996,\
    \ 997) == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\
    \t@test(candidate(185, 546) == \"0b101101110\")\n\t@test(candidate(362, 496) ==\
    \ \"0b110101101\")\n\t@test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197,\
    \ 233) == \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5,\
    \ 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4s6pshup.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4s6pshup.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if m > n \n        error(\"m must be less\
    \ than n\")\n    end\n    \n    binary = \"\"\n    for i in n:n:m \n        binary\
    \ = binary + string(i) \n    end\n    \n    rounded = parse(Int64, binary)\n \
    \   \n    if rounded == 0 \n        return -1\n    end\n    \n    return rounded\n\
    end\n</cell>\n<code language=julia-1.3>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes in a positive integer n and returns the number of\
    \ digits in n. \nExample: \n    digits(123) => 3\n    digits(1234) => 4\n    digits(12345)\
    \ => 5\n    digits(123456) => 6\n    digits(1234567) => 7\n    digits(12345678)\
    \ => 8\n    digits(123456789) => 9\n    digits(1234567890) => 10\n    digits(12345678901)\
    \ => 11\n    digits(123456789012) => 12\n    digits(1234567890123) => 13\n   \
    \ digits(12345678901234) => 14\n    digits(123456789012345) => 15\n    digits(1234567890123456)\
    \ => 16\n    digits(12345678901234567) => 17\n    digits(123456789012345678) =>\
    \ 18\n    digits(1234567890123456789) => 19\n    digits(12345678901234567890)\
    \ => 20\n    digits(123456789012345678901) => 21\n    digits(1234567890123456789012)\
    \ => 22\n    digits(12345678901234567890123) => 23\n    digits(123456789012345678901234)\
    \ => 24\n    digits(1234567890123456789012345) => 25\n    digits(12345678901234567890123456)\
    \ => 26\n    digits(123456789012345678901234567) => 27\n    digits(1234567890123456789012345678)\
    \ => 28\n    digits(12345678901234567890123456789) => 29\n    digits(123456789012345678901234567890)\
    \ => 30\n    digits(1234567890123456789012345678901) => 31\n    digits(12345678901234567890123456789012)\
    \ => 32\n    digits(123456789012345678901234567890123) => 33\n    digits(1234567890123456789012345678901234)\
    \ => 34\n    digits(12345678901234567890123456789012345) => 35\n    digits(123456789012345678901234567890123456)\
    \ => 36\n    digits(1234567890123456789012345678901234567) => 37\n    digits(12345678901234567890123456789012345678)\
    \ => 38\n    digits(123456789012345678901234567890123456789) => \nusing Test\n\
    \n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\"\
    )\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"\
    0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t@test(candidate(560,\
    \ 851) == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"0b101101110\")\n\
    \t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350, 902) ==\
    \ \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t@test(candidate(7,\
    \ 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwfvkcske.jl:29\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwfvkcske.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n > m \n        return -1\n    else\
    \ \n        return round(Int64(n)/Int64(m))*Int64(m) + Int64(n) - Int64(m) \n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\nrounded_avg(7, 5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of characters in\
    \ a string. \n    For example, \n    count_chars(\"Hello World\") => 5\n    count_chars(\"\
    Hello World!\") => 6\n    count_chars(\"Hello World!\", true) => 7\n    count_chars(\"\
    Hello World!\", false) => 7\n    count_chars(\"Hello World!\", true) => 7\n  \
    \  count_chars(\"Hello World!\", false) => 7\n    count_chars(\"Hello World!\"\
    , true) => 7\n    count_chars(\"Hello World!\", false) => 7\n    count_chars(\"\
    Hello World!\", true) => 7\n    count_chars(\"Hello World!\", false) => 7\n  \
    \  count_chars(\"Hello World!\", true) => 7\n    count_chars(\"Hello World!\"\
    , false) => 7\n    count_chars(\"Hello World!\", true) => 7\n    count_chars(\"\
    Hello World!\", false) => 7\n    count_chars(\"Hello World!\", true) => 7\n  \
    \  count_chars(\"Hello World!\", false) => 7\n    count_chars(\"Hello World!\"\
    , true) => 7\n    count_chars(\"Hello World!\", false) => 7\n    count_chars(\"\
    Hello World!\", true) => 7\n    count_chars(\"Hello World!\", false) => 7\n  \
    \  count_chars(\"Hello World!\", true) => 7\n    count_chars(\"Hello World!\"\
    , false) => 7\n    count_chars(\"Hello World!\", true) => 7\n    count_chars(\"\
    Hello World!\", false) => 7\n    count_chars(\"Hello World!\", true) => 7\n  \
    \  count_chars(\"Hello World!\", false) => 7\n    count_chars(\"Hello World!\"\
    , true) => 7\n    count_chars(\"Hello World!\", false) => 7\n    count_chars(\"\
    Hello World!\", true) => 7\n    count_chars(\"Hello World!\", false) => 7\n  \
    \  count_chars(\"Hello World!\", true) => 7\n    count_chars(\"Hello World!\"\
    , false) => 7\n    count_chars(\"Hello World!\", true) => 7\n    count_chars(\"\
    Hello World!\", false) => 7\n    count_chars(\"Hello World!\", true) => 7\n  \
    \  count_chars(\"Hello World!\", false) => 7\n    count_chars(\"Hello \nusing\
    \ Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5)\
    \ == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
    \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\
    \t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546)\
    \ == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
    \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
    @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
    \ 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdjga0k7h.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdjga0k7h.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(n/m)*m\
    \ \n        rounded_avg = string(rounded_avg)\n        return rounded_avg\n  \
    \  else\n        return -1\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ in two integers n and m and returns the number of digits in n to the power of\
    \ m. \nExample: \n    digits(4, 2) => 4\n    digits(4, 3) => 8\n    digits(4,\
    \ 4) => 16\n    digits(4, 5) => 32\n    digits(4, 6) => 64\n    digits(4, 7) =>\
    \ 128\n    digits(4, 8) => 256\n    digits(4, 9) => 512\n    digits(4, 10) =>\
    \ 1024\n    digits(4, 11) => 2048\n    digits(4, 12) => 4096\n    digits(4, 13)\
    \ => 8192\n    digits(4, 14) => 16384\n    digits(4, 15) => 32768\n    digits(4,\
    \ 16) => 65536\n    digits(4, 17) => 131072\n    digits(4, 18) => 262144\n   \
    \ digits(4, 19) => 524288\n    digits(4, 20) => 1048576\n    digits(4, 21) =>\
    \ 2097152\n    digits(4, 22) => 4194304\n    digits(4, 23) => 8388608\n    digits(4,\
    \ 24) => 16777216\n    digits(4, 25) => 33554432\n    digits(4, 26) => 67108864\n\
    \    digits(4, 27) => 134217728\n    digits(4, 28) => 268435456\n    digits(4,\
    \ 29) => 536870912\n    digits(4, 30) => 1073741824\n    digits(4, 31) => 2147483648\n\
    \    digits(4, 32) => 4294967296\n    digits(4, 33) => 8589934592\n    digits(4,\
    \ 34) => 17179869184\n    digits(4, 35) => 34359738368\n    digits(4, 36) => 68719476736\n\
    \    digits(4, 37) => 137438953472\n    digits(4, 38) => 274877906944\n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5)\
    \ == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
    \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\
    \t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546)\
    \ == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
    \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
    @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
    \ 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwea_xnwf.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwea_xnwf.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if m > n then return -1\n    else return\
    \ round(Int64(n)/Int64(m))\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code\
    \ language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the first n Fibonacci numbers. \nThe Fibonacci numbers\
    \ are the numbers in the following pattern:\n0, 1, 1, 2, 3, 5, 8, 13, 21, 34,\
    \ 55, 89, 144, ...\nWrite a function that returns the first n Fibonacci numbers.\
    \ \nThe Fibonacci numbers are the numbers in the following pattern:\n0, 1, 1,\
    \ 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ...\nHint: Use a recursive function.\n\
    using Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1,\
    \ 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
    \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\
    \t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546)\
    \ == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
    \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
    @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
    \ 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp2pjjyid3.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp2pjjyid3.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n >= m \n        rounded_avg(m, n)\n\
    \    else\n        rounded_avg(m, n-1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of digits in an integer.\nExample: \n\
    \    digits(1234) => 4\n    digits(12345) => 5\n    digits(123456) => 6\n    digits(1234567)\
    \ => 7\n    digits(123456789) => 8\n    digits(1234567890) => 9\n    digits(12345678901)\
    \ => 10\n    digits(123456789012) => 11\n    digits(1234567890123) => 12\n   \
    \ digits(12345678901234) => 13\n    digits(123456789012345) => 14\n    digits(1234567890123456)\
    \ => 15\n    digits(1234567890123456789) => 16\n    digits(12345678901234567890)\
    \ => 17\n    digits(123456789012345678901) => 18\n    digits(1234567890123456789012)\
    \ => 19\n    digits(12345678901234567890123) => 20\n    digits(123456789012345678901234)\
    \ => 21\n    digits(1234567890123456789012345) => 22\n    digits(12345678901234567890123456)\
    \ => 23\n    digits(12345678901234567890123456789) => 24\n    digits(123456789012345678901234567890)\
    \ => 25\n    digits(1234567890123456789012345678901) => 26\n    digits(12345678901234567890123456789012)\
    \ => 27\n    digits(123456789012345678901234567890123) => 28\n    digits(1234567890123456789012345678901234)\
    \ => 29\n    digits(12345678901234567890123456789012345) => 30\n    digits(123456789012345678901234567890123456)\
    \ => 31\n    digits(123456789012345678901234567890123456789) => 32\n    digits(1234567890123456789012345678901234567890)\
    \ => 33\n    digits(12345678901234567890123456789012345678901) => 34\n    digits(123456789012345678901234567890123456789012)\
    \ => 35\n    digits(1234567890123456789012345678901234567890123) => 36\n    digits(12345678901234567890123456789012345678901234)\
    \ => 37\n    digits(123456789012345678901234567890123456789012345) => 38\n   \
    \ digits(1234567890123456789012345678901234567890123456) => 39\n    digits(1234567890123456789012345678901234567890123456789)\
    \ => 40\n    digits(12345678901234567890123456789012345678901234567890) => 41\n\
    \    digits(123456789012345678901234567890123456789012345678901) => 42\n    digits(1234567890123456789012345678901234567890123456789012)\
    \ => 43\n    digits(12345678901234567890123456789012345678901234567890123) =>\
    \ 44\n\nusing Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1,\
    \ 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
    \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\
    \t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546)\
    \ == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
    \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
    @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
    \ 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpu5zym71_.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpu5zym71_.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n > m \n        return -1\n    else\
    \ \n        return round(Int64(n)/Int64(m))*Int64(m) + Int64(n)\nend\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of digits in an integer.\nusing Test\n\
    \n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\"\
    )\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"\
    0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t@test(candidate(560,\
    \ 851) == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"0b101101110\")\n\
    \t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350, 902) ==\
    \ \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t@test(candidate(7,\
    \ 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwig67jay.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwig67jay.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n < m \n        return -1\n    \n \
    \   binary = \"\"\n    for i in n:m:1 \n        binary += str((i%2)+1)\n    \n\
    \    return binary.round().to_string(base=2)\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of digits in an integer.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7, 13)\
    \ == \"0b1010\")\n\t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996,\
    \ 997) == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\
    \t@test(candidate(185, 546) == \"0b101101110\")\n\t@test(candidate(362, 496) ==\
    \ \"0b110101101\")\n\t@test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197,\
    \ 233) == \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5,\
    \ 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdh9nfhi2.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdh9nfhi2.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(n\
    \ / m) * m\n        rounded_avg = rounded_avg - rounded_avg % m\n        rounded_avg\
    \ = rounded_avg + m\n        return rounded_avg\n    else\n        return -1\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\nrounded_avg(1, 5)\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.4>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.\nusing Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t\
    @test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t\
    @test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) ==\
    \ \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185,\
    \ 546) == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t\
    @test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) ==\
    \ \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) ==\
    \ -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmw9t4ykd.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmw9t4ykd.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(n\
    \ / m) * m\n        rounded_avg = rounded_avg + n - rounded_avg\n        rounded_avg\
    \ = rounded_avg % m\n        return rounded_avg\n    else\n        return -1\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of digits in an integer.\n\
    Example: digits(1234) => 4\nHint: use divrem.\nusing Test\n\n@testset begin\n\n\
    candidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7,\
    \ 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996,\
    \ 997) == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\
    \t@test(candidate(185, 546) == \"0b101101110\")\n\t@test(candidate(362, 496) ==\
    \ \"0b110101101\")\n\t@test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197,\
    \ 233) == \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5,\
    \ 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp81ukeq0f.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp81ukeq0f.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if m > n \n        return -1\n    \n \
    \   sum = 0\n    for i in n:m\n        sum += i\n    \n    return sum / m\nend\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(7,5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10,20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20,33)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that computes the factorial of a given number.\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    Example:\n    factorial(5) => \"0b120\"\n    factorial(10) => \"0b3628800\"\
    \n    factorial(20) => \"0b2432902008176640000\"\n    factorial(30) => \"0b12066154037440000000\"\
    \n    factorial(40) => \"0b1206615403744000000000\"\n    factorial(50) => \"0b1206615403744000000000000\"\
    \n    factorial(60) => \"0b120661540374400000000000000\"\n    factorial(70) =>\
    \ \"0b1206615403744000000000000000\"\n    factorial(80) => \"0b12066154037440000000000000000\"\
    \n    factorial(90) => \"0b1206615403744000000000000000000\"\n    factorial(100)\
    \ => \"0b120661540374400000000000000000000\"\n    factorial(110) => \"0b12066154037440000000000000000000000\"\
    \n    factorial(120) => \"0b120661540374400000000000000000000000\"\n    factorial(130)\
    \ => \"0b1206615403744000000000000000000000000\"\n    factorial(140) => \"0b120661540374400000000000000000000000000\"\
    \n    factorial(150) => \"0b12066154037440000000000000000000000000000\"\n    factorial(160)\
    \ => \"0b1206615403744000000000000000000000000000000\"\n    factorial(170) =>\
    \ \"0b12066154037440000000000000000000000000000000\"\n    factorial(180) => \"\
    0b120661540374400000000000000000000000000000000\"\n    factorial(190) => \"0b12066154037440000000000000000000000000000000000\"\
    \n    factorial(200) => \"0b1206615403744000000000000000000000000000000000000\"\
    \n    factorial(210) => \"0b120661540374400000000000000000000000000000000000000\"\
    \n    factorial(220) => \"0b1206615403744000000000000000000000000000000000000000\"\
    \n    factorial(230\nusing Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\
    \t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\
    \t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996, 997)\
    \ == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185,\
    \ 546) == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t\
    @test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) ==\
    \ \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) ==\
    \ -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2irw1vty.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2irw1vty.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n < m \n        return -1\n    \n \
    \   sum = 0\n    for i in n:m\n        sum += i\n    \n    return sum / m\nend\n\
    using Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1,\
    \ 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
    \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\
    \t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546)\
    \ == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
    \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
    @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
    \ 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf370zln5.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpf370zln5.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(n/m)*m\n\
    \        rounded_avg = rounded_avg % m\n        rounded_avg = rounded_avg + m\n\
    \        return rounded_avg\n    else\n        return -1\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.\nusing Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t\
    @test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t\
    @test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) ==\
    \ \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185,\
    \ 546) == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t\
    @test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) ==\
    \ \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) ==\
    \ -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzj2tz9i7.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzj2tz9i7.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n < m \n        return -1\n    \n \
    \   avg = round(n/m)\n    binary = formatInt(avg, \"b\")\n    \n    if binary\
    \ == \"\"\n        return -1\n    \n    return binary\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\")\n\t\
    @test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"0b1111001010\"\
    )\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t@test(candidate(560, 851)\
    \ == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"0b101101110\")\n\t@test(candidate(362,\
    \ 496) == \"0b110101101\")\n\t@test(candidate(350, 902) == \"0b1001110010\")\n\
    \t@test(candidate(197, 233) == \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\
    \t@test(candidate(5, 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi8t54tq3.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpi8t54tq3.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(n/m)*m\n\
    \    else\n        rounded_avg = -1\n    end\n    return rounded_avg\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes in two integers n and m and returns their sum.\nExample:\
    \ \n    sum_of_nums(1, 5) => 6\n    sum_of_nums(7, 5) => 10\n    sum_of_nums(10,\
    \ 20) => 50\n    sum_of_nums(20, 33) => 100\nHint: You can use the + operator\
    \ to do this.\nusing Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1,\
    \ 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
    \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\
    \t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546)\
    \ == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
    \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
    @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
    \ 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkpdxv4v1.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkpdxv4v1.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(n/m)*m\n\
    \    else\n        rounded_avg = -1\n    end\n    return rounded_avg\nend\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of characters in a string. \nExample:\
    \ \n    count_chars(\"Hello World\") => 10\n    count_chars(\"Hello\") => 0\n\
    \    count_chars(\"\") => 0\n    count_chars(\" \") => 1\n    count_chars(\" a\"\
    ) => 1\n    count_chars(\" a \") => 2\n    count_chars(\" a b\") => 3\n    count_chars(\"\
    \ a b c\") => 4\n    count_chars(\" a b c \") => 4\n    count_chars(\" a b c d\"\
    ) => 5\n    count_chars(\" a b c d \") => 5\n    count_chars(\" a b c d e \")\
    \ => 6\n    count_chars(\" a b c d e f \") => 6\n    count_chars(\" a b c d e\
    \ f g \") => 7\n    count_chars(\" a b c d e f g h \") => 7\n    count_chars(\"\
    \ a b c d e f g h i \") => 7\n    count_chars(\" a b c d e f g h i j \") => 7\n\
    \    count_chars(\" a b c d e f g h i j k \") => 7\n    count_chars(\" a b c d\
    \ e f g h i j k l \") => 7\n    count_chars(\" a b c d e f g h i j k l m \") =>\
    \ 7\n    count_chars(\" a b c d e f g h i j k l m n \") => 7\n    count_chars(\"\
    \ a b c d e f g h i j k l m n o \") => 7\n    count_chars(\" a b c d e f g h i\
    \ j k l m n o p \") => 7\n    count_chars(\" a b c d e f g h i j k l m n o p q\
    \ \") => 7\n    count_chars(\" a b c d e \nusing Test\n\n@testset begin\n\ncandidate\
    \ = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7, 13)\
    \ == \"0b1010\")\n\t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996,\
    \ 997) == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\
    \t@test(candidate(185, 546) == \"0b101101110\")\n\t@test(candidate(362, 496) ==\
    \ \"0b110101101\")\n\t@test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197,\
    \ 233) == \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5,\
    \ 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp43f5u279.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp43f5u279.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n > m \n        return -1\n    \n \
    \   binary = \"\"\n    \n    for i in n:m\n        binary += string(i)\n    \n\
    \    return parse(Int64, binary)\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7,\
    \ 5)\n</cell>\n<text>\nExercise 2\nWrite a function that computes the factorial\
    \ of a given number. \n    Round the answer to the nearest integer and convert\
    \ that to binary.\n    Example:\n    factorial(5) => \"0b120\"\n    factorial(10)\
    \ => \"0b2432902008176640000\"\n    factorial(20) => \"0b2432902008176640000000000\"\
    \n    factorial(33) => \"0b243290200817664000000000000\"\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\"\
    )\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"\
    0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t@test(candidate(560,\
    \ 851) == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"0b101101110\")\n\
    \t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350, 902) ==\
    \ \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t@test(candidate(7,\
    \ 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4nnvegti.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4nnvegti.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n > m \n        return -1\n    else\
    \ \n        avg = ((n+1)::Int64)/2\n        binary = bin(avg)[2:]\n        binary\
    \ = binary[2:end-1]\n        return Int64(binary)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.0>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.0>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that computes the factorial of a given number. \n    Factorial\
    \ of a number is the product of all positive integers less than or equal to that\
    \ number. \n    Example:\n    factorial(5) => 120\n    factorial(4) => 24\n  \
    \  factorial(3) => 6\n    factorial(2) => 2\n    factorial(1) => 1\n    factorial(0)\
    \ => 1\n    factorial(-1) => 0\n    factorial(10) => 3628800\n    factorial(100)\
    \ => 3628800\n    factorial(1000) => 3628800\n    factorial(10000) => 3628800\n\
    \    factorial(100000) => 3628800\n    factorial(1000000) => 3628800\n    factorial(100000000)\
    \ => 3628800\n    factorial(1000000000) => 3628800\n    factorial(1000000000000)\
    \ => 3628800\n    factorial(100000000000000) => 3628800\n    factorial(1000000000000000000)\
    \ => 3628800\n    factorial(10000000000000000000) => 3628800\n    factorial(100000000000000000000)\
    \ => 3628800\n    factorial(1000000000000000000000) => 3628800\n    factorial(10000000000000000000000)\
    \ => 3628800\n    factorial(1000000000000000000000000) => 3628800\n    factorial(10000000000000000000000000)\
    \ => 3628800\n    factorial(100000000000000000000000000) => 3628800\n    factorial(1000000000000000000000000000)\
    \ => 3628800\n    factorial(10000000000000000000000000000) => 3628800\n    factorial(1000000000000000000000000000000)\
    \ => 3628800\n    factorial(100000000000000000000000000000000) => 3628800\n  \
    \  factorial(1000000000000000000000000000000000) => 3628800\n    factorial(1000000000000000000000000000000000)\
    \ => 3628800\n    factorial(1000000000000000000000000000000000) => 3628800\n \
    \   factorial(1000000000000000000000000000000000) => 3628800\n    factorial(1000000000000000000000000000000000)\
    \ => 3628800\n    factorial(1000000000000000000000000000000000) => 362\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5)\
    \ == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
    \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\
    \t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546)\
    \ == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
    \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
    @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
    \ 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpdvckyjsu.jl:16\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpdvckyjsu.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n > m \n        rounded_avg(m, n)\n\
    \    else\n        rounded_avg(m, n-1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes in\
    \ two integers n and m and returns the number of digits in m that are less than\
    \ or equal to n.\nusing Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t\
    @test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t\
    @test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) ==\
    \ \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185,\
    \ 546) == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t\
    @test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) ==\
    \ \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) ==\
    \ -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvo95pe4n.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvo95pe4n.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n >= m\n        rounded_avg = -1\n\
    \    else\n        rounded_avg = round(n/m)*m\n    end\n    return rounded_avg\n\
    end\n</cell>\n<code language=julia-1.3>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer.\nusing Test\n\
    \n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\"\
    )\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"\
    0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t@test(candidate(560,\
    \ 851) == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"0b101101110\")\n\
    \t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350, 902) ==\
    \ \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t@test(candidate(7,\
    \ 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptz55vo8m.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptz55vo8m.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(n\
    \ / m) * m\n        rounded_avg = rounded_avg - rounded_avg % m\n        return\
    \ rounded_avg % 2 == 0 ? rounded_avg : -1\n    else\n        return -1\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(\nusing Test\n\
    \n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\"\
    )\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"\
    0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t@test(candidate(560,\
    \ 851) == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"0b101101110\")\n\
    \t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350, 902) ==\
    \ \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t@test(candidate(7,\
    \ 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy8nqz6wv.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpy8nqz6wv.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(n/m)*m\
    \ \n    else\n        rounded_avg = -1\n    end\n    return rounded_avg\nend\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that computes the factorial of a given integer. \nThe factorial\
    \ of a non-negative integer n, denoted by n!, is the product of all positive integers\
    \ less than or equal to n. \nFor example, 5! = 5 x 4 x 3 x 2 x 1 = 120. \nWrite\
    \ a function that computes the factorial of a given integer. \nThe factorial of\
    \ a non-negative integer n, denoted by n!, is the product of all positive integers\
    \ less than or equal to n. \nFor example, 5! = 5 x 4 x 3 x 2 x 1 = 120. \nIf n\
    \ is negative, return -1.\nExample: \nfactorial(5) => 120\nfactorial(-1) => -1\n\
    factorial(7) => 5040\nfactorial(10) => 3628800\nfactorial(20) => 2432902008176640000\n\
    factorial(30) => 1216451004088320000\nfactorial(40) => 6204484030487920000\nfactorial(50)\
    \ => 120514700163951400\nfactorial(60) => 2432902008176640000\nfactorial(70) =>\
    \ -512800\nfactorial(80) => -3628800\nfactorial(90) => -2432902008176640000\n\
    factorial(100) => -512800\nfactorial(110) => -3628800\nfactorial(120) => -2432902008176640000\n\
    factorial(130) => -512800\nfactorial(140) => -3628800\nfactorial(150) => -2432902008176640000\n\
    factorial(160) => -512800\nfactorial(170) => -3628800\nfactorial(180) => -2432902008176640000\n\
    factorial(190) => -512800\nfactorial(200) => -3628800\nfactorial(210) => -2432902008176640000\n\
    factorial(220) => -512800\nfactorial(230) => -3628800\nfactorial(240) => -2432902008176640000\n\
    factorial(250) => -512800\nusing Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\
    \t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\
    \t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996, 997)\
    \ == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185,\
    \ 546) == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t\
    @test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) ==\
    \ \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) ==\
    \ -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq_w5e_sr.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpq_w5e_sr.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(n/m)*m\n\
    \    else\n        rounded_avg = -1\n    end\n    return rounded_avg\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer.\nusing Test\n\
    \n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\"\
    )\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"\
    0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t@test(candidate(560,\
    \ 851) == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"0b101101110\")\n\
    \t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350, 902) ==\
    \ \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t@test(candidate(7,\
    \ 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyesr_ctm.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyesr_ctm.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n >= m \n        rounded_avg = -1\n\
    \    else\n        rounded_avg = round(n/m)*m\n    end\n    return rounded_avg\n\
    end\n</cell>\n<code language=julia-1.4>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.4>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer.\nusing Test\n\
    \n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\"\
    )\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"\
    0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t@test(candidate(560,\
    \ 851) == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"0b101101110\")\n\
    \t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350, 902) ==\
    \ \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t@test(candidate(7,\
    \ 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphl1w13bj.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphl1w13bj.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n > m \n        rounded_avg(m, n)\n\
    \    else\n        rounded_avg(m, n-1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7,5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10,20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20,33)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the number of digits in an integer.\nusing Test\n\n\
    @testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\"\
    )\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"\
    0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t@test(candidate(560,\
    \ 851) == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"0b101101110\")\n\
    \t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350, 902) ==\
    \ \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t@test(candidate(7,\
    \ 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmp7n0dw_.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmp7n0dw_.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n < m \n        rounded_avg(m, n)\n\
    \    else\n        rounded_avg(n - m, m) + bin(n - m).[2:end]\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.\nusing Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t\
    @test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t\
    @test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) ==\
    \ \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185,\
    \ 546) == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t\
    @test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) ==\
    \ \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) ==\
    \ -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpzxymc9u3.jl:15\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpzxymc9u3.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(Int64(n/m))\n\
    \        return String(rounded_avg)\n    else\n        return -1\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that computes the factorial of a given number. \n    Round\
    \ the answer to the nearest integer and convert that to binary.\n    Example:\n\
    \    factorial(5) => \"0b120\"\n    factorial(10) => \"0b3628800\"\n    factorial(20)\
    \ => \"0b2432902008176640000\"\n    factorial(33) => \"0b11000990776957207520\"\
    \n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1,\
    \ 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
    \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\
    \t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546)\
    \ == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
    \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
    @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
    \ 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9wk3108e.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9wk3108e.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(n/m)*m\n\
    \    else\n        rounded_avg = -1\n    end\n    return rounded_avg\nend\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.4>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer.\nusing Test\n\
    \n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\"\
    )\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"\
    0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t@test(candidate(560,\
    \ 851) == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"0b101101110\")\n\
    \t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350, 902) ==\
    \ \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t@test(candidate(7,\
    \ 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp66tg0i88.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp66tg0i88.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(Int64(n/m))\n\
    \        return bin(rounded_avg)\n    else\n        return -1\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes in two integers n and m and returns their sum.\nExample:\
    \ \n    sum_of_three(1, 5) => 6\n    sum_of_three(7, 5) => 12\n    sum_of_three(10,\
    \ 20) => 33\n    sum_of_three(20, 33) => 55\nHint: You can use the + operator\
    \ to add the two integers\nusing Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\
    \t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\
    \t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996, 997)\
    \ == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185,\
    \ 546) == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t\
    @test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) ==\
    \ \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) ==\
    \ -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt7v9rvb1.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpt7v9rvb1.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if m > n \n        return -1\n    \n \
    \   sum = 0\n    for i in n:m:sum+=1\n    \n    avg = sum/(n-m)\n    \n    return\
    \ round(avg)\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7,5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10,20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20,33)\n</cell>\n<text>\nExercise 2\nWrite a function that takes in\
    \ two integers n and m and returns their sum.\nusing Test\n\n@testset begin\n\n\
    candidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7,\
    \ 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996,\
    \ 997) == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\
    \t@test(candidate(185, 546) == \"0b101101110\")\n\t@test(candidate(362, 496) ==\
    \ \"0b110101101\")\n\t@test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197,\
    \ 233) == \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5,\
    \ 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid identifier name \"+=\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx1xhyt_r.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpx1xhyt_r.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(Int64(n)/Int64(m))*Int64(m)\
    \ + Int64(n) - Int64(m) \n        return String(rounded_avg) \n    else \n   \
    \     return -1\n    end\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code\
    \ language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of digits in an integer.\nusing Test\n\n\
    @testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\"\
    )\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"\
    0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t@test(candidate(560,\
    \ 851) == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"0b101101110\")\n\
    \t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350, 902) ==\
    \ \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t@test(candidate(7,\
    \ 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7oh_egk3.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7oh_egk3.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if m > n \n        error(\"m must be less\
    \ than n\")\n    end\n    \n    if n == m \n        return m\n    end\n    \n\
    \    binary = \"\"\n    \n    for i in n:m:1 \n        binary = string(i, base=2,\
    \ padmode=PadMode.Zeros)\n    end\n    \n    binary = string(m, base=2, padmode=PadMode.Zeros)\n\
    \    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise: Write a function that returns the number of digits\
    \ in an integer.\nusing Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t\
    @test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t\
    @test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) ==\
    \ \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185,\
    \ 546) == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t\
    @test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) ==\
    \ \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) ==\
    \ -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9pfq3t0w.jl:30\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9pfq3t0w.jl:30\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(n/m)*m\
    \ \n        rounded_avg = rounded_avg + n - rounded_avg\n        rounded_avg =\
    \ rounded_avg % m\n        rounded_avg = rounded_avg / m\n        rounded_avg\
    \ = rounded_avg.to_s(2)\n        return rounded_avg\n    else\n        return\
    \ -1\n    end\nend\n</cell>\n<code language=julia-1.3>\nrounded_avg(1, 5)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in two integers n and\
    \ m and returns the number of digits in m that are less than or equal to n.\n\
    using Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1,\
    \ 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
    \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\
    \t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546)\
    \ == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
    \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
    @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
    \ 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbdjhkfsm.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbdjhkfsm.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m\n        rounded_avg = round(n/m)\n\
    \        binary = string2binary(rounded_avg)\n        return binary\n    else\n\
    \        return -1\n    end\nend\n</cell>\n<code language=julia-1.4>\nrounded_avg(1,\
    \ 5)\n</cell>\n<code language=julia-1.4>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.4>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in two integers n and\
    \ m and returns their sum.\nExample: \n    sum_of_two_numbers(3, 5) => 10\n  \
    \  sum_of_two_numbers(5, 7) => 14\n    sum_of_two_numbers(5, 10) => 15\n    sum_of_two_numbers(10,\
    \ 20) => 30\n    sum_of_two_numbers(20, 30) => 40\n    sum_of_two_numbers(30,\
    \ 40) => 50\n    sum_of_two_numbers(40, 50) => 60\n    sum_of_two_numbers(50,\
    \ 60) => 70\n    sum_of_two_numbers(60, 70) => 80\n    sum_of_two_numbers(70,\
    \ 80) => 90\n    sum_of_two_numbers(80, 90) => 100\n    sum_of_two_numbers(90,\
    \ 100) => -1\n    sum_of_two_numbers(100, -1) => -1\n    sum_of_two_numbers(-1,\
    \ -1) => -1\n    sum_of_two_numbers(-1, -1) => -1\n    sum_of_two_numbers(-1,\
    \ -1) => -1\n    sum_of_two_numbers(-1, -1) => -1\n    sum_of_two_numbers(-1,\
    \ -1) => -1\n    sum_of_two_numbers(-1, -1) => -1\n    sum_of_two_numbers(-1,\
    \ -1) => -1\n    sum_of_two_numbers(-1, -1) => -1\n    sum_of_two_numbers(-1,\
    \ -1) => -1\n    sum_of_two_numbers(-1, -1) => -1\n    sum_of_two_numbers(-1,\
    \ -1) => -1\n    sum_of_two_numbers(-1, -1) => -1\n    sum_of_two_numbers(-1,\
    \ -1) => -1\n    sum_of_two_numbers(-1, -1) => -1\n    sum_of_two_numbers(-1,\
    \ -1) => -1\n    sum_of_two_numbers(-1, -1) => -1\n    sum_of_two_numbers(-1,\
    \ -1) => -1\n    sum_of_two_numbers(-1, -1) => -1\n    sum_of_two_numbers(-1,\
    \ -1) => -1\n    sum_of_two_numbers(-1, -1) => -1\n    sum_of_two_numbers(-1,\
    \ -1) => -1\n    sum_of_\nusing Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\
    \t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\
    \t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996, 997)\
    \ == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185,\
    \ 546) == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t\
    @test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) ==\
    \ \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) ==\
    \ -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3xqnz729.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3xqnz729.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n >= m \n        rounded_avg = -1\n\
    \    else \n        rounded_avg = round(n/m)*m\n        rounded_avg = string(rounded_avg)\n\
    \    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.4>\nrounded_avg(1,\
    \ 5)\n</cell>\n<code language=julia-1.4>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.4>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that computes the factorial of a\
    \ given number. \nThe factorial of a non-negative integer $n$ is defined as the\
    \ product of all the integers up to and including $n$:\n$$\\begin{align}\n\\text{Factorial}(n)\
    \ &= 1\\\n\\text{Factorial}(n) &= 1\\cdot2\\cdot3\\cdot4\\cdot5\\cdot6\\cdot7\\\
    cdot8\\cdot9\\cdot10\\cdot11\\cdot12\\cdot13\\cdot14\\cdot15\\cdot16\\cdot17\\\
    cdot18\\cdot19\\cdot20\\cdot21\\cdot22\\cdot23\\cdot24\\cdot25\\cdot26\\cdot27\\\
    cdot28\\cdot29\\cdot30\\cdot31\\cdot32\\cdot33\\cdot34\\cdot35\\cdot36\\cdot37\\\
    cdot38\\cdot39\\cdot40\\cdot41\\cdot42\\cdot43\\cdot44\\cdot45\\cdot46\\cdot47\\\
    cdot48\\cdot49\\cdot50\\cdot51\\cdot52\\cdot53\\cdot54\\cdot55\\cdot56\\cdot57\\\
    cdot58\\cdot59\\cdot60\\cdot61\\cdot62\\cdot63\\cdot64\\cdot65\\cdot66\\cdot67\\\
    cdot68\\cdot69\\cdot70\\cdot71\\cdot72\\cdot73\\cdot74\\cdot75\\cdot76\\cdot77\\\
    cdot78\\cdot79\\cdot80\\cdot81\\cdot\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7, 13)\
    \ == \"0b1010\")\n\t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996,\
    \ 997) == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\
    \t@test(candidate(185, 546) == \"0b101101110\")\n\t@test(candidate(362, 496) ==\
    \ \"0b110101101\")\n\t@test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197,\
    \ 233) == \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5,\
    \ 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpuc59yon3.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpuc59yon3.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n > m \n        rounded_avg = -1\n\
    \    else\n        rounded_avg = round(Int64(n)/Int64(m))*Int64(m) + Int64(n)\
    \ - Int64(m) \n    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of digits in an integer.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7, 13)\
    \ == \"0b1010\")\n\t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996,\
    \ 997) == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\
    \t@test(candidate(185, 546) == \"0b101101110\")\n\t@test(candidate(362, 496) ==\
    \ \"0b110101101\")\n\t@test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197,\
    \ 233) == \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5,\
    \ 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5ddd4n73.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5ddd4n73.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(n/m)*m\n\
    \        rounded_avg = round(rounded_avg)\n        rounded_avg = string(rounded_avg)\n\
    \        return rounded_avg\n    else\n        return -1\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer.\nusing Test\n\
    \n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\"\
    )\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"\
    0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t@test(candidate(560,\
    \ 851) == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"0b101101110\")\n\
    \t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350, 902) ==\
    \ \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t@test(candidate(7,\
    \ 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqwq36dxy.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqwq36dxy.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if m > n \n        error(\"m > n\")\n\
    \    end\n    \n    sum = 0\n    for i in n:m\n        sum += i\n    end\n   \
    \ \n    rounded_avg = round(sum / 2)\n    \n    if rounded_avg == sum\n      \
    \  return rounded_avg\n    else\n        return -1\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of digits in an integer.\nusing Test\n\
    \n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\"\
    )\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"\
    0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t@test(candidate(560,\
    \ 851) == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"0b101101110\")\n\
    \t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350, 902) ==\
    \ \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t@test(candidate(7,\
    \ 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9_6jx0f4.jl:29\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9_6jx0f4.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n >= m \n        rounded_avg = -1\n\
    \    else\n        rounded_avg = ((n+m)/2::Int64).round::Int64\n    end\n    return\
    \ rounded_avg\nend\nusing Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\
    \t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\
    \t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996, 997)\
    \ == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185,\
    \ 546) == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t\
    @test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) ==\
    \ \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) ==\
    \ -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpo0sf80ab.jl:24\n  Test threw exception\n\
    \  Expression: candidate(1, 5) == \"0b11\"\n  type Float64 has no field round\n\
    \  Stacktrace:\n   [1] getproperty(::Float64, ::Symbol) at ./Base.jl:33\n   [2]\
    \ rounded_avg(::Int64, ::Int64) at /tmp/tmpo0sf80ab.jl:15\n   [3] top-level scope\
    \ at /tmp/tmpo0sf80ab.jl:24\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpo0sf80ab.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpo0sf80ab.jl:25\n  Test threw exception\n  Expression: candidate(7,\
    \ 13) == \"0b1010\"\n  type Float64 has no field round\n  Stacktrace:\n   [1]\
    \ getproperty(::Float64, ::Symbol) at ./Base.jl:33\n   [2] rounded_avg(::Int64,\
    \ ::Int64) at /tmp/tmpo0sf80ab.jl:15\n   [3] top-level scope at /tmp/tmpo0sf80ab.jl:25\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpo0sf80ab.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpo0sf80ab.jl:26\n  Test threw exception\n  Expression: candidate(964,\
    \ 977) == \"0b1111001010\"\n  type Float64 has no field round\n  Stacktrace:\n\
    \   [1] getproperty(::Float64, ::Symbol) at ./Base.jl:33\n   [2] rounded_avg(::Int64,\
    \ ::Int64) at /tmp/tmpo0sf80ab.jl:15\n   [3] top-level scope at /tmp/tmpo0sf80ab.jl:26\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpo0sf80ab.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpo0sf80ab.jl:27\n  Test threw exception\n  Expression: candidate(996,\
    \ 997) == \"0b1111100100\"\n  type Float64 has no field round\n  Stacktrace:\n\
    \   [1] getproperty(::Float64, ::Symbol) at ./Base.jl:33\n   [2] rounded_avg(::Int64,\
    \ ::Int64) at /tmp/tmpo0sf80ab.jl:15\n   [3] top-level scope at /tmp/tmpo0sf80ab.jl:27\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpo0sf80ab.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpo0sf80ab.jl:28\n  Test threw exception\n  Expression: candidate(560,\
    \ 851) == \"0b1011000010\"\n  type Float64 has no field round\n  Stacktrace:\n\
    \   [1] getproperty(::Float64, ::Symbol) at ./Base.jl:33\n   [2] rounded_avg(::Int64,\
    \ ::Int64) at /tmp/tmpo0sf80ab.jl:15\n   [3] top-level scope at /tmp/tmpo0sf80ab.jl:28\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpo0sf80ab.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpo0sf80ab.jl:29\n  Test threw exception\n  Expression: candidate(185,\
    \ 546) == \"0b101101110\"\n  type Float64 has no field round\n  Stacktrace:\n\
    \   [1] getproperty(::Float64, ::Symbol) at ./Base.jl:33\n   [2] rounded_avg(::Int64,\
    \ ::Int64) at /tmp/tmpo0sf80ab.jl:15\n   [3] top-level scope at /tmp/tmpo0sf80ab.jl:29\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpo0sf80ab.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpo0sf80ab.jl:30\n  Test threw exception\n  Expression: candidate(362,\
    \ 496) == \"0b110101101\"\n  type Float64 has no field round\n  Stacktrace:\n\
    \   [1] getproperty(::Float64, ::Symbol) at ./Base.jl:33\n   [2] rounded_avg(::Int64,\
    \ ::Int64) at /tmp/tmpo0sf80ab.jl:15\n   [3] top-level scope at /tmp/tmpo0sf80ab.jl:30\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpo0sf80ab.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpo0sf80ab.jl:31\n  Test threw exception\n  Expression: candidate(350,\
    \ 902) == \"0b1001110010\"\n  type Float64 has no field round\n  Stacktrace:\n\
    \   [1] getproperty(::Float64, ::Symbol) at ./Base.jl:33\n   [2] rounded_avg(::Int64,\
    \ ::Int64) at /tmp/tmpo0sf80ab.jl:15\n   [3] top-level scope at /tmp/tmpo0sf80ab.jl:31\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpo0sf80ab.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpo0sf80ab.jl:32\n  Test threw exception\n  Expression: candidate(197,\
    \ 233) == \"0b11010111\"\n  type Float64 has no field round\n  Stacktrace:\n \
    \  [1] getproperty(::Float64, ::Symbol) at ./Base.jl:33\n   [2] rounded_avg(::Int64,\
    \ ::Int64) at /tmp/tmpo0sf80ab.jl:15\n   [3] top-level scope at /tmp/tmpo0sf80ab.jl:32\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpo0sf80ab.jl:23\n  \ntest set: Test Failed at\
    \ /tmp/tmpo0sf80ab.jl:35\n  Expression: candidate(5, 5) == \"0b101\"\n   Evaluated:\
    \ -1 == \"0b101\"\nStacktrace:\n [1] top-level scope at /tmp/tmpo0sf80ab.jl:35\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpo0sf80ab.jl:23\nTest Summary: | Pass  Fail  Error\
    \  Total\ntest set      |    2     1      9     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo0sf80ab.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if m > n \n        error(\"m must be less\
    \ than n\")\n    else if n == m \n        return n\n    else \n        avg = (n+m)/2\n\
    \        binary = bitstring(avg)\n        binary = binary.reverse\n        return\
    \ binary\n    end\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(\nusing Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1,\
    \ 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
    \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\
    \t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546)\
    \ == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
    \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
    @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
    \ 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpc5ebvddi.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpc5ebvddi.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(n/m)*m\n\
    \    else\n        rounded_avg = -1\n    end\n    return rounded_avg\nend\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that computes the factorial of a given number. \nExample: \n\
    factorial(5) => 120\nfactorial(0) => 1\nfactorial(1) => 1\nfactorial(2) => 2\n\
    factorial(3) => 6\nfactorial(4) => 24\nHint: \nUse a for loop to compute the factorial\
    \ of a number.\nusing Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1,\
    \ 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
    \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\
    \t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546)\
    \ == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
    \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
    @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
    \ 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpawmhvc73.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpawmhvc73.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(n\
    \ / m) * m\n    else\n        rounded_avg = -1\n    end\n    return rounded_avg\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that computes the factorial of a\
    \ given number. \n    Round the answer to the nearest integer and convert that\
    \ to binary.\n    Example:\n    factorial(5) => \"0b120\"\n    factorial(10) =>\
    \ \"0b3628800\"\n    factorial(20) => \"0b2432902008176640000\"\n    factorial(33)\
    \ => \"0b11000990776957207520\"\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7,\
    \ 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996,\
    \ 997) == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\
    \t@test(candidate(185, 546) == \"0b101101110\")\n\t@test(candidate(362, 496) ==\
    \ \"0b110101101\")\n\t@test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197,\
    \ 233) == \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5,\
    \ 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppx68qr8u.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppx68qr8u.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(n/m)*m\
    \ \n    else \n        rounded_avg = -1\n    end\n    return rounded_avg\nend\n\
    </cell>\n<code language=julia-1.4>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.4>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer.\nusing Test\n\
    \n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\"\
    )\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"\
    0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t@test(candidate(560,\
    \ 851) == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"0b101101110\")\n\
    \t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350, 902) ==\
    \ \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t@test(candidate(7,\
    \ 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1p0y1oou.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1p0y1oou.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if m > n \n        return -1\n    \n \
    \   binary = \"\"\n    \n    for i in n:m-1\n        binary += string(i)\n   \
    \ \n    binary = binary[2:]\n    \n    return Int64(binary)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes in two integers n and m and returns their sum.\nIf\
    \ n is greater than m, return -1.\nExample: \n    sum_of_two(1, 5) => 6\n    sum_of_two(7,\
    \ 5) => -1\n    sum_of_two(10, 20) => 25\n    sum_of_two(20, 33) => -1\nHint:\
    \ You can use the + operator to sum two integers. \nExample: \n    1 + 5 => 6\n\
    \    7 + 5 => -1\n    10 + 20 => 25\n    20 + 33 => -1\nHint: You can use the\
    \ * operator to multiply two integers. \nExample: \n    1 * 5 => 5\n    7 * 5\
    \ => 0\n    10 * 20 => 200\n    20 * 33 => -1\nHint: You can use the / operator\
    \ to divide two integers. \nExample: \n    1 / 5 => 0.25\n    7 / 5 => -1\n  \
    \  10 / 20 => 0.125\n    20 / 33 => -1\nHint: You can use the % operator to find\
    \ the remainder after dividing two integers. \nExample: \n    1 % 5 => 0\n   \
    \ 7 % 5 => 1\n    10 % 20 => 0\n    20 % 33 => 1\nHint: You can use the divrem\
    \ function to find the quotient and remainder of two integers. \nExample: \n \
    \   divrem(1, 5) => (1, 0)\n    divrem(7, 5) => (-1, 1)\n    divrem(10, 20) =>\
    \ (0, 0)\n    divrem(20, 33) => (-1, 1)\nHint: You can use the divrem function\
    \ with negative numbers. \nExample: \n    divrem(-1, 5) => (-1, 0)\n    divrem(-7,\
    \ 5) => (-1, 1)\n    divrem(-10, 20) => (-1, 0)\n    divrem(-20, 33) => (-1, 1)\n\
    Hint: You can use the divrem function with floating point numbers. \nExample:\
    \ \n    divrem(0.5, 5) => (0, 0.5)\n    divrem(0.7, 5\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\")\n\t\
    @test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"0b1111001010\"\
    )\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t@test(candidate(560, 851)\
    \ == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"0b101101110\")\n\t@test(candidate(362,\
    \ 496) == \"0b110101101\")\n\t@test(candidate(350, 902) == \"0b1001110010\")\n\
    \t@test(candidate(197, 233) == \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\
    \t@test(candidate(5, 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpdozwlmny.jl:20\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpdozwlmny.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n >= m \n        rounded_avg = -1\n\
    \    else\n        rounded_avg = round(Int64(n)/Int64(m))*Int64(m) + Int64(n)\
    \ - Int64(m) \n    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite a function that computes\
    \ the factorial of a given number. \n    Round the answer to the nearest integer\
    \ and convert that to binary.\n    Example:\n    factorial(5) => \"0b120\"\n \
    \   factorial(10) => \"0b3628800\"\n    factorial(20) => \"0b2432902008176640000\"\
    \n    factorial(33) => \"0b113372036854775808\"\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\")\n\t\
    @test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"0b1111001010\"\
    )\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t@test(candidate(560, 851)\
    \ == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"0b101101110\")\n\t@test(candidate(362,\
    \ 496) == \"0b110101101\")\n\t@test(candidate(350, 902) == \"0b1001110010\")\n\
    \t@test(candidate(197, 233) == \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\
    \t@test(candidate(5, 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgyvnvc4l.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgyvnvc4l.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(n/m)*m\
    \ \n        rounded_avg = rounded_avg + n \n        rounded_avg = rounded_avg\
    \ % m \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ % m \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ % m \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ % m \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ % m \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ % m \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ % m \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ % m \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ % m \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ % m \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ % m \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ % m \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ % m \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ % m \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ % m \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ % m \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ % m \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ % m \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ % m \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ % m \n        rounded_avg = rounded_avg % m \n        rounded_av\nusing Test\n\
    \n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\"\
    )\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"\
    0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t@test(candidate(560,\
    \ 851) == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"0b101101110\")\n\
    \t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350, 902) ==\
    \ \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t@test(candidate(7,\
    \ 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmposjjyni4.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmposjjyni4.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n < m \n        return -1\n    \n \
    \   binary = \"\"\n    \n    for i = n:m \n        binary += string(i%2)\n   \
    \     i /= 2\n    \n    return Int64(binary)\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 3\n\
    Write a function that converts a binary string to a decimal integer.\nusing Test\n\
    \n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\"\
    )\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"\
    0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t@test(candidate(560,\
    \ 851) == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"0b101101110\")\n\
    \t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350, 902) ==\
    \ \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t@test(candidate(7,\
    \ 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp163n8b2n.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp163n8b2n.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(n/m)*m\n\
    \        return string(rounded_avg)\n    else\n        return -1\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.\nusing Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t\
    @test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t\
    @test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) ==\
    \ \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185,\
    \ 546) == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t\
    @test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) ==\
    \ \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) ==\
    \ -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2zprvlzr.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2zprvlzr.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m\n        rounded_avg = round(n/m)\n\
    \    else\n        rounded_avg = -1\n    end\n    return rounded_avg\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that computes the factorial of a given number. \nThe factorial\
    \ of a non-negative integer is defined as the product of all the integers up to\
    \ and including the given number. \nFor example, 5! = 5 x 4 x 3 x 2 x 1 = 120.\
    \ \nWrite a recursive function that computes the factorial of a given number.\n\
    The function should take one argument, the number to compute the factorial of.\
    \ \nThe function should return the factorial of the given number.\nThe function\
    \ should raise an error if the given number is negative.\nThe function should\
    \ raise an error if the given number is 0.\nThe function should raise an error\
    \ if the given number is greater than the maximum allowed recursion depth.\nThe\
    \ function should raise an error if the given number is less than the minimum\
    \ allowed recursion depth.\nThe function should raise an error if the given number\
    \ is NaN.\nThe function should raise an error if the given number is infinite.\n\
    The function should raise an error if the given number is NaN.\nThe function should\
    \ raise an error if the given number is infinite.\nThe function should raise an\
    \ error if the given number is NaN.\nThe function should raise an error if the\
    \ given number is infinite.\nThe function should raise an error if the given number\
    \ is NaN.\nThe function should raise an error if the given number is infinite.\n\
    The function should raise an error if the given number is NaN.\nThe function should\
    \ raise an error if the given number is infinite.\nThe function should raise an\
    \ error if the given number is NaN.\nThe function should raise an error if the\
    \ given number is infinite.\nThe function should raise an error if the given number\
    \ is NaN.\nThe function should raise an error if the given number is infinite.\n\
    The function should raise an error if the given number is NaN.\nThe function should\
    \ raise an error if the given number is infinite.\nThe function should raise an\
    \ error if the given number is NaN.\nThe function should raise an error if the\
    \ given number is infinite.\nThe function should raise an error if the given number\
    \ is NaN.\nThe function should raise an error if the given number is infinite.\n\
    The function should raise an error if the given number is NaN.\nThe function should\
    \ raise an error if the given number is infinite.\nThe function should raise an\
    \ error if the given number is NaN.\nThe function should raise an error if the\
    \ given number is infinite.\nusing Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\
    \t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\
    \t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996, 997)\
    \ == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185,\
    \ 546) == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t\
    @test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) ==\
    \ \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) ==\
    \ -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpotl4c4g3.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpotl4c4g3.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n > m \n        error(\"n must be less\
    \ than m\")\n    end\n    \n    avg = (n+m)/2\n    \n    binary = \"\"\n    for\
    \ i = 1:length(avg)\n        binary = string(binary, string(avg[i]))\n    end\n\
    \    \n    if binary == \"0\"\n        binary = -1\n    end\n    \n    return\
    \ binary\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that computes the factorial of a\
    \ given number. \n    Factorials are defined as $n! = n \\times n-1 \\times n-2\
    \ \\times ...$ \n    Example:\n    factorial(5) => 120\n    factorial(3) => 6\n\
    \    factorial(0) => 1\n    factorial(-1) => 0\n    factorial(-2) => -1\n    factorial(10)\
    \ => 3628800\n    factorial(100) => 3628800\n    factorial(1000) => 3628800\n\
    \    factorial(10000) => 3628800\n    factorial(100000) => 3628800\n    factorial(1000000)\
    \ => 3628800\n    factorial(100000000) => 3628800\n    factorial(1000000000) =>\
    \ 3628800\n    factorial(1000000000000) => 3628800\n    factorial(100000000000000)\
    \ => 3628800\n    factorial(1000000000000000000) => 3628800\n    factorial(100000000000000000000)\
    \ => 3628800\n    factorial(10000000000000000000000) => 3628800\n    factorial(1000000000000000000000000)\
    \ => 3628800\n    factorial(100000000000000000000000000) => 3628800\n    factorial(10000000000000000000000000000)\
    \ => 3628800\n    factorial(1000000000000000000000000000000) => 3628800\n    factorial(100000000000000000000000000000000)\
    \ => 3628800\n    factorial(1000000000000000000000000000000000) => 3628800\n \
    \   factorial(1000000000000000000000000000000000) => 3628800\n    factorial(100000000000000000000000000000000)\
    \ => 3628800\n    factorial(1000000000000000000000000000000000) => 3628800\n \
    \   factorial(100000000000000000000000000000000) => 3628800\n    factorial(1000000000000000000000000000000000)\
    \ => 3628800\n    factorial(100000000000000000000000000000000) => 3628800\n  \
    \  factorial(1000000000000000000000000000000000) => 3628800\n    factorial(100\n\
    using Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1,\
    \ 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
    \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\
    \t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546)\
    \ == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
    \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
    @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
    \ 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp84k_7wbx.jl:29\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp84k_7wbx.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n > m \n        rounded_avg = -1\n\
    \    else\n        rounded_avg = round(n/m)*m\n    end\n    return rounded_avg\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.\nusing Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t\
    @test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t\
    @test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) ==\
    \ \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185,\
    \ 546) == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t\
    @test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) ==\
    \ \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) ==\
    \ -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpko3cb9mr.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpko3cb9mr.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        return -1\n    else\
    \ \n        return round(Int64(n)/Int64(m))*Int64(m) \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer.\nusing Test\n\
    \n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\"\
    )\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"\
    0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t@test(candidate(560,\
    \ 851) == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"0b101101110\")\n\
    \t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350, 902) ==\
    \ \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t@test(candidate(7,\
    \ 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3jwe_w24.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3jwe_w24.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m\n        rounded_avg = round(n/m)*m\n\
    \    else\n        rounded_avg = -1\n    end\n    return rounded_avg\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer.\nusing Test\n\
    \n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\"\
    )\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"\
    0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t@test(candidate(560,\
    \ 851) == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"0b101101110\")\n\
    \t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350, 902) ==\
    \ \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t@test(candidate(7,\
    \ 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkial5cva.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkial5cva.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = Int64(ceil(Int,\
    \ (n+m)/2))\n        rounded_bin = Int64(ceil(Int, log2(rounded_avg)))\n     \
    \   rounded_bin = rounded_bin + rounded_avg - rounded_bin\n        rounded_bin\
    \ = rounded_bin.to_s(2)\n        rounded_bin = string(rounded_bin)\n        return\
    \ rounded_bin\n    else\n        return -1\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.4>\nrounded_avg(7, 10)\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(7, 20)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(7, 33)\n</cell>\n<code language=julia-1.4>\nrounded_avg(7, 33)\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(7, 33)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(7, 33)\n</cell>\n<code language=julia-1.4>\nrounded_avg(7, 33)\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(7, 33)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(7, 33)\n</cell>\n<code language=julia-1.4>\nrounded_avg(7, 33)\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(7, 33)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(7, 33)\n</cell>\n<code language=julia-1.4>\nrounded_avg(7, 33)\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(7, 33)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(7, 33)\n</cell>\n<code language=julia-1.4>\nrounded_avg(7, 33)\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(7, 33)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(7, 33)\n</cell>\n<code language=julia-1.4>\nrounded_avg(7, 33)\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(7, 33)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(7, 33)\n</cell>\n<code language=julia-1.4>\nrounded_avg(7, 33)\n</cell>\n\
    <code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\
    \t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\
    \t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996, 997)\
    \ == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185,\
    \ 546) == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t\
    @test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) ==\
    \ \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) ==\
    \ -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpys3p_7mg.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpys3p_7mg.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n >= m \n        rounded_avg = -1\n\
    \    else \n        rounded_avg = round(Int64(n)/Int64(m))*Int64(m) + Int64(n)\n\
    \    end\n    return rounded_avg\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7, 13)\
    \ == \"0b1010\")\n\t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996,\
    \ 997) == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\
    \t@test(candidate(185, 546) == \"0b101101110\")\n\t@test(candidate(362, 496) ==\
    \ \"0b110101101\")\n\t@test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197,\
    \ 233) == \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5,\
    \ 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmprqspaqfr.jl:24\n  Test threw exception\n\
    \  Expression: candidate(1, 5) == \"0b11\"\n  MethodError: Cannot `convert` an\
    \ object of type \n    Float64 to an object of type \n    Union{Int64, String}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:171\n\
    \  Stacktrace:\n   [1] rounded_avg(::Int64, ::Int64) at /tmp/tmprqspaqfr.jl:17\n\
    \   [2] top-level scope at /tmp/tmprqspaqfr.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmprqspaqfr.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmprqspaqfr.jl:25\n  Test threw exception\n  Expression: candidate(7,\
    \ 13) == \"0b1010\"\n  MethodError: Cannot `convert` an object of type \n    Float64\
    \ to an object of type \n    Union{Int64, String}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T at essentials.jl:171\n  Stacktrace:\n\
    \   [1] rounded_avg(::Int64, ::Int64) at /tmp/tmprqspaqfr.jl:17\n   [2] top-level\
    \ scope at /tmp/tmprqspaqfr.jl:25\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmprqspaqfr.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmprqspaqfr.jl:26\n  Test threw exception\n  Expression: candidate(964,\
    \ 977) == \"0b1111001010\"\n  MethodError: Cannot `convert` an object of type\
    \ \n    Float64 to an object of type \n    Union{Int64, String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:171\n  Stacktrace:\n\
    \   [1] rounded_avg(::Int64, ::Int64) at /tmp/tmprqspaqfr.jl:17\n   [2] top-level\
    \ scope at /tmp/tmprqspaqfr.jl:26\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmprqspaqfr.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmprqspaqfr.jl:27\n  Test threw exception\n  Expression: candidate(996,\
    \ 997) == \"0b1111100100\"\n  MethodError: Cannot `convert` an object of type\
    \ \n    Float64 to an object of type \n    Union{Int64, String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:171\n  Stacktrace:\n\
    \   [1] rounded_avg(::Int64, ::Int64) at /tmp/tmprqspaqfr.jl:17\n   [2] top-level\
    \ scope at /tmp/tmprqspaqfr.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmprqspaqfr.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmprqspaqfr.jl:28\n  Test threw exception\n  Expression: candidate(560,\
    \ 851) == \"0b1011000010\"\n  MethodError: Cannot `convert` an object of type\
    \ \n    Float64 to an object of type \n    Union{Int64, String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:171\n  Stacktrace:\n\
    \   [1] rounded_avg(::Int64, ::Int64) at /tmp/tmprqspaqfr.jl:17\n   [2] top-level\
    \ scope at /tmp/tmprqspaqfr.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmprqspaqfr.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmprqspaqfr.jl:29\n  Test threw exception\n  Expression: candidate(185,\
    \ 546) == \"0b101101110\"\n  MethodError: Cannot `convert` an object of type \n\
    \    Float64 to an object of type \n    Union{Int64, String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:171\n  Stacktrace:\n\
    \   [1] rounded_avg(::Int64, ::Int64) at /tmp/tmprqspaqfr.jl:17\n   [2] top-level\
    \ scope at /tmp/tmprqspaqfr.jl:29\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmprqspaqfr.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmprqspaqfr.jl:30\n  Test threw exception\n  Expression: candidate(362,\
    \ 496) == \"0b110101101\"\n  MethodError: Cannot `convert` an object of type \n\
    \    Float64 to an object of type \n    Union{Int64, String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:171\n  Stacktrace:\n\
    \   [1] rounded_avg(::Int64, ::Int64) at /tmp/tmprqspaqfr.jl:17\n   [2] top-level\
    \ scope at /tmp/tmprqspaqfr.jl:30\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmprqspaqfr.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmprqspaqfr.jl:31\n  Test threw exception\n  Expression: candidate(350,\
    \ 902) == \"0b1001110010\"\n  MethodError: Cannot `convert` an object of type\
    \ \n    Float64 to an object of type \n    Union{Int64, String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:171\n  Stacktrace:\n\
    \   [1] rounded_avg(::Int64, ::Int64) at /tmp/tmprqspaqfr.jl:17\n   [2] top-level\
    \ scope at /tmp/tmprqspaqfr.jl:31\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmprqspaqfr.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmprqspaqfr.jl:32\n  Test threw exception\n  Expression: candidate(197,\
    \ 233) == \"0b11010111\"\n  MethodError: Cannot `convert` an object of type \n\
    \    Float64 to an object of type \n    Union{Int64, String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:171\n  Stacktrace:\n\
    \   [1] rounded_avg(::Int64, ::Int64) at /tmp/tmprqspaqfr.jl:17\n   [2] top-level\
    \ scope at /tmp/tmprqspaqfr.jl:32\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmprqspaqfr.jl:23\n  \ntest set: Test Failed at\
    \ /tmp/tmprqspaqfr.jl:35\n  Expression: candidate(5, 5) == \"0b101\"\n   Evaluated:\
    \ -1 == \"0b101\"\nStacktrace:\n [1] top-level scope at /tmp/tmprqspaqfr.jl:35\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprqspaqfr.jl:23\nTest Summary: | Pass  Fail  Error\
    \  Total\ntest set      |    2     1      9     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 9 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprqspaqfr.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n == m \n        then \"0b0\"\n   \
    \ else if n < m \n        then \"0b\" + bin(n:bitstring(m))[2:]\n    else if n\
    \ > m \n        then \"0b\" + bin(m)[2:]\n    else \n        -1\nend\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of bits in an Int64 number. \nExample: \n\
    \    bits(0b1111) => 5\n    bits(0b11010) => 5\n    bits(0b1101) => 4\n    bits(0b1110)\
    \ => 3\n    bits(0b111111) => 8\n    bits(0bn\
    using Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1,\
    \ 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
    \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\
    \t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546)\
    \ == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
    \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
    @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
    \ 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"\"\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpkx2u2o5z.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpkx2u2o5z.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if m > n \n        return -1\n    else\
    \ \n        return round(Int64(n)/Int64(m))\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.0>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes in two integers n and m and returns the number of\
    \ digits in m that are not in the range 0 to 9. \nExample: \ndigits_in_range(5,\
    \ 3) returns 2\ndigits_in_range(10, 20) returns 3\ndigits_in_range(20, 33) returns\
    \ 3\ndigits_in_range(100, 200) returns 3\ndigits_in_range(200, 330) returns 3\n\
    digits_in_range(1000, 2000) returns 3\ndigits_in_range(2000, 3301) returns 3\n\
    digits_in_range(10000, 20000) returns 3\ndigits_in_range(20000, 33001) returns\
    \ 3\ndigits_in_range(100000, 200000) returns 3\ndigits_in_range(200000, 330001)\
    \ returns 3\ndigits_in_range(1000000, 2000000) returns 3\ndigits_in_range(2000000,\
    \ 3300001) returns 3\ndigits_in_range(10000000, 20000000) returns 3\ndigits_in_range(20000000,\
    \ 33000000) returns 3\ndigits_in_range(100000000, 200000000) returns 3\ndigits_in_range(200000000,\
    \ 330000000) returns 3\ndigits_in_range(1000000000, 2000000000) returns 3\ndigits_in_range(2000000000,\
    \ 3300000000) returns 3\ndigits_in_range(10000000000, 20000000000) returns 3\n\
    digits_in_range(20000000000, 33000000000) returns 3\ndigits_in_range(100000000000,\
    \ 200000000000) returns 3\ndigits_in_range(200000000000, 330000000000) returns\
    \ 3\ndigits_in_range(1000000000000, 2000000000000) returns 3\ndigits_in_range(2000000000000,\
    \ 3300000000000) returns 3\ndigits_in_range(10000000000000, 20000000000000) returns\
    \ 3\ndigits_in_range(20000000000000, 33000000000000) returns 3\ndigits_in_range(100000000000000,\
    \ 200000000000000) returns 3\ndigits_in_range(200000000000000, 330000000000000)\
    \ returns 3\ndigits_in_range(1000000000000000, 2000000000000000) returns 3\ndigits_in_range(2000000000000000,\
    \ 3300000000000000) returns 3\ndigits_in_range(1000000000000000000, 200000000000000000)\
    \ returns 3\ndigits_in_range(200000000000000000, 330000000000000000) returns 3\n\
    digits_in_range(10000000000000000000, 2000000000000000000) returns \nusing Test\n\
    \n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\"\
    )\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"\
    0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t@test(candidate(560,\
    \ 851) == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"0b101101110\")\n\
    \t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350, 902) ==\
    \ \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t@test(candidate(7,\
    \ 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9jre6na7.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9jre6na7.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n < m \n        return -1\n    else\
    \ \n        return round(Int64(n)/Int64(m))*Int64(m) + Int64(n)\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that computes the factorial of a given number. \n    Round the\
    \ answer to the nearest integer and convert that to binary.\n    Example:\n  \
    \  factorial(5) => \"0b120\"\n    factorial(10) => \"0b3628800\"\n    factorial(20)\
    \ => \"0b2432902008176640000\"\n    factorial(33) => \"0b12066154037440000000\"\
    \n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1,\
    \ 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
    \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\
    \t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546)\
    \ == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
    \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
    @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
    \ 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp49asnk70.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp49asnk70.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(n/m)*m\
    \ \n    else \n        rounded_avg = -1\n    end\n    return rounded_avg\nend\n\
    using Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1,\
    \ 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
    \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\
    \t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546)\
    \ == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
    \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
    @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
    \ 5) == \"0b101\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpd_dhcylh.jl:24\n  Test threw exception\n\
    \  Expression: candidate(1, 5) == \"0b11\"\n  MethodError: Cannot `convert` an\
    \ object of type \n    Float64 to an object of type \n    Union{Int64, String}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:171\n\
    \  Stacktrace:\n   [1] rounded_avg(::Int64, ::Int64) at /tmp/tmpd_dhcylh.jl:17\n\
    \   [2] top-level scope at /tmp/tmpd_dhcylh.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpd_dhcylh.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpd_dhcylh.jl:25\n  Test threw exception\n  Expression: candidate(7,\
    \ 13) == \"0b1010\"\n  MethodError: Cannot `convert` an object of type \n    Float64\
    \ to an object of type \n    Union{Int64, String}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T at essentials.jl:171\n  Stacktrace:\n\
    \   [1] rounded_avg(::Int64, ::Int64) at /tmp/tmpd_dhcylh.jl:17\n   [2] top-level\
    \ scope at /tmp/tmpd_dhcylh.jl:25\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpd_dhcylh.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpd_dhcylh.jl:26\n  Test threw exception\n  Expression: candidate(964,\
    \ 977) == \"0b1111001010\"\n  MethodError: Cannot `convert` an object of type\
    \ \n    Float64 to an object of type \n    Union{Int64, String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:171\n  Stacktrace:\n\
    \   [1] rounded_avg(::Int64, ::Int64) at /tmp/tmpd_dhcylh.jl:17\n   [2] top-level\
    \ scope at /tmp/tmpd_dhcylh.jl:26\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpd_dhcylh.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpd_dhcylh.jl:27\n  Test threw exception\n  Expression: candidate(996,\
    \ 997) == \"0b1111100100\"\n  MethodError: Cannot `convert` an object of type\
    \ \n    Float64 to an object of type \n    Union{Int64, String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:171\n  Stacktrace:\n\
    \   [1] rounded_avg(::Int64, ::Int64) at /tmp/tmpd_dhcylh.jl:17\n   [2] top-level\
    \ scope at /tmp/tmpd_dhcylh.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpd_dhcylh.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpd_dhcylh.jl:28\n  Test threw exception\n  Expression: candidate(560,\
    \ 851) == \"0b1011000010\"\n  MethodError: Cannot `convert` an object of type\
    \ \n    Float64 to an object of type \n    Union{Int64, String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:171\n  Stacktrace:\n\
    \   [1] rounded_avg(::Int64, ::Int64) at /tmp/tmpd_dhcylh.jl:17\n   [2] top-level\
    \ scope at /tmp/tmpd_dhcylh.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpd_dhcylh.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpd_dhcylh.jl:29\n  Test threw exception\n  Expression: candidate(185,\
    \ 546) == \"0b101101110\"\n  MethodError: Cannot `convert` an object of type \n\
    \    Float64 to an object of type \n    Union{Int64, String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:171\n  Stacktrace:\n\
    \   [1] rounded_avg(::Int64, ::Int64) at /tmp/tmpd_dhcylh.jl:17\n   [2] top-level\
    \ scope at /tmp/tmpd_dhcylh.jl:29\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpd_dhcylh.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpd_dhcylh.jl:30\n  Test threw exception\n  Expression: candidate(362,\
    \ 496) == \"0b110101101\"\n  MethodError: Cannot `convert` an object of type \n\
    \    Float64 to an object of type \n    Union{Int64, String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:171\n  Stacktrace:\n\
    \   [1] rounded_avg(::Int64, ::Int64) at /tmp/tmpd_dhcylh.jl:17\n   [2] top-level\
    \ scope at /tmp/tmpd_dhcylh.jl:30\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpd_dhcylh.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpd_dhcylh.jl:31\n  Test threw exception\n  Expression: candidate(350,\
    \ 902) == \"0b1001110010\"\n  MethodError: Cannot `convert` an object of type\
    \ \n    Float64 to an object of type \n    Union{Int64, String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:171\n  Stacktrace:\n\
    \   [1] rounded_avg(::Int64, ::Int64) at /tmp/tmpd_dhcylh.jl:17\n   [2] top-level\
    \ scope at /tmp/tmpd_dhcylh.jl:31\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpd_dhcylh.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpd_dhcylh.jl:32\n  Test threw exception\n  Expression: candidate(197,\
    \ 233) == \"0b11010111\"\n  MethodError: Cannot `convert` an object of type \n\
    \    Float64 to an object of type \n    Union{Int64, String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:171\n  Stacktrace:\n\
    \   [1] rounded_avg(::Int64, ::Int64) at /tmp/tmpd_dhcylh.jl:17\n   [2] top-level\
    \ scope at /tmp/tmpd_dhcylh.jl:32\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpd_dhcylh.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpd_dhcylh.jl:35\n  Test threw exception\n  Expression: candidate(5,\
    \ 5) == \"0b101\"\n  MethodError: Cannot `convert` an object of type \n    Float64\
    \ to an object of type \n    Union{Int64, String}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T at essentials.jl:171\n  Stacktrace:\n\
    \   [1] rounded_avg(::Int64, ::Int64) at /tmp/tmpd_dhcylh.jl:17\n   [2] top-level\
    \ scope at /tmp/tmpd_dhcylh.jl:35\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpd_dhcylh.jl:23\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    2     10     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 10 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd_dhcylh.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        return n\n    else\n\
    \        return -1\n    end\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7,\
    \ 5)\n</cell>\n<text>\nExercise 2\nWrite a function that computes the factorial\
    \ of a given number. \n    Factorials are defined as: \n    $$n! = n \\times n-1\
    \ \\times n-2 \\times ...$$\n    For example, 5! = 5 x 4 x 3 x 2 x 1 = 120\n \
    \   Write a function that computes the factorial of a given number. \n    Factorials\
    \ are defined as: \n    $$n! = n \\times n-1 \\times n-2 \\times ...$$\n    For\
    \ example, 5! = 5 x 4 x 3 x 2 x 1 = 120\n    Write a function that computes the\
    \ factorial of a given number. \n    Factorials are defined as: \n    $$n! = n\
    \ \\times n-1 \\times n-2 \\times ...$$\n    For example, 5! = 5 x 4 x 3 x 2 x\
    \ 1 = 120\n    Write a function that computes the factorial of a given number.\
    \ \n    Factorials are defined as: \n    $$n! = n \\times n-1 \\times n-2 \\times\
    \ ...$$\n    For example, 5! = 5 x 4 x 3 x 2 x 1 = 120\n    Write a function that\
    \ computes the factorial of a given number. \n    Factorials are defined as: \n\
    \    $$n! = n \\times n-1 \\times n-2 \\times ...$$\n    For example, 5! = 5 x\
    \ 4 x 3 x 2 x 1 = 120\n    Write a function that computes the factorial of a given\
    \ number. \n    Factorials are defined as: \n    $$n! = n \\times n-1 \\times\
    \ n-2 \\times ...$$\n    For example, 5! = 5 x 4 x 3 x 2 x 1 = 120\n    Write\
    \ a function that computes the factorial of a given number. \n    Factorials are\
    \ defined as: \n    $$n! = n \\times n-1 \\times n-2 \\times ...$$\n    For example,\
    \ 5! = 5 x 4 x 3 x 2 x 1 = 120\n    Write a function that computes the factorial\
    \ of a given number. \n    Factorials are defined as: \n    $$n! = n \\times n-1\
    \ \\times n-2 \\times ...$$\n    For example, 5! = 5 x 4 x 3 x 2 x 1 = 120\n \
    \   Write a function that computes the factorial of a given number. \n    Factorials\
    \ are defined as: \n    $$n! = n \\times n-1 \\times n-2 \\times \nusing Test\n\
    \n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\"\
    )\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"\
    0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t@test(candidate(560,\
    \ 851) == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"0b101101110\")\n\
    \t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350, 902) ==\
    \ \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t@test(candidate(7,\
    \ 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5y4nzgw_.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5y4nzgw_.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(n/m)*m\
    \ \n    else \n        rounded_avg = -1\n    end\n    return rounded_avg\nend\n\
    </cell>\n<code language=julia-1.4>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.4>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes in two integers n and m, and returns the number of\
    \ integers from n to m (including n and m).\nusing Test\n\n@testset begin\n\n\
    candidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7,\
    \ 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996,\
    \ 997) == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\
    \t@test(candidate(185, 546) == \"0b101101110\")\n\t@test(candidate(362, 496) ==\
    \ \"0b110101101\")\n\t@test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197,\
    \ 233) == \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5,\
    \ 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp43kzlcjn.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp43kzlcjn.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m\n        return n\n    else\n\
    \        return -1\n    end\nend\n</cell>\n<code language=julia-1.3>\nrounded_avg(1,\
    \ 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise: Write a function that returns the number of digits\
    \ in an integer.\nusing Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t\
    @test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t\
    @test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) ==\
    \ \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185,\
    \ 546) == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t\
    @test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) ==\
    \ \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) ==\
    \ -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphjk5thll.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphjk5thll.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n < m \n        rounded_avg(m, n)\n\
    \    else\n        rounded_avg(n - m, m) + string(n - m, \"b\")\n    end\nend\n\
    </cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.\nusing Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t\
    @test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t\
    @test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) ==\
    \ \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185,\
    \ 546) == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t\
    @test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) ==\
    \ \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) ==\
    \ -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5ey6fy2_.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5ey6fy2_.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if m > n \n        -1\n    else\n    \
    \    round(Int64(n)/Int64(m))*Int64(m) + Int64(n) - Int64(m) \n    end\nend\n\
    </cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that computes the factorial of a given number. \n    Round\
    \ the answer to the nearest integer and convert that to binary.\n    Example:\n\
    \    factorial(5) => \"0b120\"\n    factorial(10) => \"0b210\"\n    factorial(20)\
    \ => \"0b240\"\n    factorial(33) => \"0b333\"\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\")\n\t\
    @test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"0b1111001010\"\
    )\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t@test(candidate(560, 851)\
    \ == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"0b101101110\")\n\t@test(candidate(362,\
    \ 496) == \"0b110101101\")\n\t@test(candidate(350, 902) == \"0b1001110010\")\n\
    \t@test(candidate(197, 233) == \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\
    \t@test(candidate(5, 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp80d5hvzh.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp80d5hvzh.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if m == 0\n        rounded_avg = -1\n\
    \    elseif m == 1\n        rounded_avg = 0\n    else\n        rounded_avg = round(Int64(n)/Int64(m))\n\
    \    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.0>\nrounded_avg(1,\
    \ 5)\n</cell>\n<code language=julia-1.0>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.0>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that computes the factorial of a\
    \ given number. \nThe function should accept a single argument and return the\
    \ factorial of that number.\nExample: factorial(5) => 120\nExample: factorial(3)\
    \ => 6\nExample: factorial(0) => 1\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7, 13)\
    \ == \"0b1010\")\n\t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996,\
    \ 997) == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\
    \t@test(candidate(185, 546) == \"0b101101110\")\n\t@test(candidate(362, 496) ==\
    \ \"0b110101101\")\n\t@test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197,\
    \ 233) == \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5,\
    \ 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmph09v766_.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmph09v766_.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n >= m \n        rounded_avg = -1\n\
    \    else\n        rounded_avg = ((m+n)/2::Int64).round().to_string()\n    end\n\
    \    return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes in two integers n and\
    \ m and returns their sum.\n    Round the answer to the nearest integer and convert\
    \ that to binary.\n    Example:\n    sum(1, 5) => \"0b11\"\n    sum(7, 5) => -1\n\
    \    sum(10, 20) => \"0b1111\"\n    sum(20, 33) => \"0b11010\"\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5)\
    \ == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
    \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\
    \t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546)\
    \ == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
    \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
    @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
    \ 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprws_3vty.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprws_3vty.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n == m \n        then return \"0b0\"\
    \n    else if n < m \n        then return \"0b0\"\n    else \n        avg = ((n+m)/2::Int64)\n\
    \        binary = \"\"\n        for i in (0:(bitsize(n) - bitsize(m)))\n     \
    \       binary = binary + str((avg - i).round())\n        return binary\nend\n\
    </cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise\nWrite a function that returns the number of bits needed\
    \ to represent a positive integer in binary.\nusing Test\n\n@testset begin\n\n\
    candidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7,\
    \ 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996,\
    \ 997) == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\
    \t@test(candidate(185, 546) == \"0b101101110\")\n\t@test(candidate(362, 496) ==\
    \ \"0b110101101\")\n\t@test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197,\
    \ 233) == \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5,\
    \ 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp_emzo26p.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp_emzo26p.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(Int64(n)/Int64(m))\n\
    \        rounded_avg = Int64(rounded_avg)\n        rounded_avg = bin(rounded_avg)[2:]\n\
    \        rounded_avg = rounded_avg * Int64(1)\n        rounded_avg = rounded_avg\
    \ + Int64(1)\n        rounded_avg = rounded_avg.round()\n        rounded_avg =\
    \ rounded_avg.to_s()\n        rounded_avg = rounded_avg.replace(\"0b\", \"\")\n\
    \        return rounded_avg\n    else\n        return -1\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes in two integers n and m and returns the number of\
    \ digits in n. \n    Round the answer to the nearest integer and convert that\
    \ to binary.\n    Example:\n    digits(5) => \"0b101\"\n    digits(7) => \"0b111\"\
    \n    digits(10) => \"0b110\"\n    digits(20) => \"0b1110\"\n    digits(33) =>\
    \ \"0b11110\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\
    \t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\
    \t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996, 997)\
    \ == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185,\
    \ 546) == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t\
    @test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) ==\
    \ \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) ==\
    \ -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmp4te3f_1y.jl:15\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp4te3f_1y.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n > m \n        return -1\n    else\
    \ \n        return round(Int64(n)/Int64(m))*Int64(m) + Int64(n) - Int64(m) \n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of digits in an integer.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7, 13)\
    \ == \"0b1010\")\n\t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996,\
    \ 997) == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\
    \t@test(candidate(185, 546) == \"0b101101110\")\n\t@test(candidate(362, 496) ==\
    \ \"0b110101101\")\n\t@test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197,\
    \ 233) == \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5,\
    \ 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgw8gopuq.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgw8gopuq.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n >= m\n        rounded_avg(m, n)\n\
    \    else\n        rounded_avg(m, n-1)\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7,\
    \ 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996,\
    \ 997) == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\
    \t@test(candidate(185, 546) == \"0b101101110\")\n\t@test(candidate(362, 496) ==\
    \ \"0b110101101\")\n\t@test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197,\
    \ 233) == \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5,\
    \ 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0b8o9ts_.jl:23\n  Test threw exception\n\
    \  Expression: candidate(1, 5) == \"0b11\"\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] rounded_avg(::Int64, ::Int64) at /tmp/tmp0b8o9ts_.jl:15\n   [2] rounded_avg(::Int64,\
    \ ::Int64) at /tmp/tmp0b8o9ts_.jl:13\n   ...\_(the last 2 lines are repeated 39990\
    \ more times)\n   [79983] rounded_avg(::Int64, ::Int64) at /tmp/tmp0b8o9ts_.jl:15\n\
    \  \ntest set: Error During Test at /tmp/tmp0b8o9ts_.jl:24\n  Test threw exception\n\
    \  Expression: candidate(7, 13) == \"0b1010\"\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] rounded_avg(::Int64, ::Int64) at /tmp/tmp0b8o9ts_.jl:15\n   [2] rounded_avg(::Int64,\
    \ ::Int64) at /tmp/tmp0b8o9ts_.jl:13\n   ...\_(the last 2 lines are repeated 39990\
    \ more times)\n   [79983] rounded_avg(::Int64, ::Int64) at /tmp/tmp0b8o9ts_.jl:15\n\
    \  \ntest set: Error During Test at /tmp/tmp0b8o9ts_.jl:25\n  Test threw exception\n\
    \  Expression: candidate(964, 977) == \"0b1111001010\"\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] rounded_avg(::Int64, ::Int64) at /tmp/tmp0b8o9ts_.jl:15\n\
    \   [2] rounded_avg(::Int64, ::Int64) at /tmp/tmp0b8o9ts_.jl:13\n   ...\_(the\
    \ last 2 lines are repeated 39990 more times)\n   [79983] rounded_avg(::Int64,\
    \ ::Int64) at /tmp/tmp0b8o9ts_.jl:15\n  \ntest set: Error During Test at /tmp/tmp0b8o9ts_.jl:26\n\
    \  Test threw exception\n  Expression: candidate(996, 997) == \"0b1111100100\"\
    \n  StackOverflowError:\n  Stacktrace:\n   [1] rounded_avg(::Int64, ::Int64) at\
    \ /tmp/tmp0b8o9ts_.jl:15\n   [2] rounded_avg(::Int64, ::Int64) at /tmp/tmp0b8o9ts_.jl:13\n\
    \   ...\_(the last 2 lines are repeated 39990 more times)\n   [79983] rounded_avg(::Int64,\
    \ ::Int64) at /tmp/tmp0b8o9ts_.jl:15\n  \ntest set: Error During Test at /tmp/tmp0b8o9ts_.jl:27\n\
    \  Test threw exception\n  Expression: candidate(560, 851) == \"0b1011000010\"\
    \n  StackOverflowError:\n  Stacktrace:\n   [1] rounded_avg(::Int64, ::Int64) at\
    \ /tmp/tmp0b8o9ts_.jl:15\n   [2] rounded_avg(::Int64, ::Int64) at /tmp/tmp0b8o9ts_.jl:13\n\
    \   ...\_(the last 2 lines are repeated 39990 more times)\n   [79983] rounded_avg(::Int64,\
    \ ::Int64) at /tmp/tmp0b8o9ts_.jl:15\n  \ntest set: Error During Test at /tmp/tmp0b8o9ts_.jl:28\n\
    \  Test threw exception\n  Expression: candidate(185, 546) == \"0b101101110\"\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] rounded_avg(::Int64, ::Int64) at\
    \ /tmp/tmp0b8o9ts_.jl:15\n   [2] rounded_avg(::Int64, ::Int64) at /tmp/tmp0b8o9ts_.jl:13\n\
    \   ...\_(the last 2 lines are repeated 39990 more times)\n   [79983] rounded_avg(::Int64,\
    \ ::Int64) at /tmp/tmp0b8o9ts_.jl:15\n  \ntest set: Error During Test at /tmp/tmp0b8o9ts_.jl:29\n\
    \  Test threw exception\n  Expression: candidate(362, 496) == \"0b110101101\"\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] rounded_avg(::Int64, ::Int64) at\
    \ /tmp/tmp0b8o9ts_.jl:15\n   [2] rounded_avg(::Int64, ::Int64) at /tmp/tmp0b8o9ts_.jl:13\n\
    \   ...\_(the last 2 lines are repeated 39990 more times)\n   [79983] rounded_avg(::Int64,\
    \ ::Int64) at /tmp/tmp0b8o9ts_.jl:15\n  \ntest set: Error During Test at /tmp/tmp0b8o9ts_.jl:30\n\
    \  Test threw exception\n  Expression: candidate(350, 902) == \"0b1001110010\"\
    \n  StackOverflowError:\n  Stacktrace:\n   [1] rounded_avg(::Int64, ::Int64) at\
    \ /tmp/tmp0b8o9ts_.jl:15\n   [2] rounded_avg(::Int64, ::Int64) at /tmp/tmp0b8o9ts_.jl:13\n\
    \   ...\_(the last 2 lines are repeated 39990 more times)\n   [79983] rounded_avg(::Int64,\
    \ ::Int64) at /tmp/tmp0b8o9ts_.jl:15\n  \ntest set: Error During Test at /tmp/tmp0b8o9ts_.jl:31\n\
    \  Test threw exception\n  Expression: candidate(197, 233) == \"0b11010111\"\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] rounded_avg(::Int64, ::Int64) at\
    \ /tmp/tmp0b8o9ts_.jl:15\n   [2] rounded_avg(::Int64, ::Int64) at /tmp/tmp0b8o9ts_.jl:13\n\
    \   ...\_(the last 2 lines are repeated 39990 more times)\n   [79983] rounded_avg(::Int64,\
    \ ::Int64) at /tmp/tmp0b8o9ts_.jl:15\n  \ntest set: Error During Test at /tmp/tmp0b8o9ts_.jl:32\n\
    \  Test threw exception\n  Expression: candidate(7, 5) == -1\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] rounded_avg(::Int64, ::Int64) at /tmp/tmp0b8o9ts_.jl:13\n\
    \   [2] rounded_avg(::Int64, ::Int64) at /tmp/tmp0b8o9ts_.jl:15\n   ...\_(the\
    \ last 2 lines are repeated 39990 more times)\n   [79983] rounded_avg(::Int64,\
    \ ::Int64) at /tmp/tmp0b8o9ts_.jl:13\n  \ntest set: Error During Test at /tmp/tmp0b8o9ts_.jl:33\n\
    \  Test threw exception\n  Expression: candidate(5, 1) == -1\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] rounded_avg(::Int64, ::Int64) at /tmp/tmp0b8o9ts_.jl:13\n\
    \   [2] rounded_avg(::Int64, ::Int64) at /tmp/tmp0b8o9ts_.jl:15\n   ...\_(the\
    \ last 2 lines are repeated 39990 more times)\n   [79983] rounded_avg(::Int64,\
    \ ::Int64) at /tmp/tmp0b8o9ts_.jl:13\n  \ntest set: Error During Test at /tmp/tmp0b8o9ts_.jl:34\n\
    \  Test threw exception\n  Expression: candidate(5, 5) == \"0b101\"\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] rounded_avg(::Int64, ::Int64) at /tmp/tmp0b8o9ts_.jl:13\
    \ (repeats 79984 times)\n  \nTest Summary: | Error  Total\ntest set      |   \
    \ 12     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0b8o9ts_.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n == m \n        rounded_avg = n\n\
    \    else \n        rounded_avg = round(Int64(n)/Int64(m))\n        if rounded_avg\
    \ == Int64(n)/Int64(m) \n            rounded_avg = -1\n        end\n    end\n\
    \    return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that computes the factorial of a\
    \ given number. \n    Round the answer to the nearest integer and convert that\
    \ to binary.\n    Example:\n    factorial(5) => \"0b120\"\n    factorial(10) =>\
    \ \"0b210\"\n    factorial(20) => \"0b240\"\n    factorial(33) => \"0b333\"\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1,\
    \ 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
    \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\
    \t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546)\
    \ == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
    \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
    @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
    \ 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm8tgc26a.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpm8tgc26a.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n > m \n        rounded_avg = -1\n\
    \    else\n        rounded_avg = round(Int64(n)/Int64(m))*Int64(m) + Int64(n)\
    \ - Int64(m) \n    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ in two integers n and m and returns their sum.\nusing Test\n\n@testset begin\n\
    \ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7,\
    \ 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996,\
    \ 997) == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\
    \t@test(candidate(185, 546) == \"0b101101110\")\n\t@test(candidate(362, 496) ==\
    \ \"0b110101101\")\n\t@test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197,\
    \ 233) == \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5,\
    \ 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpamzqpd_n.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpamzqpd_n.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if m > n \n        error(\"m must be less\
    \ than n\") \n    else \n        avg = (n+m)/2\n        binary = formatInt(avg,\
    \ \"b\")\n        if binary == \"0b0\"\n            error(\"m must be less than\
    \ n\") \n        else \n            return binary\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise: Write\
    \ a function that takes a positive integer n and returns the number of digits\
    \ in n. \n    For example, rounded_digits(1234) => 4\nusing Test\n\n@testset begin\n\
    \ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7,\
    \ 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996,\
    \ 997) == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\
    \t@test(candidate(185, 546) == \"0b101101110\")\n\t@test(candidate(362, 496) ==\
    \ \"0b110101101\")\n\t@test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197,\
    \ 233) == \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5,\
    \ 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprie68euj.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprie68euj.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(n/m)*m\n\
    \    else\n        rounded_avg = -1\n    end\n    return rounded_avg\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that computes the factorial of a\
    \ given integer. \n    Round the answer to the nearest integer and convert that\
    \ to binary.\n    Example:\n    factorial(5) => \"0b120\"\n    factorial(10) =>\
    \ \"0b3628800\"\n    factorial(20) => \"0b2432902008176640000\"\n    factorial(33)\
    \ => \"0b12066154033577302700\"\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7,\
    \ 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996,\
    \ 997) == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\
    \t@test(candidate(185, 546) == \"0b101101110\")\n\t@test(candidate(362, 496) ==\
    \ \"0b110101101\")\n\t@test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197,\
    \ 233) == \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5,\
    \ 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpciydfi8m.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpciydfi8m.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(n/m)*m\n\
    \    else\n        rounded_avg = -1\n    end\n    return rounded_avg\nend\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.4>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the number of digits in an integer.\nusing Test\n\n\
    @testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\"\
    )\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"\
    0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t@test(candidate(560,\
    \ 851) == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"0b101101110\")\n\
    \t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350, 902) ==\
    \ \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t@test(candidate(7,\
    \ 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvhc125qm.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvhc125qm.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if m > n then return -1\n    \n    binary\
    \ = \"\"\n    \n    for i in n:m\n        binary = binary + string(i)\n    end\n\
    \    \n    return parse(Int64, binary)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7,\
    \ 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996,\
    \ 997) == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\
    \t@test(candidate(185, 546) == \"0b101101110\")\n\t@test(candidate(362, 496) ==\
    \ \"0b110101101\")\n\t@test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197,\
    \ 233) == \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5,\
    \ 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmppxr8cdqw.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmppxr8cdqw.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m\n        return -1\n    else\n\
    \        avg = ((n+m)/2)\n        return round(avg)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer.\nusing Test\n\
    \n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\"\
    )\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"\
    0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t@test(candidate(560,\
    \ 851) == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"0b101101110\")\n\
    \t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350, 902) ==\
    \ \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t@test(candidate(7,\
    \ 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz_6negwe.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpz_6negwe.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if m > n \n        error(\"m must be less\
    \ than n\")\n    end\n    \n    avg = n + (m - n)\n    \n    if avg < 0\n    \
    \    error(\"n must be greater than m\")\n    end\n    \n    binary = \"\"\n \
    \   \n    for i = 1:length(avg)\n        binary = binary + string(avg[i])\n  \
    \  end\n    \n    rounded_avg = parse(Int64, binary)\n    \n    return rounded_avg\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that computes the factorial of a given number. \nThe factorial\
    \ of a non-negative integer $n$ is defined as:\nusing Test\n\n@testset begin\n\
    \ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7,\
    \ 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996,\
    \ 997) == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\
    \t@test(candidate(185, 546) == \"0b101101110\")\n\t@test(candidate(362, 496) ==\
    \ \"0b110101101\")\n\t@test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197,\
    \ 233) == \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5,\
    \ 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf2xsvxy_.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpf2xsvxy_.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n >= m \n        return -1\n    \n\
    \    binary = \"\"\n    \n    for i in n:m:1 \n        binary += str((i%2)+1)\n\
    \    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code\
    \ language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the number of digits in an integer.\nusing Test\n\n\
    @testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\"\
    )\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"\
    0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t@test(candidate(560,\
    \ 851) == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"0b101101110\")\n\
    \t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350, 902) ==\
    \ \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t@test(candidate(7,\
    \ 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpng9o1p6v.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpng9o1p6v.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n > m \n        rounded_avg(m, n)\n\
    \    else\n        rounded_avg(m, n-1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise: Write\
    \ a function that computes the factorial of a given number. \n    Round the answer\
    \ to the nearest integer and convert that to binary.\n    Example:\n    factorial(5)\
    \ => \"0b120\"\n    factorial(10) => \"0b3628800\"\n    factorial(20) => \"0b2432902008176640000\"\
    \n    factorial(33) => \"0b11000990776957207520\"\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\"\
    )\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"\
    0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t@test(candidate(560,\
    \ 851) == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"0b101101110\")\n\
    \t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350, 902) ==\
    \ \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t@test(candidate(7,\
    \ 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz0nheula.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpz0nheula.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n == m \n        then return \"0b0\"\
    \n    else if n < m \n        then return -1\n    else \n        avg = (n+m)/2\n\
    \        binary = bitstring(avg)\n        binary = binary.reverse\n        binary\
    \ = binary.reverse\n        return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that computes the factorial of a given number. \n    Round the\
    \ answer to the nearest integer and convert that to binary.\n    Example:\n  \
    \  factorial(5) => \"0b120\"\n    factorial(10) => \"0b3628800\"\n    factorial(20)\
    \ => \"0b2432902008176640000\"\n    factorial(33) => \"0b113372036854775808\"\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1,\
    \ 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
    \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\
    \t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546)\
    \ == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
    \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
    @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
    \ 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpa52jq9nw.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpa52jq9nw.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n >= m\n        rounded_avg = -1\n\
    \    else\n        rounded_avg = round(n/m)*m\n    end\n    return rounded_avg\n\
    end\n</cell>\n<code language=julia-1.3>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes in two integers n and m and returns true if the sum\
    \ of the integers from n to m is even.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7, 13)\
    \ == \"0b1010\")\n\t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996,\
    \ 997) == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\
    \t@test(candidate(185, 546) == \"0b101101110\")\n\t@test(candidate(362, 496) ==\
    \ \"0b110101101\")\n\t@test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197,\
    \ 233) == \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5,\
    \ 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptukfk3j4.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptukfk3j4.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m\n        rounded_avg = round(n\
    \ / m) * m\n    else\n        rounded_avg = -1\n    end\n    return rounded_avg\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer.\nusing Test\n\
    \n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\"\
    )\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"\
    0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t@test(candidate(560,\
    \ 851) == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"0b101101110\")\n\
    \t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350, 902) ==\
    \ \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t@test(candidate(7,\
    \ 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxcqk364v.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxcqk364v.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n > m \n        rounded_avg(m, n)\n\
    \    else\n        rounded_avg(n, m-1) + str((n-m+1)/2)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7,5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10,20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20,33)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes in two integers and returns the\
    \ sum of the squares of the integers from 1 to n.\nusing Test\n\n@testset begin\n\
    \ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7,\
    \ 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996,\
    \ 997) == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\
    \t@test(candidate(185, 546) == \"0b101101110\")\n\t@test(candidate(362, 496) ==\
    \ \"0b110101101\")\n\t@test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197,\
    \ 233) == \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5,\
    \ 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwhcxker_.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwhcxker_.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n >= m \n        rounded_avg = -1\n\
    \    else \n        rounded_avg = round(Int64(n)/Int64(m))*Int64(m) + Int64(n)\n\
    \    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in two integers n and\
    \ m and returns their sum.\nIf n is greater than m, return -1.\nExample: \n  \
    \  sum_of_nums(1, 5) => 6\n    sum_of_nums(7, 5) => -1\n    sum_of_nums(10, 20)\
    \ => 25\n    sum_of_nums(20, 33) => -1\nHint: You can use the + operator to perform\
    \ addition.\nusing Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1,\
    \ 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
    \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\
    \t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546)\
    \ == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
    \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
    @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
    \ 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpe1enrkow.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpe1enrkow.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n == m \n        rounded_avg = n\n\
    \    else \n        rounded_avg = round(n/m)*m\n    end\n    return rounded_avg\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise: Write\
    \ a function that computes the factorial of a given number. \n    Round the answer\
    \ to the nearest integer and convert that to binary.\n    Example:\n    factorial(5)\
    \ => \"0b120\"\n    factorial(10) => \"0b3628800\"\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\"\
    )\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"\
    0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t@test(candidate(560,\
    \ 851) == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"0b101101110\")\n\
    \t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350, 902) ==\
    \ \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t@test(candidate(7,\
    \ 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppktrho_j.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppktrho_j.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(n\
    \ / m) * m\n        rounded_avg = rounded_avg % m\n        rounded_avg = rounded_avg\
    \ / m\n        rounded_avg = rounded_avg.to_s(2)\n        rounded_avg = rounded_avg.replace(\"\
    0\", \"\")\n        rounded_avg = rounded_avg.replace(\"1\", \"\")\n        rounded_avg\
    \ = rounded_avg.replace(\"1\", \"\")\n        rounded_avg = rounded_avg.replace(\"\
    1\", \"\")\n        rounded_avg = rounded_avg.replace(\"1\", \"\")\n        rounded_avg\
    \ = rounded_avg.replace(\"1\", \"\")\n        rounded_avg = rounded_avg.replace(\"\
    1\", \"\")\n        rounded_avg = rounded_avg.replace(\"1\", \"\")\n        rounded_avg\
    \ = rounded_avg.replace(\"1\", \"\")\n        rounded_avg = rounded_avg.replace(\"\
    1\", \"\")\n        rounded_avg = rounded_avg.replace(\"1\", \"\")\n        rounded_avg\
    \ = rounded_avg.replace(\"1\", \"\")\n        rounded_avg = rounded_avg.replace(\"\
    1\", \"\")\n        rounded_avg = rounded_avg.replace(\"1\", \"\")\n        rounded_avg\
    \ = rounded_avg.replace(\"1\", \"\")\n        rounded_avg = rounded_avg.replace(\"\
    1\", \"\")\n        rounded_avg = rounded_avg.replace(\"1\", \"\")\n        rounded_avg\
    \ = rounded_avg.replace(\"1\", \"\")\n        rounded_avg = rounded_avg.replace(\"\
    1\", \"\")\n        rounded_avg = rounded_avg.replace(\"1\", \"\")\n        rounded_avg\
    \ = rounded_avg.replace(\"1\", \"\")\n        rounded_avg = rounded_avg.replace(\"\
    1\", \"\")\n        rounded_avg = rounded_avg.replace(\"1\", \"\")\n        rounded_avg\
    \ = rounded_avg.replace(\"1\", \"\")\n        rounded_avg = rounded_avg.replace(\"\
    1\", \"\")\n        rounded_avg = rounded_avg.replace(\"1\", \"\")\n        rounded_avg\
    \ = rounded_avg.replace(\"1\", \"\")\n        rounded_avg = rounded_avg.replace(\"\
    1\", \"\")\n        rounded_avg = rounded_avg.replace(\"1\", \"\")\n        rounded_avg\
    \ = rounded_avg.replace(\"1\", \"\")\n        rounded_avg = rounded_avg.replace(\"\
    1\", \"\")\n        rounded_avg = rounded_avg.replace(\"1\", \"\")\n        rounded_avg\
    \ = rounded_avg.replace(\"1\", \"\")\n        rounded_avg = rounded_avg.replace(\"\
    1\", \"\")\n        rounded_avg = rounded_avg.replace(\"1\", \"\")\n        rounded_av\n\
    using Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1,\
    \ 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
    \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\
    \t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546)\
    \ == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
    \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
    @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
    \ 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvnrxzxb3.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvnrxzxb3.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n < m \n        return -1\n    \n \
    \   binary = \"\"\n    \n    for i in n:m-1\n        binary += string(i)\n   \
    \ \n    return binary\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code\
    \ language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that computes the factorial of a given number. \n    Round the answer\
    \ to the nearest integer and convert that to binary.\n    Example:\n    factorial(5)\
    \ => \"0b120\"\n    factorial(10) => \"0b210\"\n    factorial(20) => \"0b240\"\
    \n    factorial(33) => \"0b333\"\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7,\
    \ 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996,\
    \ 997) == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\
    \t@test(candidate(185, 546) == \"0b101101110\")\n\t@test(candidate(362, 496) ==\
    \ \"0b110101101\")\n\t@test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197,\
    \ 233) == \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5,\
    \ 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_p7x2odn.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_p7x2odn.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n > m \n        rounded_avg = -1\n\
    \    else\n        rounded_avg = round(Int64(n)/Int64(m))*Int64(m) + Int64(n)\n\
    \    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that computes the factorial of a\
    \ given number. \n    Round the answer to the nearest integer and convert that\
    \ to binary.\n    Example:\n    factorial(5) => \"0b120\"\n    factorial(10) =>\
    \ \"0b3628800\"\n    factorial(20) => \"0b2432902008176640000\"\n    factorial(30)\
    \ => \"0b12066154037440000000\"\n    factorial(40) => \"0b1206615403744000000\"\
    \n    factorial(50) => \"0b12066154037440000\"\n    factorial(100) => \"0b120661540374400\"\
    \n    factorial(200) => \"0b12066154037440\"\n    factorial(300) => \"0b120661540374400\"\
    \n    factorial(400) => \"0b12066154037440\"\n    factorial(500) => \"0b120661540374400\"\
    \n    factorial(600) => \"0b120661540374400\"\n    factorial(700) => \"0b120661540374400\"\
    \n    factorial(800) => \"0b120661540374400\"\n    factorial(900) => \"0b120661540374400\"\
    \n    factorial(1000) => \"0b120661540374400\"\n    factorial(1100) => \"0b120661540374400\"\
    \n    factorial(1200) => \"0b120661540374400\"\n    factorial(1300) => \"0b120661540374400\"\
    \n    factorial(1400) => \"0b120661540374400\"\n    factorial(1500) => \"0b120661540374400\"\
    \n    factorial(1600) => \"0b120661540374400\"\n    factorial(1700) => \"0b120661540374400\"\
    \n    factorial(1800) => \"0b120661540374400\"\n\nusing Test\n\n@testset begin\n\
    \ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7,\
    \ 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996,\
    \ 997) == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\
    \t@test(candidate(185, 546) == \"0b101101110\")\n\t@test(candidate(362, 496) ==\
    \ \"0b110101101\")\n\t@test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197,\
    \ 233) == \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5,\
    \ 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2gtibhtx.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2gtibhtx.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        return n\n    else\
    \ \n        return -1\n    end\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code\
    \ language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of digits in an integer.\nusing Test\n\n\
    @testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\"\
    )\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"\
    0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t@test(candidate(560,\
    \ 851) == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"0b101101110\")\n\
    \t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350, 902) ==\
    \ \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t@test(candidate(7,\
    \ 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjlkj_dnp.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjlkj_dnp.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(n/m)\n\
    \        binary = string(rounded_avg:0:1)\n        return binary \n    else \n\
    \        return -1\n    end\nend\n</cell>\n<code language=julia-1.3>\nrounded_avg(1,\
    \ 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of digits\
    \ in an integer.\nusing Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t\
    @test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t\
    @test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) ==\
    \ \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185,\
    \ 546) == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t\
    @test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) ==\
    \ \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) ==\
    \ -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp1hxfofn.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpp1hxfofn.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(n\
    \ / m) * m\n    else\n        rounded_avg = -1\n    end\n    return rounded_avg\n\
    end\n</cell>\n<code language=julia-1.4>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.4>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer.\nusing Test\n\
    \n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\"\
    )\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"\
    0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t@test(candidate(560,\
    \ 851) == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"0b101101110\")\n\
    \t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350, 902) ==\
    \ \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t@test(candidate(7,\
    \ 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg85umfsm.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpg85umfsm.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n > m \n        rounded_avg = -1\n\
    \    else \n        rounded_avg = round(Int64(n)/Int64(m))*Int64(m) + Int64(n)\
    \ - Int64(m) \n        rounded_avg = Int64(rounded_avg)\n    end\n    return rounded_avg\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.\nusing Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t\
    @test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t\
    @test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) ==\
    \ \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185,\
    \ 546) == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t\
    @test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) ==\
    \ \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) ==\
    \ -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqdackb38.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqdackb38.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(n/m)*m\n\
    \    else\n        rounded_avg = -1\n    end\n    return rounded_avg\nend\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in the binary representation\
    \ of an integer.\nusing Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t\
    @test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t\
    @test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) ==\
    \ \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185,\
    \ 546) == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t\
    @test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) ==\
    \ \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) ==\
    \ -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcrl3cd4b.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcrl3cd4b.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(Int64(n)/Int64(m))\n\
    \    else\n        rounded_avg = -1\n    end\n    return rounded_avg\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5)\
    \ == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
    \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\
    \t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546)\
    \ == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
    \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
    @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
    \ 5) == \"0b101\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9pi5_ssa.jl:24\n  Test threw exception\n\
    \  Expression: candidate(1, 5) == \"0b11\"\n  MethodError: Cannot `convert` an\
    \ object of type \n    Float64 to an object of type \n    Union{Int64, String}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:171\n\
    \  Stacktrace:\n   [1] rounded_avg(::Int64, ::Int64) at /tmp/tmp9pi5_ssa.jl:17\n\
    \   [2] top-level scope at /tmp/tmp9pi5_ssa.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9pi5_ssa.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmp9pi5_ssa.jl:25\n  Test threw exception\n  Expression: candidate(7,\
    \ 13) == \"0b1010\"\n  MethodError: Cannot `convert` an object of type \n    Float64\
    \ to an object of type \n    Union{Int64, String}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T at essentials.jl:171\n  Stacktrace:\n\
    \   [1] rounded_avg(::Int64, ::Int64) at /tmp/tmp9pi5_ssa.jl:17\n   [2] top-level\
    \ scope at /tmp/tmp9pi5_ssa.jl:25\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9pi5_ssa.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmp9pi5_ssa.jl:26\n  Test threw exception\n  Expression: candidate(964,\
    \ 977) == \"0b1111001010\"\n  MethodError: Cannot `convert` an object of type\
    \ \n    Float64 to an object of type \n    Union{Int64, String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:171\n  Stacktrace:\n\
    \   [1] rounded_avg(::Int64, ::Int64) at /tmp/tmp9pi5_ssa.jl:17\n   [2] top-level\
    \ scope at /tmp/tmp9pi5_ssa.jl:26\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9pi5_ssa.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmp9pi5_ssa.jl:27\n  Test threw exception\n  Expression: candidate(996,\
    \ 997) == \"0b1111100100\"\n  MethodError: Cannot `convert` an object of type\
    \ \n    Float64 to an object of type \n    Union{Int64, String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:171\n  Stacktrace:\n\
    \   [1] rounded_avg(::Int64, ::Int64) at /tmp/tmp9pi5_ssa.jl:17\n   [2] top-level\
    \ scope at /tmp/tmp9pi5_ssa.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9pi5_ssa.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmp9pi5_ssa.jl:28\n  Test threw exception\n  Expression: candidate(560,\
    \ 851) == \"0b1011000010\"\n  MethodError: Cannot `convert` an object of type\
    \ \n    Float64 to an object of type \n    Union{Int64, String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:171\n  Stacktrace:\n\
    \   [1] rounded_avg(::Int64, ::Int64) at /tmp/tmp9pi5_ssa.jl:17\n   [2] top-level\
    \ scope at /tmp/tmp9pi5_ssa.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9pi5_ssa.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmp9pi5_ssa.jl:29\n  Test threw exception\n  Expression: candidate(185,\
    \ 546) == \"0b101101110\"\n  MethodError: Cannot `convert` an object of type \n\
    \    Float64 to an object of type \n    Union{Int64, String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:171\n  Stacktrace:\n\
    \   [1] rounded_avg(::Int64, ::Int64) at /tmp/tmp9pi5_ssa.jl:17\n   [2] top-level\
    \ scope at /tmp/tmp9pi5_ssa.jl:29\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9pi5_ssa.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmp9pi5_ssa.jl:30\n  Test threw exception\n  Expression: candidate(362,\
    \ 496) == \"0b110101101\"\n  MethodError: Cannot `convert` an object of type \n\
    \    Float64 to an object of type \n    Union{Int64, String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:171\n  Stacktrace:\n\
    \   [1] rounded_avg(::Int64, ::Int64) at /tmp/tmp9pi5_ssa.jl:17\n   [2] top-level\
    \ scope at /tmp/tmp9pi5_ssa.jl:30\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9pi5_ssa.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmp9pi5_ssa.jl:31\n  Test threw exception\n  Expression: candidate(350,\
    \ 902) == \"0b1001110010\"\n  MethodError: Cannot `convert` an object of type\
    \ \n    Float64 to an object of type \n    Union{Int64, String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:171\n  Stacktrace:\n\
    \   [1] rounded_avg(::Int64, ::Int64) at /tmp/tmp9pi5_ssa.jl:17\n   [2] top-level\
    \ scope at /tmp/tmp9pi5_ssa.jl:31\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9pi5_ssa.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmp9pi5_ssa.jl:32\n  Test threw exception\n  Expression: candidate(197,\
    \ 233) == \"0b11010111\"\n  MethodError: Cannot `convert` an object of type \n\
    \    Float64 to an object of type \n    Union{Int64, String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:171\n  Stacktrace:\n\
    \   [1] rounded_avg(::Int64, ::Int64) at /tmp/tmp9pi5_ssa.jl:17\n   [2] top-level\
    \ scope at /tmp/tmp9pi5_ssa.jl:32\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9pi5_ssa.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmp9pi5_ssa.jl:35\n  Test threw exception\n  Expression: candidate(5,\
    \ 5) == \"0b101\"\n  MethodError: Cannot `convert` an object of type \n    Float64\
    \ to an object of type \n    Union{Int64, String}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T at essentials.jl:171\n  Stacktrace:\n\
    \   [1] rounded_avg(::Int64, ::Int64) at /tmp/tmp9pi5_ssa.jl:17\n   [2] top-level\
    \ scope at /tmp/tmp9pi5_ssa.jl:35\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9pi5_ssa.jl:23\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    2     10     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 10 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9pi5_ssa.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(n/m)\n\
    \        binary = string(rounded_avg)\n        \n        if binary == \"0\"\n\
    \            binary = \"\"\n        end\n        return binary\n    else\n   \
    \     return -1\n    end\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code\
    \ language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of times a given value appears in a given\
    \ array. \n    For example, if the array is [1, 1, 2, 3, 4, 4], the function should\
    \ return 3.\n    Use a for loop to solve this problem.\n    \n    Your function\
    \ should take in two inputs: an array and a value.\n    Your function should return\
    \ the number of times the value appears in the array.\n    \n    Your function\
    \ should return -1 if the value is not in the array.\n    \n    Your function\
    \ should return 0 if the array is empty.\n    \n    Your function should return\
    \ 1 if the array contains only one value.\n    \n    Your function should return\
    \ 2 if the array contains two values.\n    \n    Your function should return 3\
    \ if the array contains three values.\n    \n    Your function should return 4\
    \ if the array contains four values.\n    \n    Your function should return 5\
    \ if the array contains five values.\n    \n    Your function should return 6\
    \ if the array contains six values.\n    \n    Your function should return 7 if\
    \ the array contains seven values.\n    \n    Your function should return 8 if\
    \ the array contains eight values.\n    \n    Your function should return 9 if\
    \ the array contains nine values.\n    \n    Your function should return 10 if\
    \ the array contains ten values.\n    \n    Your function should return 11 if\
    \ the array contains eleven values.\n    \n    Your function should return 12\
    \ if the array contains twelve values.\n    \n    Your function should return\
    \ 13 if the array contains thirteen values.\n    \n    Your function should return\
    \ 14 if the array contains fourteen values.\n    \n    Your function should return\
    \ 15 if the array contains fifteen values.\n    \n    Your function should return\
    \ 16 if the array contains sixteen values.\n    \n    Your function should return\
    \ 17 if the array contains seventeen values.\n    \n    Your function should return\
    \ 18 if the array contains eighteen values.\n    \n    Your function should return\
    \ 19 if the array contains nineteen values.\n    \n    Your function should return\
    \ 20 if the array contains twent\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7, 13)\
    \ == \"0b1010\")\n\t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996,\
    \ 997) == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\
    \t@test(candidate(185, 546) == \"0b101101110\")\n\t@test(candidate(362, 496) ==\
    \ \"0b110101101\")\n\t@test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197,\
    \ 233) == \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5,\
    \ 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsqyt1iht.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsqyt1iht.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(Int64(n)/Int64(m))\n\
    \        rounded_avg = Int64(rounded_avg)\n        rounded_avg = bin(rounded_avg)\n\
    \        rounded_avg = rounded_avg[2:end]\n        return rounded_avg\n    else\n\
    \        return -1\n    end\nend\n</cell>\n<code language=julia-1.3>\nrounded_avg(1,\
    \ 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that computes the factorial of a\
    \ given number. \nThe factorial of a non-negative integer is defined as the product\
    \ of all integers up to and including the given integer.\nExample: \nfactorial(5)\
    \ => 120\nfactorial(4) => 24\nfactorial(3) => 6\nfactorial(2) => 2\nfactorial(1)\
    \ => 1\nfactorial(0) => 1\nHint: \nThe factorial of a non-negative integer can\
    \ be computed using the following formula:\n$n! = n \\times n-1 \\times n-2 \\\
    times .... \\times 2 \\times 1$\nThe factorial of a negative integer is defined\
    \ as the product of all integers up to and including the given integer.\nExample:\
    \ \nfactorial(-5) => -5! = 5 \\times 4 \\times 3 \\times 2 \\times 1$\nfactorial(-4)\
    \ => -4! = 4 \\times 3 \\times 2 \\times 1$\nfactorial(-3) => -3! = 6 \\times\
    \ 2 \\times 1$\nfactorial(-2) => -2! = 2 \\times 1$\nfactorial(-1) => -1! = 1$\n\
    factorial(-0) => 0! = 1$\nHint: \nThe factorial of a negative integer can be computed\
    \ using the following formula:\n$n! = n \\times n-1 \\times n-2 \\times .... \\\
    times 2 \\times 1$\nThe factorial of a negative integer can be computed using\
    \ the following formula:\n$n! = n \\times n-1 \\times n-2 \\times .... \\times\
    \ 2 \\times 1$\nThe factorial of a negative integer can be computed using the\
    \ following formula:\n$n! = n \\times n-1 \\times n-2 \\times .... \\times 2 \\\
    times 1$\nThe factorial of a negative integer can be computed using the following\
    \ formula:\n$n! = n \\times \nusing Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\
    \t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\
    \t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996, 997)\
    \ == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185,\
    \ 546) == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t\
    @test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) ==\
    \ \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) ==\
    \ -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpydic23bu.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpydic23bu.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(n/m)*m\n\
    \    else\n        rounded_avg = -1\n    end\n    return rounded_avg\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of digits in an integer.\nusing Test\n\
    \n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\"\
    )\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"\
    0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t@test(candidate(560,\
    \ 851) == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"0b101101110\")\n\
    \t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350, 902) ==\
    \ \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t@test(candidate(7,\
    \ 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0gaff9gc.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0gaff9gc.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if m > n \n        return -1\n    \n \
    \   sum = 0\n    for i in n:m:1 \n        sum += i\n    \n    return sum / m\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise\nWrite\
    \ a function that returns the number of digits in an integer.\nusing Test\n\n\
    @testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\"\
    )\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"\
    0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t@test(candidate(560,\
    \ 851) == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"0b101101110\")\n\
    \t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350, 902) ==\
    \ \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t@test(candidate(7,\
    \ 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvx8w6_9x.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvx8w6_9x.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(n/m)*m\
    \ \n    else\n        rounded_avg = -1\n    end\n    return rounded_avg\nend\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that computes the factorial of a given number. \nExample: \n\
    factorial(5) => 120\nfactorial(3) => 6\nfactorial(0) => 1\nHint: \nThe factorial\
    \ of a number $n$ is defined as:\n$$n! = n \\times n-1 \\times n-2 \\times ....\
    \ 1 \\times 0$$\nWrite a recursive function that computes the factorial of a given\
    \ number. \nExample: \nfactorial(5) => 120\nfactorial(3) => 6\nfactorial(0) =>\
    \ 1\nHint: \nThe factorial of a number $n$ is defined as:\n$$n! = n \\times n-1\
    \ \\times n-2 \\times .... 1 \\times 0$$\nWrite a recursive function that computes\
    \ the factorial of a given number. \nExample: \nfactorial(5) => 120\nfactorial(3)\
    \ => 6\nfactorial(0) => 1\nHint: \nThe factorial of a number $n$ is defined as:\n\
    $$n! = n \\times n-1 \\times n-2 \\times .... 1 \\times 0$$\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\")\n\t\
    @test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"0b1111001010\"\
    )\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t@test(candidate(560, 851)\
    \ == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"0b101101110\")\n\t@test(candidate(362,\
    \ 496) == \"0b110101101\")\n\t@test(candidate(350, 902) == \"0b1001110010\")\n\
    \t@test(candidate(197, 233) == \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\
    \t@test(candidate(5, 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmput8nm0jr.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmput8nm0jr.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if m > n \n        return -1 \n    else\
    \ \n        avg = round(n/m)*m \n        binary = zeros(Int64, m+1) \n       \
    \ binary[Int(m+1)] = 1 \n        for i in 1:m+1 \n            binary[i] = binary[i+1]\
    \ + binary[i] \n        binary[Int(m+1)] = 0 \n        binary[Int(m+1)+1] = 1\
    \ \n        return binary(avg)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that computes the factorial of a given integer. \n    Round the\
    \ answer to the nearest integer and convert that to binary.\n    Example:\n  \
    \  factorial(5) => \"0b120\"\n    factorial(10) => \"0b2432902008176640000\"\n\
    \    factorial(20) => \"0b2432902008176640000000000\"\n    factorial(33) => \"\
    0b243290200817664000000000000\"\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7,\
    \ 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996,\
    \ 997) == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\
    \t@test(candidate(185, 546) == \"0b101101110\")\n\t@test(candidate(362, 496) ==\
    \ \"0b110101101\")\n\t@test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197,\
    \ 233) == \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5,\
    \ 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdeaufgid.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdeaufgid.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n > m \n        return -1\n    else\
    \ \n        return round(Int64(n)/Int64(m))*Int64(m) + Int64(n)\nend\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise\nWrite a function that returns the number of digits\
    \ in an integer.\nusing Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t\
    @test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t\
    @test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) ==\
    \ \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185,\
    \ 546) == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t\
    @test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) ==\
    \ \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) ==\
    \ -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplk6xa4ow.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplk6xa4ow.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(n/m)*m\
    \ \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ + (m if rounded_avg == m else 0)\n        return rounded_avg \n    else \n \
    \       return -1\n    end\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the first n Fibonacci\
    \ numbers. \nThe Fibonacci numbers are defined as:\n$$Fn = \\begin{bmatrix}1 &\
    \ 1 \\ 1 & -1\\end{bmatrix}^T$$\nWrite a function that returns the first n Fibonacci\
    \ numbers. \nThe Fibonacci numbers are defined as:\n$$Fn = \\begin{bmatrix}1 &\
    \ 1 \\ 1 & -1\\end{bmatrix}^T$$\nWrite a function that returns the first n Fibonacci\
    \ numbers. \nThe Fibonacci numbers are defined as:\n$$Fn = \\begin{bmatrix}1 &\
    \ 1 \\ 1 & -1\\end{bmatrix}^T$$\nWrite a function that returns the first n Fibonacci\
    \ numbers. \nThe Fibonacci numbers are defined as:\n$$Fn = \\begin{bmatrix}1 &\
    \ 1 \\ 1 & -1\\end{bmatrix}^T$$\nWrite a function that returns the first n Fibonacci\
    \ numbers. \nThe Fibonacci numbers are defined as:\n$$Fn = \\begin{bmatrix}1 &\
    \ 1 \\ 1 & -1\\end{bmatrix}^T$$\nWrite a function that returns the first n Fibonacci\
    \ numbers. \nThe Fibonacci numbers are defined as:\n$$Fn = \\begin{bmatrix}1 &\
    \ 1 \\ 1 & -1\\end{bmatrix}^T$$\nWrite a function that returns the first n Fibonacci\
    \ numbers. \nThe Fibonacci numbers are defined as:\n$$Fn = \\begin{bmatrix}1 &\
    \ 1 \\ 1 & -1\\end{bmatrix}^T$$\nWrite a function that returns the first n Fibonacci\
    \ numbers. \nThe Fibonacci numbers are defined as:\n$$F\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\")\n\t\
    @test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"0b1111001010\"\
    )\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t@test(candidate(560, 851)\
    \ == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"0b101101110\")\n\t@test(candidate(362,\
    \ 496) == \"0b110101101\")\n\t@test(candidate(350, 902) == \"0b1001110010\")\n\
    \t@test(candidate(197, 233) == \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\
    \t@test(candidate(5, 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvv7xik7u.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvv7xik7u.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m\n        return n\n    else\n\
    \        return -1\n    end\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7,\
    \ 5)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number of\
    \ digits in the binary representation of an integer.\nusing Test\n\n@testset begin\n\
    \ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7,\
    \ 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996,\
    \ 997) == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\
    \t@test(candidate(185, 546) == \"0b101101110\")\n\t@test(candidate(362, 496) ==\
    \ \"0b110101101\")\n\t@test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197,\
    \ 233) == \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5,\
    \ 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz2qzn9b4.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpz2qzn9b4.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(Int64(n/m))\n\
    \        rounded_avg = Int64(rounded_avg)\n        rounded_avg = bin(rounded_avg)[2:]\n\
    \        rounded_avg = rounded_avg * Int64(1<<(ceil(log2(m))))\n        rounded_avg\
    \ = rounded_avg % Int64(1<<(ceil(log2(m))))\n        return rounded_avg \n   \
    \ else \n        return -1\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of times a given element appears in a given array.\nusing Test\n\n\
    @testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\"\
    )\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"\
    0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t@test(candidate(560,\
    \ 851) == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"0b101101110\")\n\
    \t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350, 902) ==\
    \ \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t@test(candidate(7,\
    \ 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpc75xh_8k.jl:15\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpc75xh_8k.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n > m \n        rounded_avg = -1\n\
    \    else\n        rounded_avg = round(n/m) * m\n    end\n    return rounded_avg\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a given integer. \nExamples:\n\
    factorial(3) => 6\nfactorial(5) => 120\nfactorial(10) => 3628800\nHint: use factorial\
    \ and round\nusing Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1,\
    \ 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
    \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\
    \t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546)\
    \ == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
    \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
    @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
    \ 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8zrhin28.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8zrhin28.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(n\
    \ / m) * m\n        rounded_avg = rounded_avg - rounded_avg % m\n        rounded_avg\
    \ = rounded_avg + m\n        rounded_avg = rounded_avg % m\n        return rounded_avg\n\
    \    else\n        return -1\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ in two integers n and m and returns the number of digits\n    in the binary\
    \ representation of n through m. \n    Round the answer to the nearest integer\
    \ and convert that to binary.\n    Example:\n    digits_in_binary(1, 5) => \"\
    0b11\"\n    digits_in_binary(7, 5) => \"0b11\"\n    digits_in_binary(10, 20) =>\
    \ \"0b1111\"\n    digits_in_binary(20, 33) => \"0b11010\"\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\"\
    )\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"\
    0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t@test(candidate(560,\
    \ 851) == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"0b101101110\")\n\
    \t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350, 902) ==\
    \ \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t@test(candidate(7,\
    \ 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr7clv4um.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpr7clv4um.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if m > n \n        return -1\n    else\
    \ \n        return round(Int64(n)/Int64(m))\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of characters in a string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7, 13)\
    \ == \"0b1010\")\n\t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996,\
    \ 997) == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\
    \t@test(candidate(185, 546) == \"0b101101110\")\n\t@test(candidate(362, 496) ==\
    \ \"0b110101101\")\n\t@test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197,\
    \ 233) == \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5,\
    \ 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnvxjf5u_.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnvxjf5u_.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n < m \n        return -1\n    \n \
    \   sum = 0\n    for i in n:m\n        sum += i\n    \n    return sum / m\nend\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that computes the factorial of a\
    \ given number. \nExample: factorial(5) => \"5x4x3x2x1\"\nHint: use string concatenation\
    \ to create the string representation of the factorial\nHint: use string multiplication\
    \ to create the string representation of the factorial\nHint: use string slicing\
    \ to create the string representation of the factorial\nHint: use string concatenation\
    \ to create the string representation of the factorial\nHint: use string multiplication\
    \ to create the string representation of the factorial\nHint: use string slicing\
    \ to create the string representation of the factorial\nHint: use string concatenation\
    \ to create the string representation of the factorial\nHint: use string multiplication\
    \ to create the string representation of the factorial\nHint: use string slicing\
    \ to create the string representation of the factorial\nHint: use string concatenation\
    \ to create the string representation of the factorial\nHint: use string multiplication\
    \ to create the string representation of the factorial\nHint: use string slicing\
    \ to create the string representation of the factorial\nHint: use string concatenation\
    \ to create the string representation of the factorial\nHint: use string multiplication\
    \ to create the string representation of the factorial\nHint: use string slicing\
    \ to create the string representation of the factorial\nHint: use string concatenation\
    \ to create the string representation of the factorial\nHint: use string multiplication\
    \ to create the string representation of the factorial\nHint: use string slicing\
    \ to create the string representation of the factorial\nHint: use string concatenation\
    \ to create the string representation of the factorial\nHint: use string multiplication\
    \ to create the string representation of the factorial\nHint: use string slicing\
    \ to create the string representation of the factorial\nHint: use string concatenation\
    \ to create the string representation of the factorial\nHint: use string multiplication\
    \ to create the string representation of the factorial\nHint: use string slicing\
    \ to create the string representation of the factorial\nHint: use string concatenation\
    \ to create the string representation of the factorial\nHint: use string multiplication\
    \ to create the string representation of the factorial\nHint: use string slicing\
    \ to create the string representation of the factorial\nHint: use string concatenation\
    \ to create the string representation of the factorial\nHint: use string multiplication\
    \ to create the string representation of the factorial\nHint: use string slicing\
    \ to create the string representation of the factorial\nHint: use string concatenation\
    \ to create the string representation of the factorial\nHint: use string multiplication\
    \ to create the string representation of the factorial\nHint\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\")\n\t\
    @test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"0b1111001010\"\
    )\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t@test(candidate(560, 851)\
    \ == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"0b101101110\")\n\t@test(candidate(362,\
    \ 496) == \"0b110101101\")\n\t@test(candidate(350, 902) == \"0b1001110010\")\n\
    \t@test(candidate(197, 233) == \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\
    \t@test(candidate(5, 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyj2zckna.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyj2zckna.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(n/m)*m\n\
    \    else\n        rounded_avg = -1\n    end\n    return rounded_avg\nend\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes in two positive integers n and m, and returns the\
    \ sum of the integers from n through m (including n and m). \n    Round the answer\
    \ to the nearest integer and convert that to binary.\n    Example:\n    sum(1,\
    \ 5) => \"0b11\"\n    sum(7, 5) => -1\n    sum(10, 20) => \"0b1111\"\n    sum(20,\
    \ 33) => \"0b11010\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7, 13)\
    \ == \"0b1010\")\n\t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996,\
    \ 997) == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\
    \t@test(candidate(185, 546) == \"0b101101110\")\n\t@test(candidate(362, 496) ==\
    \ \"0b110101101\")\n\t@test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197,\
    \ 233) == \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5,\
    \ 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4cx0y723.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4cx0y723.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if m > n \n        return -1\n    \n \
    \   avg = round(n/m)\n    binary = formatInt(avg, \"0>b\").zfill(m)\n    return\
    \ binary\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of digits in an integer.\n\
    using Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1,\
    \ 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
    \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\
    \t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546)\
    \ == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
    \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
    @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
    \ 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpohlpyc_y.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpohlpyc_y.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m\n        rounded_avg = round(n/m)\n\
    \        return bin(rounded_avg)\n    else\n        return -1\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in two integers n and\
    \ m and returns true if the sum of the integers from n through m is even.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5)\
    \ == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
    \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\
    \t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546)\
    \ == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
    \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
    @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
    \ 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvx2bm9_f.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvx2bm9_f.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n < m \n        rounded_avg(n+1, m-1)\
    \ # round up\n    else\n        rounded_avg(n-1, m) # round down\n    end\nend\n\
    </cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of characters in a string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5)\
    \ == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
    \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\
    \t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546)\
    \ == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
    \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
    @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
    \ 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbyzp4zos.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbyzp4zos.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(m*(n+1)/2)\
    \ + n\n        return bin(rounded_avg)\n    else\n        return -1\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise: Write\
    \ a function that takes in two integers n and m and returns the number of digits\
    \ in m that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7, 13)\
    \ == \"0b1010\")\n\t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996,\
    \ 997) == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\
    \t@test(candidate(185, 546) == \"0b101101110\")\n\t@test(candidate(362, 496) ==\
    \ \"0b110101101\")\n\t@test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197,\
    \ 233) == \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5,\
    \ 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpytpzs4pt.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpytpzs4pt.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n > m \n        return -1\n    else\
    \ \n        return round(Int64(n)/Int64(m))*Int64(m) + Int64(n) - Int64(m) \n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, \nusing\
    \ Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5)\
    \ == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
    \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\
    \t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546)\
    \ == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
    \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
    @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
    \ 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy1e1ti2c.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpy1e1ti2c.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n < m \n        rounded_avg(m, n)\n\
    \    else\n        rounded_avg(n - m, m) + string(n - m, \"b\")\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of digits in an integer.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5)\
    \ == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
    \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\
    \t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546)\
    \ == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
    \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
    @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
    \ 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppfw32767.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppfw32767.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(n/m)*m\n\
    \    else\n        rounded_avg = -1\n    end\n    return rounded_avg\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that computes the factorial of a given number. \n    Factorial\
    \ of a number $n$ is defined as the product of all the positive integers less\
    \ than or equal to $n$. \n    Example:\n    factorial(5) => 120\n    factorial(3)\
    \ => 6\n    factorial(0) => 1\n    factorial(-1) => 0\n    factorial(-2) => -2\n\
    \    factorial(10) => 3628800\n    factorial(100) => 3628800\n    factorial(200)\
    \ => 3628800\n    factorial(300) => 3628800\n    factorial(400) => 3628800\n \
    \   factorial(500) => 3628800\n    factorial(600) => 3628800\n    factorial(700)\
    \ => 3628800\n    factorial(800) => 3628800\n    factorial(900) => 3628800\n \
    \   factorial(1000) => 3628800\n    factorial(1100) => 3628800\n    factorial(1200)\
    \ => 3628800\n    factorial(1300) => 3628800\n    factorial(1400) => 3628800\n\
    \    factorial(1500) => 3628800\n    factorial(1600) => 3628800\n    factorial(1700)\
    \ => 3628800\n    factorial(1800) => 3628800\n    factorial(1900) => 3628800\n\
    \    factorial(2000) => 3628800\n    factorial(2100) => 3628800\n    factorial(2200)\
    \ => 3628800\n    factorial(2300) => 3628800\n    factorial(2400) => 3628800\n\
    \    factorial(2500) => 3628800\n    factorial(2600) => 3628800\n    factorial(2700)\
    \ => 3628800\n    factorial(2800) => 3628800\n    factorial(2900) => 3628800\n\
    \    factorial(3000) => 3628800\n    factorial(3100) => 3628800\n    factorial(3200)\
    \ => 3628800\n    factorial(3300) => 3628800\n    factorial(3400\nusing Test\n\
    \n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\"\
    )\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"\
    0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t@test(candidate(560,\
    \ 851) == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"0b101101110\")\n\
    \t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350, 902) ==\
    \ \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t@test(candidate(7,\
    \ 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpslhzk5t_.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpslhzk5t_.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if m > n \n        error(\"m > n\")\n\
    \    elseif m == n \n        return m\n    elseif m == 1 \n        return n\n\
    \    elseif n == 1 \n        return m\n    elseif n == m \n        return -1\n\
    \    elseif n < m \n        error(\"n < m\")\n    else\n        rounded_avg(n-1,\
    \ m-1) + rounded_avg(n-1, m)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that computes the factorial of a given number. \n    Round the\
    \ answer to the nearest integer and convert that to binary.\n    Example:\n  \
    \  factorial(5) => \"0b120\"\n    factorial(10) => \"0b3628800\"\n    factorial(20)\
    \ => \"0b2432902008176640000\"\n    factorial(33) => \"0b11000990776957207539525\"\
    \n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1,\
    \ 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
    \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\
    \t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546)\
    \ == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
    \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
    @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
    \ 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_alhigza.jl:28\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_alhigza.jl:28\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n > m \n        rounded_avg(m, n)\n\
    \    else\n        rounded_avg(n - m, m) + str((n to m).round)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise\nWrite a function that takes a vector of integers and\
    \ returns the sum of the integers in the vector.\nExample: sum([1, 2, 3]) => 6\n\
    Example: sum([1, 2, 3, 5]) => 15\nExample: sum([1, 2, 3, 4, 5]) => 15\nExample:\
    \ sum([1, 2, 3, 4, 5]) => 15\nExample: sum([1, 2, 3, 4, 5]) => 15\nExample: sum([1,\
    \ 2, 3, 4, 5]) => 15\nExample: sum([1, 2, 3, 4, 5]) => 15\nExample: sum([1, 2,\
    \ 3, 4, 5]) => 15\nExample: sum([1, 2, 3, 4, 5]) => 15\nExample: sum([1, 2, 3,\
    \ 4, 5]) => 15\nExample: sum([1, 2, 3, 4, 5]) => 15\nExample: sum([1, 2, 3, 4,\
    \ 5]) => 15\nExample: sum([1, 2, 3, 4, 5]) => 15\nExample: sum([1, 2, 3, 4, 5])\
    \ => 15\nExample: sum([1, 2, 3, 4, 5]) => 15\nExample: sum([1, 2, 3, 4, 5]) =>\
    \ 15\nExample: sum([1, 2, 3, 4, 5]) => 15\nExample: sum([1, 2, 3, 4, 5]) => 15\n\
    Example: sum([1, 2, 3, 4, 5]) => 15\nExample: sum([1, 2, 3, 4, 5]) => 15\nExample:\
    \ sum([1, 2, 3, 4, 5]) => 15\nExample: sum([1, 2, 3, 4, 5]) => 15\nExample: sum([1,\
    \ 2, 3, 4, 5]) => 15\nExample: sum([1, 2, 3, 4, 5]) => 15\nExample: sum([1, 2,\
    \ 3, 4, 5]) => 15\nExample: sum([1, 2, 3, 4, 5]) => 15\nExample: sum([1, 2, 3,\
    \ 4, 5]) => 15\nExample: sum([1, 2, 3, 4, 5]) => 15\nExample: sum([1, 2, 3, 4,\
    \ 5]) => 15\nExample: sum([1, 2, 3, 4, 5]) => 15\nExample: sum([1, 2, 3, 4, 5])\
    \ => 15\nExample: sum([1, 2, 3, 4, 5]) => 15\nExample: sum([1, 2, 3, 4, 5]) =>\
    \ 15\nExample: sum([1, 2, 3, 4, 5]) => 15\nExample: sum([1, 2, 3, 4, 5]) => 15\n\
    Example: sum([1, 2, 3, 4, 5]) => 15\nExample: sum([1, 2, 3, 4, 5]) => 15\nExample:\
    \ sum([1, 2, 3, 4, 5]) => 15\nExample: sum([1, 2, 3, 4, 5]) => 15\nExample: sum([1,\
    \ 2, 3, 4, 5]) => 15\nExample: sum([1, 2, 3, 4, 5]) => 15\nExample: sum([1, 2,\
    \ 3, 4, 5]) => 15\nExample: sum([1, 2, 3, 4, 5]) => 15\nExample: sum([1, 2, 3,\
    \ 4, 5]) => 15\nExample: sum([1, 2, 3, 4, 5]) => 15\nusing Test\n\n@testset begin\n\
    \ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7,\
    \ 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996,\
    \ 997) == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\
    \t@test(candidate(185, 546) == \"0b101101110\")\n\t@test(candidate(362, 496) ==\
    \ \"0b110101101\")\n\t@test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197,\
    \ 233) == \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5,\
    \ 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4a3jpl7h.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4a3jpl7h.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if m > n \n        error(\"m must be less\
    \ than n\")\n    end\n    \n    binary = \"\"\n    for i in n:m\n        binary\
    \ = binary + convert(i)\n    end\n    \n    rounded = convert(parse(Int64, binary))\n\
    \    \n    if rounded == -1\n        error(\"n must be greater than m\")\n   \
    \ end\n    \n    return rounded\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code\
    \ language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nProblem 7\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5)\
    \ == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
    \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\
    \t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546)\
    \ == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
    \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
    @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
    \ 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpon296kym.jl:29\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpon296kym.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(n/m)*m\
    \ \n    else\n        rounded_avg = -1\n    end\n    return rounded_avg\nend\n\
    </cell>\n<code language=julia-1.4>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.4>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes in two integers n and m and returns their sum.\n \
    \   Round the answer to the nearest integer and convert that to binary.\n    Example:\n\
    \    sum_of_nums(1, 5) => \"0b11\"\n    sum_of_nums(7, 5) => \"0b11\"\n    sum_of_nums(10,\
    \ 20) => \"0b1111\"\n    sum_of_nums(20, 33) => \"0b11010\"\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5)\
    \ == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
    \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\
    \t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546)\
    \ == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
    \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
    @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
    \ 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpv89vcrpq.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpv89vcrpq.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n > m \n        return -1\n    \n \
    \   binary = \"\"\n    \n    for i in n:m\n        binary += string(i)\n    \n\
    \    binary = binary[2:]\n    \n    return parse(Int, binary)\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that computes the factorial of a given number. \n    Round the answer\
    \ to the nearest integer and convert that to binary.\n    Example:\n    factorial(5)\
    \ => \"0b120\"\n    factorial(10) => \"0b2432902008176640000\"\n    factorial(20)\
    \ => \"0b2432902008176640000000000\"\n    factorial(33) => \"0b243290200817664000000000000\"\
    \n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1,\
    \ 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
    \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\
    \t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546)\
    \ == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
    \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
    @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
    \ 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpmoq5t0iv.jl:20\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpmoq5t0iv.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(n/m)*m\
    \ \n    else\n        rounded_avg = -1\n    end\n    return rounded_avg\nend\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes in two integers n and m and returns the number of\
    \ digits in m that are not a multiple of n. \nFor example, \n    digits(5, 3)\
    \ => 1\n    digits(5, 6) => 0\n    digits(5, 9) => 2\n    digits(5, 10) => 1\n\
    \    digits(5, 11) => 0\n    digits(5, 12) => 1\n    digits(5, 13) => 0\n    digits(5,\
    \ 14) => 1\n    digits(5, 15) => 0\n    digits(5, 16) => 1\n    digits(5, 17)\
    \ => 0\n    digits(5, 18) => 1\n    digits(5, 19) => 0\n    digits(5, 20) => 1\n\
    \    digits(5, 21) => 0\n    digits(5, 22) => 1\n    digits(5, 23) => 0\n    digits(5,\
    \ 24) => 1\n    digits(5, 25) => 0\n    digits(5, 26) => 1\n    digits(5, 27)\
    \ => 0\n    digits(5, 28) => 1\n    digits(5, 29) => 0\n    digits(5, 30) => 1\n\
    \    digits(5, 31) => 0\n    digits(5, 32) => 1\n    digits(5, 33) => 0\n    digits(5,\
    \ 34) => 1\n    digits(5, 35) => 0\n    digits(5, 36) => 1\n    digits(5, 37)\
    \ => 0\n    digits(5, 38) => 1\n    digits(5, 39) => 0\n    digits(5, 40) => 1\n\
    \    digits(5, 41) => 0\n    digits(5, 42) => 1\n    digits(5, 43) => 0\n    digits(5,\
    \ 44) => 1\n    digits(5, 45) => 0\n    digits(5, 46) => 1\n    digits(5, 47)\
    \ => 0\n    digits(5, 48) => 1\n    digits(5, 49) => 0\n    digits(5, 50) => 1\n\
    \    digits(5, 51) => 0\n    digits(5, 52) => 1\n    digits(\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\")\n\t\
    @test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"0b1111001010\"\
    )\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t@test(candidate(560, 851)\
    \ == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"0b101101110\")\n\t@test(candidate(362,\
    \ 496) == \"0b110101101\")\n\t@test(candidate(350, 902) == \"0b1001110010\")\n\
    \t@test(candidate(197, 233) == \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\
    \t@test(candidate(5, 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppo204wxm.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppo204wxm.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if m > n \n        error(\"m must be less\
    \ than n\")\n    end\n    \n    if n == m \n        return n\n    end\n    \n\
    \    binary = zeros(Int64, m+1)\n    binary[m] = 1\n    \n    for i in (2..m-1)\
    \ \n        binary[i] = binary[i-1] * 2\n    end\n    \n    binary[n] = -1\n \
    \   \n    return binary\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that computes the factorial of a\
    \ given number. \n    Round the answer to the nearest integer and convert that\
    \ to binary.\n    Example:\n    factorial(5) => \"0b120\"\n    factorial(10) =>\
    \ \"0b210\"\n    factorial(20) => \"0b240\"\n    factorial(33) => \"0b333\"\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1,\
    \ 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
    \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\
    \t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546)\
    \ == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
    \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
    @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
    \ 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp15832ww2.jl:31\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp15832ww2.jl:31\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n > m \n        return -1\n    else\
    \ \n        return round(Int64(n)/Int64(m))\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7,5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10,20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20,33)\n</cell>\n<text>\nExercise: Write\
    \ a function that computes the factorial of a given number. \n    Round the answer\
    \ to the nearest integer and convert that to binary.\n    Example:\n    factorial(5)\
    \ => \"0b120\"\n    factorial(10) => \"0b3628800\"\n    factorial(20) => \"0b2432902008176640000\"\
    \n    factorial(30) => \"0b12066154037440000000\"\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\"\
    )\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"\
    0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t@test(candidate(560,\
    \ 851) == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"0b101101110\")\n\
    \t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350, 902) ==\
    \ \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t@test(candidate(7,\
    \ 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpusih73p9.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpusih73p9.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if m > n \n        error(\"m > n\")\n\
    \    end\n    \n    avg = round(n/m)\n    binary = \"\"\n    for i = 1:m\n   \
    \     binary = binary + string(avg, base=2)\n    end\n    return binary\nend\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</\n\
    using Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1,\
    \ 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
    \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\
    \t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546)\
    \ == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
    \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
    @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
    \ 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg_wchrrz.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpg_wchrrz.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if m > n \n        return -1\n    \n \
    \   binary = \"\"\n    \n    for i in n:m\n        binary = binary + str((i%2)+1)\n\
    \    end\n    \n    return parse(Int64, binary)\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite a function that computes\
    \ the factorial of a given number. \nThe factorial of a number is defined as the\
    \ product of all the integers up to and including the number itself. \nFor example,\
    \ 5! = 5 x 4 x 3 x 2 x 1 = 120. \nWrite a function that computes the factorial\
    \ of a given number and returns it as a string.\nExample: factorial(5) = \"120\"\
    \nHint: use the factorial function you wrote in exercise 1.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\")\n\t\
    @test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"0b1111001010\"\
    )\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t@test(candidate(560, 851)\
    \ == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"0b101101110\")\n\t@test(candidate(362,\
    \ 496) == \"0b110101101\")\n\t@test(candidate(350, 902) == \"0b1001110010\")\n\
    \t@test(candidate(197, 233) == \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\
    \t@test(candidate(5, 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkgow6efe.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkgow6efe.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n > m \n        rounded_avg = -1\n\
    \    else\n        rounded_avg = ceil(Int, (n+m)/2)\n    end\n    return rounded_avg\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes in two integers n and m and returns the number of\
    \ digits in m that are\nless than n. \nExample: \ndigits(10, 5) => 3\ndigits(10,\
    \ 10) => 0\ndigits(10, 20) => 2\ndigits(10, 30) => 1\ndigits(10, 40) => 1\ndigits(10,\
    \ 50) => 2\ndigits(10, 60) => 1\ndigits(10, 70) => 1\ndigits(10, 80) => 2\ndigits(10,\
    \ 90) => 1\ndigits(10, 100) => 3\ndigits(10, 110) => 2\ndigits(10, 120) => 1\n\
    digits(10, 130) => 1\ndigits(10, 140) => 2\ndigits(10, 150) => 1\ndigits(10, 160)\
    \ => 1\ndigits(10, 170) => 2\ndigits(10, 180) => 1\ndigits(10, 190) => 1\ndigits(10,\
    \ 200) => 3\ndigits(10, 210) => 2\ndigits(10, 220) => 1\ndigits(10, 230) => 1\n\
    digits(10, 240) => 2\ndigits(10, 250) => 1\ndigits(10, 260) => 1\ndigits(10, 270)\
    \ => 2\ndigits(10, 280) => 1\ndigits(10, 290) => 1\ndigits(10, 300) => 3\ndigits(10,\
    \ 310) => 2\ndigits(10, 320) => 1\ndigits(10, 330) => 1\ndigits(10, 340) => 2\n\
    digits(10, 350) => 1\ndigits(10, 360) => 1\ndigits(10, 370) => 2\ndigits(10, 380)\
    \ => 1\ndigits(10, 390) => 1\ndigits(10, 400) => 3\ndigits(10, 410) => 2\ndigits(10,\
    \ 420) => 1\ndigits(10, 430) => 1\ndigits(10, 440) => 2\ndigits(10, 450) => 1\n\
    digits(10, 460) => 1\ndigits(10, 470) => 2\ndigits(10, 480) => 1\ndigits(10, 490)\
    \ => 1\n\nusing Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1,\
    \ 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
    \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\
    \t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546)\
    \ == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
    \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
    @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
    \ 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptn9i1iru.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptn9i1iru.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n < m \n        return -1\n    else\
    \ \n        return round(Int64(n)/Int64(m))*Int64(m) \n    end\nend\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite a function that computes\
    \ the factorial of a given number. \n    Round the answer to the nearest integer\
    \ and convert that to binary.\n    Example:\n    factorial(5) => \"0b120\"\n \
    \   factorial(10) => \"0b3628800\"\n    factorial(20) => \"0b2432902008176640000\"\
    \n    factorial(33) => \"0b11000990770096757640000\"\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\"\
    )\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"\
    0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t@test(candidate(560,\
    \ 851) == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"0b101101110\")\n\
    \t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350, 902) ==\
    \ \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t@test(candidate(7,\
    \ 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1jhxjxdn.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1jhxjxdn.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(Int64(n)/Int64(m))\n\
    \        return String(rounded_avg)\n    else\n        return -1\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that computes the factorial of a given number. \nThe factorial\
    \ of a non-negative integer $n$ is defined as:\n$$\n\\begin{align}\n\\text{Factorial}(n)\
    \ &= n!\\\n&= 1\\cdot 2^{n-1}\\cdot 3^{n-2}\\cdot \\cdots \\cdot n\\\n&= n!\\\
    cdot (n - 1)!\\\n&= n!\\cdot (n - 1)\\cdot (n - 2)\\cdot \\cdots \\cdot 1\n\\\
    end{align}\n$$\nWrite a function that computes the factorial of a given number.\
    \ \nThe factorial of a non-negative integer $n$ is defined as:\n$$\n\\begin{align}\n\
    \\text{Factorial}(n) &= n!\\\n&= 1\\cdot 2^{n-1}\\cdot 3^{n-2}\\cdot \\cdots \\\
    cdot n\\\n&= n!\\cdot (n - 1)!\\\n&= n!\\cdot (n - 1)\\cdot (n - 2)\\cdot \\cdots\
    \ \\cdot 1\n\\end{align}\n$$\nWrite a function that computes the factorial of\
    \ a given number. \nThe factorial of a non-negative integer $n$ is defined as:\n\
    $$\n\\begin{align}\n\\text{Factorial}(n) &= n!\\\n&= 1\\cdot 2^{n-1}\\cdot 3^{n-2}\\\
    cdot \\cdots \\cdot n\\\n&= n!\\cdot (n - 1)!\\\n&= n!\\cdot (n - 1)\\cdot (n\
    \ - 2)\\cdot \\cdots \\cdot 1\n\\end{align}\n$$\nWrite a function that computes\
    \ the factorial of a given number. \nThe factorial of a non-negative integer $n$\
    \ is defined as:\n$$\n\\begin{align}\n\\text{Factor\nusing Test\n\n@testset begin\n\
    \ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7,\
    \ 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996,\
    \ 997) == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\
    \t@test(candidate(185, 546) == \"0b101101110\")\n\t@test(candidate(362, 496) ==\
    \ \"0b110101101\")\n\t@test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197,\
    \ 233) == \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5,\
    \ 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_662q2xp.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_662q2xp.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n < m \n        rounded_avg(m, n)\n\
    \    else\n        rounded_avg(m, n-1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 10)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 50)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 100)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 200)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 300)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(7, 400)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 500)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 600)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(7, 700)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 800)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 900)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(7, 1000)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 1100)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 1200)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(7, 1300)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 1400)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 1500)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(7, 1600)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 1700)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 1800)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(7, 1900)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 2000)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 2100)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(7, 2200)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1,\
    \ 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
    \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\
    \t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546)\
    \ == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
    \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
    @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
    \ 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq0jy7crq.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpq0jy7crq.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n < m \n        return -1\n    else\
    \ \n        return round(Int64(n)/Int64(m))*Int64(m) \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of digits in an integer.\nusing Test\n\n\
    @testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\"\
    )\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"\
    0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t@test(candidate(560,\
    \ 851) == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"0b101101110\")\n\
    \t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350, 902) ==\
    \ \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t@test(candidate(7,\
    \ 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnk8uvt0u.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnk8uvt0u.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n == m \n        then return \"0b0\"\
    \n    else if n < m \n        then return -1\n    else \n        avg = ((n+1)::Int64\
    \ - m)/2\n        binary = \"\"\n        for i in (0:(2^ceil(log2(avg))-1))\n\
    \            binary = binary + str((avg % i)*2^ceil(log2(i)))\n        return\
    \ binary\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite a function that computes\
    \ the factorial of a given number. \nThe factorial of a non-negative integer is\
    \ defined as the product of integers \nthat have no more than two digits. \nFor\
    \ example, 5! = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1 = 120.\nThe factorial of a negative\
    \ integer is defined as the product of integers \nthat have no more than two digits.\
    \ \nFor example, -5! = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1 = -60. \nWrite a recursive\
    \ function factorial(n) that computes the factorial of n \nand returns the result\
    \ as a string.\nFor example, factorial(5) = \"120\".\nWrite a recursive function\
    \ factorial(n) that computes the factorial of n \nand returns the result as an\
    \ Int64.\nFor example, factorial(5) = 120.\nWrite a recursive function factorial(n)\
    \ that computes the factorial of n \nand returns the result as a Float64.\nFor\
    \ example, factorial(5) = 1.2040816326530612e+19.\nWrite a recursive function\
    \ factorial(n) that computes the factorial of n \nand returns the result as a\
    \ Float32.\nFor example, factorial(5) = 1.2040816326530612e+19.\nWrite a recursive\
    \ function factorial(n) that computes the factorial of n \nand returns the result\
    \ as a Float16.\nFor example, factorial(5) = 1.2040816326530612e+19.\nWrite a\
    \ recursive function factorial(n) that computes the factorial of n \nand returns\
    \ the result as a Float64.\nFor example, factorial(5) = 1.2040816326530612e+19.\n\
    Write a recursive function factorial(n) that computes the factorial of n \nand\
    \ returns the result as a Float32.\nFor example, factorial(5) = 1.2040816326530612e+19.\n\
    Write a recursive function factorial(n) that computes the factorial of n \nand\
    \ returns the \nusing Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1,\
    \ 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
    \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\
    \t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546)\
    \ == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
    \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
    @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
    \ 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpegw0xgf9.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpegw0xgf9.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if m > n \n        -1\n    else\n    \
    \    round(Int64(n)/Int64(m))*Int64(m) + Int64(n) - Int64(m) \n    end\nend\n\
    </cell>\n<code language=julia-1.0>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.0>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.\nusing Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t\
    @test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t\
    @test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) ==\
    \ \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185,\
    \ 546) == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t\
    @test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) ==\
    \ \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) ==\
    \ -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmply63wu9w.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmply63wu9w.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n < m \n        rounded_avg(m, n)\n\
    \    else\n        rounded_avg(m, n-1)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of characters in a string. \nExample:\
    \ \n    count_chars(\"Hello World\") => 5\n    count_chars(\"Hello World!\") =>\
    \ 6\n    count_chars(\"Hello World!!\") => 7\n    count_chars(\"Hello World!!!\"\
    ) => 8\n    count_chars(\"Hello World!!!!\") => 9\n    count_chars(\"Hello World!!!!!\"\
    ) => 10\n    count_chars(\"Hello World!!!!!!\") => 11\n    count_chars(\"Hello\
    \ World!!!!!!!\") => 12\n    count_chars(\"Hello World!!!!!!!\") == -1\n    count_chars(\"\
    Hello World!!!!!!!\") == -1\n    count_chars(\"Hello World!!!!!!!\") == -1\n \
    \   count_chars(\"Hello World!!!!!!!\") == -1\n    count_chars(\"Hello World!!!!!!!\"\
    ) == -1\n    count_chars(\"Hello World!!!!!!!\") == -1\n    count_chars(\"Hello\
    \ World!!!!!!!\") == -1\n    count_chars(\"Hello World!!!!!!!\") == -1\n    count_chars(\"\
    Hello World!!!!!!!\") == -1\n    count_chars(\"Hello World!!!!!!!\") == -1\n \
    \   count_chars(\"Hello World!!!!!!!\") == -1\n    count_chars(\"Hello World!!!!!!!\"\
    ) == -1\n    count_chars(\"Hello World!!!!!!!\") == -1\n    count_chars(\"Hello\
    \ World!!!!!!!\") == -1\n    count_chars(\"Hello World!!!!!!!\") == -1\n    count_chars(\"\
    Hello World!!!!!!!\") == -1\n    count_chars(\"Hello World!!!!!!!\") == -1\n \
    \   count_chars(\"Hello World!!!!!!!\") == -1\n    count_chars(\"Hello World!!!!!!!\"\
    ) == -1\n    count_chars(\"Hello World!!!!!!!\") == -1\n    count_chars(\"Hello\
    \ World!!!!!!!\") == -1\n    count_chars(\"Hello World!!!!!!!\") == -1\n    count_chars(\"\
    Hello World!!!!!!!\") == -1\n    count_chars(\"Hello World!!!!!!!\") == -1\n \
    \   count_chars(\"Hello World!!!!!!!\") == -1\n    count_chars(\"Hello World!!!!!!!\"\
    ) == -1\n    count_chars(\"Hello World!!!!!!!\"\nusing Test\n\n@testset begin\n\
    \ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7,\
    \ 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996,\
    \ 997) == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\
    \t@test(candidate(185, 546) == \"0b101101110\")\n\t@test(candidate(362, 496) ==\
    \ \"0b110101101\")\n\t@test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197,\
    \ 233) == \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5,\
    \ 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2cwfvtil.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2cwfvtil.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if m > n \n        error(\"m must be less\
    \ than n\")\n    end\n    \n    if n == m \n        return m\n    end\n    \n\
    \    sum = 0\n    for i in n:m:1 \n        sum += i\n    end\n    \n    return\
    \ sum / m\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in two integers and returns\
    \ the sum of the squares of the first two numbers. \nExample: \n    square_sum(1,\
    \ 5) => 25\n    square_sum(7, 5) => 25\n    square_sum(10, 20) => 50\n    square_sum(20,\
    \ 33) => 50\n    square_sum(100, 200) => 400\n    square_sum(300, 400) => 400\n\
    \    square_sum(500, 600) => 500\n    square_sum(700, 800) => 800\n    square_sum(900,\
    \ 1000) => 1000\n    square_sum(1100, 1200) => 1200\n    square_sum(1300, 1400)\
    \ => 1400\n    square_sum(1500, 1600) => 1600\n    square_sum(1700, 1800) => 1800\n\
    \    square_sum(1900, 2000) => 2000\n    square_sum(2100, 2200) => 2200\n    square_sum(2300,\
    \ 2400) => 2400\n    square_sum(2500, 2600) => 2600\n    square_sum(2700, 2800)\
    \ => 2800\n    square_sum(2900, 3000) => 3000\n    square_sum(3100, 3200) => 3200\n\
    \    square_sum(3300, 3400) => 3400\n    square_sum(3500, 3600) => 3600\n    square_sum(3700,\
    \ 3800) => 3800\n    square_sum(3900, 4000) => 4000\n    square_sum(4100, 4200)\
    \ => 4200\n    square_sum(4300, 4400) => 4400\n    square_sum(4500, 4600) => 4600\n\
    \    square_sum(4700, 4800) => 4800\n    square_sum(4900, 5000) => 5000\n    square_sum(5100,\
    \ 5200) => 5200\n    square_sum(5300, 5400) => 5400\n    square_sum(5500, 5600)\
    \ => 5600\n    square_sum(5700, 5800) => 5800\n    square_sum(5900, 6000) => \n\
    using Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1,\
    \ 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
    \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\
    \t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546)\
    \ == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
    \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
    @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
    \ 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphsv0gl3l.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphsv0gl3l.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if m > n \n        error(\"m must be less\
    \ than n\") \n    else \n        avg = (n+m)/2\n        binary = string2binary(avg)\n\
    \        return binary\n    end\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.\nusing Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t\
    @test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t\
    @test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) ==\
    \ \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185,\
    \ 546) == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t\
    @test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) ==\
    \ \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) ==\
    \ -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbg8ocqob.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbg8ocqob.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if m > n \n        error(\"m must be less\
    \ than n\")\n    end\n    \n    rounded_avg = round(Int64(n/m))\n    \n    if\
    \ rounded_avg == Int64(n/m)\n        rounded_avg = rounded_avg + 1\n    end\n\
    \    \n    return rounded_avg.to_s(2)\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n\nusing Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\
    \t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\
    \t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996, 997)\
    \ == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185,\
    \ 546) == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t\
    @test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) ==\
    \ \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) ==\
    \ -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppigx8ili.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppigx8ili.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(n/m)*m\
    \ \n        rounded_avg = rounded_avg - m if rounded_avg > m \n        rounded_avg\
    \ = rounded_avg + m if rounded_avg < m \n        rounded_avg = rounded_avg.to_s(2)\
    \ \n    else \n        rounded_avg = -1 \n    end \n    return rounded_avg \n\
    end \n</cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes in two integers n and m and returns the number of\
    \ integers from n to m that are divisible by 3.\nusing Test\n\n@testset begin\n\
    \ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7,\
    \ 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996,\
    \ 997) == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\
    \t@test(candidate(185, 546) == \"0b101101110\")\n\t@test(candidate(362, 496) ==\
    \ \"0b110101101\")\n\t@test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197,\
    \ 233) == \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5,\
    \ 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"if\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp193nzqwd.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp193nzqwd.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(n/m)*m\n\
    \        rounded_avg = rounded_avg % m\n        rounded_avg = rounded_avg.to_s(2)\n\
    \    else \n        rounded_avg = -1\n    end\n    return rounded_avg\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that computes the factorial of a given number. \n    For example,\
    \ factorial(5) => 120\n    factorial(10) => 3628800\n    factorial(20) => inf\n\
    \    factorial(0) => 1\n    factorial(-5) => -1\n    factorial(-10) => -2\n  \
    \  factorial(-20) => -2\n    factorial(-30) => -4\n    factorial(-40) => -8\n\
    \    factorial(-50) => -64\n    factorial(-60) => -128\n    factorial(-70) =>\
    \ -256\n    factorial(-80) => -512\n    factorial(-90) => -1024\n    factorial(-100)\
    \ => -2048\n    factorial(-200) => -4096\n    factorial(-300) => -8192\n    factorial(-400)\
    \ => -16384\n    factorial(-500) => -32768\n    factorial(-600) => -65536\n  \
    \  factorial(-700) => -131072\n    factorial(-800) => -262144\n    factorial(-900)\
    \ => -524288\n    factorial(-1000) => -1048576\n    factorial(-1100) => -2097152\n\
    \    factorial(-1200) => -4194304\n    factorial(-1300) => -8388608\n    factorial(-1400)\
    \ => -16777216\n    factorial(-1500) => -33554432\n    factorial(-1600) => -67108864\n\
    \    factorial(-1700) => -134217728\n    factorial(-1800) => -268435456\n    factorial(-1900)\
    \ => -536870912\n    factorial(-2000) => -1073741824\n    factorial(-2100) =>\
    \ -2147483648\n    factorial(-2200) => -34359738368\n    factorial(-23\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5)\
    \ == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
    \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\
    \t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546)\
    \ == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
    \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
    @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
    \ 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqlc2925e.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqlc2925e.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        return -1\n    else\
    \ \n        return round(Int64(n)/Int64(m))*Int64(m) \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7,5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10,20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20,33)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of digits in an integer.\n\
    using Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1,\
    \ 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
    \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\
    \t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546)\
    \ == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
    \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
    @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
    \ 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpec997x6c.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpec997x6c.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n < m \n        rounded_avg(n, m-1)\
    \ + 1 \n    else \n        rounded_avg(m-1, n-1) + 1 \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise: Write a function that computes the factorial of a given\
    \ number. \n    For example, factorial(5) => 120\n    factorial(4) => 24\n   \
    \ factorial(3) => 6\n    factorial(2) => 2\n    factorial(1) => 1\n    factorial(0)\
    \ => 1\n    factorial(n) => n * factorial(n-1)\n    Use a while loop to keep calling\
    \ the function until it returns 1.\n    Use a recursive function to compute the\
    \ factorial of a given number.\n    Use a for loop to compute the factorial of\
    \ a given number.\n    Use a while loop to compute the factorial of a given number.\n\
    \    Use a for loop to compute the factorial of a given number.\n    Use a while\
    \ loop to compute the factorial of a given number.\n    Use a for loop to compute\
    \ the factorial of a given number.\n    Use a while loop to compute the factorial\
    \ of a given number.\n    Use a for loop to compute the factorial of a given number.\n\
    \    Use a while loop to compute the factorial of a given number.\n    Use a for\
    \ loop to compute the factorial of a given number.\n    Use a for loop to compute\
    \ the factorial of a given number.\n    Use a for loop to compute the factorial\
    \ of a given number.\n    Use a for loop to compute the factorial of a given number.\n\
    \    Use a for loop to compute the factorial of a given number.\n    Use a for\
    \ loop to compute the factorial of a given number.\n    Use a for loop to compute\
    \ the factorial of a given number.\n    Use a for loop to compute the factorial\
    \ of a given number.\n    Use a for loop to compute the factorial of a given number.\n\
    \    Use a for loop to compute the factorial of a given number.\n    Use a for\
    \ loop to compute the factorial of a given number.\n    Use a for loop to compute\
    \ the factorial of a given number.\n    Use a for loop to compute the factorial\
    \ of a given number.\n    Use a for loop to compute the factorial of a given number.\n\
    \    Use a for loop to compute the factorial of a given number.\n    Use a for\
    \ loop to compute the factorial of a given number.\n    Use a for loop to compute\
    \ the factorial of a given number.\n    Use \nusing Test\n\n@testset begin\n\n\
    candidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7,\
    \ 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996,\
    \ 997) == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\
    \t@test(candidate(185, 546) == \"0b101101110\")\n\t@test(candidate(362, 496) ==\
    \ \"0b110101101\")\n\t@test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197,\
    \ 233) == \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5,\
    \ 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbh1yk830.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbh1yk830.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(n/m)*m\n\
    \    else\n        rounded_avg = -1\n    end\n    return rounded_avg\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that computes the factorial of a given number. \n    Round the\
    \ answer to the nearest integer and convert that to binary.\n    Example:\n  \
    \  factorial(5) => \"0b120\"\n    factorial(10) => \"0b3628800\"\n    factorial(20)\
    \ => \"0b2432902008176640000\"\n    factorial(30) => \"0b12066154037440000000\"\
    \n    factorial(40) => \"0b1206615403744000000000\"\n    factorial(50) => \"0b1206615403744000000000000\"\
    \n    factorial(60) => \"0b120661540374400000000000000\"\n    factorial(70) =>\
    \ \"0b1206615403744000000000000000\"\n    factorial(80) => \"0b12066154037440000000000000000\"\
    \n    factorial(90) => \"0b1206615403744000000000000000000\"\n    factorial(100)\
    \ => \"0b120661540374400000000000000000000\"\n    factorial(110) => \"0b12066154037440000000000000000000000\"\
    \n    factorial(120) => \"0b120661540374400000000000000000000000\"\n    factorial(130)\
    \ => \"0b1206615403744000000000000000000000000\"\n    factorial(140) => \"0b120661540374400000000000000000000000000\"\
    \n    factorial(150) => \"0b12066154037440000000000000000000000000000\"\n    factorial(160)\
    \ => \"0b1206615403744000000000000000000000000000000\"\n    factorial(170) =>\
    \ \"0b12066154037440000000000000000000000000000000\"\n    factorial(180) => \"\
    0b12066154037440000000000000000000000000000000000\"\n    factorial(190) => \"\
    0b1206615403744000000000000000000000000000000000000\"\n    factorial(200) => \"\
    0b120661540374400000000000000000000000000000000000000\"\n    factorial(210) =>\
    \ \"0b1206615403744000000000000000000000000000000000000000\"\n    factorial(\n\
    using Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1,\
    \ 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
    \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\
    \t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546)\
    \ == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
    \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
    @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
    \ 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_pxt4d96.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_pxt4d96.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m\n        rounded_avg = round(n/m)*m\n\
    \    else\n        rounded_avg = -1\n    end\n    return rounded_avg\nend\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that computes the factorial of a given number. \n    Factorials\
    \ are defined as $n! = n * (n - 1)!$. \n    Example:\n    factorial(5) => 120\n\
    \    factorial(4) => 24\n    factorial(3) => 6\n    factorial(2) => 2\n    factorial(1)\
    \ => 1\n    factorial(0) => 1\n    factorial(-5) => -1\n    factorial(-4) => -2\n\
    \    factorial(-3) => -3\n    factorial(-2) => -4\n    factorial(-1) => -5\n \
    \   factorial(-0) => -5\n    factorial(-2) => -4\n    factorial(-3) => -3\n  \
    \  factorial(-4) => -2\n    factorial(-5) => -1\n    factorial(-6) => 0\n    factorial(-7)\
    \ => 1\n    factorial(-8) => 2\n    factorial(-9) => 6\n    factorial(-10) =>\
    \ 120\n    factorial(-11) => 24\n    factorial(-12) => 120\n    factorial(-13)\
    \ => 120\n    factorial(-14) => 120\n    factorial(-15) => 120\n    factorial(-16)\
    \ => 120\n    factorial(-17) => 120\n    factorial(-18) => 120\n    factorial(-19)\
    \ => 120\n    factorial(-20) => 120\n    factorial(-21) => 120\n    factorial(-22)\
    \ => 120\n    factorial(-23) => 120\n    factorial(-24) => 120\n    factorial(-25)\
    \ => 120\n    factorial(-26) => 120\n    factorial(-27) => 120\n    factorial(-28)\
    \ => 120\n    factorial(-29) => 120\n    factorial(-30) => 120\n    factorial(-31)\
    \ => 120\n    factorial(-32) => 120\n    factorial(-33) => 120\n    factorial(-34)\
    \ => 120\n    factorial(-35) => 120\n    factorial(-\nusing Test\n\n@testset begin\n\
    \ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7,\
    \ 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996,\
    \ 997) == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\
    \t@test(candidate(185, 546) == \"0b101101110\")\n\t@test(candidate(362, 496) ==\
    \ \"0b110101101\")\n\t@test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197,\
    \ 233) == \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5,\
    \ 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz8dg_a0n.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpz8dg_a0n.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m\n        rounded_avg = round(n/m)*m\n\
    \    else\n        rounded_avg = -1\n    end\n    return rounded_avg\nend\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer.\nusing Test\n\
    \n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\"\
    )\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"\
    0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t@test(candidate(560,\
    \ 851) == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"0b101101110\")\n\
    \t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350, 902) ==\
    \ \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t@test(candidate(7,\
    \ 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplnie69mj.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplnie69mj.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if m > n \n        error(\"m must be less\
    \ than n\")\n    end\n    \n    avg = round(n/m)\n    binary = zeros(Int64, m+1)\n\
    \    binary[m] = Int64(avg)\n    for i in (2..m-1) \n        binary[i] = binary[i-1]\
    \ * 2\n    end\n    \n    return string(binary)\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of digits in an integer.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7, 13)\
    \ == \"0b1010\")\n\t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996,\
    \ 997) == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\
    \t@test(candidate(185, 546) == \"0b101101110\")\n\t@test(candidate(362, 496) ==\
    \ \"0b110101101\")\n\t@test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197,\
    \ 233) == \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5,\
    \ 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4uvsybio.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4uvsybio.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if m > n then return -1\n    else return\
    \ round(Int64(n)/Int64(m))*Int64(m) + Int64(n) - Int64(m) \nend\n</cell>\n<code\
    \ language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a positive integer n and returns the number of digits\
    \ in n. \nExample: \n    digits(42) => 3\n    digits(-42) => -1\n    digits(0)\
    \ => 0\n    digits(1) => 1\n    digits(-1) => -1\n    digits(-10) => -1\n    digits(10)\
    \ => 1\n    digits(100) => 2\n    digits(-100) => -1\n    digits(-1000) => -1\n\
    \    digits(1000) => 3\n    digits(10000) => 4\n    digits(100000) => 5\n    digits(1000000)\
    \ => 6\n    digits(100000000) => 7\n    digits(1000000000) => 8\n    digits(1000000000000)\
    \ => 9\n    digits(1000000000000000) => 10\n    digits(10000000000000000) => 11\n\
    \    digits(1000000000000000000) => 12\n    digits(10000000000000000000) => 13\n\
    \    digits(100000000000000000000) => 14\n    digits(1000000000000000000000) =>\
    \ 15\n    digits(10000000000000000000000) => 16\n    digits(1000000000000000000000000)\
    \ => 17\n    digits(10000000000000000000000000) => 18\n    digits(1000000000000000000000000000)\
    \ => 19\n    digits(10000000000000000000000000000) => 20\n    digits(1000000000000000000000000000000)\
    \ => 21\n    digits(100000000000000000000000000000000) => 22\n    digits(1000000000000000000000000000000000)\
    \ => 23\n    digits(100000000000000000000000000000000000) => 24\n    digits(1000000000000000000000000000000000000)\
    \ => 25\n    digits(100000000000000000000000000000000000000) => 26\n    digits(10000000000000000000000000000000000000000)\
    \ => 27\n    digits(100000000000000000000000000000000000000000) => 28\n    digits(10000000000000000000000000000000000000000000)\
    \ => 29\n    digits(100000000000000000000000000000000000000000000) => 30\n   \
    \ digits(10000000000000000000000000000000000000000000000) => 31\n    digits(1000000000000000000000000000000000000000000000000)\
    \ => 32\n    digits(10000000000000000000000000000000000000000000000000) => 33\n\
    \    digits(100000000000000000000000000000000000000000000000000\nusing Test\n\n\
    @testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\"\
    )\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"\
    0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t@test(candidate(560,\
    \ 851) == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"0b101101110\")\n\
    \t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350, 902) ==\
    \ \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t@test(candidate(7,\
    \ 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpsljg0few.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpsljg0few.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n >= m \n        rounded_avg(m, n)\n\
    \    else\n        rounded_avg(m, n-1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of times a given value appears in a given\
    \ array.\nusing Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1,\
    \ 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
    \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\
    \t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546)\
    \ == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
    \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
    @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
    \ 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmponr090fv.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmponr090fv.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(n/m)*m\
    \ \n    else\n        rounded_avg = -1\n    end\n    return rounded_avg\nend\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer. \n    For example,\
    \ \n    digits(42) => 3\n    digits(-42) => 1\n    digits(0) => 0\n    digits(-0)\
    \ => 0\n    digits(123456789) => 6\n    digits(-123456789) => 6\n    digits(123456789012345)\
    \ => 15\n    digits(-123456789012345) => 15\n    digits(1234567890123456789) =>\
    \ 20\n    digits(-1234567890123456789) => 20\n    digits(1234567890123456789012345)\
    \ => 30\n    digits(-1234567890123456789012345) => 30\n    digits(12345678901234567890123456789)\
    \ => 40\n    digits(-12345678901234567890123456789) => 40\n    digits(12345678901234567890123456789012345)\
    \ => 50\n    digits(-12345678901234567890123456789012345) => 50\n    digits(123456789012345678901234567890123456789)\
    \ => 60\n    digits(-123456789012345678901234567890123456789) => 60\n    digits(123456789012345678901234567890123456789012345)\
    \ => 70\n    digits(-123456789012345678901234567890123456789012345) => 70\n  \
    \  digits(1234567890123456789012345678901234567890123456789) => 80\n    digits(-1234567890123456789012345678901234567890123456789)\
    \ => 80\n    digits(1234567890123456789012345678901234567890123456789012345) =>\
    \ 90\n    digits(-1234567890123456789012345678901234567890123456789012345) =>\
    \ 90\n    digits(12345678901234567890123456789012345678901234567890123456789)\
    \ => 100\n    digits(-12345678901234567890123456789012345678901234567890123456789)\
    \ => 100\n    digits(12345678901234567890123456789012345678901234567890123456789012345)\
    \ => 110\n    digits(-12345678901234567890123456789012345678901234567890123456789012345)\
    \ => 110\n    digits(123456789012345678901234567890123456789012345678901234567890123456789)\
    \ => 120\n    digits(-123456789012345678901234567890123456789012345678901234567890123456789)\
    \ => 120\n    digits(123456789012345678901234567890123456789012345678901234567890123456789012345)\
    \ => 130\n    digits(-123456789012345678901234567890123456789012345678901234567890123456789012345)\
    \ => 130\n    digits(1234567890123456789012345678901234567890123456789012345678901234567890123456789)\
    \ => 140\n    digits(-1234567890123456789\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7, 13)\
    \ == \"0b1010\")\n\t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996,\
    \ 997) == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\
    \t@test(candidate(185, 546) == \"0b101101110\")\n\t@test(candidate(362, 496) ==\
    \ \"0b110101101\")\n\t@test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197,\
    \ 233) == \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5,\
    \ 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpld6aho0h.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpld6aho0h.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n < m \n        return -1\n    else\
    \ \n        return round(Int64(n)/Int64(m))*Int64(m) \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of digits in an integer.\nusing Test\n\n\
    @testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\"\
    )\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"\
    0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t@test(candidate(560,\
    \ 851) == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"0b101101110\")\n\
    \t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350, 902) ==\
    \ \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t@test(candidate(7,\
    \ 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt0_n96_2.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpt0_n96_2.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(n\
    \ / m) * m\n    else\n        rounded_avg = -1\n    end\n    return rounded_avg\n\
    end\n</cell>\n<code language=julia-1.3>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer.\nusing Test\n\
    \n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\"\
    )\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"\
    0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t@test(candidate(560,\
    \ 851) == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"0b101101110\")\n\
    \t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350, 902) ==\
    \ \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t@test(candidate(7,\
    \ 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp854_4q2w.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp854_4q2w.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m\n        return -1\n    else\n\
    \        avg = ((n+m)/2)\n        return round(avg)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes in two integers and returns the sum of the integers\
    \ \n    between them (including both of them). \n    Round the answer to the nearest\
    \ integer and convert that to binary.\n    Example:\n    sum(1, 5) => \"0b11\"\
    \n    sum(7, 5) => \"0b11\"\n    sum(10, 20) => \"0b1111\"\n    sum(20, 33) =>\
    \ \"0b11010\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\
    \t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\
    \t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996, 997)\
    \ == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185,\
    \ 546) == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t\
    @test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) ==\
    \ \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) ==\
    \ -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6ve4v3dt.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6ve4v3dt.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n == m \n        then return \"0b0\"\
    \n    else \n        avg = round(n/m) \n        binary = string2binary(string(avg))\n\
    \        if binary == \"0\"\n            then return \"0b0\"\n        else \n\
    \            return binary\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7,5)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(10,20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20,33)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ a binary string to a decimal integer.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7, 13)\
    \ == \"0b1010\")\n\t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996,\
    \ 997) == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\
    \t@test(candidate(185, 546) == \"0b101101110\")\n\t@test(candidate(362, 496) ==\
    \ \"0b110101101\")\n\t@test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197,\
    \ 233) == \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5,\
    \ 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp0_7_eqjm.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp0_7_eqjm.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n >= m \n        rounded_avg(n, m)\
    \ \n    else \n        rounded_avg(m, n) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that computes the factorial of a given number. \nThe factorial\
    \ of a number $n$ is defined as:\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7, 13)\
    \ == \"0b1010\")\n\t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996,\
    \ 997) == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\
    \t@test(candidate(185, 546) == \"0b101101110\")\n\t@test(candidate(362, 496) ==\
    \ \"0b110101101\")\n\t@test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197,\
    \ 233) == \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5,\
    \ 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpez5yhxnh.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpez5yhxnh.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if m > n \n        return -1\n    \n \
    \   sum = 0\n    for i in n:m\n        sum += i\n    return sum.to_binary(digits=2)\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\")\n\t\
    @test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"0b1111001010\"\
    )\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t@test(candidate(560, 851)\
    \ == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"0b101101110\")\n\t@test(candidate(362,\
    \ 496) == \"0b110101101\")\n\t@test(candidate(350, 902) == \"0b1001110010\")\n\
    \t@test(candidate(197, 233) == \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\
    \t@test(candidate(5, 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4d13inoh.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4d13inoh.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(n/m)*m\
    \ \n    else\n        rounded_avg = -1\n    end\n    return rounded_avg\nend\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that computes the factorial of a given number. \n    Factorial\
    \ of a number $n$ is defined as $n!$, the product of all the integers \n    up\
    \ to and including $n$. \n    Example:\n    factorial(5) => 120\n    factorial(3)\
    \ => 6\n    factorial(0) => 1\n    factorial(-1) => 0\n    factorial(4) => 24\n\
    \    factorial(5) => 120\n    factorial(10) => 3628800\n    factorial(20) => inf\n\
    \    factorial(30) => inf\n    factorial(100) => inf\n    factorial(200) => inf\n\
    \    factorial(300) => inf\n    factorial(1000) => inf\n    factorial(10000) =>\
    \ inf\n    factorial(100000) => inf\n    factorial(1000000) => inf\n    factorial(100000000)\
    \ => inf\n    factorial(1000000000) => inf\n    factorial(1000000000000) => inf\n\
    \    factorial(1000000000000000) => inf\n    factorial(1000000000000000000) =>\
    \ inf\n    factorial(100000000000000000000) => inf\n    factorial(10000000000000000000000)\
    \ => inf\n    factorial(1000000000000000000000000000) => inf\n    factorial(1000000000000000000000000000000)\
    \ => inf\n    factorial(1000000000000000000000000000000000) => inf\n    factorial(1000000000000000000000000000000000)\
    \ => inf\n    factorial(100000000000000000000000000000000) => inf\n    factorial(1000000000000000000000000000000000)\
    \ => inf\n    factorial(100000000000000000000000000000000) => inf\n    factorial(100000000000000000000000000000000)\
    \ => inf\n    factorial(100000000000000000000000000000000) => inf\n    factorial(100000000000000000000000000000000)\
    \ => inf\n    factorial(100000000000000000000000000000000) => inf\n    factorial(100000000000000000000000000000000)\
    \ => inf\n    factorial(100000000000000000000000000000000) => inf\n    factorial(100000000000000000000000000000000)\
    \ => inf\n    factorial(100000000000000000000000000000000) => inf\n    factorial(100000000000000000000000000000000)\
    \ => inf\n    factorial(100000000000000000000000000000000) => inf\n    factorial(100000000000000000000000000000000\n\
    using Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1,\
    \ 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
    \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\
    \t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546)\
    \ == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
    \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
    @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
    \ 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn0cp9q9h.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpn0cp9q9h.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n >= m \n        rounded_avg = -1\n\
    \    else \n        rounded_avg = round(Int64(n)/Int64(m))*Int64(m) + Int64(n)\n\
    \    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of digits\
    \ in an integer.\nExample: digits(42) => 3\nHint: use the function divrem.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5)\
    \ == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
    \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\
    \t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546)\
    \ == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
    \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
    @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
    \ 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxzg6hfba.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxzg6hfba.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if m > n \n        return -1\n    \n \
    \   avg = floor((n+m)/2)\n    binary = bitstring(avg, length=ceil(log2(avg)))\n\
    \    \n    if binary.length < ceil(log2(m))\n        binary = bitstring(m, length=ceil(log2(m)))\n\
    \    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code\
    \ language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise: Write a\
    \ function that computes the average of n through m (including n and m), rounded\
    \ to\n    an integer and converts that to binary. \n    Round the answer to the\
    \ nearest integer and convert that to binary.\n    If n is greater than m, return\
    \ -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5)\
    \ => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"\
    0b11010\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\
    \t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\
    \t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996, 997)\
    \ == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185,\
    \ 546) == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t\
    @test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) ==\
    \ \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) ==\
    \ -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqazie7c_.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqazie7c_.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(Int64(n)/Int64(m))\n\
    \        rounded_avg = Int64(rounded_avg)\n        rounded_avg = bin(rounded_avg)\n\
    \        rounded_avg = string(rounded_avg)\n        return rounded_avg\n    else\n\
    \        return -1\n    end\nend\n</cell>\n<code language=julia-1.4>\nrounded_avg(1,\
    \ 5)\n</cell>\n<code language=julia-1.4>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.4>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of times\
    \ a given value appears in a given array.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7, 13)\
    \ == \"0b1010\")\n\t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996,\
    \ 997) == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\
    \t@test(candidate(185, 546) == \"0b101101110\")\n\t@test(candidate(362, 496) ==\
    \ \"0b110101101\")\n\t@test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197,\
    \ 233) == \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5,\
    \ 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpip_elvlq.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpip_elvlq.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n == m \n        then \"0b0\"\n   \
    \ else if n > m \n        then \"-1\"\n    else if n < m \n        then \"0b\"\
    \ + bin(n - m).rstrip(\"0\")\n    else \n        rounded_avg(n - m, m) + rounded_avg(n,\
    \ m - 1)\nend\n</cell>\n<code language=julia-1.0>\nrounded_avg(7, 5)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes in two integers n and m and returns\
    \ their sum, rounded to\nthe nearest integer.\nExample: \n    sum_of_n_to_m(5,\
    \ 7) => \"0b11\"\n    sum_of_n_to_m(5, 8) => \"0b11\"\n    sum_of_n_to_m(5, 9)\
    \ => \"0b11\"\n    sum_of_n_to_m(5, 10) => \"0b11\"\n    sum_of_n_to_m(5, 11)\
    \ => \"0b11\"\n    sum_of_n_to_m(5, 12) => \"0b11\"\n    sum_of_n_to_m(5, 13)\
    \ => \"0b11\"\n    sum_of_n_to_m(5, 14) => \"0b11\"\n    sum_of_n_to_m(5, 15)\
    \ => \"0b11\"\n    sum_of_n_to_m(5, 16) => \"0b11\"\n    sum_of_n_to_m(5, 17)\
    \ => \"0b11\"\n    sum_of_n_to_m(5, 18) => \"0b11\"\n    sum_of_n_to_m(5, 19)\
    \ => \"0b11\"\n    sum_of_n_to_m(5, 20) => \"0b11\"\n    sum_of_n_to_m(5, 21)\
    \ => \"0b11\"\n    sum_of_n_to_m(5, 22) => \"0b11\"\n    sum_of_n_to_m(5, 23)\
    \ => \"0b11\"\n    sum_of_n_to_m(5, 24) => \"0b11\"\n    sum_of_n_to_m(5, 25)\
    \ => \"0b11\"\n    sum_of_n_to_m(5, 26) => \"0b11\"\n    sum_of_n_to_m(5, 27)\
    \ => \"0b11\"\n    sum_of_n_to_m(5, 28) => \"0b11\"\n    sum_of_n_to_m(5, 29)\
    \ => \"0b11\"\n    sum_of_n_to_m(5, 30) => \"0b11\"\n    sum_of_n_to_m(5, 31)\
    \ => \"0b11\"\n    sum_of_n_to_m(5, 32) => \"0b11\"\n    sum_of_n_to_m(5, 33)\
    \ => \"0b11\"\n    sum_of_n_to_m(5, 34) => \"0b11\"\n    sum_of_n_to_\nusing Test\n\
    \n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\"\
    )\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"\
    0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t@test(candidate(560,\
    \ 851) == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"0b101101110\")\n\
    \t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350, 902) ==\
    \ \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t@test(candidate(7,\
    \ 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"\"\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpmhfdx034.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpmhfdx034.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n >= m\n        rounded_avg = -1\n\
    \    else\n        rounded_avg = round(Int64(n)/Int64(m))*Int64(m) + Int64(n)\
    \ - Int64(m) \n    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of digits in an integer.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7, 13)\
    \ == \"0b1010\")\n\t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996,\
    \ 997) == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\
    \t@test(candidate(185, 546) == \"0b101101110\")\n\t@test(candidate(362, 496) ==\
    \ \"0b110101101\")\n\t@test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197,\
    \ 233) == \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5,\
    \ 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzosm4ack.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzosm4ack.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(n/m)*m\n\
    \    else\n        rounded_avg = -1\n    end\n    return rounded_avg\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of times a given element appears in a\
    \ given array.\nusing Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1,\
    \ 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
    \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\
    \t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546)\
    \ == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
    \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
    @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
    \ 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_e0j0gzg.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_e0j0gzg.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(n/m)*m\n\
    \        rounded_avg = string(rounded_avg)\n    else\n        rounded_avg = -1\n\
    \    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.3>\nrounded_avg(1,\
    \ 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.\nusing Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t\
    @test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t\
    @test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) ==\
    \ \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185,\
    \ 546) == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t\
    @test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) ==\
    \ \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) ==\
    \ -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_f90j_cs.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_f90j_cs.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(n/m)*m\n\
    \        return string(rounded_avg)\n    else\n        return -1\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(7,5)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of characters in a string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5)\
    \ == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
    \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\
    \t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546)\
    \ == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
    \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
    @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
    \ 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_r4tfsqa.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_r4tfsqa.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(Int64(n)/Int64(m))\n\
    \        return String(rounded_avg)\n    else\n        return -1\n    end\nend\n\
    </cell>\n<code language=julia-1.4>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.4>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes in two integers n and m, and returns the number of\
    \ digits in m that are less than or equal to n.\nusing Test\n\n@testset begin\n\
    \ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7,\
    \ 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996,\
    \ 997) == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\
    \t@test(candidate(185, 546) == \"0b101101110\")\n\t@test(candidate(362, 496) ==\
    \ \"0b110101101\")\n\t@test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197,\
    \ 233) == \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5,\
    \ 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9yvi21_a.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9yvi21_a.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if m > n \n        return -1 \n    \n\
    \    binary = \"\"\n    \n    for i in n:m-1:-1 \n        binary += str((i%2)+1)\n\
    \    \n    return Int64(binary)\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.\nusing Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t\
    @test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t\
    @test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) ==\
    \ \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185,\
    \ 546) == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t\
    @test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) ==\
    \ \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) ==\
    \ -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3jwzx4f_.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3jwzx4f_.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if m > n \n        return -1\n    \n \
    \   binary = \"\"\n    \n    for i in n:n:m \n        binary += str((i%2)+1)\n\
    \    \n    return parse(Int64, binary)\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite a function that computes\
    \ the factorial of a given integer. \n    Round the answer to the nearest integer\
    \ and convert that to binary.\n    Example:\n    factorial(5) => \"0b120\"\n \
    \   factorial(10) => \"0b2432902008176640000\"\n    factorial(20) => \"0b2432902008176640000000000\"\
    \n    factorial(33) => \"0b243290200817664000000000000\"\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\"\
    )\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"\
    0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t@test(candidate(560,\
    \ 851) == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"0b101101110\")\n\
    \t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350, 902) ==\
    \ \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t@test(candidate(7,\
    \ 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpv4bap51f.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpv4bap51f.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n > m \n        rounded_avg(m, n)\n\
    \    elseif n == m \n        -1\n    else\n        rounded_avg(n - 1, m) + m \n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 3\nWrite a function that computes\
    \ the factorial of a given number. \nThe factorial of a number $n$ is defined\
    \ as:\n$$\nn! = n \\times n-1 \\times n-2 \\times .... \\times 2 \\times 1\n$$\n\
    For example, 5! = 5 \\times 4 \\times 3 \\times 2 \\times 1 = 120\nWrite a function\
    \ that computes the factorial of a given number. \nThe factorial of a number $n$\
    \ is defined as:\n$$\nn! = n \\times n-1 \\times n-2 \\times .... \\times 2 \\\
    times 1\n$$\nFor example, 5! = 5 \\times 4 \\times 3 \\times 2 \\times 1 = 120\n\
    Write a function that computes the factorial of a given number. \nThe factorial\
    \ of a number $n$ is defined as:\n$$\nn! = n \\times n-1 \\times n-2 \\times ....\
    \ \\times 2 \\times 1\n$$\nFor example, 5! = 5 \\times 4 \\times 3 \\times 2 \\\
    times 1 = 120\nWrite a function that computes the factorial of a given number.\
    \ \nThe factorial of a number $n$ is defined as:\n$$\nn! = n \\times n-1 \\times\
    \ n-2 \\times .... \\times 2 \\times 1\n$$\nFor example, 5! = 5 \\times 4 \\times\
    \ 3 \\times 2 \\times 1 = 120\nWrite a function that computes the factorial of\
    \ a given number. \nThe factorial of a number $n$ is defined as:\n$$\nn! = n \\\
    times n-1 \\times n-2 \\times .... \\times 2 \\times 1\n$$\nFor example, 5! =\
    \ 5 \\times 4 \\times 3 \\times 2 \\times 1 = 120\nWrite a function that computes\
    \ the factorial of a given number. \nThe factorial of a number $n$ is defined\
    \ as:\n$$\nn! = n \\times n-1 \\times n-2 \\times .... \\times 2 \\times 1\n$$\n\
    For example, 5! = 5 \\times 4 \\times 3 \\times \nusing Test\n\n@testset begin\n\
    \ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7,\
    \ 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996,\
    \ 997) == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\
    \t@test(candidate(185, 546) == \"0b101101110\")\n\t@test(candidate(362, 496) ==\
    \ \"0b110101101\")\n\t@test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197,\
    \ 233) == \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5,\
    \ 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1us6czpb.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1us6czpb.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n > m \n        rounded_avg = -1\n\
    \    else\n        rounded_avg = round(n/m)*m\n    end\n    return rounded_avg\n\
    end\n</cell>\n<code language=julia-1.0>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.0>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that computes the factorial of a given integer. \n    Factorial\
    \ of a number is the product of all the integers up to and including that number.\n\
    \    Example:\n    factorial(5) => 120\n    factorial(3) => 6\n    factorial(0)\
    \ => 1\n    factorial(-1) => 0\n    factorial(-2) => -2\n    factorial(10) =>\
    \ 3628800\n    factorial(10^9) => overflow\n    factorial(10^10) => overflow\n\
    \    factorial(10^11) => overflow\n    factorial(10^12) => overflow\n    factorial(10^13)\
    \ => overflow\n    factorial(10^14) => overflow\n    factorial(10^15) => overflow\n\
    \    factorial(10^16) => overflow\n    factorial(10^17) => overflow\n    factorial(10^18)\
    \ => overflow\n    factorial(10^19) => overflow\n    factorial(10^20) => overflow\n\
    \    factorial(10^21) => overflow\n    factorial(10^22) => overflow\n    factorial(10^23)\
    \ => overflow\n    factorial(10^24) => overflow\n    factorial(10^25) => overflow\n\
    \    factorial(10^26) => overflow\n    factorial(10^27) => overflow\n    factorial(10^28)\
    \ => overflow\n    factorial(10^29) => overflow\n    factorial(10^30) => overflow\n\
    \    factorial(10^31) => overflow\n    factorial(10^32) => overflow\n    factorial(10^33)\
    \ => overflow\n    factorial(10^34) => overflow\n    factorial(10^35) => overflow\n\
    \    factorial(10^36) => overflow\n    factorial(10^37) => overflow\n    factorial(10^38)\
    \ => overflow\n    factorial(10^39) => overflow\n    factorial(10^40) => overflow\n\
    \    factorial(10^41) => overflow\n    factorial(10^42) => overflow\n    factorial(10^43)\
    \ => overflow\n    factorial(10^44\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7, 13)\
    \ == \"0b1010\")\n\t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996,\
    \ 997) == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\
    \t@test(candidate(185, 546) == \"0b101101110\")\n\t@test(candidate(362, 496) ==\
    \ \"0b110101101\")\n\t@test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197,\
    \ 233) == \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5,\
    \ 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfai3qlyt.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfai3qlyt.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(n/m)*m\
    \ \n        rounded_avg = rounded_avg + n \n        rounded_avg = rounded_avg\
    \ % m \n        rounded_avg = rounded_avg .+ 1 \n        rounded_avg = rounded_avg\
    \ .- m \n        rounded_avg = rounded_avg .+ m \n        rounded_avg = rounded_avg\
    \ .- n \n        rounded_avg = rounded_avg .+ n \n        rounded_avg = rounded_avg\
    \ .- m \n        rounded_avg = rounded_avg .- n \n        rounded_avg = rounded_avg\
    \ .- m \n        rounded_avg = rounded_avg .- n \n        rounded_avg = rounded_avg\
    \ .- m \n        rounded_avg = rounded_avg .- n \n        rounded_avg = rounded_avg\
    \ .- m \n        rounded_avg = rounded_avg .- n \n        rounded_avg = rounded_avg\
    \ .- m \n        rounded_avg = rounded_avg .- n \n        rounded_avg = rounded_avg\
    \ .- m \n        rounded_avg = rounded_avg .- n \n        rounded_avg = rounded_avg\
    \ .- m \n        rounded_avg = rounded_avg .- n \n        rounded_avg = rounded_avg\
    \ .- m \n        rounded_avg = rounded_avg .- n \n        rounded_avg = rounded_avg\
    \ .- m \n        rounded_avg = rounded_avg .- n \n        rounded_avg = rounded_avg\
    \ .- m \n        rounded_avg = rounded_avg .- n \n        rounded_avg = rounded_avg\
    \ .- m \n        rounded_avg = rounded_avg .- n \n        rounded_avg = rounded_avg\
    \ .- m \n        rounded_avg = rounded_avg .- n \n        rounded_avg = rounded_avg\
    \ .- m \n        rounded_avg = rounded_avg .- n \n        rounded_avg = rounded_avg\
    \ .- m \n        rounded_avg = rounded_avg .- n \n        rounded_avg = rounded_avg\
    \ .- m \n        rounded_avg = rounded_avg .- n \n        rounded_avg = rounded_avg\
    \ .- m \n        rounded_av\nusing Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\
    \t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\
    \t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996, 997)\
    \ == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185,\
    \ 546) == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t\
    @test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) ==\
    \ \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) ==\
    \ -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3xku7n49.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3xku7n49.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(n/m)*m\
    \ \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ + m \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ % m \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ % m \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ % m \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ % m \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ % m \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ % m \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ % m \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ % m \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ % m \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ % m \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ % m \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ % m \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ % m \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ % m \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ % m \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ % m \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ % m \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ % m \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ % m \n        rounded_avg = rounded_avg % m \n        rounded_av\nusing Test\n\
    \n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\"\
    )\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"\
    0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t@test(candidate(560,\
    \ 851) == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"0b101101110\")\n\
    \t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350, 902) ==\
    \ \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t@test(candidate(7,\
    \ 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsvmzt92g.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsvmzt92g.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if m > n \n        return -1\n    else\
    \ \n        return round(Int64(n)/Int64(m))\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the first n Fibonacci numbers. \nThe Fibonacci numbers are the numbers starting\
    \ with 0, 1, 1, 2, 3, 5, 8, 13, ...\nThe Fibonacci numbers are the first n numbers\
    \ in the Fibonacci sequence. \nThe first two numbers in the Fibonacci sequence\
    \ are 0 and 1. \nThe first three numbers in the Fibonacci sequence are 0, 1, 1,\
    \ 2. \nThe first four numbers in the Fibonacci sequence are 0, 1, 1, 2, 3. \n\
    The first five numbers in the Fibonacci sequence are 0, 1, 1, 2, 3, 5, 8, 13,\
    \ ...\nThe first six numbers in the Fibonacci sequence are 0, 1, 1, 2, 3, 5, 8,\
    \ 13, 21, ...\nThe first seven numbers in the Fibonacci sequence are 0, 1, 1,\
    \ 2, 3, 5, 8, 13, 21, 34, 55, 89, ...\nThe first eight numbers in the Fibonacci\
    \ sequence are 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ...\nThe first nine\
    \ numbers in the Fibonacci sequence are 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89,\
    \ 144, 233, 377, 610, ...\nThe first ten numbers in the Fibonacci sequence are\
    \ 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, ...\nThe first\
    \ eleven numbers in the Fibonacci sequence are 0, 1, 1, 2, 3, 5, 8, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, ...\nThe first twelve numbers in the Fibonacci sequence\
    \ are 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, ...\nThe first\
    \ thirteen numbers in the Fibonacci sequence are 0, 1, 1, 2, 3, 5, 8, 13, 21,\
    \ 34, 55, 89, 144, 233, 377, 610, ...\nThe first thirteen numbers in the Fibonacci\
    \ sequence are 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, ...\n\
    The first thirteen numbers in the Fibonacci sequence are 0, 1, 1, 2, 3, 5, 8,\
    \ 13, 21, 34, 55, 89, 144, 233, 377, 610, ...\nThe first thirteen numbers in the\
    \ Fibonacci sequence are 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610, \nusing Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1,\
    \ 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
    \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\
    \t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546)\
    \ == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
    \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
    @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
    \ 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsj16w2km.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsj16w2km.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(m/n)\
    \ \n        rounded_avg = rounded_avg * 2 \n        rounded_avg = rounded_avg\
    \ + 1 \n        rounded_avg = rounded_avg % 2 \n        rounded_avg = rounded_avg\
    \ \n    else \n        rounded_avg = -1\n    end\n    return rounded_avg\nend\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes in two integers n and m, and returns the number of\
    \ integers from n to m (including n and m).\nusing Test\n\n@testset begin\n\n\
    candidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7,\
    \ 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996,\
    \ 997) == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\
    \t@test(candidate(185, 546) == \"0b101101110\")\n\t@test(candidate(362, 496) ==\
    \ \"0b110101101\")\n\t@test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197,\
    \ 233) == \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5,\
    \ 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8te1nny4.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8te1nny4.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(n/m)*m\n\
    \        rounded_avg = rounded_avg % m\n        return rounded_avg\n    else\n\
    \        return -1\n    end\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7,\
    \ 5)\n</cell>\n<text>\nExercise 2\nWrite a function that computes the factorial\
    \ of a given number. \nExample: \n    factorial(5) => 120\n    factorial(10) =>\
    \ 3628800\n    factorial(0) => 1\n    factorial(-1) => -1\n    factorial(-2) =>\
    \ -2\n    factorial(-3) => -3\n    factorial(-4) => -4\n    factorial(-5) => -5\n\
    \    factorial(-6) => -6\n    factorial(-7) => -7\n    factorial(-8) => -8\n \
    \   factorial(-9) => -9\n    factorial(-10) => -10\n    factorial(-11) => -11\n\
    \    factorial(-12) => -12\n    factorial(-13) => -13\n    factorial(-14) => -14\n\
    \    factorial(-15) => -15\n    factorial(-16) => -16\n    factorial(-17) => -17\n\
    \    factorial(-18) => -18\n    factorial(-19) => -19\n    factorial(-20) => -20\n\
    \    factorial(-21) => -21\n    factorial(-22) => -22\n    factorial(-23) => -23\n\
    \    factorial(-24) => -24\n    factorial(-25) => -25\n    factorial(-26) => -26\n\
    \    factorial(-27) => -27\n    factorial(-28) => -28\n    factorial(-29) => -29\n\
    \    factorial(-30) => -30\n    factorial(-31) => -31\n    factorial(-32) => -32\n\
    \    factorial(-33) => -33\n    factorial(-34) => -34\n    factorial(-35) => -35\n\
    \    factorial(-36) => -36\n    factorial(-37) => -37\n    factorial(-38) => -38\n\
    \    factorial(-39) => -39\n    factorial(-40) => -40\n    factorial(-41) => -41\n\
    \    factorial(-42) => -42\n    factorial(-43) => -43\n    factorial(-44) => -44\n\
    \    factorial(-45) => -45\n    factorial(-46) => -46\n    factorial(-47) => -47\n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1,\
    \ 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
    \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\
    \t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546)\
    \ == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
    \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
    @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
    \ 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6_c3s2qo.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6_c3s2qo.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m\n        return -1\n    else\n\
    \        avg = (n+m)/2\n        binary = \"\"\n        for i in (1:length(avg))\n\
    \            binary += show(avg[i])\n        end\n        return binary\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.0>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes in two integers n and\
    \ m and returns true if n is divisible by m, and false otherwise. \nExample: \n\
    \    divisible_by_5(2, 3) => true\n    divisible_by_5(3, 3) => false\n    divisible_by_5(4,\
    \ 3) => false\n    divisible_by_5(6, 3) => true\n    divisible_by_5(7, 3) => false\n\
    \    divisible_by_5(8, 3) => false\n    divisible_by_5(9, 3) => false\n    divisible_by_5(12,\
    \ 3) => true\n    divisible_by_5(13, 3) => false\n    divisible_by_5(14, 3) =>\
    \ false\n    divisible_by_5(15, 3) => false\n    divisible_by_5(16, 3) => false\n\
    \    divisible_by_5(17, 3) => false\n    divisible_by_5(18, 3) => false\n    divisible_by_5(19,\
    \ 3) => false\n    divisible_by_5(20, 3) => false\n    divisible_by_5(21, 3) =>\
    \ false\n    divisible_by_5(22, 3) => false\n    divisible_by_5(23, 3) => false\n\
    \    divisible_by_5(24, 3) => false\n    divisible_by_5(25, 3) => false\n    divisible_by_5(26,\
    \ 3) => false\n    divisible_by_5(27, 3) => false\n    divisible_by_5(28, 3) =>\
    \ false\n    divisible_by_5(29, 3) => false\n    divisible_by_5(30, 3) => false\n\
    \    divisible_by_5(31, 3) => false\n    divisible_by_5(32, 3) => false\n    divisible_by_5(33,\
    \ 3) => false\n    divisible_by_5(34, 3) => false\n    divisible_by_5(35, 3) =>\
    \ false\n    divisible_by_5(36, 3) => false\n    divisible_by_5(37, 3) => false\n\
    \    divisible_by_5(38, 3) => false\n    divisible_by_5(39, 3) => false\n    divisible_by_5(40,\
    \ 3) => false\n    divisible_by_5(41, 3) => false\n    divisible_by_5(42, 3\n\
    using Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1,\
    \ 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
    \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\
    \t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546)\
    \ == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
    \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
    @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
    \ 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9r27pzt0.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9r27pzt0.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if m > n \n        return -1\n    \n \
    \   sum = 0\n    for i in n:m\n        sum += i\n    \n    avg = sum / m\n   \
    \ \n    binary = \"\"\n    for i in avg:\n        binary += i\n    \n    return\
    \ binary\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ in two integers n and m and returns true if n is divisible by m.\nusing Test\n\
    \n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\"\
    )\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"\
    0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t@test(candidate(560,\
    \ 851) == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"0b101101110\")\n\
    \t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350, 902) ==\
    \ \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t@test(candidate(7,\
    \ 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzqd9xopl.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzqd9xopl.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n >= m \n        rounded_avg(m, n)\n\
    \    else\n        rounded_avg(m, n-1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer.\nusing Test\n\
    \n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1, 5) == \"0b11\"\
    )\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964, 977) == \"\
    0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t@test(candidate(560,\
    \ 851) == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"0b101101110\")\n\
    \t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350, 902) ==\
    \ \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t@test(candidate(7,\
    \ 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5, 5) == \"0b101\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn7dfgc1s.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpn7dfgc1s.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given two positive integers n and m, and your task is to\
    \ compute the\n    average of the integers from n through m (including n and m).\
    \ \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) =>\
    \ \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\
    \n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
    \ m::Int64)::Union{String, Int64} \n    if n <= m \n        rounded_avg = round(m*(n+1)/2)\
    \ \n        rounded_avg = rounded_avg:bin(2) \n        return rounded_avg \n \
    \   else \n        return -1 \nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in two positive integers\
    \ n and m and returns the sum of the integers from n through m (including n and\
    \ m). \nRound the answer to the nearest integer and convert that to binary.\n\
    If n is greater than m, return -1.\nExample: \nsum(1, 5) => \"0b11\"\nsum(7, 5)\
    \ => -1\nsum(10, 20) => \"0b1111\"\nsum(20, 33) => \"0b11010\"\nHint: You can\
    \ use the function sum.\nusing Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\
    \t@test(candidate(1, 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\
    \t@test(candidate(964, 977) == \"0b1111001010\")\n\t@test(candidate(996, 997)\
    \ == \"0b1111100100\")\n\t@test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185,\
    \ 546) == \"0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t\
    @test(candidate(350, 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) ==\
    \ \"0b11010111\")\n\t@test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) ==\
    \ -1)\n\t@test(candidate(5, 5) == \"0b101\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb2ayh2a7.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpb2ayh2a7.jl:19\n"
  exit_code: 1
  status: Exception
