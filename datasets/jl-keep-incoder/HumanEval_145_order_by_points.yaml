name: HumanEval_145_order_by_points
language: julia
prompt: "\"\"\"\n    Write a function which sorts the given list of integers\n   \
  \ in ascending order according to the sum of their digits.\n    Note: if there are\
  \ several items with similar sum of their digits,\n    order them based on their\
  \ index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1,\
  \ -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\
  \"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = order_by_points;\n\t@test(candidate([1,\
  \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463,\
  \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423,\
  \ 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
  \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) ==\
  \ [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
  \ 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6,\
  \ 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
completions: ["    if length(nums) == 0 \n        return nums \n    \n    digits =\
    \ nums.map(x -> digit(x)) \n    \n    sums = digits[2:end].+digits[1:end-1] \n\
    \    \n    indexes = findall(sums .== 0) \n    \n    indexes = sort(indexes)\n\
    \    \n    sums = sums[indexes]\n    \n    indexes = indexes[findall(sums .==\
    \ 0)]\n    \n    indexes = indexes[2:end]\n    \n    indexes = sort(indexes)\n\
    \    \n    sums = sums[indexes]\n    \n    indexes = indexes[2:end]\n    \n  \
    \  indexes = sort(indexes)\n    \n    sums = sums[indexes]\n    \n    indexes\
    \ = indexes[2:end]\n    \n    indexes = sort(indexes)\n    \n    sums = sums[indexes]\n\
    \    \n    indexes = indexes[2:end]\n    \n    indexes = sort(indexes)\n    \n\
    \    sums = sums[indexes]\n    \n    indexes = indexes[2:end]\n    \n    indexes\
    \ = sort(indexes)\n    \n    sums = sums[indexes]\n    \n    indexes = indexes[2:end]\n\
    \    \n    indexes = sort(indexes)\n    \n    sums = sums[indexes]\n    \n   \
    \ indexes = indexes[2:end]\n    \n    indexes = sort(indexes)\n    \n    sums\
    \ = sums[indexes]\n    \n    indexes = indexes[2:end]\n    \n    indexes = sort(indexes)\n\
    \    \n    sums = sums[indexes]\n    \n    indexes = indexes[2:end]\n    \n  \
    \  indexes = sort(indexes)\n    \n    sums = sums[indexes]\n    \n    indexes\
    \ = indexes[2:end]\n    \n    indexes = sort(indexes)\n    \n    sums = sums[indexes]\n\
    \    \n    indexes = indexes[2:end]\n    \n    indexes = sort(indexes)\n    \n\
    \    sums = sums[indexes]\n    \n    indexes = indexes[2:end]\n    \n    indexes\
    \ = sort(indexes)\n    \n    sums = sums[indexes]\n    \n    indexes = indexes[2:end]\n\
    \    \n    indexes = sort(indexes)\n    \n    sums = sums[indexes]\n    \n   \
    \ indexes = indexes[2:end]\n    \n    indexes = sort(indexes)\n    \n    sums\
    \ = sums[indexes]\n    \n    indexes = indexes[2:end]\n    \n    indexes = sort(indexes)\n\
    \    \n", "    if length(nums) == 0 \n        return nums \n    \n    sums = Vector{Int64}()\n\
    \    for i in nums \n        sums[i] = sum(i) \n    \n    sorted_nums = Vector{Int64}()\n\
    \    \n    for i in nums \n        pos = sums.index(i)\n        sorted_nums.push(pos)\
    \ \n    end\n    \n    return sorted_nums \nend\n</cell>\n<code language=julia-1.0>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.0>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function which returns the number of times\
    \ each digit appears in the given list of integers.", "    if length(nums) ==\
    \ 0 \n        return nums \n    \n    sums = Vector{Int64}() \n    for i in nums\
    \ \n        sums[i] = sum(i) \n    \n    sorted_nums = Vector{Int64}() \n    \n\
    \    for i = 1:length(nums) \n        j = i\n        while j > 0 && sums[j] <\
    \ sums[j-1] \n            sorted_nums[j] = nums[j-1] \n            j -= 1\n  \
    \      end\n        sorted_nums[j] = nums[i] \n    end\n    \n    return sorted_nums\n\
    end\n</cell>\n<code language=julia-1.0>", "    if length(nums) == 0 \n       \
    \ return nums \n    \n    sums = Vector{Int64}() \n    for i in nums \n      \
    \  sums[i] = sum(i) \n    \n    sorted_sums = sort(sums) \n    \n    sorted_nums\
    \ = Vector{Int64}() \n    for i in nums \n        if sum(i) == sorted_sums[i]\
    \ \n            sorted_nums.push(i) \n        else \n            sorted_nums.push(sorted_sums.index(i))\
    \ \n    end\n    \n    return sorted_nums \nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([]) == []\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a vector of integers and returns the number of integers\
    \ in the vector that are divisible by 7. For example:", "    if length(nums) ==\
    \ 0 \n        return nums \n    \n    digits = nums.map(x -> digit(x)) \n    \n\
    \    sums = digits[2:end].+digits[2:end-1] \n    \n    sorted_sums = sort(sums)\
    \ \n    \n    sorted_nums = nums[2:end] \n    \n    sorted_nums = sorted_nums.+sorted_sums\
    \ \n    \n    return sorted_nums \nend ", "    \n    sums = Vector{Int64}()\n\
    \    for i in nums\n        push!(sums, sum(i))\n    end\n    \n    sums.sort!()\n\
    \    \n    return map(i -> nums[i], sums)\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of elements in the given\
    \ list that satisfy the condition $x^2 + y^2 = z^2$, where $x, y, z$ are given\
    \ as parameters. For example:", "    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    sums = Vector{Int64}()\n    for i in nums\n       \
    \ sums[i] = sum(i) + i\n    end\n    \n    sums.sort!\n    \n    sums.reverse!\n\
    \    \n    return sums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([]) == []\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of elements in the given list that satisfy the condition:\n\
    $$\n\\begin{align}\n\\sum_{i=1}^n x_i \\leq k\n\\end{align}\n$$\nwhere $n$ is\
    \ the number of elements in the list and $x_i$ is the i-th element of the list.",
  "    \n    sums = Vector{Int64}()\n    for i in nums\n        push!(sums, sum(i))\n\
    \    end\n    \n    sums = sort(sums)\n    \n    sums = sums[2:end]\n    \n  \
    \  for i in nums\n        if sum(i) != sums[i]\n            push!(sums, sum(i))\n\
    \        end\n    end\n    \n    return sums\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<code language=julia-1.5>", "    if length(nums) == 0 \n        return\
    \ nums \n    \n    sums = Vector{Int64}()\n    for i in nums \n        push!(sums,\
    \ sum(i)) \n    end\n    \n    sorted = Vector{Int64}()\n    \n    for i in 1:length(sums)\n\
    \        push!(sorted, nums[sums.index(i)])\n    end\n    \n    return sorted\
    \ \nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11,\
    \ -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the digits of an integer.",
  "    if nums == [] \n        return nums \n    \n    sums = Vector{Int64}() \n \
    \   for i in nums \n        sums[i] = sum(i) \n    \n    sorted_nums = nums \n\
    \    for i in nums \n        idx = find(sums == sum(i)) \n        sorted_nums[idx]\
    \ = i \n    \n    return sorted_nums \nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nProblem 4\nWrite a function that takes a vector of integers and\
    \ returns the sum of the squares of the integers in the vector.", "    if length(nums)\
    \ == 0 \n        return nums \n    \n    digits = nums.map(x -> digits(x))\n \
    \   \n    sums = digits[2:end].sum()\n    \n    index = findfirst(x -> x == sums,\
    \ digits[1:end-1])\n    \n    if index == -1 \n        return nums \n    \n  \
    \  digits[index] = digits[index] - digits[index-1]\n    \n    digits[index-1]\
    \ = digits[index-1] + digits[index] - digits[index-1]\n    \n    digits[index]\
    \ = digits[index] - digits[index-1]\n    \n    digits[index-1] = digits[index-1]\
    \ + digits[index] - digits[index-1]\n    \n    digits[index] = digits[index] -\
    \ digits[index-1]\n    \n    digits[index-1] = digits[index-1] + digits[index]\
    \ - digits[index-1]\n    \n    digits[index] = digits[index] - digits[index-1]\n\
    \    \n    digits[index-1] = digits[index-1] + digits[index] - digits[index-1]\n\
    \    \n    digits[index] = digits[index] - digits[index-1]\n    \n    digits[index-1]\
    \ = digits[index-1] + digits[index] - digits[index-1]\n    \n    digits[index]\
    \ = digits[index] - digits[index-1]\n    \n    digits[index-1] = digits[index-1]\
    \ + digits[index] - digits[index-1]\n    \n    digits[index] = digits[index] -\
    \ digits[index-1]\n    \n    digits[index-1] = digits[index-1] + digits[index]\
    \ - digits[index-1]\n    \n    digits[index] = digits[index] - digits[index-1]\n\
    \    \n    digits[index-1] = digits[index-1] + digits[index] - digits[index-1]\n\
    \    \n    digits[index] = digits[index] - digits[index-1]\n    \n    digits[index-1]\
    \ = digits[index-1] + digits[index] - digits[index-1]\n    \n    digits[index]\
    \ = digits[index] - digits[index-1]\n    \n    digits[index-1] = digits[index-1]\
    \ + digits[index] - digits[index-1]\n    \n    digits[index] = digits[index] -\
    \ digits[index-1]\n    \n    digits[index-1] = digits[index-1] + digits[index]\
    \ - digits[index-1]\n    \n    digits[index] = digits[index] - digits[index-1]\n\
    \    \n    digits[index-1] = digits[index-1] + digits[index] - digits[index-1]\n\
    \    \n    digits[index] = digits[index] - digits[index-1]\n    \n    digits[index-1]\
    \ = digits[index-1] + digits[index] - digits[index-1]\n    \n    digits[index]\
    \ = digits[index] - digits[index-1]\n    \n    digits[index-1] = digits[index-1]\
    \ + digits[index] - digits[index-1]\n    \n    digits[index] = digits[index] -\
    \ digits[index-1]\n    ", "    if length(nums) == 0 \n        return nums \n \
    \   \n    sums = Vector{Int64}()\n    for i in nums \n        push!(sums, sum(i))\
    \ \n    end\n    \n    sorted = Vector{Int64}()\n    \n    for i in 1:length(sums)\
    \ \n        if sums[i] < 0 \n            push!(sorted, nums[sums.index(i)])\n\
    \        elseif sums[i] == 0 \n            push!(sorted, nums[i])\n        else\n\
    \            push!(sorted, nums[sums.index(i)])\n            push!(sorted, nums[i])\n\
    \        end\n    end\n    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(nums) == 0 \n        return nums \n    \n    digits = nums.map(x\
    \ -> digits(x))\n    \n    sums = digits[2:end].sum()\n    \n    idx = findfirst(x\
    \ -> x == sums, digits)\n    \n    if idx == length(digits) \n        return nums\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    if length(nums) == 0 \n        return nums \n\
    \    \n    sums = Vector{Int64}()\n    for i in nums \n        sums[i] = sum(i)\
    \ \n    end\n    \n    sorted_sums = sort(sums)\n    \n    sorted_nums = Vector{Int64}()\n\
    \    for i in nums \n        idx = findfirst(i => sums[i] == sorted_sums[i], sorted_sums)\n\
    \        push!(sorted_nums, nums[idx])\n    end\n    \n    return sorted_nums\n\
    end\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function which returns the number of elements in the given list which\
    \ satisfy the condition:\n$$\n\\sum_{i=1}^n x_i = x_1^2 + x_2^2 + \\cdots + x_n^2\n\
    $$\nwhere $x_i$ is the i-th element of the given list.", "    if length(nums)\
    \ == 0 \n        return nums \n    \n    sum_of_digits = sum(nums) \n    \n  \
    \  sorted_nums = nums \n    \n    for i = 1:length(nums) \n        \n        digit\
    \ = nums[i] \n        \n        if sum_of_digits > digit \n            \n    \
    \        sum_of_digits -= digit \n            \n            sorted_nums[i] = nums[i]\
    \ \n            \n        else \n            \n            sum_of_digits += digit\
    \ \n            \n            sorted_nums[i] = nums[i] \n            \n      \
    \  end\n    end\n    \n    return sorted_nums \nend\n</cell>\n<code language=julia-1.5>",
  "    if length(nums) == 0 \n        return nums\n    \n    sums = Vector{Int64}()\n\
    \    for i in nums \n        push!(sums, sum(i))\n    end\n    \n    sorted_nums\
    \ = Vector{Int64}()\n    \n    for i in 1:length(sums)\n        push!(sorted_nums,\
    \ nums[findfirst(i->sums[i] == sums, sums)])\n    end\n    \n    return sorted_nums\n\
    end\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function which returns the number of times each digit appears in\
    \ the given list of integers.", "    \n    sums = Vector{Int64}()\n    for i in\
    \ nums\n        push!(sums, sum(i))\n    end\n    \n    sorted = sort(sums)\n\
    \    \n    \n    for i in nums\n        if sum(i) != sorted[i]\n            push!(sorted,\
    \ sum(i))\n        end\n    end\n    \n    return sorted\nend\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1,\
    \ -12, 11]\n</cell>\n<code language=julia-1.5>\norder_by_points([]) == []\n</cell>\n\
    <code language=julia-1.5>", "    \n    sums = Vector{Int64}()\n    for i in nums\n\
    \        sums = sums + i\n    end\n    \n    sums = sort(sums)\n    \n    sums\
    \ = sums[2:end]\n    \n    for i in nums\n        if sums.contains(sums - i)\n\
    \            sums = sums[sums..sums..end]\n        else\n            sums = sums\
    \ + i\n        end\n    end\n    \n    return sums\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([]) == []\n</cell>\n<text>\nExercise 2\n\
    Write a function which returns the number of elements in the given list that \n\
    are divisible by 7 and are in the given range.", "    if length(nums) == 0 \n\
    \        return nums \n    \n    digits = nums.map(x -> digit(x)) \n    sums =\
    \ digits[digits] \n    \n    sorted_sums = sort(sums) \n    \n    sorted_nums\
    \ = nums[digits] \n    \n    sorted_nums = sort(sorted_nums) \n    \n    sorted_nums\
    \ = sort(sorted_nums) \n    \n    sorted_nums = sort(sorted_nums) \n    \n   \
    \ return sorted_nums \nend\n</cell>\n<code language=julia-1.5>", "    \n    sums\
    \ = Vector{Int64}()\n    for i in nums\n        sums[i] = sum(i) + i\n    end\n\
    \    \n    sorted_nums = Vector{Int64}()\n    \n    for i in 1:length(sums)\n\
    \        push!(sorted_nums, nums[sums.index(i)])\n    end\n    \n    return sorted_nums\n\
    end\n</cell>\n<code language=julia-1.5>", "    if length(nums) == 0 \n       \
    \ return nums \n    \n    sums = Vector{Int64}()\n    for i in nums \n       \
    \ push!(sums, sum(i))\n    end\n    \n    sums = sort(sums)\n    \n    sorted_nums\
    \ = Vector{Int64}()\n    for i in 1:length(sums)\n        push!(sorted_nums, nums[sums[i]])\n\
    \    end\n    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([]) == []\n</cell>\n<text>\nProblem 3\n\
    Write a function that returns the number of integers in the list that are divisible\
    \ by 7 and are less than 100. \nFor example, given [7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97], the function should\
    \ return 8.", "    \n    sums = Vector{Int64}()\n    for i in nums\n        sums\
    \ = sums + i\n    end\n    \n    sums = sort(sums)\n    \n    \n    for i in nums\n\
    \        if sums[i] != i\n            sums[i] = i\n        end\n    end\n    \n\
    \    return sums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nProblem 3\nWrite a function that returns the number of items\
    \ in the list whose digits sum to 0.", "    if nums == []\n        []\n    else\n\
    \        sort(nums)\n        local sum = 0\n        for n in nums\n          \
    \  sum += n\n        end\n        local index = 0\n        local result = Vector{Int64}()\n\
    \        for n in nums\n            if sum == n\n                push!(result,\
    \ index)\n            else\n                index = index + 1\n            end\n\
    \            sum = sum - n\n        end\n        result\n    end\nend\n</cell>\n\
    <code language=julia-1.3>", "    \n    sums = Vector{Int64}()\n    for i in nums\n\
    \        sums = sums + i\n    end\n    \n    sums = sort(sums)\n    \n    sums\
    \ = sums[2:end]\n    \n    for i in nums\n        if sums.contains(i)\n      \
    \      sums = sums - i\n        else\n            sums = sums + i\n        end\n\
    \    end\n    \n    return sums\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    if nums == []\n        return nums\n\
    \    \n    digits = nums.map(x -> digit(x))\n    sums = digits.map(x -> sum(x))\n\
    \    \n    sorted_sums = sums.sort\n    \n    sorted_nums = nums.sort\n    \n\
    \    sorted_nums = sorted_nums.map(x -> x % 10 + sorted_sums[x])\n    \n    return\
    \ sorted_nums\nend\n</cell>\n<code language=julia-1.5>", "    if length(nums)\
    \ == 0 \n        return nums\n    \n    sums = map_reduce(nums, sum, Int64(0),\
    \ Int64(0), Int64(0), Int64(0))\n    \n    sorted_nums = filter((x) -> sums[x]\
    \ == sums[sums.last], nums)\n    \n    sorted_nums = sort_by_key(sorted_nums,\
    \ sums)\n    \n    return sorted_nums\nend", "    if length(nums) == 0 \n    \
    \    return nums\n    \n    sums = Vector{Int64}()\n    for i in nums \n     \
    \   sums[i] = sum(i) + i\n    end\n    \n    sorted_sums = sort(sums)\n    \n\
    \    sorted_nums = Vector{Int64}()\n    for i in nums \n        if sums[i] ==\
    \ sorted_sums[1] \n            push!(sorted_nums, i)\n        end\n    end\n \
    \   \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>", "    \n\
    \    sums = Vector{Int64}()\n    for n in nums\n        push!(sums, sum(n))\n\
    \    end\n    \n    idx = Vector{Int64}()\n    \n    for i in 1:length(sums)\n\
    \        if sums[i] < 0\n            push!(idx, i)\n        end\n    end\n   \
    \ \n    sorted_nums = Vector{Int64}()\n    \n    for i in idx\n        push!(sorted_nums,\
    \ nums[i])\n    end\n    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<code language=julia-1.5>", "    if length(nums) == 0 \n        return\
    \ nums \n    \n    digits = nums.map(x -> digits(x))\n    \n    sum_digits = sum(digits)\n\
    \    \n    sorted_nums = nums.sort((x, y) -> sum_digits - digits(x) - digits(y))\n\
    \    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nProblem 4\nWrite a function that returns the number of items\
    \ in the list that have value greater than or equal to x.", "    \n    sums =\
    \ Vector{Int64}()\n    for i in nums\n        push!(sums, sum(i))\n    end\n \
    \   \n    sorted = []\n    for i in nums\n        push!(sorted, i)\n    end\n\
    \    \n    sorted\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function which returns the number of integers\
    \ in the given list that have exactly two digits.", "    if length(nums) == 0\
    \ \n        return nums \n    \n    sum_of_digits = sum(nums)\n    \n    sorted_nums\
    \ = nums[:]\n    \n    index_of_first_occurence = findfirst(x -> x == sum_of_digits,\
    \ nums)\n    \n    if index_of_first_occurence == -1 \n        return nums \n\
    \    \n    index_of_last_occurence = findlast(x -> x == sum_of_digits, nums)\n\
    \    \n    if index_of_last_occurence == length(nums) \n        return nums \n\
    \    \n    index_of_last_occurence_with_digit = findlast(x -> x == sum_of_digits,\
    \ nums[index_of_first_occurence:])\n    \n    if index_of_last_occurence_with_digit\
    \ == length(nums[index_of_first_occurence:]) \n        return nums \n    \n  \
    \  index_of_last_occurence_without_digit = findlast(x -> x == sum_of_digits, nums[index_of_first_occurence:index_of_last_occurence_with_digit])\n\
    \    \n    if index_of_last_occurence_without_digit == length(nums[index_of_first_occurence:index_of_last_occurence_with_digit])\
    \ \n        return nums \n    \n    index_of_last_occurence_without_digit_and_with_digit\
    \ = findlast(x -> x == sum_of_digits, nums[index_of_first_occurence:index_of_last_occurence_with_digit])\n\
    \    \n    if index_of_last_occurence_without_digit_and_with_digit == length(nums[index_of_first_occurence:index_of_last_occurence_with_digit])\
    \ \n        return nums \n    \n    index_of_last_occurence_without_digit_and_without_digit\
    \ = findlast(x -> x == sum_of_digits, nums[index_of_first_occurence:index_of_last_occurence_without_digit])\n\
    \    \n    if index_of_last_occurence_without_digit_and_without_digit == length(nums[index_of_first_occurence:index_of_last_occurence_without_digit])\
    \ \n        return nums \n    \n    index_of_last_occurence_without_digit_and_without_digit_and_with_digit\
    \ = findlast(x -> x == sum_of_digits, nums[index_of_first_occurence:index_of_last_occurence_without_digit])\n\
    \    \n    if index_of_last_occurence_without_digit_and_without_digit_and_with_digit\
    \ == length(nums[index_of_first_occurence:index_of_last_oc", "    if nums == []\n\
    \        []\n    else\n        sort(nums) |> reverse\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    local sum = 0\n    local index = 0\n  \
    \  local result = []\n    for n in nums \n        local digit = n % 10\n     \
    \   sum = sum + digit\n        if sum > 0 \n            index = index + 1\n  \
    \          result[index] = n\n            sum = 0\n        end\n    end\n    return\
    \ result\nend\n</cell>\n<text>\nExercise 3\nWrite a function which returns the\
    \ number of items in the list that have value greater than or equal to x.", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if nums == [] \n\
    \        return [] \n    \n    sum_of_digits = sum(nums) \n    \n    sorted_nums\
    \ = nums \n    \n    for num in nums \n        digit = num % 10 \n        \n \
    \       if sum_of_digits - digit < 0 \n            digit = sum_of_digits + digit\
    \ \n        \n        sum_of_digits -= digit \n        \n        sorted_nums[nums.index(num)]\
    \ = digit \n    \n    return sorted_nums \nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<code language=julia-1.5>", "    if length(nums) == 0 \n        return\
    \ nums \n    \n    sums = Vector{Int64}() \n    for i in nums \n        push!(sums,\
    \ sum(i)) \n    \n    sorted_sums = sort(sums) \n    \n    sorted_nums = Vector{Int64}()\
    \ \n    for i in nums \n        if sum(i) == sorted_sums[end] \n            push!(sorted_nums,\
    \ i) \n        else \n            push!(sorted_nums, i) \n            push!(sorted_nums,\
    \ sorted_sums[end]) \n        end\n    end\n    \n    return sorted_nums\nend\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n\
    <code language=julia-1.5>\norder_by_points([])\n</cell>\n<code language=julia-1.5>",
  "    \n    sums = Vector{Int64}()\n    for i in nums\n        sums.push(i)\n   \
    \ end\n    \n    sums.sort!()\n    \n    for i in sums\n        sums.delete(i)\n\
    \    end\n    \n    return sums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer. For example, given an integer $x$, return $x$'s number of digits\
    \ (i.e. $floor\\left(\\sqrt{x}\\right)$).", "    if length(nums) == 0 \n     \
    \   return nums \n    \n    digits = nums.map(x -> digit(x)) \n    \n    sums\
    \ = digits[2:end].+digits[1:end-1] \n    \n    index = findfirst(x -> x == sum(sums),\
    \ sums) \n    \n    if index == -1 \n        return nums \n    \n    sums[index]\
    \ = sum(sums) \n    \n    sorted_nums = nums[2:end].+nums[1:end-1] \n    \n  \
    \  sorted_nums = order_by_points(sorted_nums) \n    \n    sorted_nums[index] =\
    \ sum(sorted_nums) \n    \n    return sorted_nums \nend ", "    \n    sums = Vector{Int64}()\n\
    \    for i in nums\n        sums[i] = sum(i) + i\n    end\n    \n    sums.sort!\n\
    \    return sums[end]\nend\n</cell>\n<code language=julia-1.3>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.3>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function which returns the number of integers\
    \ in the given list which have their digits summed up to 0.", "    if length(nums)\
    \ == 0 \n        return nums \n    \n    sums = Vector{Int64}() \n    for n in\
    \ nums \n        push!(sums, sum(n)) \n    end\n    \n    sorted_sums = sort(sums)\
    \ \n    \n    sorted_nums = Vector{Int64}() \n    for sum in sorted_sums \n  \
    \      for n in nums \n            if sum == sum(n) \n                push!(sorted_nums,\
    \ n) \n            end \n        end\n    end\n    return sorted_nums \nend\n\
    </cell>\n<code language=julia-1.5>", "    if length(nums) == 0 \n        return\
    \ nums \n    \n    sums = Vector{Int64}() \n    for i in nums \n        push!(sums,\
    \ sum(i)) \n    \n    idx = sortperm(sums)\n    \n    ans = Vector{Int64}() \n\
    \    for i in idx \n        push!(ans, nums[i]) \n    \n    return ans \nend\n\
    </cell>\n<code language=julia-1.5>", "    if nums == [] \n        return nums\
    \ \n    \n    digits = nums.map(x -> digits(x))\n    \n    sum_digits = digits.reduce(sum)\n\
    \    \n    sorted_nums = nums.filter(x -> sum_digits == digits(x))\n    \n   \
    \ return sorted_nums\nend", "    \n    sums = Vector{Int64}()\n    for i in nums\n\
    \        sums = sums + i\n    end\n    \n    sums = sort(sums)\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if length(nums) == 0 \n        return nums\n    \n\
    \    sums = Vector{Int64}()\n    for i in nums \n        sums[i] = sum(i) + i\n\
    \    end\n    \n    sorted = Vector{Int64}()\n    for i in 1:length(sums)\n  \
    \      push!(sorted, nums[sums.index(i)])\n    end\n    \n    return sorted\n\
    end\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n\
    </cell>\n<text>\nProblem 4\nWrite a function which takes a vector of integers\
    \ and returns another vector with same length but with integers sorted from smallest\
    \ to largest.", "    if length(nums) == 0 \n        return nums \n    \n    sum_of_digits\
    \ = sum(nums)\n    \n    sorted_nums = nums\n    \n    for n in nums \n      \
    \  if sum_of_digits == 0 \n            return sorted_nums \n        \n       \
    \ sum_of_digits -= n \n        \n        sorted_nums = insert(sorted_nums, n,\
    \ 0) \n    end\n    \n    return sorted_nums \nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the first element of\
    \ a list that satisfies a given condition. For example, given [1,2,3,4,5], return\
    \ 3 if 2 is in the list, else return -1.", "    \n    sums = Vector{Int64}()\n\
    \    for i in nums\n        push!(sums, sum(i))\n    end\n    \n    sorted_nums\
    \ = Vector{Int64}()\n    \n    for j in 1:length(sums)\n        push!(sorted_nums,\
    \ nums[findall(sums==sums[j])[1]])\n    end\n    \n    return sorted_nums\nend\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n\
    <text>\nProblem 7\nWrite a function that returns the number of elements in the\
    \ given list\nthat satisfy the condition that the sum of the digits is even.",
  "    if length(nums) == 0 \n        return nums \n    \n    sums = Vector{Int64}()\
    \ \n    for n in nums \n        push!(sums, sum(digits(n)))\n    \n    sorted_nums\
    \ = nums[sortperm(sums)]\n    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    local sum = 0\n    local index = 0\n    local result = []\n    for n\
    \ in nums\n        local digit = n % 10\n        sum = sum + digit\n        index\
    \ = index + 1\n        if index > 1\n            if sum > 0\n                local\
    \ temp = sum\n                sum = digit\n                digit = temp\n    \
    \        else\n                local temp = sum\n                sum = digit\n\
    \                digit = temp\n            end\n        end\n        result[index]\
    \ = n\n    end\n    return result\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    sums = Vector{Int64}()\n    for i in nums\n        push!(sums, sum(i))\n\
    \    end\n    \n    sorted = Vector{Int64}()\n    \n    for i in 1:length(sums)\n\
    \        push!(sorted, nums[sums.[i]])\n    end\n    \n    return sorted\nend\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n\
    <code language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nProblem 4\nWrite\
    \ a function that returns the first element of a given list that satisfies a given\
    \ condition.", "    \n    local sums = Vector{Int64}()\n    for n in nums do \n\
    \        push!(sums, sum(n))\n    end\n    \n    local sorted_sums = Vector{Int64}()\n\
    \    \n    for i = length(sums)-1 downto 1 do \n        push!(sorted_sums, sums[i])\n\
    \    end\n    \n    return sorted_sums\nend\n</cell>\n<text>\nQuestion 3\nWrite\
    \ a function that returns the number of integers in the given list that have exactly\
    \ two digits.", "    if nums == [] \n        return nums \n    \n    digits =\
    \ nums.map(x -> digits(x))\n    \n    sums = digits.map(x -> sum(x))\n    \n \
    \   sorted_sums = sums.sort\n    \n    sorted_nums = nums.sort\n    \n    sorted_nums\
    \ = if length(sorted_nums) == 0 \n        sorted_nums \n    else \n        sorted_nums.(sorted_sums)\n\
    \    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([]) == []\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of times each unique number appears in the given list of\
    \ numbers.", "    if nums == [] \n        return nums \n    \n    sums = Vector{Int64}()\n\
    \    for i in nums \n        sums[i] = sum(i) \n    end\n    \n    sorted_nums\
    \ = Vector{Int64}()\n    \n    for i in 1:length(sums)\n        if sums[i] !=\
    \ 0\n            push!(sorted_nums, nums[i])\n        end\n    end\n    \n   \
    \ return sorted_nums\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of integers in the given list that have exactly two digits.",
  "    \n    sums = Vector{Int64}()\n    for i in nums\n        push!(sums, sum(i))\n\
    \    end\n    \n    sorted = []\n    \n    for i in 1:length(sums)\n        push!(sorted,\
    \ nums[findfirst(i->sums[i]>sums[end], sums)])\n    end\n    \n    return sorted\n\
    end\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function which sorts the given list of integers\nin descending order\
    \ according to the sum of their digits.\nNote: if there are several items with\
    \ similar sum of their digits,\norder them based on their index in original list.",
  "    if length(nums) == 0 \n        return nums \n    \n    sums = Vector{Int64}()\
    \ \n    for i in nums \n        sums[i] = sum(i) \n    \n    sorted_nums = nums\
    \ \n    for i in nums \n        idx = find(sums == sum(i)) \n        if idx !=\
    \ length(sums) \n            sorted_nums[idx] = i \n        end\n    end\n   \
    \ \n    return sorted_nums \nend\n</cell>\n<code language=julia-1.5>", "    if\
    \ length(nums) == 0 \n        return nums \n    \n    sums = Vector{Int64}() \n\
    \    for i in nums \n        sums[i] = sum(i) \n    \n    sorted_nums = Vector{Int64}()\
    \ \n    \n    for i in nums \n        if sums[i] < 0 \n            sorted_nums\
    \ = append(sorted_nums, i) \n        else \n            sorted_nums = append(sorted_nums,\
    \ i) \n            sorted_nums = append(sorted_nums, i) + sums[i] \n        end\n\
    \    end\n    \n    return sorted_nums \nend\n</cell>\n<code language=julia-1.5>",
  "    if length(nums) == 0 \n        return nums \n    \n    sums = Vector{Int64}(0)\
    \ \n    for n in nums \n        sums = sums + [sum(n)]\n    \n    sorted_sums\
    \ = sort(sums) \n    \n    sorted_nums = Vector{Int64}(0) \n    for sum in sorted_sums\
    \ \n        sorted_nums = sorted_nums + [n for n in nums if sum(n) == sum]\n \
    \   \n    return sorted_nums \nend", "    \n    sums = Vector{Int64}()\n    for\
    \ i in nums\n        sums[i] = sum(i) % 10\n    end\n    \n    sorted_nums = Vector{Int64}()\n\
    \    \n    for i in 1:length(sums)\n        sorted_nums[i] = nums[findfirst(isequal(sums[i]))]\n\
    \    end\n    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nProblem 3\nWrite a function that returns the number of integers\
    \ in the given list that are\ndivisible by 3.", "    if length(nums) == 0 \n \
    \       return nums \n    \n    sum_of_digits = sum(nums) \n    \n    sorted_nums\
    \ = nums \n    \n    for i = 1:length(nums) \n        digit = nums[i] \n     \
    \   \n        if sum_of_digits - digit < 0 \n            sorted_nums[i] = -digit\
    \ \n            sum_of_digits -= digit \n        else \n            sorted_nums[i]\
    \ = digit \n            sum_of_digits -= digit \n            \n            \n\
    \    return sorted_nums \nend \n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of digits in an integer. \nFor example, given an integer $x$, return\
    \ $x$ if it is an integer, \nreturn $x$ if it is a float, \nreturn $x$ if it is\
    \ a complex number, \nreturn $x$ if it is a vector of integers, \nreturn $x$ if\
    \ it is a vector of floats, \nreturn $x$ if it is a vector of complex numbers,\
    \ \nreturn $x$ if it is a vector of vectors of integers, \nreturn $x$ if it is\
    \ a vector of vectors of floats, \nreturn $x$ if it is a vector of vectors of\
    \ complex numbers, \nreturn $x$ if it is a vector of vectors of vectors of integers,\
    \ \nreturn $x$ if it is a vector of vectors of vectors of floats, \nreturn $x$\
    \ if it is a vector of vectors of vectors of complex numbers, \nreturn $x$ if\
    \ it is a vector of vectors of vectors of vectors of integers, \nreturn $x$ if\
    \ it is a vector of vectors of vectors of vectors of floats, \nreturn $x$ if it\
    \ is a vector of vectors of vectors of vectors of complex numbers, \nreturn $x$\
    \ if it is a vector of vectors of vectors of vectors of vectors of integers, \n\
    return $x$ if it is a vector of vectors of vectors of vectors of vectors of floats,\
    \ \nreturn $x$ if it is a vector of vectors of vectors of vectors of vectors of\
    \ complex numbers, \nreturn $x$ if it is a vector of vectors of vectors of vectors\
    \ of vectors of vectors of integers, \nreturn $x$ if it is a vector of vectors\
    \ of vectors of vectors of vectors of vectors of floats, \nreturn $x$ if it is\
    \ a vector of vectors of vectors of vectors of vectors of vectors of complex numbers,\
    \ \nreturn $x$ if it is a vector of vectors of vectors of vectors of vectors of\
    \ vectors of vectors of integers, \nreturn $x$ if it is a vector of vectors of\
    \ vectors of vectors of vectors of vectors of vectors of floats, \nreturn $x$\
    \ if it is a vector of vectors of vectors of vectors of vectors of vectors of\
    \ vectors of complex number", "    if nums == []\n        []\n    else\n     \
    \   local sum = 0\n        local index = 0\n        local result = []\n      \
    \  for n in nums\n            sum = sum + n\n            if sum > 0\n        \
    \        index = index + 1\n            else\n                if index > 0\n \
    \                   result[index] = n\n                end\n                sum\
    \ = 0\n            end\n        end\n        if index > 0\n            result[index]\
    \ = n\n        end\n        result\n    end\nend\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=sorting,arrays,julia |>\nI wrote a function that sorts integers based\
    \ on their digits and then sorts them in descending order:\n<code>", "    if length(nums)\
    \ == 0 \n        return nums \n    \n    digits = nums.map(x -> digit(x)) \n \
    \   \n    sum_digits = sum(digits)\n    \n    sorted_nums = nums.sort((x,y) ->\
    \ digit(x) - digit(y)) \n    \n    sorted_nums = if sum_digits == 0 \n       \
    \ sorted_nums \n    else \n        sorted_nums.sort((x,y) -> digit(x) - digit(y))\
    \ \n    \n    return sorted_nums \nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([]) == []\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of elements in the given list that satisfy the predicate\
    \ p.", "    if length(nums) == 0 \n        return nums \n    \n    sums = Vector{Int64}()\n\
    \    for i in nums \n        sums[i] = sum(i) \n    end\n    \n    sorted_sums\
    \ = sort(sums)\n    \n    sorted_nums = Vector{Int64}()\n    for i in nums \n\
    \        if sums[i] == sorted_sums[i] \n            push!(sorted_nums, i) \n \
    \       else \n            push!(sorted_nums, i) \n            push!(sorted_nums,\
    \ sorted_sums[i]) \n        end\n    end\n    \n    return sorted_nums\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    sums = Vector{Int64}()\n    for\
    \ i in nums\n        sums.push(i)\n    end\n    \n    sums.sort!()\n    \n   \
    \ sums.reverse!()\n    \n    return sums\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of integers\
    \ whose digits sum to $n$. For example, $n = 12$ and $nums = [1, 11, -1, -11,\
    \ -12]$ should return $3$. Assume that $nums$ is sorted in ascending order.",
  "    \n    sums = Vector{Int64}()\n    for i in nums\n        push!(sums, sum(i))\n\
    \    end\n    \n    sums = sort(sums)\n    \n    sums = Vector{Int64}(undef, length(nums))\n\
    \    for i in 1:length(sums)\n        sums[i] = nums[sums[i]]\n    end\n    \n\
    \    return sums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<text>\nProblem 3\nWrite a function which returns\
    \ the number of times each digit appears in the given list of integers.", "  \
    \  if nums == [] \n        return nums \n    \n    sums = nums.map(x -> sum(x))\
    \ \n    \n    sorted_sums = sort(sums)\n    \n    sorted_nums = nums.map(x ->\
    \ x if sum(x) == sorted_sums[length(x)]\n                            else sorted_sums[length(x)])\n\
    \    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of integers\
    \ in the given list that have the given digit.", "    \n    sums = Vector{Int64}()\n\
    \    for i in nums\n        push!(sums, sum(i))\n    end\n    \n    sortedsums\
    \ = sort(sums)\n    \n    sortednums = Vector{Int64}()\n    for i in nums\n  \
    \      if i in sortedsums\n            push!(sortednums, i)\n        end\n   \
    \ end\n    \n    return sortednums\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nProblem 7\nWrite a function that returns the number of integers\
    \ in the given list\nthat have exactly two digits.", "    \n    sums = Vector{Int64}()\n\
    \    for i in nums\n        push!(sums, sum(i))\n    end\n    \n    sorted = Vector{Int64}()\n\
    \    \n    for i in 1:length(sums)\n        push!(sorted, nums[sums.index(i)])\n\
    \    end\n    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of items\
    \ in the list that have value greater than a given value.", "    if length(nums)\
    \ == 0 \n        return nums \n    \n    sums = map_reduce(nums, sum, Int64(0),\
    \ Int64(0), Int64(0)) \n    \n    sorted_nums = filter((x) -> sums[x] == sums[sums.last],\
    \ nums) \n    \n    sorted_nums = order_by_points(sorted_nums) \n    \n    return\
    \ sorted_nums \nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11,\
    \ -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n\
    <text>\nProblem 7\nWrite a function which returns the number of integers in the\
    \ given list\nthat satisfy the condition that their sum is divisible by 3.", " \
    \   \n    sums = Vector{Int64}()\n    for i in nums\n        push!(sums, sum(i))\n\
    \    end\n    \n    sorted = Vector{Int64}()\n    \n    for i in 1:length(sums)\n\
    \        push!(sorted, nums[findfirst(i->sums[i]>sums[end], sums)])\n    end\n\
    \    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>", "    if nums\
    \ == []\n        []\n    else\n        sort(nums)\n        local sum = 0\n   \
    \     for n in nums\n            sum += n\n        end\n        local index =\
    \ 0\n        local result = Vector{Int64}()\n        for n in nums\n         \
    \   if sum == n\n                push!(result, index)\n            end\n     \
    \       index += 1\n        end\n        result\n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function which returns the number of integers in the list\
    \ which have their digits summed up to zero.", "    if length(nums) == 0 \n  \
    \      return nums \n    \n    digits = nums.map(x -> digit(x)) \n    \n    sums\
    \ = digits[2:end].map(sum) \n    \n    index = findfirst(x -> x == sums, sums)\
    \ \n    \n    if index == -1 \n        return nums \n    \n    else \n       \
    \ return nums[sortperm(digits[2:end], index)]\nend\n</cell>\n<text>\nProblem 3\n\
    Write a function that returns the number of integers in the list that have the\
    \ specified sum.", "    \n    sums = Vector{Int64}()\n    for n in nums\n    \
    \    sums = sums + digits(n)\n    end\n    \n    sums = sort(sums)\n    \n   \
    \ \n    for n in nums\n        if digits(n) == sums\n            return n\n  \
    \      end\n    end\n    \n    return []\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([]) == []\n</cell>\n<code language=julia-1.5>",
  "    \n    sums = Vector{Int64}()\n    for n in nums\n        sums = sums + digits(n)\n\
    \    end\n    \n    sums = sort(sums)\n    \n    sums = sums[2:end]\n    \n  \
    \  sums = sums[2:end]\n    \n    return sums\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nProblem 9\nWrite a function that returns the number of integers\
    \ in the given list whose digits sum to zero.", "    if length(nums) == 0 \n \
    \       return nums \n    \n    sums = Vector{Int64}()\n    for i in nums \n \
    \       sums[i] = sum(i) + i \n    \n    sorted_sums = sort_by_key(sums)\n   \
    \ \n    sorted_nums = Vector{Int64}()\n    for i in nums \n        if sum(i) ==\
    \ sorted_sums[i] \n            sorted_nums.push(i)\n        end\n    end\n   \
    \ \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>", "    if\
    \ length(nums) == 0 \n        return nums \n    \n    sums = Vector{Int64}() \n\
    \    for i in nums \n        sums[i] = sum(i) \n    \n    sorted_nums = Vector{Int64}()\
    \ \n    \n    for i in nums \n        if sums[i] < 0 \n            sorted_nums[i]\
    \ = -sums[i] \n        else \n            sorted_nums[i] = sums[i] \n    \n  \
    \  return sorted_nums \nend ", "    \n    sums = Vector{Int64}()\n    for i in\
    \ nums\n        sums = sums + i\n    end\n    \n    sums = sort(sums)\n    \n\
    \    sums = sums[2:end]\n    \n    for i in nums\n        if sums.contains(sums[i])\n\
    \            sums[i] = i\n        end\n    end\n    \n    return sums\nend\n</cell>\n\
    <code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of integers less than a given integer n.",
  "    if length(nums) == 0 \n        return nums \n    \n    sum_of_digits = 0 \n\
    \    \n    for n in nums \n        sum_of_digits += n \n    \n    sorted_nums\
    \ = nums \n    \n    for n in nums \n        if sum_of_digits > n \n         \
    \   sorted_nums = sort(sorted_nums) \n            break \n        else \n    \
    \        sum_of_digits -= n \n    \n    return sorted_nums \nend\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1,\
    \ -12, 11]\n</cell>\n<code language=julia-1.5>\norder_by_points([]) == []\n</cell>\n\
    <text>\nExercise 3\nWrite a function that sorts the given list of integers\nin\
    \ descending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.", "    if length(nums) == 0 \n        return nums \n    \n  \
    \  sums = Vector{Int64}()\n    for i in nums \n        push!(sums, sum(i)) \n\
    \    end\n    \n    idx = Vector{Int64}()\n    for i in 1:length(sums) \n    \
    \    if sums[i] == 0 \n            push!(idx, i) \n        else \n           \
    \ push!(idx, i-1) \n            push!(idx, i) \n        end\n    end\n    \n \
    \   idx = idx[sortperm(idx)]\n    \n    idx2 = Vector{Int64}()\n    for i in idx\
    \ \n        push!(idx2, nums[i]) \n    end\n    \n    return idx2\nend\n</cell>\n\
    <code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function which returns the number of elements in the given list which satisfy\
    \ the given condition. For example, if the given list is [1, 1, 2, 3] and the\
    \ condition is that each element must be greater than 0, then the function should\
    \ return 3.", "    if length(nums) == 0 \n        return nums \n    \n    sum_of_digits\
    \ = sum(nums)\n    \n    sorted_nums = nums \n    \n    for index in 1:length(nums)\n\
    \        if sum_of_digits == sum(nums[index:])\n            sorted_nums = sort(nums[index:])\n\
    \            break\n        end\n    end\n    \n    return sorted_nums\nend\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n\
    <code language=julia-1.5>\norder_by_points([])\n</cell>\n<code language=julia-1.5>",
  "    if nums == [] \n        return nums \n    \n    digits = nums.map(x -> digit(x))\
    \ \n    digits_sum = digits.reduce(add, 0) \n    \n    sorted_nums = nums.filter(x\
    \ -> digits_sum == digit(x)) \n    \n    return order_by_points(sorted_nums)\n\
    end", "    if length(nums) == 0 \n        return nums \n    \n    sums = Vector{Int64}()\
    \ \n    for i in nums \n        push!(sums, sum(i)) \n    end\n    \n    zipped_nums\
    \ = zip(nums, sums)\n    zipped_nums = sort!(zipped_nums, by=x->x[1])\n    \n\
    \    zipped_nums = map(x -> x[1], zipped_nums)\n    zipped_nums = map(x -> x[1],\
    \ zipped_nums)\n    \n    return map(x -> x[1], zipped_nums)\nend\n</cell>\n<text>\n\
    Problem 3\nWrite a function that returns the number of integers in the given list\
    \ that have no duplicates.", "    if length(nums) == 0 \n        return nums \n\
    \    \n    sums = Vector{Int64}() \n    for i in nums \n        sums[i] = sum(i)\
    \ \n    \n    sorted_sums = sort(sums) \n    \n    sorted_nums = Vector{Int64}()\
    \ \n    for i in nums \n        if sum(i) == sorted_sums[length(i)]\n        \
    \    sorted_nums.push(i)\n        end\n    end\n    \n    return sorted_nums\n\
    end\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function which takes a vector of integers and returns the sum of\
    \ the integers in the vector modulo 10.", "    if length(nums) == 0 \n       \
    \ return nums \n    \n    sums = map_reduce(nums, sum, Int64(0), Int64(0), Int64(0),\
    \ \n        fun(acc, x) -> acc + x end) \n    \n    sorted_nums = nums \n    for\
    \ i = 1:length(nums) \n        if sums[i] != sums[i - 1] + nums[i] \n        \
    \    sorted_nums = sort(sorted_nums) \n            break \n        end \n    end\
    \ \n    return sorted_nums \nend ", "    \n    sums = Vector{Int64}()\n    for\
    \ i in nums\n        push!(sums, sum(i))\n    end\n    \n    sums.sort!\n    \n\
    \    sortednums = Vector{Int64}()\n    for i in nums\n        if sums[i] == sums[end]\n\
    \            push!(sortednums, i)\n        end\n    end\n    \n    return sortednums\n\
    end\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nProblem\
    \ 7: Find all numbers with given sum", "    if nums == []\n        []\n    else\n\
    \        sort(nums) |> sort\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 3\nWrite a function which returns the number of items\
    \ in the list which have the given digit.", "    if nums == []\n        []\n \
    \   else\n        sort(nums)\n        sums = Vector{Int64}()\n        for i in\
    \ nums\n            push!(sums, sum(i))\n        \n        sums = sort(sums)\n\
    \        \n        for i in 1:length(sums)\n            if sums[i] == sums[i -\
    \ 1]\n                sums[i] = nums[i]\n            end\n        end\n      \
    \  \n        sums\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if\
    \ nums == [] \n        return nums \n    \n    sums = Vector{Int64}() \n    for\
    \ i in nums \n        push!(sums, sum(i)) \n    \n    sorted_nums = Vector{Int64}()\
    \ \n    \n    for j in 1:length(sums) \n        push!(sorted_nums, nums[find(sums\
    \ == sums[j])[1]]) \n    endfor \n    \n    return sorted_nums \nendfunction \n\
    </cell>\n<code language=julia-1.5>", "    if length(nums) == 0 \n        return\
    \ nums \n    \n    sums = Vector{Int64}()\n    for i in nums \n        sums[i]\
    \ = sum(i) \n    \n    sorted_sums = sortperm(sums)\n    \n    sorted_nums = Vector{Int64}()\n\
    \    for i in sorted_sums \n        sorted_nums[i] = nums[i] \n    \n    return\
    \ sorted_nums \nend ", "    \n    sums = Vector{Int64}()\n    for i in nums\n\
    \        sums = sums + i\n    end\n    \n    sums = sort(sums)\n    \n    sums\
    \ = sums[2:end]\n    \n    sums = sums[2:end]\n    \n    return sums\nend\n</cell>\n\
    <code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nProblem 3\nWrite\
    \ a function which returns the number of digits in an integer. \nFor example,\
    \ given input 123, return 3.", "    if length(nums) == 0 \n        return nums\
    \ \n    \n    digits = nums.map(x -> digit(x)) \n    \n    sums = digits[2:end].map(x\
    \ -> sum(x)) \n    \n    index = findfirst(x -> x == sum(sums), sums)\n    \n\
    \    sums = sums.map(x -> x - digits[index])\n    \n    sums = sums.map(x -> x\
    \ % 10 + digits[index])\n    \n    sums = sums.map(x -> x % 10 + digits[index])\n\
    \    \n    sums = sums.map(x -> x % 10 + digits[index])\n    \n    sums = sums.map(x\
    \ -> x % 10 + digits[index])\n    \n    sums = sums.map(x -> x % 10 + digits[index])\n\
    \    \n    sums = sums.map(x -> x % 10 + digits[index])\n    \n    sums = sums.map(x\
    \ -> x % 10 + digits[index])\n    \n    sums = sums.map(x -> x % 10 + digits[index])\n\
    \    \n    sums = sums.map(x -> x % 10 + digits[index])\n    \n    sums = sums.map(x\
    \ -> x % 10 + digits[index])\n    \n    sums = sums.map(x -> x % 10 + digits[index])\n\
    \    \n    sums = sums.map(x -> x % 10 + digits[index])\n    \n    sums = sums.map(x\
    \ -> x % 10 + digits[index])\n    \n    sums = sums.map(x -> x % 10 + digits[index])\n\
    \    \n    sums = sums.map(x -> x % 10 + digits[index])\n    \n    sums = sums.map(x\
    \ -> x % 10 + digits[index])\n    \n    sums = sums.map(x -> x % 10 + digits[index])\n\
    \    \n    sums = sums.map(x -> x % 10 + digits[index])\n    \n    sums = sums.map(x\
    \ -> x % 10 + digits[index])\n    \n    sums = sums.map(x -> x % 10 + digits[index])\n\
    \    \n    sums = sums.map(x -> x % 10 + digits[index])\n    \n    sums = sums.map(x\
    \ -> x % 10 + digits[index])\n    \n    sums = sums.map(x -> x % 10 + digits[index])\n\
    \    \n    sums = sums.map(x -> x % 10 + digits[index])\n    \n    sums = sums.map(",
  "    if length(nums) == 0 \n        return nums \n    \n    sums = Vector{Int64}()\
    \ \n    for i in nums \n        push!(sums, sum(i)) \n    \n    sorted = sort(sums)\
    \ \n    \n    ans = Vector{Int64}() \n    for i in sorted \n        push!(ans,\
    \ nums[find(sums == i)[1]]) \n    \n    return ans \nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ which returns the number of integers in the list which can be written as the\
    \ sum of two positive integers. For example:", "    if nums == [] \n        return\
    \ nums \n    \n    sum_of_digits = sum(nums)\n    \n    sorted_nums = nums[:]\n\
    \    \n    for index in 1:length(nums)\n        digit = nums[index]\n        if\
    \ sum_of_digits > digit \n            sorted_nums[index] = digit\n           \
    \ sum_of_digits -= digit\n        else \n            sorted_nums[index] = sum_of_digits\n\
    \            sum_of_digits = 0\n        end\n    end\n    \n    return sorted_nums\n\
    end\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n\
    </cell>\n<text>\nProblem 3\nWrite a function which takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector.", "    \n\
    \    sums = Vector{Int64}()\n    for i in nums\n        sums[i] = sum(i) % 10\n\
    \    end\n    \n    sorted_nums = Vector{Int64}()\n    \n    for i in 1:length(sums)\n\
    \        push!(sorted_nums, nums[findfirst(i->sums[i] == sums, sums)])\n    end\n\
    \    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer. \nFor example, given an integer $x$, return $x$ has $n$ digits.",
  "    if length(nums) == 0 \n        return nums \n    \n    digits = nums.map(x\
    \ -> digit(x))\n    \n    sum_digits = sum(digits)\n    \n    sorted_nums = nums.sort\n\
    \    \n    sorted_nums = if sum_digits == 0 \n        sorted_nums \n    else \n\
    \        sorted_nums.map(x -> x if sum_digits == digits[x] else digits[x])\n \
    \   end\n    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nProblem 3\nWrite a function which returns the number of items\
    \ in the given list whose digits sum to 0.", "    if length(nums) == 0 \n    \
    \    return nums \n    \n    digits = nums.map(x -> digit(x)) \n    sums = digits.reduce(add,\
    \ 0) \n    \n    sorted_nums = nums.filter(x -> sums == digits(x))\n    \n   \
    \ return sorted_nums \nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the first element of\
    \ a given vector, \nif the vector is empty, then return an empty vector.", " \
    \   if nums == [] \n        return nums \n    \n    sums = Vector{Int64}() \n\
    \    for i in nums \n        push!(sums, sum(i)) \n    \n    sorted = sort(sums)\
    \ \n    \n    sorted_nums = Vector{Int64}() \n    for i in sorted \n        push!(sorted_nums,\
    \ nums[find(sums == i)[1]])\n    \n    return sorted_nums\nend\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n<text>\n\
    Problem 3\nWrite a function which returns the number of elements in the given\
    \ list that satisfy the given condition. For example:\ncount_if(nums, x->x>0)\n\
    should return 3 because there are 3 elements in the list that satisfy the condition.",
  "    if length(nums) == 0 \n        return nums \n    \n    sums = Vector{Int64}()\
    \ \n    for i in nums \n        push!(sums, sum(i)) \n    end\n    \n    sorted\
    \ = sort(sums)\n    \n    sorted_nums = Vector{Int64}()\n    for i in sorted \n\
    \        push!(sorted_nums, nums[findfirst(i)])\n    end\n    \n    return sorted_nums\n\
    end\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function which returns the number of times each digit appears in\
    \ the given number.", "    if length(nums) == 0 \n        return nums \n    \n\
    \    digits = nums.map(x -> digit(x)) \n    sum_digits = sum(digits)\n    \n \
    \   sorted_nums = nums.sort((x,y) -> digit(x) - digit(y))\n    \n    sorted_nums\
    \ = if sum_digits == 0 \n                    sorted_nums \n                else\n\
    \                    sorted_nums.sort((x,y) -> digit(x) - digit(y))\n        \
    \        end\n    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function which returns the number of items\
    \ in the given list whose digits sum to zero.", "    \n    local sums = Vector{Int64}()\n\
    \    for n in nums \n        sums.push(sum(digits(n)))\n    end\n    \n    local\
    \ result = Vector{Int64}()\n    local index = 0\n    for s in sums\n        if\
    \ index == 0 \n            push!(result, s)\n        elseif s == result[index]\
    \ \n            index = index + 1\n        else\n            push!(result, s)\n\
    \        end\n    end\n    \n    return result\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ which returns the number of elements in the given list that satisfy the condition\
    \ $x^2 + y^2 = z^2$, where $x, y, z$ are given as parameters. \nFor example, for\
    \ $x^2 + y^2 = z^2$, the function should return $2$ for $x^2 + y^2 = z^2 = 11^2$\
    \ and $3$ for $x^2 + y^2 = z^2 = 12^2$ and $0$ for $x^2 + y^2 = z^2 = 13^2$.",
  "    if length(nums) == 0 \n        return nums \n    \n    digits = nums.map(x\
    \ -> digit(x)) \n    \n    sums = digits[2:end].+digits[2:end-1] \n    \n    sorted_sums\
    \ = sort(sums) \n    \n    sorted_nums = nums[2:end] \n    \n    sorted_nums =\
    \ sorted_nums[sums..(sums..(length(sorted_nums)-1))] \n    \n    return sorted_nums\
    \ \nend\n</cell>\n<code language=julia-1.5>", "    \n    sums = Vector{Int64}()\n\
    \    for i in nums\n        sums = sums + i\n    end\n    \n    sums = sort(sums)\n\
    \    \n    sums = sums[2:end]\n    \n    for i in nums\n        if sums.contains(sums[i])\n\
    \            sums[i] = i\n        end\n    end\n    \n    return sums\nend\n</cell>\n\
    <code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nExercise\nWrite a\
    \ function that sorts numbers in ascending order according to their sum.", " \
    \   if length(nums) == 0 \n        return nums \n    \n    sums = map_reduce(nums,\
    \ sum, init = 0)\n    \n    sorted_sums = sort(sums)\n    \n    sorted_nums =\
    \ map(i -> nums[i], sorted_sums)\n    \n    return sorted_nums\nend\n</cell>\n\
    <code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function which returns the number of items in the given list which have the\
    \ given sum.", "    \n    sums = Vector{Int64}()\n    for i in nums\n        push!(sums,\
    \ sum(i))\n    end\n    \n    sorted_sums = sort(sums)\n    \n    sorted_nums\
    \ = Vector{Int64}()\n    for i in nums\n        push!(sorted_nums, i)\n    end\n\
    \    \n    for i in 1:length(sorted_sums)\n        if sorted_sums[i] == sorted_sums[i-1]\n\
    \            push!(sorted_nums, sorted_nums[end])\n        else\n            push!(sorted_nums,\
    \ sorted_nums[i])\n        end\n    end\n    \n    return sorted_nums\nend\n</cell>\n\
    <code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nProblem 7: Sort a\
    \ list using selection sort\nWrite a function which sorts the given list of integers\n\
    in ascending order according to the sum of their digits.\nNote: if there are several\
    \ items with similar sum of their digits,\norder them based on their index in\
    \ original list.", "    \n    sums = Vector{Int64}()\n    for i in nums\n    \
    \    push!(sums, sum(i))\n    end\n    \n    sortedsums = sort(sums)\n    \n \
    \   sortedsums = sortedsums[end]\n    \n    sortednums = Vector{Int64}()\n   \
    \ for i in nums\n        if sum(i) == sortedsums\n            push!(sortednums,\
    \ i)\n        end\n    end\n    \n    return sortednums\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<code language=julia-1.5>", "    if length(nums) == 0 \n        return\
    \ nums \n    \n    sums = Vector{Int64}() \n    for i in nums \n        push!(sums,\
    \ sum(i)) \n    \n    sorted_nums = Vector{Int64}() \n    \n    for i in 1:length(sums)\
    \ \n        push!(sorted_nums, nums[sums.index(i)]) \n    end\n    \n    return\
    \ sorted_nums \nend\n</cell>\n<text>\nProblem 7\nWrite a function which takes\
    \ a list of numbers and returns the sum of the numbers in the list modulo 10^9\
    \ + 7. For example:\n>>> sum_of_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == 1 +\
    \ 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0\n>>> sum_of_digits([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 0]) == 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0\n>>> sum_of_digits([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 0]) == 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0\n>>> sum_of_digits([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 0]) == 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0\n>>> sum_of_digits([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 0]) == 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0\n>>> sum_of_digits([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 0]) == 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0\n>>> sum_of_digits([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 0]) == 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0\n>>> sum_of_digits([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 0]) == 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0\n>>> sum_of_digits([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 0]) == 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0\n>>> sum_of_digits([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 0]) == 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0\n>>> sum_of_digits([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 0]) == 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0\n>>> sum_of_digits([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 0]) == 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0\n>>> sum_of_digits([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 0]) == 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0\n>>> sum_of_digits([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 0]) == 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 0\n>>> sum_of_digits([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 0]) == 1 + 2 + 3 + 4 + 5 + 6 + 7", "    \n    sums =\
    \ Vector{Int64}()\n    for i in nums\n        push!(sums, sum(i))\n    end\n \
    \   \n    sums = sort(sums)\n    \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n\
    \    \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n    \n    sums =\
    \ sums[2:end]\n    \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n  \
    \  \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n\
    \    \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n    \n    sums =\
    \ sums[2:end]\n    \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n  \
    \  \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n\
    \    \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n    \n    sums =\
    \ sums[2:end]\n    \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n  \
    \  \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n\
    \    \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n    \n    sums =\
    \ sums[2:end]\n    \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n  \
    \  \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n\
    \    \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n    \n    sums =\
    \ sums[2:end]\n    \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n  \
    \  \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n\
    \    \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n    \n    sums =\
    \ sums[2:end]\n    \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n  \
    \  \n    sums = sum", "    if length(nums) == 0 \n        return nums \n    \n\
    \    digits = nums.map(x -> digit(x)) \n    sum_digits = digits.reduce(add, 0)\
    \ \n    \n    sorted_nums = nums.filter(x -> sum_digits == digits(x))\n    \n\
    \    sorted_nums = order_by_points(sorted_nums)\n    \n    return sorted_nums\n\
    end\n</cell>\n<code language=julia-1.5>", "    if length(nums) == 0 \n       \
    \ return nums \n    \n    sums = Vector{Int64}() \n    for i in nums \n      \
    \  push!(sums, sum(i)) \n    end\n    \n    idx = findfirst(x -> x == maximum(sums),\
    \ sums)\n    \n    if idx == length(sums) \n        return nums \n    end \n \
    \   \n    push!(sums, maximum(sums)) \n    \n    push!(sums, idx) \n    \n   \
    \ push!(sums, maximum(sums)) \n    \n    push!(sums, idx) \n    \n    push!(sums,\
    \ maximum(sums)) \n    \n    push!(sums, idx) \n    \n    push!(sums, maximum(sums))\
    \ \n    \n    push!(sums, idx) \n    \n    push!(sums, maximum(sums)) \n    \n\
    \    push!(sums, idx) \n    \n    push!(sums, maximum(sums)) \n    \n    push!(sums,\
    \ idx) \n    \n    push!(sums, maximum(sums)) \n    \n    push!(sums, idx) \n\
    \    \n    push!(sums, maximum(sums)) \n    \n    push!(sums, idx) \n    \n  \
    \  push!(sums, maximum(sums)) \n    \n    push!(sums, idx) \n    \n    push!(sums,\
    \ maximum(sums)) \n    \n    push!(sums, idx) \n    \n    push!(sums, maximum(sums))\
    \ \n    \n    push!(sums, idx) \n    \n    push!(sums, maximum(sums)) \n    \n\
    \    push!(sums, idx) \n    \n    push!(sums, maximum(sums)) \n    \n    push!(sums,\
    \ idx) \n    \n    push!(sums, maximum(sums)) \n    \n    push!(sums, idx) \n\
    \    \n    push!(sums, maximum(sums)) \n    \n    push!(sums, idx) \n    \n  \
    \  push!(sums, maximum(sums)) \n    \n    push!(sums, idx) \n    \n    push!(sums,\
    \ maximum(sums)) \n    \n    push!(sums, idx) \n    \n    push!(sums, maximum(sums))\
    \ \n    \n    push!(sums, idx) \n    \n    push!(sums, maximum(sums)) \n    \n\
    \    push!(sums, idx) \n    \n    push!(sums, maximum(sums)) \n    \n    push!(sums,\
    \ idx) \n    \n    ", "    if nums == [] \n        return [] \n    \n    digits\
    \ = nums.map(x -> digit(x))\n    sums = digits.map(x -> sum(x))\n    \n    sorted_sums\
    \ = sort(sums)\n    \n    sorted_nums = nums.map(x -> x if x == sorted_sums[1]\
    \ \n                              else sorted_sums[1])\n    \n    return sorted_nums\n\
    end", "    \n    sums = Vector{Int64}()\n    for i in nums\n        sums[i] =\
    \ sum(i) % 10\n    end\n    \n    sorted_nums = Vector{Int64}()\n    \n    for\
    \ i in 1:length(sums)\n        idx = findall(sums == sums[i])\n        sorted_nums[i]\
    \ = nums[idx]\n    end\n    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 3\nWrite a function which sorts the given list of integers\n\
    in descending order according to the sum of their digits.\nNote: if there are\
    \ several items with similar sum of their digits,\norder them based on their index\
    \ in original list.", "    if length(nums) == 0 \n        return nums \n    \n\
    \    sums = Vector{Int64}() \n    for i in nums \n        push!(sums, sum(i))\
    \ \n    \n    sorted_nums = Vector{Int64}() \n    \n    for i in 1:length(sums)\
    \ \n        j = i\n        while j > 0 && sums[j] < sums[j-1] \n            j\
    \ = j - 1\n        end\n        push!(sorted_nums, nums[j]) \n    end\n    \n\
    \    return sorted_nums \nend\n</cell>\n<code language=julia-1.5>", "    if length(nums)\
    \ == 0 \n        return nums \n    \n    sums = Vector{Int64}() \n    for i in\
    \ nums \n        push!(sums, sum(i)) \n    end\n    \n    sorted_nums = Vector{Int64}()\
    \ \n    \n    for i in 1:length(sums) \n        push!(sorted_nums, nums[sums.index(i)])\
    \ \n    end\n    \n    return sorted_nums \nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<code language=julia-1.5>", "    if nums == [] \n        return nums\
    \ \n    \n    sum_of_digits = sum(nums) \n    \n    sorted_nums = nums \n    \n\
    \    for i = 1:length(nums) \n        if sum_of_digits > 0 \n            digit\
    \ = sum_of_digits % 10 \n            sum_of_digits /= 10 \n            \n    \
    \        if digit > 0 \n                sorted_nums[i] = nums[i] \n          \
    \  elseif digit < 0 \n                sorted_nums[i] = -nums[i] \n           \
    \ elseif digit == 0 \n                sorted_nums[i] = nums[i] \n            end\
    \ \n        else \n            sorted_nums[i] = nums[i] \n        end \n    end\
    \ \n    return sorted_nums \nend \n</cell>\n<text>\nProblem 3\nWrite a function\
    \ which takes a vector of integers and returns the sum of the squares of the integers\
    \ in that vector. For example:", "    \n    sums = Vector{Int64}()\n    for i\
    \ in nums\n        sums[i] = sum(i) % 10\n    end\n    \n    sorted_nums = Vector{Int64}()\n\
    \    \n    for (i,j) in zip(nums, sums)\n        if j == 0 \n            push!(sorted_nums,\
    \ i)\n        elseif j > 0\n            push!(sorted_nums, i)\n            push!(sorted_nums,\
    \ j)\n        end\n    end\n    \n    return sorted_nums\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    sums = Vector{Int64}()\n    for i in nums\n\
    \        sums[i] = sum(i) + i\n    end\n    \n    sorted_sums = Vector{Int64}()\n\
    \    \n    for i in 1:length(sums)\n        push!(sorted_sums, sums[i])\n    end\n\
    \    \n    for i in nums\n        push!(sorted_sums, sums[i])\n    end\n    \n\
    \    sorted_sums\nend\n</cell>\n<code language=julia-1.5>", "    if length(nums)\
    \ == 0 \n        return nums \n    \n    sums = Vector{Int64}() \n    for n in\
    \ nums \n        sums = sums + digits(n) \n    \n    sorted_sums = sort(sums)\
    \ \n    \n    sorted_nums = Vector{Int64}() \n    for n in nums \n        if sum(n)\
    \ == sorted_sums[end] \n            sorted_nums = sorted_nums + n \n        else\
    \ \n            sorted_nums = sorted_nums + n \n    end\n    return sorted_nums\
    \ \nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11,\
    \ -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\n\
    Problem 7\nWrite a function that returns the number of integers in the given list\n\
    that have the given sum.", "    if length(nums) == 0 \n        return nums \n\
    \    \n    sums = Vector{Int64}() \n    for i in nums \n        push!(sums, sum(i))\
    \ \n    end\n    \n    sorted = sort(sums)\n    \n    ordered = Vector{Int64}()\
    \ \n    for i in sorted \n        push!(ordered, nums[findfirst(i)])\n    end\n\
    \    \n    return ordered \nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n</cell>\n<text>\nProblem 7\nWrite\
    \ a function that returns the number of items in the list that have the given\
    \ digit.", "    if nums == [] \n        return nums \n    \n    sums = Vector{Int64}()\
    \ \n    for i in nums \n        sums[i] = sum(i) \n    \n    sorted_nums = Vector{Int64}()\
    \ \n    \n    for i in nums \n        j = find(sums == sum(i)) \n        push!(sorted_nums,\
    \ i) \n        push!(sorted_nums, j) \n        sums[j] = sums[j] - sums[i] \n\
    \    \n    return sorted_nums \nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the number of integers in the given list that have \n\
    the given sum.", "    if length(nums) == 0 \n        return nums \n    \n    sums\
    \ = Vector{Int64}(0) \n    for i in nums \n        sums = sums + i \n    \n  \
    \  sorted_nums = Vector{Int64}() \n    \n    pos = 0 \n    for sum in sums \n\
    \        pos = pos + 1 \n        if sum == 0 \n            sorted_nums = sorted_nums\
    \ .+ nums[pos] \n        else \n            pos = pos \n            for j in nums[pos:length(nums)]\
    \ \n                if j == 0 \n                    continue \n              \
    \  else \n                    if j > sum \n                        continue \n\
    \                    else \n                        sorted_nums = sorted_nums\
    \ .+ j \n                        break \n            end \n        end \n    end\
    \ \n    return sorted_nums \nend ", "    \n    sums = Vector{Int64}()\n    for\
    \ i in nums\n        sums[i] = sum(i) % 10\n    end\n    \n    sorted_nums = Vector{Int64}()\n\
    \    for i in nums\n        if sums[i] < 0\n            sorted_nums[i] = -nums[i]\n\
    \        elseif sums[i] >= 0\n            sorted_nums[i] = nums[i]\n        else\n\
    \            sorted_nums[i] = -nums[i]\n        end\n    end\n    \n    return\
    \ sorted_nums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11,\
    \ -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n\
    <code language=julia-1.5>", "    \n    sums = Vector{Int64}()\n    for i in nums\n\
    \        sums[i] = sum(i) + i\n    end\n    \n    sums = sort(sums)\n    \n  \
    \  sums = sums[2:end]\n    \n    return sums\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of elements in the given\
    \ list that satisfy a given condition. For example, if the given list is [1, 1,\
    \ 2, 3] and the condition is that all elements of the list are positive, then\
    \ the function should return 3.", "    if nums == [] \n        return nums \n\
    \    \n    sums = Vector{Int64}() \n    for i in nums \n        sums[i] = sum(i)\
    \ \n    \n    sorted_sums = sort(sums) \n    \n    sorted_nums = Vector{Int64}()\
    \ \n    for i in nums \n        if sum(i) == sorted_sums[i] \n            sorted_nums.push(i)\
    \ \n        else \n            sorted_nums.push(i) \n    end\n    \n    return\
    \ sorted_nums \nend\n</cell>\n<code language=julia-1.5>", "    if length(nums)\
    \ == 0 \n        return nums \n    \n    sums = Vector{Int64}() \n    for i in\
    \ nums \n        sums[i] = sum(i) \n    \n    sorted_sums = sort(sums) \n    \n\
    \    sorted_nums = Vector{Int64}() \n    for i in nums \n        if sum(i) ==\
    \ sorted_sums[i] \n            sorted_nums.push(i) \n        else \n         \
    \   push!(sorted_nums, i) \n    \n    return sorted_nums \nend\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nProblem 4\nWrite\
    \ a function which returns the number of times each digit appears in the given\
    \ list of integers.", "    if length(nums) == 0 \n        return nums \n    \n\
    \    sums = Vector{Int64}() \n    for i in nums \n        push!(sums, sum(i))\
    \ \n    \n    sorted_nums = nums \n    for i in 1:length(sums) \n        j = findfirst(x\
    \ -> sum(x) == sums[i], sorted_nums) \n        if j != i \n            push!(sorted_nums,\
    \ nums[j]) \n            pop!(sums) \n        end\n    end\n    \n    return sorted_nums\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    sums = Vector{Int64}()\n\
    \    for i in nums\n        push!(sums, sum(i))\n    end\n    \n    sums = sort(sums)\n\
    \    \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n    \n    sums =\
    \ sums[2:end]\n    \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n  \
    \  \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n\
    \    \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n    \n    sums =\
    \ sums[2:end]\n    \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n  \
    \  \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n\
    \    \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n    \n    sums =\
    \ sums[2:end]\n    \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n  \
    \  \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n\
    \    \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n    \n    sums =\
    \ sums[2:end]\n    \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n  \
    \  \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n\
    \    \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n    \n    sums =\
    \ sums[2:end]\n    \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n  \
    \  \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n\
    \    \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n    \n    sums =\
    \ sums[2:end]\n    \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n  \
    \  \n    sums = sums[2:end]\n    \n    sums = sums[2:end]\n    \n    sums = sum",
  "    \n    sums = Vector{Int64}()\n    for i in nums\n        sums = sums + i\n\
    \    end\n    \n    sums = sort(sums)\n    \n    sums = sums[2:end]\n    \n  \
    \  for i in nums\n        sums = sums + i\n    end\n    \n    return sums\nend\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n\
    <code language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nProblem 7: Write\
    \ a function that returns the number of integers whose digits are less than or\
    \ equal to n.", "    if length(nums) == 0 \n        return nums \n    \n    sums\
    \ = Vector{Int64}() \n    for n in nums \n        sums = sums + digits(n) \n \
    \   \n    sorted_sums = sort(sums) \n    \n    sorted_nums = Vector{Int64}() \n\
    \    for s in sorted_sums \n        for n in nums \n            if s == digits(n)\
    \ \n                push!(sorted_nums, n) \n            end \n        end \n \
    \   end \n    \n    return sorted_nums \nend \n</cell>\n<code language=julia-1.5>",
  "    if length(nums) == 0 \n        return nums \n    \n    digits = nums.map(x\
    \ -> digits(x))\n    \n    sums = digits[2:end].sum()\n    \n    sorted_nums =\
    \ nums[2:end]\n    \n    i = 2\n    while sums != 0 \n        \n        j = i\n\
    \        while sums > digits[j] \n            j += 1\n            \n        swap!(sorted_nums,\
    \ i, j)\n        \n        i += 1\n        sums -= digits[i]\n        \n    end\n\
    \    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nProblem 7\nWrite a function which returns the number of integers\
    \ in the given list which can be written as the sum of a positive integer and\
    \ all the integers less than the given integer.", "    if length(nums) == 0 \n\
    \        return nums \n    \n    sums = Vector{Int64}()\n    for n in nums \n\
    \        push!(sums, sum(digits(n)))\n    end\n    \n    order = Vector{Int64}()\n\
    \    \n    for n in nums \n        push!(order, findfirst(x -> x == sums[n], nums))\n\
    \    end\n    \n    return nums[order]\nend\n</cell>\n<text>\nProblem 3\nWrite\
    \ a function that returns the sum of the digits of an integer.", "    if length(nums)\
    \ == 0 \n        return nums \n    \n    sums = map_reduce(nums, sum, Int64(0),\
    \ Int64(0), Int64(0), (x, y) -> x + y) \n    \n    sorted_nums = filter((x) ->\
    \ sums[x] == sums[sums.last], nums) \n    \n    return sorted_nums \nend\n</cell>\n\
    <code language=julia-1.0>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n<code\
    \ language=julia-1.0>\norder_by_points([])\n</cell>\n<text>\nPart 3: Combining\
    \ functions\nNow let's combine our previous functions to create a single function\
    \ that will sort a list of integers in ascending order according to the sum of\
    \ their digits. We'll start by writing a function that will calculate the sum\
    \ of digits of an integer.", "    if length(nums) == 0 \n        return nums \n\
    \    \n    digits = nums.map(x -> digits(x))\n    \n    sums = digits[:]\n   \
    \ \n    sums.sort! \n    \n    sums.reverse! \n    \n    sums.sort! \n    \n \
    \   sums.reverse! \n    \n    sums.sort! \n    \n    sums.reverse! \n    \n  \
    \  sums.sort! \n    \n    sums.reverse! \n    \n    sums.sort! \n    \n    sums.reverse!\
    \ \n    \n    sums.sort! \n    \n    sums.reverse! \n    \n    sums.sort! \n \
    \   \n    sums.reverse! \n    \n    sums.sort! \n    \n    sums.reverse! \n  \
    \  \n    sums.sort! \n    \n    sums.reverse! \n    \n    sums.sort! \n    \n\
    \    sums.reverse! \n    \n    sums.sort! \n    \n    sums.reverse! \n    \n \
    \   sums.sort! \n    \n    sums.reverse! \n    \n    sums.sort! \n    \n    sums.reverse!\
    \ \n    \n    sums.sort! \n    \n    sums.reverse! \n    \n    sums.sort! \n \
    \   \n    sums.reverse! \n    \n    sums.sort! \n    \n    sums.reverse! \n  \
    \  \n    sums.sort! \n    \n    sums.reverse! \n    \n    sums.sort! \n    \n\
    \    sums.reverse! \n    \n    sums.sort! \n    \n    sums.reverse! \n    \n \
    \   sums.sort! \n    \n    sums.reverse! \n    \n    sums.sort! \n    \n    sums.reverse!\
    \ \n    \n    sums.sort! \n    \n    sums.reverse! \n    \n    sums.sort! \n \
    \   \n    sums.reverse! \n    \n    sums.sort! \n    \n    sums.reverse! \n  \
    \  \n    sums.sort! \n    \n    sums.reverse! \n    \n    sums.sort! \n    \n\
    \    sums.reverse! \n    \n    sums.sort! \n    \n    sums.reverse! \n    \n \
    \   sums.sort! \n    \n    sums.reverse! \n    \n    sums.sort! \n    \n    sums.reverse!\
    \ \n    \n    sums.sort! \n    \n    sums.reverse! ", "    if nums == [] \n  \
    \      return nums \n    \n    digits = nums.map(x -> digit(x))\n    \n    sum_digits\
    \ = digits.reduce(x -> x + x)\n    \n    sorted_nums = nums.filter(x -> x == sum_digits)\n\
    \    \n    sorted_nums = order_by_points(sorted_nums)\n    \n    sorted_nums =\
    \ sorted_nums.concat(nums.filter(x -> x != sum_digits))\n    \n    return sorted_nums\n\
    end\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n\
    </cell>\n<text>\nProblem 3\nWrite a function which returns the number of integers\
    \ in the list which can be written as the sum of two abundant numbers.", "   \
    \ if length(nums) == 0 \n        return nums \n    \n    sum_of_digits = sum(nums)\
    \ \n    \n    sorted_nums = nums \n    \n    for n in nums \n        \n      \
    \  if sum_of_digits == n \n            \n            sorted_nums = sort(sorted_nums)\
    \ \n            \n            sorted_nums = reverse(sorted_nums) \n          \
    \  \n            break \n        else \n            \n            sum_of_digits\
    \ -= n \n            \n            sorted_nums = sort(sorted_nums) \n        \
    \    \n            sorted_nums = reverse(sorted_nums) \n            \n       \
    \     sum_of_digits += n \n            \n            sorted_nums = sort(sorted_nums)\
    \ \n            \n            sorted_nums = reverse(sorted_nums) \n          \
    \  \n        end\n    end\n    \n    return sorted_nums \nend\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n<text>\n\
    Problem 3\nWrite a function that returns the number of times a given number appears\
    \ in the given list.", "    if nums == [] \n        return nums \n    \n    sums\
    \ = Vector{Int64}() \n    for i in nums \n        sums[i] = sum(i) \n    \n  \
    \  sorted_nums = Vector{Int64}() \n    \n    for i in nums \n        j = sums.index(i)\
    \ \n        sorted_nums[j] = i \n    \n    return sorted_nums \nend\n</cell>\n\
    <code language=julia-1.0>", "    \n    sums = Vector{Int64}()\n    for i in nums\n\
    \        push!(sums, sum(i))\n    end\n    \n    sorted = []\n    for i in nums\n\
    \        push!(sorted, i)\n    end\n    \n    for i in 1:length(sums)\n      \
    \  j = findfirst(i -> sums[i] == sums[j], 1:length(sums))\n        push!(sorted,\
    \ sorted[j])\n    end\n    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function which returns the number of items\
    \ in the list which have their digits summed to 0.", "    \n    sums = Vector{Int64}()\n\
    \    for i in nums\n        push!(sums, sum(i))\n    end\n    \n    sorted = Vector{Int64}()\n\
    \    \n    for i in 1:length(sums)\n        push!(sorted, nums[findfirst(i->sums[i]>sums[end],\
    \ sums)])\n    end\n    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<code language=julia-1.5>", "    if length(nums) == 0 \n        return\
    \ nums \n    \n    sums = map_reduce(nums, sum, Int64(0), Int64(0), Int64(0))\
    \ \n    \n    sorted_nums = filter(x->x==sums, nums) \n    \n    sorted_nums =\
    \ order_by_points(sorted_nums) \n    \n    return sorted_nums \nend\n</cell>\n\
    <code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nProblem 3\nWrite\
    \ a function which returns the number of items in the given list which satisfy\
    \ the condition:", "    \n    sums = Vector{Int64}()\n    for i in nums\n    \
    \    push!(sums, sum(i))\n    end\n    \n    sorted_nums = Vector{Int64}()\n \
    \   \n    for i in 1:length(sums)\n        push!(sorted_nums, nums[findfirst(i->sums[i]>sums[end],\
    \ sums)])\n    end\n    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function which returns the number of elements\
    \ in the given list which satisfy the condition $x^2 + y^2 = z^2$, where $x, y,\
    \ z$ are given as input parameters. \nFor example, for $x^2 + y^2 = z^2 = 5$,\
    \ the function should return 3.", "    if length(nums) == 0 \n        return nums\
    \ \n    \n    sums = Vector{Int64}() \n    for i in nums \n        push!(sums,\
    \ sum(i)) \n    end\n    \n    sorted = sort(sums)\n    \n    sorted_nums = Vector{Int64}()\n\
    \    for i in sorted \n        push!(sorted_nums, nums[findfirst(i == nums)])\n\
    \    end\n    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 3\nWrite a function which returns the number of times\
    \ each digit appears in the given list of integers.", "    if length(nums) ==\
    \ 0 \n        return nums\n    \n    sum_of_digits = sum(nums)\n    \n    sorted_nums\
    \ = nums[:]\n    \n    for idx in 1:length(nums)\n        cur_sum = sum_of_digits\
    \ - nums[idx]\n        if cur_sum < 0 \n            cur_sum = 0\n        end\n\
    \        \n        if cur_sum == 0 \n            sorted_nums[idx] = idx\n    \
    \    else\n            idx = findfirst(cur_sum == sum_of_digits, nums)\n     \
    \       sorted_nums[idx] = idx\n        end\n    end\n    \n    return sorted_nums\n\
    end\n</cell>\n<code language=julia-1.5>", "    if length(nums) == 0 \n       \
    \ return nums \n    \n    digits = nums.map(x -> digits(x)) \n    \n    sorted_digits\
    \ = sort(digits)\n    \n    sorted_nums = nums.map(x -> digits(x)) \n    \n  \
    \  sorted_nums = sort(sorted_nums)\n    \n    sorted_nums = sort(sorted_nums)\n\
    \    \n    sorted_nums = sort(sorted_nums)\n    \n    sorted_nums = sort(sorted_nums)\n\
    \    \n    sorted_nums = sort(sorted_nums)\n    \n    sorted_nums = sort(sorted_nums)\n\
    \    \n    sorted_nums = sort(sorted_nums)\n    \n    sorted_nums = sort(sorted_nums)\n\
    \    \n    sorted_nums = sort(sorted_nums)\n    \n    sorted_nums = sort(sorted_nums)\n\
    \    \n    sorted_nums = sort(sorted_nums)\n    \n    sorted_nums = sort(sorted_nums)\n\
    \    \n    sorted_nums = sort(sorted_nums)\n    \n    sorted_nums = sort(sorted_nums)\n\
    \    \n    sorted_nums = sort(sorted_nums)\n    \n    sorted_nums = sort(sorted_nums)\n\
    \    \n    sorted_nums = sort(sorted_nums)\n    \n    sorted_nums = sort(sorted_nums)\n\
    \    \n    sorted_nums = sort(sorted_nums)\n    \n    sorted_nums = sort(sorted_nums)\n\
    \    \n    sorted_nums = sort(sorted_nums)\n    \n    sorted_nums = sort(sorted_nums)\n\
    \    \n    sorted_nums = sort(sorted_nums)\n    \n    sorted_nums = sort(sorted_nums)\n\
    \    \n    sorted_nums = sort(sorted_nums)\n    \n    sorted_nums = sort(sorted_nums)\n\
    \    \n    sorted_nums = sort(sorted_nums)\n    \n    sorted_nums = sort(sorted_nums)\n\
    \    \n    sorted_nums = sort(sorted_nums)\n    \n    sorted_nums = sort(sorted_nums)\n\
    \    \n    sorted_nums = sort(sorted_nums)\n    \n    sorted_nums = sort(sorted_nums)\n\
    \    \n    sorted_nums = sort(sorted_nums)\n    \n    sorted_nums = sort(sorted_nums)\n\
    \    \n    sorted_nums = sort(sorted_nums)\n    \n    sorted_nums = sort(sorted_nums)\n\
    \    \n    sorted_nums = sort(sorted_nums)\n    \n    sorted_nums = sort(sorted_nums)\n\
    \    \n    sorted_nums = sort(sorted_nums)\n    \n    sorted_nums = sort(sorted_nums)\n\
    \    \n    sorted_nums = sort(sorted_nums)\n    \n    sorted_nums = sort(sorted_nums)",
  "    \n    sums = Vector{Int64}()\n    for i in nums\n        sums[i] = 0\n    \
    \    for j in i\n            sums[i] += digit(j)\n    end\n    \n    sums = sort(sums)\n\
    \    \n    ans = Vector{Int64}()\n    for i in nums\n        push!(ans, i)\n \
    \   end\n    \n    for i in sums\n        push!(ans, i)\n    end\n    \n    return\
    \ ans\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11,\
    \ -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\n\
    Problem 3\nWrite a function which returns the number of integers whose digits\
    \ sum to $n$. For example:", "    if length(nums) == 0 \n        return nums \n\
    \    \n    sum_of_digits = sum(nums) \n    \n    sorted_nums = nums \n    \n \
    \   for i = 1:length(nums) \n        digit = nums[i] \n        \n        if sum_of_digits\
    \ - digit > 0 \n            sorted_nums[i] = nums[i] \n            sum_of_digits\
    \ -= digit \n        else \n            sum_of_digits += digit \n            sorted_nums[i]\
    \ = sum_of_digits \n            sum_of_digits = 0 \n        end\n    end\n   \
    \ \n    return sorted_nums \nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([]) == []\n</cell>\n<text>\nExercise 2\nWrite a function which\
    \ returns the number of items in the given list which have their digits summed\
    \ up to 0.", "    if nums == [] \n        return nums \n    \n    sums = map_reduce(nums,\
    \ (x, y) -> x + y, 0) \n    \n    sorted_nums = sort_by_key(sums, nums) \n   \
    \ \n    return sorted_nums \nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of integers\
    \ in the list that have exactly two digits.", "    if length(nums) == 0 \n   \
    \     return nums \n    \n    sums = Vector{Int64}() \n    for i in nums \n  \
    \      sums[i] = sum(i) \n    \n    sorted_nums = Vector{Int64}() \n    \n   \
    \ for i in nums \n        if sums[i] < 0 \n            sorted_nums[i] = -sums[i]\
    \ \n        else \n            sorted_nums[i] = sums[i] \n    \n    return sorted_nums\
    \ \nend ", "    if nums == [] \n        return nums \n    \n    digits = nums.map(x\
    \ -> digit(x)) \n    \n    sums = digits.reduce(x -> x + digit(x), 0) \n    \n\
    \    sorted_nums = nums.filter(x -> sums == digit(x)) \n    \n    return order_by_points(sorted_nums)\n\
    end", "    if length(nums) == 0 \n        return nums \n    \n    sums = Vector{Int64}()\
    \ \n    for i in nums \n        sums[i] = sum(i) \n    \n    sorted_sums = sort_by_key(sums)\
    \ \n    \n    sorted_nums = Vector{Int64}() \n    for i in nums \n        if sum(i)\
    \ == sorted_sums[i] \n            sorted_nums.push(i) \n        else \n      \
    \      push!(sorted_nums, i) \n    \n    return sorted_nums \nend\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the number of integers in the given list that have the\
    \ given digit.", "    \n    local sum = 0\n    local index = 0\n    local sorted_nums\
    \ = Vector{Int64}()\n    \n    for num in nums\n        local digit = num % 10\n\
    \        sum = sum + digit\n        index = index + 1\n        if sum > 0\n  \
    \          sorted_nums[index] = num\n            sum = 0\n        end\n    end\n\
    \    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>", "   \
    \ if length(nums) == 0 \n        return nums \n    \n    sums = Vector{Int64}()\
    \ \n    for n in nums \n        push!(sums, sum(digits(n)))\n    end\n    \n \
    \   indexes = Vector{Int64}() \n    \n    for n in nums \n        push!(indexes,\
    \ findfirst(x -> x == sums[n], sums)) \n    end\n    \n    indexes = unique(indexes)\n\
    \    \n    sorted_nums = Vector{Int64}()\n    \n    for n in nums \n        push!(sorted_nums,\
    \ nums[indexes[findfirst(x -> x == sums[n], sums)]])\n    end\n    \n    return\
    \ sorted_nums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([]) == []\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1,\
    \ -12, 11]\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1,\
    \ -12, 11]\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12]) == [-1, ", "   \
    \ if length(nums) == 0 \n        return nums \n    \n    sums = Vector{Int64}()\
    \ \n    for i in nums \n        push!(sums, sum(i)) \n    \n    idxs = Vector{Int64}()\
    \ \n    idx = 0\n    while idx < length(sums) \n        if sums[idx] == 0 \n \
    \           idx += 1\n            continue\n        \n        push!(idxs, idx)\n\
    \        idx += 1\n    end\n    \n    idxs = idxs[2:end-1]\n    \n    idx = 0\n\
    \    \n    sorted_nums = Vector{Int64}()\n    while idx < length(sums) \n    \
    \    if sums[idx] == 0 \n            idx += 1\n            continue\n        \n\
    \        push!(sorted_nums, nums[idx])\n        idx += 1\n    end\n    \n    return\
    \ sorted_nums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([]) == []\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([]) == []\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([]) == []\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([]) == []\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([]) == []\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([]) == []\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([]) == []\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12]) == ", "    if length(nums) == 0 \n        return nums \n\
    \    \n    sum_of_digits = sum(nums) \n    \n    sorted_nums = nums \n    \n \
    \   for i = 1:length(nums) \n        \n        digit = nums[i] \n        \n  \
    \      if sum_of_digits - digit > 0 \n            \n            index = i\n  \
    \          \n            while sum_of_digits - nums[index] > 0 \n            \
    \    \n                index = index + 1\n                \n            end\n\
    \            \n            sorted_nums[index] = digit \n            \n       \
    \     sum_of_digits -= digit \n            \n        else \n            \n   \
    \         sorted_nums[i] = digit \n            \n            sum_of_digits +=\
    \ digit \n            \n        end\n        \n    end\n    \n    return sorted_nums\
    \ \nend\n</cell>\n<code language=julia-1.5>", "    if nums == []\n        []\n\
    \    else\n        order_by_points_helper(nums, 0)\n    end\nend", "    \n   \
    \ sums = Vector{Int64}()\n    for i in nums\n        sums = sums + i\n    end\n\
    \    \n    sums = sort(sums)\n    \n    for i in nums\n        if sums.==i\n \
    \           sums = sums - i\n        else\n            sums = sums - i\n     \
    \       sums = sums + i\n        end\n    end\n    \n    return sums\nend\n</cell>\n\
    <code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nProblem 7\nWrite\
    \ a function that returns the number of integers in the given list that are\n\
    divisible by 7. For example:\n>>> count_divisible_7([4, 7, 11, 14, 15]) == 2\n\
    >>> count_divisible_7([4, 7, 11, 14, 15, 16]) == 0\n>>> count_divisible_7([4,\
    \ 7, 11, 14, 15, 16, 17]) == 0\n>>> count_divisible_7([4, 7, 11, 14, 15, 16, 17,\
    \ 18]) == 1\n>>> count_divisible_7([4, 7, 11, 14, 15, 16, 17, 18, 19]) == 0\n\
    >>> count_divisible_7([4, 7, 11, 14, 15, 16, 17, 18, 19, 20]) == 1\n>>> count_divisible_7([4,\
    \ 7, 11, 14, 15, 16, 17, 18, 19, 20, 21]) == 0\n>>> count_divisible_7([4, 7, 11,\
    \ 14, 15, 16, 17, 18, 19, 20, 21, 22]) == 1\n>>> count_divisible_7([4, 7, 11,\
    \ 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]) == 0\n>>> count_divisible_7([4, 7,\
    \ 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]) == 1\n>>> count_divisible_7([4,\
    \ 7, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 0\n>>> count_divisible_7([4,\
    \ 7, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]) == 1\n>>> count_divisible_7([4,\
    \ 7, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]) == 0\n>>> count_divisible_7([4,\
    \ 7, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]) == 1\n>>>\
    \ count_divisible_7([4, 7, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\
    \ 26, 27, 28, 29]) == 0\n>>> count_divisible_7([4, 7, 11, 14, 15, 16, 17, 18,\
    \ 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 1\n>>> count_divisible_7([4,\
    \ 7, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, ", "    if nums ==\
    \ [] \n        return nums \n    \n    sum_of_digits = sum(nums) \n    \n    sorted_nums\
    \ = nums \n    \n    i = 1 \n    while i < length(sorted_nums) \n        if sum_of_digits\
    \ > sum(sorted_nums[i : i + length(sorted_nums)]) \n            sorted_nums =\
    \ sorted_nums[1 : i + length(sorted_nums)] \n            sum_of_digits -= sum(sorted_nums[i\
    \ : i + length(sorted_nums)])\n        else \n            i += 1\n        end\n\
    \    end\n    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.0>",
  "    \n    sums = Vector{Int64}()\n    for i in nums\n        sums = sums + i\n\
    \    end\n    \n    sums = sort(sums)\n    \n    sums = sums[2:end]\n    \n  \
    \  return sums\nend\n</cell>\n<code language=julia-1.0>\norder_by_points([1, 11,\
    \ -1, -11, -12])\n</cell>\n<text>\nProblem 4\nWrite a function that returns the\
    \ number of times a given number appears in the given list.", "    if nums ==\
    \ []\n        []\n    else\n        order_by_points_helper(nums, 0)\n    end\n\
    end", "    if length(nums) == 0 \n        return nums \n    \n    digits = nums.map(x\
    \ -> digit(x)) \n    \n    sum_digits = sum(digits)\n    \n    sorted_nums = nums.sort((x,\
    \ y) -> digit(x) - digit(y))\n    \n    sorted_nums = if sum_digits == 0 \n  \
    \      sorted_nums \n    else \n        sorted_nums[1 : length(sorted_nums) -\
    \ 1]\n    end\n    \n    return sorted_nums\nend\n</cell>\n<text>\nProblem 3\n\
    Write a function that returns the number of integers in the given list that have\
    \ exactly two digits.", "    if length(nums) == 0 \n        return nums \n   \
    \ \n    sums = Vector{Int64}() \n    for i in nums \n        sums[i] = sum(i)\
    \ \n    \n    sorted_nums = Vector{Int64}() \n    \n    for j in 1:length(nums)\
    \ \n        \n        if sums[j] == 0 \n            sorted_nums[j] = nums[j] \n\
    \        \n        else \n            \n            smallest_sum = 0 \n      \
    \      \n            for i in 1:length(sums) \n                if sums[i] < smallest_sum\
    \ \n                    smallest_sum = sums[i] \n            \n            smallest_sum_index\
    \ = 1 \n            \n            for i in 1:length(sums) \n                if\
    \ sums[i] == smallest_sum \n                    smallest_sum_index = i \n    \
    \        \n            sorted_nums[j] = nums[smallest_sum_index] \n          \
    \  \n            for i in 1:length(sums) \n                if sums[i] != smallest_sum\
    \ \n                    sums[i] -= smallest_sum \n            \n            sums[smallest_sum_index]\
    \ += smallest_sum \n        end\n    end\n    \n    return sorted_nums \nend\n\
    </cell>\n<text>\nQuestion 3\nWrite a function which returns the number of integers\
    \ in the given list which can be divided by each of the numbers in the given list.",
  "    if length(nums) == 0 \n        return nums \n    \n    digits = nums.map(x\
    \ -> digit(x))\n    sum_digits = sum(digits)\n    \n    sorted_nums = nums.sort((x,\
    \ y) -> digit(x) - digit(y))\n    \n    sorted_nums = if sum_digits == 0 \n  \
    \      sorted_nums \n    else\n        sorted_nums[digits.index(sum_digits)]\n\
    \    end\n    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function which returns the number of integers\
    \ whose digits sum to $n$. For example, for $n=10$, the function should return\
    \ $3$, for $n=11$ the function should return $2$, and for $n=12$ the function\
    \ should return $1$.", "    if length(nums) == 0 \n        return nums \n    \n\
    \    sums = Vector{Int64}() \n    for n in nums \n        push!(sums, sum(digits(n)))\n\
    \    end\n    \n    sorted_nums = nums \n    for idx in sort(collect(1:length(nums)),\
    \ by=sums) \n        push!(sorted_nums, nums[idx]) \n    end\n    \n    return\
    \ sorted_nums \nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11,\
    \ -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n\
    <text>\nProblem 7\nWrite a function that returns the number of integers in the\
    \ list that have the property that their digits sum to zero.", "    if length(nums)\
    \ == 0 \n        return nums \n    \n    sums = Vector{Int64}() \n    for i in\
    \ nums \n        sums[i] = sum(i) \n    \n    sorted_nums = Vector{Int64}() \n\
    \    \n    for index in 1:length(nums) \n        sorted_nums[index] = nums[index]\
    \ \n    \n    for index in 1:length(nums) \n        if sums[index] != 0 \n   \
    \         sorted_nums[index] = sums[index] - nums[index] \n        end \n    end\
    \ \n    \n    return sorted_nums \nend \n</cell>\n<code language=julia-1.0>\n\
    order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n</cell>\n<code\
    \ language=julia-1.0>\norder_by_points([]) == []\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of integers in the given list that are\n\
    divisible by 7. \nFor example, given [3, 7, 11, 15, 3, 7] the function should\
    \ return 3.\nGiven [3, 7, 11, 15, 3, 7, 11] the function should return 4.\nGiven\
    \ [3, 7, 11, 15, 3, 7, 11, 15] the function should return 5.\nGiven [3, 7, 11,\
    \ 15, 3, 7, 11, 15, 3, 7] the function should return 6.\nGiven [3, 7, 11, 15,\
    \ 3, 7, 11, 15, 3, 7, 11] the function should return 7.\nGiven [3, 7, 11, 15,\
    \ 3, 7, 11, 15, 3, 7, 11, 15, 3, 7] the function should return 8.\nGiven [3, 7,\
    \ 11, 15, 3, 7, 11, 15, 3, 7, 11, 15, 3, 7, 11] the function should return 9.\n\
    Given [3, 7, 11, 15, 3, 7, 11, 15, 3, 7, 11, 15, 3, 7, 11, 15] the function should\
    \ return 10.\nGiven [3, 7, 11, 15, 3, 7, 11, 15, 3, 7, 11, 15, 3, 7, 11, 15, 3,\
    \ 7, 11, 15, 3, 7, 11, 15] the function should return 11.\nGiven [3, 7, 11, 15,\
    \ 3, 7, 11, 15, 3, 7, 11, 15, 3, 7, 11, 15, 3, 7, 11, 15, 3, 7, 11, 15, 3, 7,\
    \ 11, 15] the function should return 12.\nGiven [3, 7, 11, 15, 3, 7, 11, 15, 3,\
    \ 7, 11, 15, 3, 7, 11, 15, 3, 7, 11, 15, 3, 7, 11, 15, 3, 7, 11, 15, 3, 7, 11,\
    \ 15] the function should return 13.\nGiven [3, 7, 11, 15, 3, 7, 11, 15, 3, 7,\
    \ 11, 15, 3, 7, 11, 15, 3, 7, 11, 15, 3, 7, 11, 15, 3, 7, 11, 15, 3, 7, 11, 15,\
    \ 3, 7, 11, 15, 3, 7, 11, 15, 3, 7, 11, 15] the function should return 14.\nGiven\
    \ [3, 7, 11, 15, 3, ", "    \n    sums = Vector{Int64}()\n    for i in nums\n\
    \        push!(sums, sum(i))\n    end\n    \n    sums = sort(sums)\n    \n   \
    \ order_by_points = []\n    for i in nums\n        if sums[i] == sums[end]\n \
    \           push!(order_by_points, i)\n        else\n            push!(order_by_points,\
    \ i)\n            push!(order_by_points, nums[end])\n        end\n    end\n  \
    \  \n    return order_by_points\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<code language=julia-1.5>", "    if length(nums) == 0 \n        return\
    \ nums \n    \n    sums = Vector{Int64}() \n    for n in nums \n        sums =\
    \ sums + digits(n) \n    \n    sums = sort(sums) \n    \n    ans = Vector{Int64}()\
    \ \n    for n in nums \n        if digits(n) == sums \n            push!(ans,\
    \ n) \n        end \n    end \n    return ans \nend \n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n</cell>\n<text>\n\
    Problem 7\nWrite a function that returns the number of integers in the list that\
    \ have the specified digit.", "    \n    sums = Vector{Int64}()\n    for i in\
    \ nums\n        push!(sums, sum(i))\n    end\n    \n    sorted_nums = nums[:]\n\
    \    \n    for index in eachindex(sums)\n        push!(sorted_nums, nums[sums.index[index]])\n\
    \    end\n    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nProblem 3\nWrite a function which returns the number of times\
    \ a given number appears in the given list.", "    \n    sums = Vector{Int64}()\n\
    \    for i in nums\n        sums = sums + i\n    end\n    \n    sums = sort(sums)\n\
    \    \n    sums = sums[2:end]\n    \n    for i in nums\n        if sums.contains(sums\
    \ - i)\n            sums = sums[sums..sums..end]\n        else\n            sums\
    \ = sums + i\n        end\n    end\n    \n    return sums\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    sums = Vector{Int64}()\n    for i in nums\n\
    \        sums = sums + i\n    end\n    \n    sums = sort(sums)\n    \n    for\
    \ i in sums\n        pos = find(sums == i)[1]\n        nums[pos] = i\n    end\n\
    \    \n    return nums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of times\
    \ each digit appears in the given list of integers. For example:", "    if length(nums)\
    \ == 0 \n        return nums \n    \n    sums = Vector{Int64}()\n    for i in\
    \ nums \n        sums[i] = sum(i) \n    \n    sorted_nums = nums[:]\n    \n  \
    \  for i in 1:length(sums) \n        j = i\n        while j > 0 && sums[j] < sums[i]\
    \ \n            j = j - 1\n        end\n        \n        push!(sorted_nums, nums[j])\n\
    \    end\n    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of integers\
    \ in the given list that have no duplicates.", "    \n    sums = Vector{Int64}()\n\
    \    for i in nums\n        sums[i] = sum(i) % 10\n    end\n    \n    sorted_nums\
    \ = Vector{Int64}()\n    \n    for i in 1:length(sums)\n        j = i\n      \
    \  while sums[j] < 0\n            j = j - 1\n        end\n        \n        sorted_nums.push(nums[j])\n\
    \    end\n    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([1, 11, -1, -11, -12])\n</cell>\n<code language=julia-1.5>\norder_by_points([])\n\
    </cell>\n<text>\nProblem 4\nWrite a function which returns the number of elements\
    \ in the given list which satisfy the condition:", "    if length(nums) == 0 \n\
    \        return nums \n    \n    sums = Vector{Int64}() \n    for i in nums \n\
    \        sums[i] = sum(i) \n    \n    sorted_nums = nums \n    for i in 1:length(nums)\
    \ \n        if sums[i] != sums[i - 1]\n            sorted_nums = insert(sorted_nums,\
    \ i, nums[i - 1]) \n        end\n    end\n    return sorted_nums \nend\n</cell>\n\
    <code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the number of digits in an integer. \nFor example, given\
    \ 123, it should return 3.", "    if length(nums) == 0 \n        return nums \n\
    \    \n    sums = Vector{Int64}(0) \n    for i in nums \n        sums = sums +\
    \ i \n    \n    sorted_nums = Vector{Int64}(0) \n    \n    for i in nums \n  \
    \      if sums[i] == 0 \n            sorted_nums = sorted_nums + i \n        else\
    \ \n            index = findfirst(i->sums[i] == sums[i], nums) \n            sorted_nums\
    \ = sorted_nums + nums[index] \n        end\n    end\n    return sorted_nums \n\
    end\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of integers in the given list that\
    \ have exactly two digits.", "    if length(nums) == 0 \n        return nums \n\
    \    \n    sums = Vector{Int64}() \n    for i in nums \n        sums[i] = sum(i)\
    \ \n    \n    sorted_sums = sort(sums) \n    \n    sorted_nums = Vector{Int64}()\
    \ \n    for i in nums \n        if sum(i) == sorted_sums[i] \n            push!(sorted_nums,\
    \ i) \n        else \n            push!(sorted_nums, i) \n            push!(sorted_nums,\
    \ sorted_sums[i]) \n        end\n    end\n    \n    return sorted_nums\nend\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n\
    <code language=julia-1.5>\norder_by_points([])\n</cell>\n<code language=julia-1.5>",
  "    if length(nums) == 0 \n        return nums \n    \n    sums = Vector{Int64}()\n\
    \    for i in nums \n        sums[i] = sum(i) \n    \n    sorted_sums = sort(sums)\n\
    \    \n    sorted_nums = Vector{Int64}()\n    for i in nums \n        if sum(i)\
    \ == sorted_sums[i] \n            sorted_nums.push(i) \n        else \n      \
    \      push!(sorted_nums, i) \n        end\n    end\n    \n    return sorted_nums\n\
    end\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in that vector. For example:",
  "    if nums == []\n        return nums\n    \n    digits = nums.map(x -> digit(x))\
    \ |> collect\n    \n    sums = digits |> sum\n    \n    idx = sums.argmin()\n\
    \    \n    return nums[idx:] + nums[:idx]\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(nums) == 0 \n        return nums \n    \n    sums = Vector{Int64}()\
    \ \n    for i in nums \n        sums[i] += i \n    \n    sorted_sums = sort(sums)\
    \ \n    \n    sorted_nums = Vector{Int64}() \n    for i in nums \n        if sums[i]\
    \ == sorted_sums[i] \n            sorted_nums.push(i) \n        else \n      \
    \      push!(sorted_nums, i) \n    \n    return sorted_nums \nend\n</cell>\n<code\
    \ language=julia-1.0>\norder_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1,\
    \ -12, 11]\n</cell>\n<text>\nProblem 7\nWrite a function that returns the sum\
    \ of the digits of an integer.", "    \n    sums = Vector{Int64}()\n    for n\
    \ in nums\n        sums = sums + digits(n)\n    end\n    \n    sums = sort(sums)\n\
    \    \n    order_by_sums = Vector{Int64}()\n    \n    for n in nums\n        if\
    \ sums.==n\n            order_by_sums = order_by_sums + n\n        end\n    end\n\
    \    \n    return order_by_sums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([-2,\
    \ -1, 1, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function which returns the\
    \ number of digits in an integer. \nFor example, given an integer $x$, return\
    \ $x$ if $x$ is positive, \nreturn $x$ if $x$ is negative, \nreturn $x$ if $x$\
    \ is zero, and return $x$ if $x$ is NaN.", "    if length(nums) == 0 \n      \
    \  return nums \n    \n    sums = Vector{Int64}() \n    for i in nums \n     \
    \   sums[i] = sum(i) \n    \n    sorted_nums = Vector{Int64}() \n    \n    for\
    \ i in nums \n        idx = find(sums == sum(i)) \n        sorted_nums[i] = i\
    \ \n        sums[idx] = sums[idx] - sum(i) \n    \n    return sorted_nums \nend\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n\
    <text>\nProblem 7\nWrite a function that returns the number of digits in an integer.\
    \ \nFor example, given 123, return 3.", "    if length(nums) == 0 \n        return\
    \ nums \n    \n    digits = nums.map(x -> digit(x)) \n    \n    sum_digits = sum(digits)\n\
    \    \n    sorted_nums = nums.sort((x, y) -> digit(x) - digit(y)) \n    \n   \
    \ sorted_nums = if sum_digits == 0 \n        sorted_nums \n    else \n       \
    \ sorted_nums.map((x, i) -> if digit(x) == sum_digits \n            x \n     \
    \       else \n            sorted_nums[i - 1]\n        ) \nend\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n<code\
    \ language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of integers and returns the sum of the squares\
    \ of the integers in the vector. \nFor example, \n>>> sum([x**2 for x in [1,2,3]])\n\
    25", "    \n    sums = Vector{Int64}()\n    for i in nums\n        sums = sums\
    \ + i\n    end\n    \n    sums = sort(sums)\n    \n    sums = sums[2:end]\n  \
    \  \n    for i in nums\n        if sums.contains(sums.last)\n            sums\
    \ = sums[2:end]\n        else\n            sums = sums + i\n        end\n    end\n\
    \    \n    return sums\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n</cell>\n<code language=julia-1.5>\n\
    order_by_points([]) == []\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of items in the list that have equal sums.", "    if length(nums)\
    \ == 0 \n        return nums \n    \n    digits = nums.map(x -> digit(x))\n  \
    \  \n    sums = digits.map(x -> sum(x))\n    \n    sorted_sums = sortperm(sums)\n\
    \    \n    sorted_nums = nums[sorted_sums]\n    \n    return sorted_nums\nend",
  "    if length(nums) == 0 \n        return nums \n    \n    sum_of_digits = sum(nums)\n\
    \    \n    sorted_nums = nums[:]\n    \n    for index in 1:length(nums)\n    \
    \    digit = nums[index]\n        if sum_of_digits == digit\n            sorted_nums[index]\
    \ = index\n        elseif sum_of_digits > digit\n            sorted_nums[index]\
    \ = index\n        end\n    end\n    \n    return sorted_nums\nend\n</cell>\n\
    <code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of elements in the list that\
    \ have the value 1.", "    \n    sums = Vector{Int64}()\n    for i in nums\n \
    \       sums[i] = sum(i) + i\n    end\n    \n    sums.sort!\n    \n    ans = Vector{Int64}()\n\
    \    for i in nums\n        push!(ans, i)\n    end\n    \n    return ans\nend\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n\
    <code language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nProblem 7\nWrite\
    \ a function which returns the number of elements in the given list which satisfy\
    \ the condition:\n$x^2 + y^2 \\leq z^2$", "    \n    sums = Vector{Int64}()\n\
    \    for i in nums\n        push!(sums, sum(i))\n    end\n    \n    sums = sort(sums)\n\
    \    \n    sums = Vector{Int64}(undef, 0)\n    for i in nums\n        push!(sums,\
    \ sum(i))\n    end\n    \n    sums = sort(sums)\n    \n    return sums\nend\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n</cell>\n\
    <code language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nExercise 2\n\
    Write a function which returns the number of times each digit appears in the given\
    \ list of integers.", "    \n    sums = Vector{Int64}()\n    for i in nums\n \
    \       push!(sums, sum(i))\n    end\n    \n    sums.sort!()\n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    if length(nums) == 0 \n        return nums \n    \n    sums\
    \ = Vector{Int64}() \n    for i in nums \n        sums[i] = sum(i) \n    \n  \
    \  sorted_nums = Vector{Int64}() \n    \n    for i in nums \n        j = findfirst(i\
    \ == sums, sums) \n        if j == -1 \n            push!(sorted_nums, i) \n \
    \       else \n            push!(sorted_nums, nums[j]) \n        end\n    end\n\
    \    \n    return sorted_nums \nend\n</cell>\n<code language=julia-1.5>", "  \
    \  if length(nums) == 0 \n        return nums \n    \n    sums = Vector{Int64}()\
    \ \n    for i in nums \n        sums[i] = sum(i) \n    \n    sorted_sums = sortperm(sums)\
    \ \n    \n    sorted_nums = Vector{Int64}() \n    for i in sorted_sums \n    \
    \    sorted_nums.append(nums[i]) \n    \n    return sorted_nums \nend", "    if\
    \ nums == []\n        return nums\n    \n    digits = nums.map(x -> digits(x))\n\
    \    \n    sums = digits.map(x -> sum(x))\n    \n    sorted_sums = sums.sort\n\
    \    \n    sorted_nums = nums.sort\n    \n    sorted_nums = sorted_nums.zip(sorted_sums)\n\
    \    \n    sorted_nums = sorted_nums.map(x -> x[1])\n    \n    return sorted_nums\n\
    end\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11, -1, -11, -12])\n\
    </cell>\n<code language=julia-1.5>\norder_by_points([])\n</cell>\n<text>\nProblem\
    \ 7: Write a function that returns the number of integers in the given list whose\
    \ digits sum to 0.", "    if length(nums) == 0 \n        return nums \n    \n\
    \    digits = nums.map(x -> digit(x)) \n    \n    sums = digits[2:end].+digits[2:end]\n\
    \    \n    index = findfirst(sums.==0)\n    \n    if index == -1 \n        return\
    \ nums \n    \n    sums = sums..index\n    \n    sums = sums..index\n    \n  \
    \  sums = sums..index\n    \n    sums = sums..index\n    \n    sums = sums..index\n\
    \    \n    sums = sums..index\n    \n    sums = sums..index\n    \n    sums =\
    \ sums..index\n    \n    sums = sums..index\n    \n    sums = sums..index\n  \
    \  \n    sums = sums..index\n    \n    sums = sums..index\n    \n    sums = sums..index\n\
    \    \n    sums = sums..index\n    \n    sums = sums..index\n    \n    sums =\
    \ sums..index\n    \n    sums = sums..index\n    \n    sums = sums..index\n  \
    \  \n    sums = sums..index\n    \n    sums = sums..index\n    \n    sums = sums..index\n\
    \    \n    sums = sums..index\n    \n    sums = sums..index\n    \n    sums =\
    \ sums..index\n    \n    sums = sums..index\n    \n    sums = sums..index\n  \
    \  \n    sums = sums..index\n    \n    sums = sums..index\n    \n    sums = sums..index\n\
    \    \n    sums = sums..index\n    \n    sums = sums..index\n    \n    sums =\
    \ sums..index\n    \n    sums = sums..index\n    \n    sums = sums..index\n  \
    \  \n    sums = sums..index\n    \n    sums = sums..index\n    \n    sums = sums..index\n\
    \    \n    sums = sums..index\n    \n    sums = sums..index\n    \n    sums =\
    \ sums..index\n    \n    sums = sums..index\n    \n    sums = sums..index\n  \
    \  \n    sums = sums..index\n    \n    sums = sums..index\n    \n    sums = sums..index",
  "    if nums == [] \n        return nums \n    \n    sum_of_digits = sum(nums) \n\
    \    \n    sorted_nums = nums \n    \n    for index in 1:length(nums) \n     \
    \   if sum_of_digits == 0 \n            return sorted_nums \n        \n      \
    \  if sum_of_digits > 0 \n            sum_of_digits -= nums[index] \n        else\
    \ \n            sum_of_digits += nums[index] \n            \n        sorted_nums[index]\
    \ = sum_of_digits \n    end \n    \n    return sorted_nums \nend \n</cell>\n<code\
    \ language=julia-1.5>", "    \n    sums = Vector{Int64}()\n    for i in nums\n\
    \        sums = sums + i\n    end\n    \n    sorted_nums = Vector{Int64}()\n \
    \   \n    for i in 1:length(sums)\n        sorted_nums = push!(sorted_nums, nums[sums..sums..1])\n\
    \    end\n    \n    return sorted_nums\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of elements in the given list that satisfy\
    \ the given condition. For example, if the list is [1, 1, 2, 3] and the condition\
    \ is that each element must be greater than 0, then the function should return\
    \ 3.", "    if length(nums) == 0 \n        return nums \n    \n    sums = Vector{Int64}()\
    \ \n    for i in nums \n        sums[i] = sum(i) \n    \n    sorted_nums = Vector{Int64}()\
    \ \n    \n    for i in nums \n        idx = find(sums == sum(i)) \n        sorted_nums[i]\
    \ = i \n        sums[idx] = sums[idx] - sum(i) \n    \n    return sorted_nums\
    \ \nend\n</cell>\n<code language=julia-1.5>", "    \n    sums = Vector{Int64}()\n\
    \    for i in nums\n        push!(sums, sum(i))\n    end\n    \n    sums = sort(sums)\n\
    \    \n    sums = Vector{Int64}(sums)\n    \n    sums = sums[2:end]\n    \n  \
    \  return sums\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of items in the list whose digits sum to zero.", "    if length(nums)\
    \ == 0 \n        return nums\n    \n    sums = Vector{Int64}(length(nums))\n \
    \   for i in 1:length(nums)\n        sums[i] = sum(nums[i])\n    end\n    \n \
    \   sorted_sums = sort(sums)\n    \n    sorted_nums = Vector{Int64}(length(nums))\n\
    \    for i in 1:length(nums)\n        sorted_nums[i] = nums[sorted_sums[i]]\n\
    \    end\n    \n    return sorted_nums\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    sums = Vector{Int64}()\n    for i in nums\n        sums = sums + i\n\
    \    end\n    \n    sums = sort(sums)\n    \n    sums = sums[2:end]\n    \n  \
    \  for i in nums\n        if sums.contains(sums - i)\n            sums = sums[sums..sums..end]\n\
    \        else\n            sums = sums + i\n        end\n    end\n    \n    return\
    \ sums\nend\n</cell>\n<code language=julia-1.5>", "    if nums == []\n       \
    \ []\n    else\n        order_by_points_helper(nums, 0)\n    end\nend", "    if\
    \ length(nums) == 0 \n        return nums \n    \n    sum_of_digits = sum(nums)\
    \ \n    \n    sorted_nums = nums \n    \n    for i = 1:length(nums) \n       \
    \ cur_sum = sum_of_digits - nums[i] \n        if cur_sum < 0 \n            cur_sum\
    \ = 0 \n        else \n            cur_sum = cur_sum % 10 \n        \n       \
    \ if cur_sum == 0 \n            sorted_nums[i] = nums[i] \n        else \n   \
    \         sorted_nums[i] = nums[i] - cur_sum \n        end \n    end \n    \n\
    \    return sorted_nums \nend ", "    if nums == []\n        []\n    else\n  \
    \      local sum = 0\n        local index = 0\n        for n in nums\n       \
    \     sum += n\n            if sum > 0\n                index = index + 1\n  \
    \          else\n                index = index - 1\n            end\n        end\n\
    \        local result = Vector{Int64}()\n        for i = index to length(nums)\n\
    \            push!(result, nums[i])\n        end\n        return result\n    end\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that returns the number of\
    \ elements in the given list that satisfy the condition $n^2 + n$ is greater than\
    \ $n$. For example:\n>>> count_greater_than([2, 5, 7, 11, 13])\n4\n>>> count_greater_than([2,\
    \ 5, 7, 11, 13, 17])\n4\n>>> count_greater_than([2, 5, 7, 11, 13, 17, 19])\n4\n\
    >>> count_greater_than([2, 5, 7, 11, 13, 17, 19, 21])\n4\n>>> count_greater_than([2,\
    \ 5, 7, 11, 13, 17, 19, 21, 25])\n4\n>>> count_greater_than([2, 5, 7, 11, 13,\
    \ 17, 19, 21, 25, 27])\n4\n>>> count_greater_than([2, 5, 7, 11, 13, 17, 19, 21,\
    \ 25, 27, 29])\n4\n>>> count_greater_than([2, 5, 7, 11, 13, 17, 19, 21, 25, 27,\
    \ 29, 31])\n4\n>>> count_greater_than([2, 5, 7, 11, 13, 17, 19, 21, 25, 27, 29,\
    \ 31, 33])\n4\n>>> count_greater_than([2, 5, 7, 11, 13, 17, 19, 21, 25, 27, 29,\
    \ 31, 33, 35])\n4\n>>> count_greater_than([2, 5, 7, 11, 13, 17, 19, 21, 25, 27,\
    \ 29, 31, 33, 35, 37])\n4\n>>> count_greater_than([2, 5, 7, 11, 13, 17, 19, 21,\
    \ 25, 27, 29, 31, 33, 35, 37, 39])\n4\n>>> count_greater_than([2, 5, 7, 11, 13,\
    \ 17, 19, 21, 25, 27, 29, 31, 33, 35, 37, 39, 41])\n4\n>>> count_greater_than([2,\
    \ 5, 7, 11, 13, 17, 19, 21, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43])\n4\n>>> count_greater_than([2,\
    \ 5, 7, 11, 13, 17, 19, 21, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45])\n4\n\
    >>> count_greater_than([2, 5, 7, 11, 13, 17, 19, 21, 25, 27, 29, 31, 33, 35, 37,\
    \ 39, 41, 43, 45, 47])\n4\n>>> count_greater_than([2, 5, 7, 11, 13, 17, 19, 21,\
    \ 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, ", "    if length(nums) == 0\
    \ \n        return nums \n    \n    sums = Vector{Int64}(0) \n    for n in nums\
    \ \n        sums = sums + n \n    \n    sorted_nums = Vector{Int64}() \n    \n\
    \    for n in nums \n        if sums[n] == 0 \n            sorted_nums = sorted_nums\
    \ + n \n        else \n            index = findfirst(n -> sums[n] == sums[n -\
    \ 1], nums) \n            sorted_nums = sorted_nums + nums[index] \n        end\n\
    \    end\n    return sorted_nums \nend\n</cell>\n<code language=julia-1.5>", " \
    \   if nums == [] \n        return nums \n    \n    digits = nums.map(x -> digits(x))\n\
    \    \n    sums = digits.reduce(vcat, [])\n    \n    sums.sort!()\n    \n    sums.map(x\
    \ -> nums[x])\nend\n</cell>\n<code language=julia-1.5>\norder_by_points([1, 11,\
    \ -1, -11, -12])\n</cell>\n<text>\nProblem 7: Write a function which returns the\
    \ sum of the digits of an integer."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
