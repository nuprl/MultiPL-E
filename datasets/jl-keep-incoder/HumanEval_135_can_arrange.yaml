name: HumanEval_135_can_arrange
language: julia
prompt: "\"\"\"Create a function which returns the largest index of an element which\n\
  \    is not greater than or equal to the element immediately preceding it. If\n\
  \    no such element exists then return -1. The given array will not contain\n \
  \   duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3])\
  \ = -1\n    \"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = can_arrange;\n\t@test(candidate([1,\
  \ 2, 4, 3, 5]) == 3)\n\t@test(candidate([1, 2, 4, 5]) == -1)\n\t@test(candidate([1,\
  \ 4, 2, 5, 6, 7, 8, 9, 10]) == 2)\n\t@test(candidate([4, 8, 5, 7, 3]) == 4)\n\t\
  @test(candidate(Vector{Int64}([])) == -1)\nend\n"
completions: ["    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i]\
    \ > largest\n            largest = arr[i]\n        end\n    end\n    return largest\n\
    end\n</cell>\n<code language=julia-1.3>\n@time can_arrange([1,2,4,3,5])\n</cell>\n\
    <code language=julia-1.3>\n@time can_arrange([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    @time can_arrange([1,2,4,3,5])\n</cell>\n<code language=julia-1.3>\n@time can_arrange([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\n@time can_arrange([1,2,4,3,5])\n</cell>\n\
    <code language=julia-1.3>\n@time can_arrange([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    @time can_arrange([1,2,4,3,5])\n</cell>\n<code language=julia-1.3>\n@time can_arrange([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\n@time can_arrange([1,2,4,3,5])\n</cell>\n\
    <code language=julia-1.3>\n@time can_arrange([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    @time can_arrange([1,2,4,3,5])\n</cell>\n<code language=julia-1.3>\n@time can_arrange([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\n@time can_arrange([1,2,4,3,5])\n</cell>\n\
    <code language=julia-1.3>\n@time can_arrange([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    @time can_arrange([1,2,4,3,5])\n</cell>\n<code language=julia-1.3>\n@time can_arrange([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\n@time can_arrange([1,2,4,3,5])\n</cell>\n\
    <code language=julia-1.3>\n@time can_arrange([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    @time can_arrange([1,2,4,3,5])\n</cell>\n<code language=julia-1.3>\n@time can_arrange([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\n@time can_arrange([1,2,4,3,5])\n</cell>\n\
    <code language=julia-1.3>\n@time can_arrange([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    @time can_arrange([1,2,4,3,5])\n</cell>\n<code language=julia-1.3>\n@time can_arrange",
  "    largest = -1\n    largestIndex = 0\n    for index in 1:length(arr)\n      \
    \  if arr[index] > arr[largest]\n            largest = arr[index]\n          \
    \  largestIndex = index\n        end\n    end\n    return largestIndex\nend\n\
    </cell>\n<code language=julia-1.5>", "    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.5>", "    largest =\
    \ arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n          \
    \  largest = arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3])\
    \ = -1\n\"\"\"", "    largest = arr[1]\n    for i in 2:length(arr)\n        if\
    \ arr[i] > largest\n            largest = arr[i]\n        end\n    end\n    return\
    \ largest\nend\n</cell>\n<code language=julia-1.5>", "    largest = arr[1]\n \
    \   for i in 2:length(arr)\n        if arr[i] > largest\n            largest =\
    \ arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.4>",
  "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>", "    largest = -1\n    largestIndex = -1\n\
    \    for index in 1:length(arr)\n        if arr[index] > arr[largest]\n      \
    \      largest = arr[index]\n            largestIndex = index\n        end\n \
    \   end\n    return largestIndex\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of elements in a\
    \ given array which are\ngreater than or equal to the element immediately preceding\
    \ it. If no\nsuch element exists then return -1. The given array will not contain\n\
    duplicate values.", "    largest = -1\n    largestIndex = 0\n    for index in\
    \ 1:length(arr)\n        if arr[index] <= arr[largest]\n            largest =\
    \ index\n            largestIndex = index\n        else\n            break\n \
    \       end\n    end\n    return largestIndex\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns true if the array arr has all\
    \ unique elements. \nThe function should work for any array type.", "    largest\
    \ = -1\n    largestIndex = 0\n    for index in 1:length(arr)\n        if arr[index]\
    \ > arr[largest]\n            largest = arr[index]\n            largestIndex =\
    \ index\n        end\n    end\n    return largestIndex\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns an array of all possible permutations\
    \ of the given array. For example, if the input was [1,2,3] then the output would\
    \ be [1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], and [3,2,1].", "    largest\
    \ = -1\n    largestIndex = 0\n    for index in 1:length(arr)\n        if arr[index]\
    \ <= arr[largest]\n            largest = arr[index]\n            largestIndex\
    \ = index\n        end\n    end\n    return largestIndex\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    largest = -1\n    largestIndex = 0\n    for index\
    \ in 1:length(arr)\n        if arr[index] > arr[largest]\n            largest\
    \ = arr[index]\n            largestIndex = index\n        end\n    end\n    return\
    \ largestIndex\nend\n</cell>\n<code language=julia-1.5>", "    largest = -1\n\
    \    for i in 1:length(arr)\n        if arr[i] > arr[largest]\n            largest\
    \ = i\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>",
  "    largest = -1\n    for i in 1:length(arr)\n        if arr[i] > largest\n   \
    \         largest = arr[i]\n        end\n    end\n    return largest\nend", " \
    \   largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@time can_arrange([1,2,4,3,5])\n</cell>\n\
    <code language=julia-1.5>\n@time can_arrange([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    @time can_arrange([1,2,4,3,5])\n</cell>\n<code language=julia-1.5>\n@time can_arrange([1,2,3])\n\
    </cell>\n<text>\nExercise\nWrite a function that returns the largest index of\
    \ an element which\n    is not greater than or equal to the element immediately\
    \ preceding it. If\n    no such element exists then return -1. The given array\
    \ will not contain\n    duplicate values.", "    largest = arr[1]\n    for i in\
    \ 2:length(arr)\n        if arr[i] > largest\n            largest = arr[i]\n \
    \       end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the index of the element in\
    \ the given array that is closest to the given number in the following way:",
  "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>", "    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        else\n   \
    \         return -1\n        end\n    end\n    return largest\nend\n</cell>\n\
    <code language=julia-1.5>", "    largest = arr[1]\n    largestIndex = -1\n   \
    \ for index in 2:length(arr)\n        if arr[index] > largest\n            largest\
    \ = arr[index]\n            largestIndex = index\n        end\n    end\n    return\
    \ largestIndex\nend\n</cell>\n<code language=julia-1.5>", "    largest = arr[1]\n\
    \    for i in 2:length(arr)\n        if arr[i] > largest\n            largest\
    \ = arr[i]\n        end\n    end\n    return largest\nend", "    largest = arr[1]\n\
    \    for i in 2:length(arr)\n        if arr[i] > largest\n            largest\
    \ = arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>",
  "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>", "    largest = arr[1]\n    for x in arr[2:end]\n\
    \        if x > largest\n            largest = x\n        end\n    end\n    return\
    \ largest\nend\n</cell>\n<text>\nExercise 4\nWrite a function that returns the\
    \ index of the element in the given array which\n    has the smallest value. If\
    \ there is no such element then return -1.", "    largest = arr[1]\n    for i\
    \ in 2:length(arr)\n        if arr[i] > largest\n            largest = arr[i]\n\
    \        end\n    end\n    return largest\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the index of the element in the given array that\
    \ is closest to the given value.", "    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.3>\n@assert can_arrange([1,2,4,3,5])\
    \ == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of times a given value occurs in an array.\
    \ For example,", "    largest = arr[1]\n    for i in 2:length(arr)\n        if\
    \ arr[i] > largest\n            largest = arr[i]\n        end\n    end\n    return\
    \ largest\nend\n</cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5])\
    \ == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n<text>\n4.3 Finding the index\
    \ of an element in a sorted array\nGiven a sorted array arr of n integers, return\
    \ the index if it exists and -1 if it does not. \nThe array arr will not be empty\
    \ and will not contain duplicate values.", "    largest = arr[1]\n    for i in\
    \ 2:length(arr)\n        if arr[i] > largest\n            largest = arr[i]\n \
    \       end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the index of the element in\
    \ the array which has the largest value greater than or equal to the element immediately\
    \ preceding it. Return -1 if no such element exists.", "    largest = arr[1]\n\
    \    for i in 2:length(arr)\n        if arr[i] > largest\n            largest\
    \ = arr[i]\n        else\n            return -1\n        end\n    end\n    return\
    \ largest\nend\n</cell>\n<code language=julia-1.5>", "    largest = arr[1]\n \
    \   for i in 2:length(arr)\n        if arr[i] > largest\n            largest =\
    \ arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>",
  "    largest = -1\n    for i in 1:length(arr)\n        if arr[i] > largest\n   \
    \         largest = arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n\
    <text>\nQuestion 3\nWrite a function that returns true if the given array is sorted\
    \ in ascending order.", "    largest = -1\n    largestIndex = 0\n    for index\
    \ in 1:length(arr)\n        if arr[index] > arr[largest]\n            largest\
    \ = arr[index]\n            largestIndex = index\n        end\n    end\n    return\
    \ largestIndex\nend\n</cell>\n<code language=julia-1.5>", "    largest = Int64(-1)\n\
    \    largest = arr[1] if arr[1] > largest else largest\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.4>", "    largest =\
    \ arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n          \
    \  largest = arr[i]\n        else\n            return -1\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.4>", "    largest =\
    \ -1\n    for i in 1:length(arr)\n        if arr[i] > arr[largest]\n         \
    \   largest = i\n        end\n    end\n    return largest\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    largest = -1\n    largestIndex = -1\n    for index\
    \ in 1:length(arr)\n        if arr[index] > arr[largest]\n            largest\
    \ = arr[index]\n            largestIndex = index\n        end\n    end\n    return\
    \ largestIndex\nend\n</cell>\n<text>\nQuestion 3\nWrite a function that returns\
    \ the index of the element in the given array that is closest to the given value.\
    \ If no such element exists then return -1. The given array will not contain duplicate\
    \ values.", "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i]\
    \ > largest\n            largest = arr[i]\n        end\n    end\n    return largest\n\
    end\n</cell>\n<code language=julia-1.0>\n@time can_arrange([1,2,4,3,5])\n</cell>\n\
    <code language=julia-1.0>\n@time can_arrange([1,2,3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the index of the element in the given array\
    \ that is the\nlargest and also not greater than the element immediately preceding\
    \ it. Return -1\nif no such element exists.", "    largest = -1\n    largestIndex\
    \ = 0\n    for index in 1:length(arr)\n        if arr[index] > arr[largest]\n\
    \            largest = arr[index]\n            largestIndex = index\n        end\n\
    \    end\n    return largestIndex\nend\n</cell>\n<code language=julia-1.4>\n\"\
    \"\"\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n\"\"\"",
  "    largest = -1\n    largestIndex = 0\n    for index in 1:length(arr)\n      \
    \  if arr[index] > arr[largest]\n            largest = arr[index]\n          \
    \  largestIndex = index\n        end\n    end\n    return largestIndex\nend\n\
    </cell>\n<code language=julia-1.5>", "    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        else\n   \
    \         return -1\n        end\n    end\n    return largest\nend", "    largest\
    \ = arr[1]\n    for x in arr[2:end]\n        if x <= largest\n            largest\
    \ = x\n        else\n            break\n    end\n    return largest\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3])\
    \ == -1\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of times an element appears in an array. For example, the number of times 3\
    \ appears in [1,2,3,4,3] is 3.", "    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector and returns the number of unique elements in it. \nThe vector can contain\
    \ duplicates.", "    largest = arr[1]\n    for i in 2:length(arr)\n        if\
    \ arr[i] > largest\n            largest = arr[i]\n        end\n    end\n    return\
    \ largest\nend\n</cell>\n<text>\nProblem 4\nWrite a function that returns the\
    \ number of elements in a vector which are not equal to zero.", "    largest =\
    \ arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n          \
    \  largest = arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector and returns the number\
    \ of unique elements in the vector. \nIf there are multiple elements that are\
    \ the same, only count the element once.", "    largest = arr[1]\n    for i in\
    \ 2:length(arr)\n        if arr[i] > largest\n            largest = arr[i]\n \
    \       end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>",
  "    largest = -1\n    largestIndex = -1\n    for index in 1:length(arr)\n     \
    \   if arr[index] <= arr[largest]\n            largest = arr[index]\n        \
    \    largestIndex = index\n        else\n            break\n        end\n    end\n\
    \    return largestIndex\nend\n</cell>\n<code language=julia-1.5>", "    largest\
    \ = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n        \
    \    largest = arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3])\
    \ == -1\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number\
    \ of elements in a vector that are greater than or equal to some value.", "  \
    \  largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert\
    \ can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of elements in a vector which are not equal to zero.", " \
    \   largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<text>\nQ: What is the largest index of an element which is not greater\
    \ than or equal to the element immediately preceding it?", "    largest = arr[1]\n\
    \    for i in 2:length(arr)\n        if arr[i] > largest\n            largest\
    \ = arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a vector and returns the number of unique elements\
    \ in the vector. \nThe vector will not contain duplicate values.", "    largest\
    \ = -1\n    largestIndex = 0\n    for index in 1:length(arr)\n        if arr[index]\
    \ > arr[largest]\n            largest = arr[index]\n            largestIndex =\
    \ index\n        end\n    end\n    return largestIndex\nend\n</cell>\n<code language=julia-1.5>",
  "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend",
  "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of elements\
    \ in a vector which are greater than\nor equal to another given element. For example,",
  "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.0>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert\
    \ can_arrange([1,2,3]) == -1\n</cell>\n<text>\n4.3 Finding the median of an array\n\
    The median is the value separating the higher half of a data set from the lower\
    \ half. \nThe median of a data set is the value separating the higher half of\
    \ a data set from the lower half. \nThe median of a data set is the value separating\
    \ the higher half of a data set from the lower half. \nThe median of a data set\
    \ is the value separating the higher half of a data set from the lower half. \n\
    The median of a data set is the value separating the higher half of a data set\
    \ from the lower half. \nThe median of a data set is the value separating the\
    \ higher half of a data set from the lower half. \nThe median of a data set is\
    \ the value separating the higher half of a data set from the lower half. \nThe\
    \ median of a data set is the value separating the higher half of a data set from\
    \ the lower half. \nThe median of a data set is the value separating the higher\
    \ half of a data set from the lower half. \nThe median of a data set is the value\
    \ separating the higher half of a data set from the lower half. \nThe median of\
    \ a data set is the value separating the higher half of a data set from the lower\
    \ half. \nThe median of a data set is the value separating the higher half of\
    \ a data set from the lower half. \nThe median of a data set is the value separating\
    \ the higher half of a data set from the lower half. \nThe median of a data set\
    \ is the value separating the higher half of a data set from the lower half. \n\
    The median of a data set is the value separating the higher half of a data set\
    \ from the lower half. \nThe median of a data set is the value separating the\
    \ higher half of a data set from the lower half. \nThe median of a data set is\
    \ the value separating the higher half of a data set from the lower half. \nThe\
    \ median of a data set is the value separating the higher half of a data set from\
    \ the lower half. \nThe median of a data set is the value separating the higher\
    \ half of a data set from the lower half. \nThe median of a data set is the value\
    \ separating the higher half of a data set from the lower half. \nThe median of\
    \ a data set is the value separating the higher half of a data set from the lower\
    \ half. \nThe median of a data set is the value separating the higher half of\
    \ a data set from the lower half. \nThe median of a data set is the value separating\
    \ the higher half of a data ", "    largest = arr[1]\n    for x in arr[2:end]\n\
    \        if x > largest\n            largest = x\n        end\n    end\n    return\
    \ largest\nend\n</cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5])\
    \ == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns true if the given array contains no duplicates. \nThe\
    \ given array will not contain duplicate values.", "    largest = -1\n    largestIndex\
    \ = 0\n    for index in 1:length(arr)\n        if arr[index] > arr[largest]\n\
    \            largest = arr[index]\n            largestIndex = index\n        end\n\
    \    end\n    return largestIndex\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns true if the array arr has all\
    \ unique elements. \nIf it does not, then return false. \nThe given array will\
    \ not contain duplicate values.", "    largest = -1\n    for x in arr\n      \
    \  if x > largest\n            largest = x\n        end\n    end\n    return largest\n\
    end\n</cell>\n<code language=julia-1.5>", "    largest = arr[1]\n    for i in\
    \ 2:length(arr)\n        if arr[i] > largest\n            largest = arr[i]\n \
    \       end\n    end\n    return largest\nend", "    largest = arr[1]\n    for\
    \ i in 2:length(arr)\n        if arr[i] > largest\n            largest = arr[i]\n\
    \        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>",
  "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend",
  "    largest = -1\n    largestIndex = 0\n    for index in 1:length(arr)\n      \
    \  if arr[index] <= arr[largest]\n            largest = index\n        else\n\
    \            largestIndex = index\n        end\n    end\n    return largestIndex\n\
    end\n</cell>\n<code language=julia-1.5>", "    largest = arr[1]\n    for i in\
    \ 2:length(arr)\n        if arr[i] > largest\n            largest = arr[i]\n \
    \       end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>",
  "    largest = -1\n    largestIndex = 0\n    for i = 1:length(arr)\n        if arr[i]\
    \ > arr[largest]\n            largest = arr[i]\n            largestIndex = i\n\
    \        end\n    end\n    return largestIndex\nend\n</cell>\n<code language=julia-1.5>\n\
    @time can_arrange([1,2,4,3,5])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of times an element appears in an array. \nThe given\
    \ array will not contain duplicate values.", "    largest = -1\n    largestIndex\
    \ = -1\n    for index in 1:length(arr)\n        if arr[index] > arr[largest]\n\
    \            largest = arr[index]\n            largestIndex = index\n        end\n\
    \    end\n    return largestIndex\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the index of the first element in a vector that is greater than\
    \ or equal to the element immediately preceding it. Return -1 if no such element\
    \ exists.", "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i]\
    \ > largest\n            largest = arr[i]\n        end\n    end\n    return largest\n\
    end\n</cell>\n<code language=julia-1.5>", "    largest = arr[1]\n    largestIndex\
    \ = 1\n    for index in 2:length(arr)\n        if arr[index] > largest\n     \
    \       largest = arr[index]\n            largestIndex = index\n        end\n\
    \    end\n    return largestIndex\nend\n</cell>\n<code language=julia-1.5>", " \
    \   largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend",
  "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<text>\nExercise 4\nWrite a function that returns the index of the element\
    \ in the given array which has the largest value. The given array will not contain\
    \ duplicate values.", "    largest = arr[1]\n    for i in 2:length(arr)\n    \
    \    if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.5>", "    largest =\
    \ -1\n    for x in arr\n        if x > largest\n            largest = x\n    \
    \    end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of elements in the\
    \ array which are not equal to its index.", "    largest = arr[1]\n    for i in\
    \ 2:length(arr)\n        if arr[i] > largest\n            largest = arr[i]\n \
    \       end\n    end\n    return largest\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns true if the given array contains no duplicates.", " \
    \   largest = -1\n    largestIndex = 0\n    for index in 1:length(arr)\n     \
    \   if arr[index] > arr[largest]\n            largest = arr[index]\n         \
    \   largestIndex = index\n        end\n    end\n    return largestIndex\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns true if the array arr\
    \ has all unique elements. \nIf it does not, then return false. \nThe given array\
    \ will not contain duplicate values.", "    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.5>", "    largest =\
    \ arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n          \
    \  largest = arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n\
    <code language=julia-1.3>", "    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        else\n   \
    \         return -1\n        end\n    end\n    return largest\nend", "    largest\
    \ = -1\n    largestIndex = 0\n    for i = 1:length(arr)\n        if arr[i] > arr[largest]\n\
    \            largest = arr[i]\n            largestIndex = i\n        end\n   \
    \ end\n    return largestIndex\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns true if the given array contains\
    \ no duplicates.", "    largest = -1\n    largestIndex = 0\n    for i = 1:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n            largestIndex\
    \ = i\n        end\n    end\n    return largestIndex\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of unique elements\
    \ in a given array.", "    largest = -1\n    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.5>", "    largest =\
    \ -1\n    largestIndex = 0\n    for index in 1:length(arr)\n        if arr[index]\
    \ > arr[largest]\n            largest = arr[index]\n            largestIndex =\
    \ index\n        end\n    end\n    return largestIndex\nend\n</cell>\n<code language=julia-1.5>",
  "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@time can_arrange(arr);\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of unique elements in a given\
    \ array.", "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i]\
    \ > largest\n            largest = arr[i]\n        end\n    end\n    return largest\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number of\
    \ times an element appears in an array. For example, the array [1,2,2,3,3,4,4,5,5,5,5,5,6]\
    \ contains 3 2's and 6 3's. Write a function that returns the number of times\
    \ an element appears in an array. For example, the array [1,2,2,3,3,4,4,5,5,5,5,5,5,6]\
    \ contains 3 2's and 6 3's. Write a function that returns the number of times\
    \ an element appears in an array. For example, the array [1,2,2,3,3,4,4,5,5,5,5,5,5,6]\
    \ contains 3 2's and 6 3's. Write a function that returns the number of times\
    \ an element appears in an array. For example, the array [1,2,2,3,3,4,4,5,5,5,5,5,5,6]\
    \ contains 3 2's and 6 3's. Write a function that returns the number of times\
    \ an element appears in an array. For example, the array [1,2,2,3,3,4,4,5,5,5,5,5,5,6]\
    \ contains 3 2's and 6 3's. Write a function that returns the number of times\
    \ an element appears in an array. For example, the array [1,2,2,3,3,4,4,5,5,5,5,5,5,6]\
    \ contains 3 2's and 6 3's. Write a function that returns the number of times\
    \ an element appears in an array. For example, the array [1,2,2,3,3,4,4,5,5,5,5,5,5,6]\
    \ contains 3 2's and 6 3's. Write a function that returns the number of times\
    \ an element appears in an array. For example, the array [1,2,2,3,3,4,4,5,5,5,5,5,5,6]\
    \ contains 3 2's and 6 3's. Write a function that returns the number of times\
    \ an element appears in an array. For example, the array [1,2,2,3,3,4,4,5,5,5,5,5,5,6]\
    \ contains 3 2's and 6 3's. Write a function that returns the number of times\
    \ an element appears in an array. For example, the array [1,2,2,3,3,4,4,5,5,5,5,5,5,6]\
    \ contains 3 2's and 6 3's. Write a function that returns the number of times\
    \ an element appears in an array. For example, the array [1,2,2,3,3,4,4,5,5,5,5,5,5,6]\
    \ contains 3 2's and 6 3's. Write a function that returns the number of times\
    \ an element appears in an array. For example, the array [1,2,2,3,3,4,4,5,5,5,5,5,5,6]\
    \ contains 3 2's and 6 3's. Write a function that returns the number of times\
    \ an element appears in an ", "    largest = -1\n    for x in arr\n        if\
    \ x > largest\n            largest = x\n        end\n    end\n    return largest\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n\
    @assert can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of elements in the array which are not greater than\
    \ or equal to the element immediately preceding it. No duplicate values should\
    \ be considered.", "    largest = -1\n    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.5>", "    largest =\
    \ arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n          \
    \  largest = arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n\
    <code language=julia-1.4>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3])\
    \ == -1\n</cell>\n<text>\nExercise 4\nWrite a function that returns the number\
    \ of elements in the array which are not equal to its second element. For example,\
    \ if the array is [1,2,3,4,5] then your function should return 3 because there\
    \ are 3 elements in the array which are not equal to 2.", "    largest = arr[1]\n\
    \    for i in 2:length(arr)\n        if arr[i] > largest\n            largest\
    \ = arr[i]\n        end\n    end\n    return largest\nend", "    largest = arr[1]\n\
    \    for i in 2:length(arr)\n        if arr[i] > largest\n            largest\
    \ = arr[i]\n        end\n    end\n    return largest\nend", "    largest = -1\n\
    \    for x in arr\n        if x > largest\n            largest = x\n        end\n\
    \    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of unique elements\
    \ in a given array. \nThe function should work for both vectors and matrices.",
  "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>", "    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        else\n   \
    \         return -1\n        end\n    end\n    return largest\nend\n</cell>\n\
    <code language=julia-1.4>", "    largest = -1\n    largestIndex = 0\n    for index\
    \ in 1:length(arr)\n        if arr[index] > arr[largest]\n            largest\
    \ = arr[index]\n            largestIndex = index\n        end\n    end\n    return\
    \ largestIndex\nend\n</cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5])\
    \ == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the number of times the given element appears in an\
    \ array. For example, the number of times 5 appears in [1,2,3,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,",
  "    largest = Int64(-1)\n    largest = arr[1]\n    for x in arr[2:end]\n      \
    \  if x <= largest\n            largest = x\n        else\n            break\n\
    \    end\n    return largest\nend", "    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend", "    largest = Int64(-1)\n    for x in arr\n      \
    \  if x > largest\n            largest = x\n        end\n    end\n    return largest\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n\
    @assert can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of elements in a vector that are less than a given value.",
  "    largest = -1\n    for x in arr\n        if x > largest\n            largest\
    \ = x\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of times an element\
    \ appears in an array. For example, the number of times 3 appears in [1,2,3,4,3,5,6,7,8,9]\
    \ would be 3. Do not use any built-in Julia functions.", "    largest = arr[1]\n\
    \    for i in 2:length(arr)\n        if arr[i] > largest\n            largest\
    \ = arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the index of the element in\
    \ the given array that is the\nlargest amongst all the elements in the given array.\
    \ If there are multiple elements with\nthe largest value, then return any one\
    \ of them. If there are no elements with the\nlargest value, then return -1.",
  "    largest = arr[1]\n    for x in arr[2:end]\n        if x <= largest\n      \
    \      largest = x\n        else\n            break\n    end\n    return largest\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n\
    @assert can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns true if the array arr has all unique elements and false otherwise.\
    \ For example", "    largest = arr[1]\n    for i in 2:length(arr)\n        if\
    \ arr[i] > largest\n            largest = arr[i]\n        end\n    end\n    return\
    \ largest\nend\n</cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5])\
    \ == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of elements in the array which are not equal\
    \ to its \nindex. For example, if the array is [1,2,3,4,5] then the function should\
    \ return 3.", "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i]\
    \ > largest\n            largest = arr[i]\n        end\n    end\n    return largest\n\
    end\n</cell>\n<code language=julia-1.5>", "    largest = arr[1]\n    for i in\
    \ 2:length(arr)\n        if arr[i] > largest\n            largest = arr[i]\n \
    \       end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of times each element\
    \ appears in an array.", "    largest = arr[1]\n    for i in 2:length(arr)\n \
    \       if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the index of the element in the array which is closest to the given value. If\
    \ there are multiple elements with the same distance then return the smallest\
    \ index.", "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i]\
    \ > largest\n            largest = arr[i]\n        end\n    end\n    return largest\n\
    end\n</cell>\n<code language=julia-1.5>", "    largest = arr[1]\n    largestIndex\
    \ = 1\n    for index in 2:length(arr)\n        if arr[index] > largest\n     \
    \       largest = arr[index]\n            largestIndex = index\n        end\n\
    \    end\n    return largestIndex\nend\n</cell>\n<code language=julia-1.5>", " \
    \   largest = -1\n    largestIndex = -1\n    for index in 1:length(arr)\n    \
    \    if arr[index] <= arr[largest]\n            largest = arr[index]\n       \
    \     largestIndex = index\n        else\n            break\n        end\n   \
    \ end\n    return largestIndex\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the index of the element in the given array that is closest to\
    \ the given value. If there are multiple elements with the same value then return\
    \ the index of the first one. For example, if the given array is [1,2,3,4,5] and\
    \ you call closest_index([1,2,3,4,5],3) then the function should return 3.", " \
    \   largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>", "    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.5>", "    largest =\
    \ -1\n    largestIndex = 0\n    for index in 1:length(arr)\n        if arr[index]\
    \ > arr[largest]\n            largest = arr[index]\n            largestIndex =\
    \ index\n        end\n    end\n    return largestIndex\nend\n</cell>\n<code language=julia-1.5>",
  "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert\
    \ can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of times an element appears in an array. \nThe function should\
    \ work for both sorted and unsorted arrays.", "    largest = arr[1]\n    for i\
    \ in 2:length(arr)\n        if arr[i] > largest\n            largest = arr[i]\n\
    \        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n\
    <text>\n4.3 Finding the first index of an element which is not greater than or\
    \ equal to it\nWrite a function that returns the index of the first element of\
    \ an array which\nis not greater than or equal to the element given as input.\
    \ If such element does\nnot exist then return -1. The given array will not contain\
    \ duplicate values.", "    largest = arr[1]\n    for i in 2:length(arr)\n    \
    \    if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.3>\n@assert can_arrange([1,2,4,3,5])\
    \ == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the number of times the given element appears in an\
    \ array. For example, the number of times 3 appears in [1,2,3,4,5,6,7,8,9] would\
    \ be 3.", "    largest = -1\n    for i in 1:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert\
    \ can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of times the given element appears in an array. For example,\
    \ the element 3 appears twice in the array [1,2,3,4,3,5,6].", "    largest = arr[1]\n\
    \    for x in arr[2:end]\n        if x <= largest\n            largest = x\n \
    \       else\n            return -1\n        end\n    end\n    return largest\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that returns the index of the\
    \ element in the given array that is closest to the given value. The given array\
    \ will not contain duplicate values.", "    largest = arr[1]\n    for x in arr[2:end]\n\
    \        if x <= largest\n            largest = x\n        else\n            return\
    \ -1\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.3>\n\
    @assert can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of elements in a\
    \ vector which are not equal to zero.", "    largest = -1\n    for x in arr\n\
    \        if x > largest\n            largest = x\n        end\n    end\n    return\
    \ largest\nend", "    largest = arr[1]\n    largestIndex = 1\n    for index in\
    \ 2:length(arr)\n        if arr[index] > largest\n            largest = arr[index]\n\
    \            largestIndex = index\n        end\n    end\n    return largestIndex\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that returns the index of the\
    \ element in the given array that is closest to the given value. If no such element\
    \ exists then return -1. The given array will not contain duplicate values.",
  "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>", "    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.5>", "    largest =\
    \ arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n          \
    \  largest = arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns true if the array contains any\
    \ duplicates. \nWrite a function that returns true if the array contains any duplicates.\
    \ \nWrite a function that returns true if the array contains any duplicates. \n\
    Write a function that returns true if the array contains any duplicates. \nWrite\
    \ a function that returns true if the array contains any duplicates. \nWrite a\
    \ function that returns true if the array contains any duplicates. \nWrite a function\
    \ that returns true if the array contains any duplicates. \nWrite a function that\
    \ returns true if the array contains any duplicates. \nWrite a function that returns\
    \ true if the array contains any duplicates. \nWrite a function that returns true\
    \ if the array contains any duplicates. \nWrite a function that returns true if\
    \ the array contains any duplicates. \nWrite a function that returns true if the\
    \ array contains any duplicates. \nWrite a function that returns true if the array\
    \ contains any duplicates. \nWrite a function that returns true if the array contains\
    \ any duplicates. \nWrite a function that returns true if the array contains any\
    \ duplicates. \nWrite a function that returns true if the array contains any duplicates.\
    \ \nWrite a function that returns true if the array contains any duplicates. \n\
    Write a function that returns true if the array contains any duplicates. \nWrite\
    \ a function that returns true if the array contains any duplicates. \nWrite a\
    \ function that returns true if the array contains any duplicates. \nWrite a function\
    \ that returns true if the array contains any duplicates. \nWrite a function that\
    \ returns true if the array contains any duplicates. \nWrite a function that returns\
    \ true if the array contains any duplicates. \nWrite a function that returns true\
    \ if the array contains any duplicates. \nWrite a function that returns true if\
    \ the array contains any duplicates. \nWrite a function that returns true if the\
    \ array contains any duplicates. \nWrite a function that returns true if the array\
    \ contains any duplicates. \nWrite a function that returns true if the array contains\
    \ any duplicates. \nWrite a function that returns true if the array contains any\
    \ duplicates. \nWrite a function that returns true if the array contains any duplicates.\
    \ \nWrite a function that returns true if the array contains any duplicates. \n\
    Write a function that returns true if the array contains any duplicates. \nWrite\
    \ a function that returns true if the array contains any duplicates. \nWrite a\
    \ function that returns true if the array contains any duplicates. \nWrite a function\
    \ that returns true if the array contains any duplicates. \nWrite a function that\
    \ returns true if the array contains any duplicates. \nWrite a function that returns\
    \ true if the array contains any duplicates. \nWrite a function that returns true\
    \ if the array contains any duplicates. \nWrite a function that returns true if\
    \ the array contains any duplicate", "    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.5>", "    largest =\
    \ arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n          \
    \  largest = arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n\
    <code language=julia-1.5>", "    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of elements in a vector which are not greater than or equal to the\
    \ element immediately preceding it. \nIf no such element exists then return -1.\
    \ \nThe given array will not contain duplicate values.", "    largest = arr[1]\n\
    \    for i in 2:length(arr)\n        if arr[i] > largest\n            largest\
    \ = arr[i]\n        end\n    end\n    return largest\nend", "    largest = -1\n\
    \    largestIndex = 0\n    for index in 1:length(arr)\n        if arr[index] >\
    \ arr[largest]\n            largest = arr[index]\n            largestIndex = index\n\
    \        end\n    end\n    return largestIndex\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of times the given\
    \ element appears in an array. For example, the number of times 5 appears in [1,2,3,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,",
  "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert\
    \ can_arrange([1,2,3]) == -1\n</cell>\n<text>\n4.3 Find all elements of a vector\
    \ which satisfy a predicate", "    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        else\n   \
    \         return -1\n        end\n    end\n    return largest\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3])\
    \ == -1\n</cell>\n<text>\nExercise 3\nWrite a function that returns the index\
    \ of the element in the given array that\nhas the largest value greater than or\
    \ equal to the given element. If no\nsuch element exists then return -1. The given\
    \ array will not contain\nduplicate values.", "    largest = arr[1]\n    for i\
    \ in 2:length(arr)\n        if arr[i] > largest\n            largest = arr[i]\n\
    \        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>",
  "    largest = -1\n    largestIndex = 0\n    for index in 1:length(arr)\n      \
    \  if arr[index] > arr[largest]\n            largest = arr[index]\n          \
    \  largestIndex = index\n        end\n    end\n    return largestIndex\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the index of the element\
    \ in the given array which has the largest value.", "    largest = Int64(-1) #\
    \ initialize largest to -1\n    largest = arr[1] # set largest to the second element\n\
    \    for i in 2:length(arr) # loop over the rest of the elements\n        if arr[i]\
    \ > largest # if the current element is greater than the largest\n           \
    \ largest = arr[i] # then set largest to the current element\n        end\n  \
    \  end\n    return largest\nend\n</cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5])\
    \ == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of elements in the array that are\ngreater\
    \ than the given element.", "    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of times the element in the given array appears consecutively.",
  "    largest = -1\n    for el in arr\n        if el > largest\n            largest\
    \ = el\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>",
  "    largest = -1\n    largestIndex = 0\n    for index in 1:length(arr)\n      \
    \  if arr[index] > arr[largest]\n            largest = arr[index]\n          \
    \  largestIndex = index\n        end\n    end\n    return largestIndex\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert\
    \ can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of elements in a given array that are\nless than a given\
    \ value.", "    largest = arr[1]\n    largestIndex = -1\n    for index in 2:length(arr)\n\
    \        if arr[index] > largest\n            largest = arr[index]\n         \
    \   largestIndex = index\n        end\n    end\n    return largestIndex\nend\n\
    </cell>\n<code language=julia-1.5>", "    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5])\
    \ == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns true if the given array contains all unique elements.\
    \ \nFor example [1,2,2,3] returns true.", "    largest = arr[1]\n    for i in\
    \ 2:length(arr)\n        if arr[i] > largest\n            largest = arr[i]\n \
    \       end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.3>",
  "    largest = -1\n    for x in arr\n        if x > largest\n            largest\
    \ = x\n        end\n    end\n    return largest\nend", "    largest = -1\n   \
    \ largestIndex = 0\n    for index in 1:length(arr)\n        if arr[index] > arr[largest]\n\
    \            largest = arr[index]\n            largestIndex = index\n        end\n\
    \    end\n    return largestIndex\nend\n</cell>\n<code language=julia-1.5>", " \
    \   largest = -1\n    for x in arr\n        if x > largest\n            largest\
    \ = x\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns true if the array contains any\
    \ duplicates. For example:", "    largest = -1\n    largestIndex = 0\n    for\
    \ i = 1:length(arr)\n        if arr[i] > arr[largest]\n            largest = arr[i]\n\
    \            largestIndex = i\n        end\n    end\n    return largestIndex\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n\
    @assert can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of elements in a vector that are less than or equal\
    \ to some given value.", "    largest = arr[1]\n    for i in 2:length(arr)\n \
    \       if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.5>", "    largest =\
    \ arr[1]\n    largestIndex = -1\n    for index in 2:length(arr)\n        if arr[index]\
    \ > largest\n            largest = arr[index]\n            largestIndex = index\n\
    \        end\n    end\n    return largestIndex\nend\n</cell>\n<code language=julia-1.5>",
  "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.0>", "    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5])\
    \ == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of elements in a vector which are less than\
    \ a given value.", "    largest = arr[1]\n    for i in 2:length(arr)\n       \
    \ if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n  \
    \  return largest\nend\n</cell>\n<code language=julia-1.5>", "    largest = Int64(-1)\n\
    \    for x in arr\n        if x > largest\n            largest = x\n        end\n\
    \    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>", "    largest\
    \ = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n        \
    \    largest = arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n\
    <code language=julia-1.3>\n@time can_arrange([1,2,4,3,5])\n</cell>\n<code language=julia-1.3>\n\
    @time can_arrange([1,2,3])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of elements in a vector which are greater than or equal to\
    \ some value.", "    largest = arr[1]\n    for i in 2:length(arr)\n        if\
    \ arr[i] > largest\n            largest = arr[i]\n        end\n    end\n    return\
    \ largest\nend\n</cell>\n<code language=julia-1.5>", "    largest = arr[1]\n \
    \   for i in 2:length(arr)\n        if arr[i] > largest\n            largest =\
    \ arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.3>",
  "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@time can_arrange(arr)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of elements in the array\
    \ which are not greater than or equal to the element immediately preceding it.\
    \ Return 0 if no such element exists.", "    largest = -1\n    for x in arr\n\
    \        if x > largest\n            largest = x\n        end\n    end\n    return\
    \ largest\nend", "    largest = arr[1]\n    for i in 2:length(arr)\n        if\
    \ arr[i] > largest\n            largest = arr[i]\n        end\n    end\n    return\
    \ largest\nend\n</cell>\n<text>\nQuestion 3\nWrite a function that returns the\
    \ number of times an element appears in an array. \nThe given array will not contain\
    \ duplicate values.", "    largest = arr[1]\n    for x in arr[2:end]\n       \
    \ if x > largest\n            largest = x\n        end\n    end\n    return largest\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number of\
    \ elements in a vector that are not equal to zero.", "    largest = -1\n    largestIndex\
    \ = 0\n    for i = 1:length(arr)\n        if arr[i] > arr[largest]\n         \
    \   largest = arr[i]\n            largestIndex = i\n        end\n    end\n   \
    \ return largestIndex\nend\n</cell>\n<code language=julia-1.5>\n@time can_arrange([1,2,4,3,5])\n\
    </cell>\n<code language=julia-1.5>\n@time can_arrange([1,2,3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the index of the element in the given\
    \ array that\nhas the largest value less than or equal to the element immediately\
    \ preceding it.\nIf no such element exists then return -1. The given array will\
    \ not contain duplicate\nvalues.", "    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.5>", "    largest =\
    \ arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n          \
    \  largest = arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n\
    <code language=julia-1.5>", "    largest = -1\n    for i in 1:length(arr)\n  \
    \      if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend", "    largest = -1\n    for i in 1:length(arr)\n   \
    \     if arr[i] > arr[largest]\n            largest = i\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.0>", "    largest =\
    \ arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n          \
    \  largest = arr[i]\n        end\n    end\n    return largest\nend", "    largest\
    \ = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n        \
    \    largest = arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n\
    <code language=julia-1.0>", "    largest = Int64(-1)\n    for x in arr\n     \
    \   if x > largest\n            largest = x\n        end\n    end\n    return\
    \ largest\nend\n</cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5])\
    \ == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns an array of all possible permutations of the given array.\
    \ \nThe given array will not contain duplicate values.", "    largest = arr[1]\n\
    \    largestIndex = -1\n    for index in 2:length(arr)\n        if arr[index]\
    \ > largest\n            largest = arr[index]\n            largestIndex = index\n\
    \        end\n    end\n    return largestIndex\nend\n</cell>\n<code language=julia-1.4>",
  "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert\
    \ can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of elements in the array which are not greater than or equal\
    \ to the element immediately preceding it.", "    largest = arr[1]\n    for i\
    \ in 2:length(arr)\n        if arr[i] > largest\n            largest = arr[i]\n\
    \        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>",
  "    largest = -1\n    for i in 1:length(arr)\n        if arr[i] > largest\n   \
    \         largest = i\n        end\n    end\n    return largest\nend\n</cell>\n\
    <code language=julia-1.5>", "    largest = -1\n    largestIndex = 0\n    for i\
    \ = 1:length(arr)\n        if arr[i] > arr[largest]\n            largest = arr[i]\n\
    \            largestIndex = i\n        end\n    end\n    return largestIndex\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the index of the\
    \ element in the array that is\nclosest to the given value. If no such element\
    \ exists then return -1.", "    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.5>", "    largest =\
    \ Int64(-1)\n    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i]\
    \ > largest\n            largest = arr[i]\n        end\n    end\n    return largest\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns an array of all\
    \ positive integers less than or equal to $n$. \nFor example, given $n=5$, your\
    \ function should return [1,2,3,4,5]. \nThe function should return an array of\
    \ integers even if the input $n$ is not a positive integer.", "    largest = arr[1]\n\
    \    for i in 2:length(arr)\n        if arr[i] > largest\n            largest\
    \ = arr[i]\n        else\n            return -1\n        end\n    end\n    return\
    \ largest\nend\n</cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5])\
    \ == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n<text>\n4.3 Finding the median\
    \ of a vector\nWrite a function that returns the median of a vector. Your function\
    \ should run in $O(n)$ time.", "    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.5>", "    largest =\
    \ arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n          \
    \  largest = arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n\
    <code language=julia-1.3>", "    largest = -1\n    for x in arr\n        if x\
    \ > largest\n            largest = x\n        end\n    end\n    return largest\n\
    end\n</cell>\n<text>\nQ: What is the largest index of an element which is not\
    \ greater than or equal to the element immediately preceding it?", "    largest\
    \ = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n        \
    \    largest = arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n\
    <code language=julia-1.4>", "    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5])\
    \ == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n<text>\n4.3 Finding the number\
    \ of ways to arrange the elements of a given array\nWrite a function that takes\
    \ an array of integers and returns the number of ways to arrange the elements\
    \ of the array into groups of three or more.", "    largest = arr[1]\n    for\
    \ i in 2:length(arr)\n        if arr[i] > largest\n            largest = arr[i]\n\
    \        end\n    end\n    return largest\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of elements in the array which are not\
    \ equal to its first element.", "    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of elements in the array which are not greater than or equal to the\
    \ element immediately preceding it. Return 0 if no such element exists.", "  \
    \  largest = -1\n    for x in arr\n        if x > largest\n            largest\
    \ = x\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns true if the array arr has all\
    \ unique elements. \nIf there are two or more equal elements, return false.",
  "    largest = -1\n    for x in arr\n        if x > largest\n            largest\
    \ = x\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>",
  "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert\
    \ can_arrange([1,2,3]) == -1\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ returns the number of times the given element appears in an array. For example,\
    \ the number of times the value 3 appears in [1,2,3,4,5,6,7,8,9,10] would be 3.",
  "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert\
    \ can_arrange([1,2,3]) == -1\n</cell>\n<text>\n4.3 Finding the median of a vector\n\
    The median is the value separating the higher half of a data set from the lower\
    \ half. \nThe median of a data set is the value separating the higher half of\
    \ a data set from the \nlower half. \nThe median of a data set is the value separating\
    \ the higher half of a data set from the \nlower half. \nThe median of a data\
    \ set is the value separating the higher half of a data set from the \nlower half.\
    \ \nThe median of a data set is the value separating the higher half of a data\
    \ set from the \nlower half. \nThe median of a data set is the value separating\
    \ the higher half of a data set from the \nlower half. \nThe median of a data\
    \ set is the value separating the higher half of a data set from the \nlower half.\
    \ \nThe median of a data set is the value separating the higher half of a data\
    \ set from the \nlower half. \nThe median of a data set is the value separating\
    \ the higher half of a data set from the \nlower half. \nThe median of a data\
    \ set is the value separating the higher half of a data set from the \nlower half.\
    \ \nThe median of a data set is the value separating the higher half of a data\
    \ set from the \nlower half. \nThe median of a data set is the value separating\
    \ the higher half of a data set from the \nlower half. \nThe median of a data\
    \ set is the value separating the higher half of a data set from the \nlower half.\
    \ \nThe median of a data set is the value separating the higher half of a data\
    \ set from the \nlower half. \nThe median of a data set is the value separating\
    \ the higher half of a data set from the \nlower half. \nThe median of a data\
    \ set is the value separating the higher half of a data set from the \nlower half.\
    \ \nThe median of a data set is the value separating the higher half of a data\
    \ set from the \nlower half. \nThe median of a data set is the value separating\
    \ the higher half of a data set from the \nlower half. \nThe median of a data\
    \ set is the value separating the higher half of a data set from the \nlower half.\
    \ \nThe median of a data set is the value separating the higher half of a data\
    \ set from the \nlower half. \nThe median of a data set is the value separating\
    \ the higher half of a data set from the \nlower half. \nThe median of a data\
    \ set is the value separating the higher half of a ", "    largest = -1\n    for\
    \ x in arr\n        if x > largest\n            largest = x\n        end\n   \
    \ end\n    return largest\nend\n</cell>\n<code language=julia-1.3>\n@time can_arrange([1,2,4,3,5])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of elements\
    \ in a vector that are not equal to its index.", "    largest = -1\n    largestIndex\
    \ = 0\n    for index in 1:length(arr)\n        if arr[index] > arr[largest]\n\
    \            largest = arr[index]\n            largestIndex = index\n        end\n\
    \    end\n    return largestIndex\nend\n</cell>\n<code language=julia-1.4>", " \
    \   largest = arr[1]\n    for x in arr[2:end]\n        if x > largest\n      \
    \      largest = x\n        end\n    end\n    return largest\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    largest = arr[1]\n    for i in 2:length(arr)\n  \
    \      if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.5>", "    largest =\
    \ arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n          \
    \  largest = arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3])\
    \ == -1\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number\
    \ of elements in the array which are not greater than or equal to the element\
    \ immediately preceding it. \nIf no such element exists then return -1. \nThe\
    \ given array will not contain duplicate values.", "    largest = -1\n    largest\
    \ = arr[1] if arr[1] > arr[2] else largest\n    largest = arr[2] if arr[2] > arr[1]\
    \ else largest\n    largest = arr[1] if arr[1] > arr[2] else largest\n    largest\
    \ = arr[2] if arr[2] > arr[1] else largest\n    largest = arr[1] if arr[1] > arr[2]\
    \ else largest\n    largest = arr[2] if arr[2] > arr[1] else largest\n    largest\
    \ = arr[1] if arr[1] > arr[2] else largest\n    largest = arr[2] if arr[2] > arr[1]\
    \ else largest\n    largest = arr[1] if arr[1] > arr[2] else largest\n    largest\
    \ = arr[2] if arr[2] > arr[1] else largest\n    largest = arr[1] if arr[1] > arr[2]\
    \ else largest\n    largest = arr[2] if arr[2] > arr[1] else largest\n    largest\
    \ = arr[1] if arr[1] > arr[2] else largest\n    largest = arr[2] if arr[2] > arr[1]\
    \ else largest\n    largest = arr[1] if arr[1] > arr[2] else largest\n    largest\
    \ = arr[2] if arr[2] > arr[1] else largest\n    largest = arr[1] if arr[1] > arr[2]\
    \ else largest\n    largest = arr[2] if arr[2] > arr[1] else largest\n    largest\
    \ = arr[1] if arr[1] > arr[2] else largest\n    largest = arr[2] if arr[2] > arr[1]\
    \ else largest\n    largest = arr[1] if arr[1] > arr[2] else largest\n    largest\
    \ = arr[2] if arr[2] > arr[1] else largest\n    largest = arr[1] if arr[1] > arr[2]\
    \ else largest\n    largest = arr[2] if arr[2] > arr[1] else largest\n    largest\
    \ = arr[1] if arr[1] > arr[2] else largest\n    largest = arr[2] if arr[2] > arr[1]\
    \ else largest\n    largest = arr[1] if arr[1] > arr[2] else largest\n    largest\
    \ = arr[2] if arr[2] > arr[1] else largest\n    largest = arr[1] if arr[1] > arr[2]\
    \ else largest\n    largest = arr[2] if arr[2] > arr[1] else largest\n    largest\
    \ = arr[1] if arr[1] > arr[2] else largest\n    largest = arr[2] if arr[2] > arr",
  "    largest = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n        end\n    end\n    return largest\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns true if the given array\
    \ is sorted in ascending order.", "    largest = Int64(-1)\n    for x in arr\n\
    \        if x > largest\n            largest = x\n        end\n    end\n    return\
    \ largest\nend\n</cell>\n<code language=julia-1.3>", "    largest = arr[1]\n \
    \   for i in 2:length(arr)\n        if arr[i] > largest\n            largest =\
    \ arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>",
  "    largest = -1\n    for i in 1:length(arr)\n        if arr[i] > arr[largest]\n\
    \            largest = i\n        end\n    end\n    return largest\nend\n</cell>\n\
    <code language=julia-1.0>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3])\
    \ == -1\n</cell>\n<text>\nExercise 2\nWrite a function that returns true if the\
    \ given array contains no duplicates.", "    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        else\n   \
    \         return -1\n        end\n    end\n    return largest\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3])\
    \ == -1\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number\
    \ of times an element appears in an array. \nThe function should work for both\
    \ sorted and unsorted arrays.", "    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of elements in a vector that are not equal to zero.", "    largest\
    \ = -1\n    largestIndex = 0\n    for index in 1:length(arr)\n        if arr[index]\
    \ >= arr[largest]\n            largest = arr[index]\n            largestIndex\
    \ = index\n        end\n    end\n    return largestIndex\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    largest = -1\n    largestIndex = -1\n    for index\
    \ in 1:length(arr)\n        if arr[index] <= arr[largest]\n            largest\
    \ = arr[index]\n            largestIndex = index\n        end\n    end\n    return\
    \ largestIndex\nend", "    largest = arr[1]\n    for i in 2:length(arr)\n    \
    \    if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.5>", "    largest =\
    \ -1\n    largestIndex = -1\n    for i in 1:length(arr)\n        if arr[i] > largest\n\
    \            largest = arr[i]\n            largestIndex = i\n        end\n   \
    \ end\n    return largestIndex\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of unique elements\
    \ in an array. For example,\n    given [1,2,2,3] return 3.", "    largest = arr[1]\n\
    \    for i in 2:length(arr)\n        if arr[i] > largest\n            largest\
    \ = arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>",
  "    largest = -1\n    for x in arr\n        if x > largest\n            largest\
    \ = x\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert can_arrange([1,2,4,3,5]) == 3\n@assert can_arrange([1,2,3]) == -1\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of times the element\
    \ 0 appears in an array. For example, [1,0,2,0,3,0] has two zeros.", "    largest\
    \ = -1\n    for x in arr\n        if x > largest\n            largest = x\n  \
    \      end\n    end\n    return largest\nend", "    largest = -1\n    for x in\
    \ arr\n        if x > largest\n            largest = x\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.3>\n@time can_arrange([1,2,4,3,5])\n\
    </cell>\n<text>\nExercise\nWrite a function that returns the largest index of\
    \ an element which is not greater than or equal to the element immediately preceding\
    \ it. If\n    no such element exists then return -1. The given array will not\
    \ contain\n    duplicate values.", "    largest = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > largest\n            largest = arr[i]\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.4>", "    largest =\
    \ arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n          \
    \  largest = arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n\
    <code language=julia-1.5>\n@time can_arrange([1,2,4,3,5])\n</cell>\n<code language=julia-1.5>\n\
    @time can_arrange([1,2,3])\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the index of the element in the given array that is closest to the given value.\
    \ If there are multiple such elements then return the smallest index.", "    largest\
    \ = arr[1]\n    for i in 2:length(arr)\n        if arr[i] > largest\n        \
    \    largest = arr[i]\n        end\n    end\n    return largest\nend\n</cell>\n\
    <code language=julia-1.5>\n@time can_arrange([1,2,4,3,5])\n</cell>\n<code language=julia-1.5>\n\
    @time can_arrange([1,2,3])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of times the given element appears in an array. \nThe given\
    \ array will not contain duplicate values.", "    largest = arr[1]\n    for i\
    \ in 2:length(arr)\n        if arr[i] > largest\n            largest = arr[i]\n\
    \        end\n    end\n    return largest\nend\n</cell>\n<text>\nExercise 4\n\
    Write a function that returns the number of elements in a vector which are not\
    \ equal to zero."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
