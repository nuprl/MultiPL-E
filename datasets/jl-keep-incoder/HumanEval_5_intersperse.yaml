name: HumanEval_5_intersperse
language: julia
prompt: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
  \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
  \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
  \ delimeter::Int64)::Vector{Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
  \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3,\
  \ 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
completions: ["    numbers = numbers[:]\n    numbers = numbers[2:end-1].+delimeter+numbers[2:end]\n\
    \    return numbers\nend\n</cell>\n<code language=julia-1.5>", "    numbers =\
    \ numbers[:]\n    numbers = numbers[2:end-1] .+ [delimeter] .+ numbers[2:end]\n\
    \    return numbers\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia |>\n<code>",
  "    \n    numbers = numbers[:]\n    \n    i = 0\n    \n    while i < length(numbers)\n\
    \        \n        if numbers[i] != 0\n            \n            numbers[i+1:i+2]\
    \ = [numbers[i], delimeter]\n            \n            i += 2\n            \n\
    \        else\n            \n            numbers[i+1:i+1] = [numbers[i]]\n   \
    \         \n            i += 1\n        end\n    end\n    \n    return numbers\n\
    end\n</cell>\n<code language=julia-1.5>", "    if length(numbers) == 0\n     \
    \   return numbers\n    \n    numbers = numbers[2:end]\n    \n    numbers = intersperse(numbers,\
    \ delimeter)\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n  \
    \  numbers = numbers[1:end-1]", "    \n    numbers = numbers[:]\n    \n    if\
    \ length(numbers) == 0\n        return numbers\n    end\n    \n    numbers = numbers[:]\n\
    \    \n    if length(numbers) == 0\n        return numbers\n    end\n    \n  \
    \  numbers = numbers[:]\n    \n    if length(numbers) == 0\n        return numbers\n\
    \    end\n    \n    numbers = numbers[:]\n    \n    if length(numbers) == 0\n\
    \        return numbers\n    end\n    \n    numbers = numbers[:]\n    \n    if\
    \ length(numbers) == 0\n        return numbers\n    end\n    \n    numbers = numbers[:]\n\
    \    \n    if length(numbers) == 0\n        return numbers\n    end\n    \n  \
    \  numbers = numbers[:]\n    \n    if length(numbers) == 0\n        return numbers\n\
    \    end\n    \n    numbers = numbers[:]\n    \n    if length(numbers) == 0\n\
    \        return numbers\n    end\n    \n    numbers = numbers[:]\n    \n    if\
    \ length(numbers) == 0\n        return numbers\n    end\n    \n    numbers = numbers[:]\n\
    \    \n    if length(numbers) == 0\n        return numbers\n    end\n    \n  \
    \  numbers = numbers[:]\n    \n    if length(numbers) == 0\n        return numbers\n\
    \    end\n    \n    numbers = numbers[:]\n    \n    if length(numbers) == 0\n\
    \        return numbers\n    end\n    \n    numbers = numbers[:]\n    \n    if\
    \ length(numbers) == 0\n        return numbers\n    end\n    \n    numbers = numbers[:]\n\
    \    \n    if length(numbers) == 0\n        return numbers\n    end\n    \n  \
    \  numbers = numbers[:]\n    \n    if length(numbers) == 0\n        return numbers\n\
    \    end\n    \n    numbers = numbers[:]\n    \n    if length(numbers) == 0\n\
    \        return numbers\n    end\n    \n    numbers = numbers[:]\n    \n    if\
    \ length(numbers) == 0\n        return numbers\n    end\n    \n    numbers = numbers[:]\n\
    \    \n    if length(numbers) == 0\n        return numbers\n    end\n    \n  \
    \  numbers = numbers[:]\n    \n    if length(numbers) == 0\n        return numbers\n\
    \    end\n    \n    numbers = numbers[:]\n    \n    if length(numbers) == 0\n\
    \        return numbers\n    end\n    \n    numbers = numbers[:]\n    \n    if\
    \ length(numbers) == 0\n        return numbers\n    end\n    \n    numbers = numbers[:]\n\
    \    \n    if length(numbers) == 0\n        return numbers\n    end\n    \n  \
    \  numbers = numbers[:]\n    \n    if length(numbers) == 0\n        return numbers\n\
    \    end\n    \n    numbers = number", "    if length(numbers) == 0\n        return\
    \ numbers\n    \n    numbers = numbers[2:end]\n    \n    numbers = intersperse(numbers,\
    \ delimeter)\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]", "    \n  \
    \  numbers = numbers[:]\n    \n    if length(numbers) == 0\n        return numbers\n\
    \    end\n    \n    numbers = numbers[2:end]\n    \n    if length(numbers) ==\
    \ 0\n        return numbers\n    end\n    \n    numbers = numbers[1:end-1]\n \
    \   \n    if length(numbers) == 0\n        return numbers\n    end\n    \n   \
    \ numbers = numbers[2:end-1]\n    \n    if length(numbers) == 0\n        return\
    \ numbers\n    end\n    \n    numbers = numbers[1:end-2]\n    \n    if length(numbers)\
    \ == 0\n        return numbers\n    end\n    \n    numbers = numbers[2:end-2]\n\
    \    \n    if length(numbers) == 0\n        return numbers\n    end\n    \n  \
    \  numbers = numbers[1:end-3]\n    \n    if length(numbers) == 0\n        return\
    \ numbers\n    end\n    \n    numbers = numbers[2:end-3]\n    \n    if length(numbers)\
    \ == 0\n        return numbers\n    end\n    \n    numbers = numbers[1:end-4]\n\
    \    \n    if length(numbers) == 0\n        return numbers\n    end\n    \n  \
    \  numbers = numbers[2:end-4]\n    \n    if length(numbers) == 0\n        return\
    \ numbers\n    end\n    \n    numbers = numbers[1:end-5]\n    \n    if length(numbers)\
    \ == 0\n        return numbers\n    end\n    \n    numbers = numbers[2:end-5]\n\
    \    \n    if length(numbers) == 0\n        return numbers\n    end\n    \n  \
    \  numbers = numbers[1:end-6]\n    \n    if length(numbers) == 0\n        return\
    \ numbers\n    end\n    \n    numbers = numbers[2:end-6]\n    \n    if length(numbers)\
    \ == 0\n        return numbers\n    end\n    \n    numbers = numbers[1:end-7]\n\
    \    \n    if length(numbers) == 0\n        return numbers\n    end\n    \n  \
    \  numbers = numbers[2:end-7]\n    \n    if length(numbers) == 0\n        return\
    \ numbers\n    end\n    \n    numbers = numbers[1:end-8]\n    \n    if length(numbers)\
    \ == 0\n        return numbers\n    end\n    \n    numbers = numbers[2:end-8]\n\
    \    \n    if length(numbers) == 0\n        return numbers\n    end\n    \n  \
    \  numbers = numbers[1:end-9]\n    \n    if length(numbers) == 0\n        return\
    \ numbers\n    end\n    \n    numbers = numbers[2:end-9]\n    \n    if length(numbers)\
    \ == 0\n        return numbers\n    end\n    \n    numbers = numbers[1:end-10]\n\
    \    \n    if length(numbers) == 0\n        return numbers\n    end\n    \n  \
    \  numbers = number", "    if length(numbers) < 2\n        return numbers\n  \
    \  \n    numbers = numbers[2:end]\n    \n    numbers = intersperse(numbers, delimeter)\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]", "    numbers = numbers[:]\n\
    \    numbers = numbers[2:end-1] .+ [delimeter] .+ numbers[2:end]\n    return numbers\n\
    end\n</cell>\n<code language=julia-1.4>\nintersperse([1, 2, 3], 4)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ the sum of the squares of the integers in the vector.", "    if length(numbers)\
    \ == 0\n        return numbers\n    \n    numbers = numbers[2:end]\n    \n   \
    \ numbers = intersperse(numbers, delimeter)\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers + [numbers[1]]\n    \n    return numbers\nend\n</cell>\n\
    <code language=julia-1.3>\nintersperse([1, 2, 3], 4)\n</cell>\n<code language=julia-1.3>",
  "    if length(numbers) < 2\n        return numbers\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = intersperse(numbers, delimeter)\n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[1:end-1]\n    numbers = [numbers[1], delimeter, numbers...]\n\
    \    \n    return numbers\nend", "    numbers = numbers[:]\n    numbers[2:end]\
    \ = numbers[2:end] .+ delimeter\n    return numbers\nend\n</cell>\n<code language=julia-1.5>",
  "    numbers = numbers[:]\n    numbers[2:end] = numbers[2:end] + delimeter * ones(1,\
    \ length(numbers[2:end]))\n    return numbers\nend\n</code>\n<|/ a |>\n<| c |>\n\
    This doesn't work for me. `intersperse([1, 2, 3], 4)` returns `[1, 4, 2, 4, 3]`\
    \ instead of `[1, 4, 2, 4, 4, 3]`\n<|/ c |>\n<| c |>\nI tested it and it works.\
    \ I used Julia v0.6.0-pre.\n<|/ c |>\n<| c |>\nI tested it again and it works.\
    \ I used Julia v0.6.0-pre.\n<|/ c |>\n<| c |>\nI tested it again and it works.\
    \ I used Julia v0.6.0-pre.\n<|/ c |>\n<| c |>\nI tested it again and it works.\
    \ I used Julia v0.6.0-pre.\n<|/ c |>\n<| a dscore=3 |>\nA simple and efficient\
    \ solution:\n<code>", "    if length(numbers) < delimeter\n        return numbers\n\
    \    \n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers\
    \ = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = number", "    if length(numbers) < delimeter \n        numbers\
    \ = numbers[:]\n    end\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = ", "    if length(numbers)\
    \ == 0\n        numbers\n    elseif length(numbers) == 1\n        [numbers[1]]\n\
    \    else\n        numbers[2:end-1] .+ [delimeter, numbers[end]]\n    end\nend\n\
    </code>\n<|/ a |>\n<| c |>\nThis doesn't work for `intersperse([1,2,3], 4)` which\
    \ should return `[1, 4, 2, 4]`.\n<|/ c |>\n<| c |>\nYes, I missed that case. Thanks\
    \ for pointing it out. I've updated my answer.\n<|/ c |>\n<| a tags=julia |>\n\
    <code>\nintersperse(xs, d) = [xs[end], d] + xs[2:end-1]\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=julia |>\n<code>", "    if length(numbers) == 0\n        numbers\n\
    \    else\n        numbers[2:end-1] .+ [delimeter, numbers[1]] .+ numbers[2:end]\n\
    \    end\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia |>\nI came up with\
    \ a solution that is quite similar to what has suggested, but I wanted to share\
    \ it here in case it helps someone else.\n<code>", "    if length(numbers) <=\
    \ 1\n        return numbers\n    end\n    \n    numbers = numbers[2:end]\n   \
    \ \n    numbers = numbers[1:end-1] .+ [delimeter] .+ numbers[2:end]\n    \n  \
    \  return numbers\nend\n</cell>\n<code language=julia-1.5>\n@time intersperse([1,2,3],\
    \ 4)\n</cell>\n<code language=julia-1.5>\n@time intersperse([1,2,3], 4)\n</cell>\n\
    <code language=julia-1.5>\n@time intersperse([1,2,3], 4)\n</cell>\n<code language=julia-1.5>\n\
    @time intersperse([1,2,3], 4)\n</cell>\n<code language=julia-1.5>\n@time intersperse([1,2,3],\
    \ 4)\n</cell>\n<code language=julia-1.5>\n@time intersperse([1,2,3], 4)\n</cell>\n\
    <code language=julia-1.5>\n@time intersperse([1,2,3], 4)\n</cell>\n<code language=julia-1.5>\n\
    @time intersperse([1,2,3], 4)\n</cell>\n<code language=julia-1.5>\n@time intersperse([1,2,3],\
    \ 4)\n</cell>\n<code language=julia-1.5>\n@time intersperse([1,2,3], 4)\n</cell>\n\
    <code language=julia-1.5>\n@time intersperse([1,2,3], 4)\n</cell>\n<code language=julia-1.5>\n\
    @time intersperse([1,2,3], 4)\n</cell>\n<code language=julia-1.5>\n@time intersperse([1,2,3],\
    \ 4)\n</cell>\n<code language=julia-1.5>\n@time intersperse([1,2,3], 4)\n</cell>\n\
    <code language=julia-1.5>\n@time intersperse([1,2,3], 4)\n</cell>\n<code language=julia-1.5>\n\
    @time intersperse([1,2,3], 4)\n</cell>\n<code language=julia-1.5>\n@time intersperse([1,2,3],\
    \ 4)\n</cell>\n<code language=julia-1.5>\n@time intersperse([1,2,3], 4)\n</cell>\n\
    <code language=julia-1.5>\n@time intersperse([1,2,3], 4)\n</cell>\n<code language=julia-1.5>\n\
    @time intersperse([1,2,3], 4)\n</cell>\n<code language=julia-1.5>\n@time intersperse([1,2,3],\
    \ 4)\n</cell>\n<code language=julia-1.5>\n@time intersperse([1,2,3], 4)\n</cell>\n\
    <code language=julia-1.5>\n@time intersperse([1,2,3], 4)\n</", "    if length(numbers)\
    \ < delimeter \n        return numbers \n    else \n        return numbers[1 :\
    \ length(numbers)-delimeter+1] ++ [numbers[length(numbers)-delimeter+1]] \n  \
    \  end\nend\n</code>\n<|/ a tags=julia,arrays |>\n<| a tags=julia,arrays |>\n\
    A simple and efficient solution is to use splice (which returns a new array):\n\
    <code>\njulia> a = [1,2,3]\n3-element Array{Int64,1}:\n 1\n 2\n 3", "    if length(numbers)\
    \ < 2\n        return numbers\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n  \
    \  \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end-1]\n    \n\
    \    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n  \
    \  numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[2:end]\n    \n    numbers = numbers[2:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers =\
    \ numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[2:end]\n    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end-1]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n  \
    \  \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[", "    if length(numbers) == 0\n        return numbers\n\
    \    end\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers .+ [delimeter]\n\
    \    \n    return numbers\nend\n</cell>\n<code language=julia-1.5>", "    numbers\
    \ = numbers[:]\n    numbers = numbers[2:end-1] .+ [delimeter] .+ numbers[2:end]\n\
    \    return numbers\nend\n</cell>\n<code language=julia-1.5>\nintersperse([1,2,3],\
    \ 4)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector. For example,\
    \ sum([1, 2, 3, 4]) should return 10. Do not use sum.", "    if length(numbers)\
    \ < 2\n        return numbers\n    else\n        numbers = numbers[2:end-1]\n\
    \        numbers = [numbers[1], numbers[1]+delimeter, numbers[2]]\n        numbers\
    \ = intersperse(numbers, delimeter)\n        numbers = numbers[2:end]\n    end\n\
    end\n</code>\n<|/ a tags=julia |>\n<| a dscore=0 |>\n<code>", "    if length(numbers)\
    \ < delimeter\n        numbers\n    else\n        numbers[1 : length(numbers)\
    \ - (delimeter - length(numbers))] + delimeter * [numbers[length(numbers) - (delimeter\
    \ - length(numbers))]]\n    end\nend\n</code>\n<|/ a tags=julia,arrays |>\n<|\
    \ a tags=julia,arrays |>\nThe answer by is great, but I thought I'd add an alternative\
    \ that uses broadcasting rather than loops.\n<code>\njulia> function intersperse(x::Vector{Int64},\
    \ delimeter::Int64)\n           return x[1:end-1] .+ delimeter * [x[end]]\n  \
    \     end\nintersperse (generic function with 1 method)", "    if length(numbers)\
    \ < 2\n        return numbers\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = intersperse(numbers, delimeter)\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]",
  "    if length(numbers) == 0\n        return numbers\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    ", "    numbers\
    \ = numbers[:]\n    numbers[2:end] = numbers[2:end] .+ delimeter\n    return numbers\n\
    end\n</cell>\n<code language=julia-1.3>\nintersperse([1,2,3], 4)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector and returns a new vector where\
    \ each element is the sum of the previous two elements.", "    numbers = numbers[:]\n\
    \    numbers = numbers[2:end-1] .+ [delimeter] .+ numbers[2:end-1]\n    return\
    \ numbers\nend\n</cell>\n<code language=julia-1.4>\nintersperse([1,2,3], 4)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of numbers and\
    \ returns the sum of the squares of the numbers in the vector.", "    numbers\
    \ = numbers[:]\n    numbers[2:end] = numbers[2:end] + delimeter\n    return numbers\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert intersperse([1, 2, 3], 4) ==\
    \ [1, 4, 2, 4, 3]\n@assert intersperse([1, 2, 3], 5) == [1, 4, 2, 3, 4, 5]\n@assert\
    \ intersperse([1, 2, 3], 6) == [1, 4, 2, 3, 4, 5, 6]\n@assert intersperse([1,\
    \ 2, 3], 7) == [1, 4, 2, 3, 4, 5, 6, 7]\n@assert intersperse([1, 2, 3], 8) ==\
    \ [1, 4, 2, 3, 4, 5, 6, 7, 8]\n@assert intersperse([1, 2, 3], 9) == [1, 4, 2,\
    \ 3, 4, 5, 6, 7, 8, 9]\n@assert intersperse([1, 2, 3], 10) == [1, 4, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10]\n@assert intersperse([1, 2, 3], 11) == [1, 4, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]\n@assert intersperse([1, 2, 3], 12) == [1, 4, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12]\n@assert intersperse([1, 2, 3], 13) == [1, 4, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n@assert intersperse([1, 2, 3], 14) == [1,\
    \ 4, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n@assert intersperse([1, 2, 3],\
    \ 15) == [1, 4, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n@assert intersperse([1,\
    \ 2, 3], 16) == [1, 4, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n@assert\
    \ intersperse([1, 2, 3], 17) == [1, 4, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16, 17]\n@assert intersperse([1, 2, 3], 18) == [1, 4, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\n@assert intersperse([1, 2, 3],\
    \ 19) == [1, 4, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n\
    @assert intersperse([1, 2, 3], 20) == [1, 4, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15, 16, 17, 18, 19, 20]\n@assert intersperse([1, 2, 3], 21) == [1, 4,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\n@assert\
    \ intersperse([1, 2, 3], 22) == [1, 4, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16, 17, 18, 19, 20, 21, 22]\n@assert intersperse([1, 2, 3], 23) == [1,\
    \ 4, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23]\n@assert intersperse([1, 2, 3], 24) == [1, 4, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]\n@assert intersperse([1,\
    \ 2, 3], 25) == ", "    if length(numbers) < delimeter\n        numbers\n    else\n\
    \        numbers[1 : length(numbers)] .+ [delimeter] .+ numbers[length(numbers)\
    \ : end]\n    end\nend\n</code>\n<|/ a tags=julia,arrays,list |>\n<| a dscore=2\
    \ |>\n<code>", "    if length(numbers) < 2\n        return numbers\n    \n   \
    \ numbers = numbers[2:end]\n    \n    numbers = intersperse(numbers, delimeter)\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]", "    \n    numbers =\
    \ numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]", "    if length(numbers) < 2\n\
    \        return numbers\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = intersperse(numbers, delimeter)\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]",
  "    numbers = numbers[:]\n    numbers[2:end] = numbers[2:end] + delimeter*ones(1,\
    \ length(numbers[2:end]))\n    return numbers\nend\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\n<code>", "    if length(numbers) == 0 \n        return numbers\
    \ \n    else \n        numbers[2:end] = numbers[2:end] + delimeter * [numbers[1]]\
    \ \n        return intersperse(numbers[2:end], delimeter) \nend\n</code>\n<|/\
    \ a tags=julia,list |>\n<| c |>\nThis doesn't work if `numbers` has length greater\
    \ than 2.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting my answer.\
    \ `numbers` has length greater than 2 because `numbers[2:end]` has length greater\
    \ than 2.\n<|/ c |>\n<| c |>\nI see what you mean. Sorry for the misunderstanding.\n\
    <|/ c |>\n<| a tags=julia,list |>\nHere's a solution using an iterator:\n<code>",
  "    if length(numbers) == 0\n        return numbers\n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    ", "    if length(numbers) == 0 \n        return numbers \n    else \n  \
    \      numbers = numbers[2:end-1] \n        numbers = intersperse(numbers, delimeter)\
    \ \n        numbers = [numbers[1], numbers...] \n        return numbers \nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    if length(numbers) < 2\n     \
    \   return numbers\n    \n    numbers = numbers[2:end]\n    \n    numbers = intersperse(numbers,\
    \ delimeter)\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:", "    if\
    \ length(numbers) == 0\n        return numbers\n    \n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n", "    \n    numbers = numbers[:]\n\
    \    \n    if length(numbers) <= 1\n        return numbers\n    end\n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    \n    numbers\
    \ = numbers[:]\n    \n    if length(numbers) < 2\n        return numbers\n   \
    \ end\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[:]\n  \
    \  \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    ", "    if length(numbers) == 0\n        numbers\n   \
    \ else\n        numbers[2:end-1] .+ [delimeter] .+ numbers[2:end-1]\n    end\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\nHere's a solution using recursion:\n\
    <code>", "    numbers = numbers[:]\n    numbers = numbers[2:end]\n    numbers\
    \ = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    ", "    if\
    \ length(numbers) < 2\n        return numbers\n    else\n        numbers = numbers[2:end]\n\
    \        numbers = numbers[1:end-1]\n        numbers = numbers .+ [delimeter]\n\
    \        numbers = numbers .+ numbers\n        return numbers\n    end\nend\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nI came up with this solution:\n\
    <code>", "    if length(numbers) == 0\n        return numbers\n    \n    numbers\
    \ = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[",
  "    if length(numbers) < 2\n        return numbers\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    ", "    if length(numbers) <\
    \ delimeter \n        numbers = numbers[:]\n    end\n    numbers[2:end] = numbers[2:end]\
    \ + delimeter\n    return numbers\nend\n</cell>\n<text>\nExercise 7: Write a function\
    \ that returns the first element of a list\nHint: use first\nExercise 8: Write\
    \ a function that returns the last element of a list\nHint: use last\nExercise\
    \ 9: Write a function that returns the number of elements in a list\nHint: use\
    \ length\nExercise 10: Write a function that returns a list with all the elements\
    \ of a list except the first and last elements\nHint: use slice\nExercise 11:\
    \ Write a function that returns a list with all the elements of a list except\
    \ the first and last elements and concatenate them into a single list\nHint: use\
    \ append\nExercise 12: Write a function that returns a list with all the elements\
    \ of a list except the first and last elements and concatenate them into a single\
    \ list with delimeter between them\nHint: use intersperse\nExercise 13: Write\
    \ a function that returns a list with all the elements of a list except the first\
    \ and last elements and concatenate them into a single list with delimeter between\
    \ them and prepend the delimeter to the first element\nHint: use prepend\nExercise\
    \ 14: Write a function that returns a list with all the elements of a list except\
    \ the first and last elements and concatenate them into a single list with delimeter\
    \ between them and prepend the delimeter to the first element and append the delimeter\
    \ to the last element\nHint: use append\nExercise 15: Write a function that returns\
    \ a list with all the elements of a list except the first and last elements and\
    \ concatenate them into a single list with delimeter between them and prepend\
    \ the delimeter to the first element and append the delimeter to the last element\
    \ and prepend the delimeter to the first and last elements\nHint: use prepend\n\
    Exercise 16: Write a function that returns a list with all the elements of a list\
    \ except the first and last elements and concatenate them into a single list with\
    \ delimeter between them and prepend the delimeter to the first element and append\
    \ the delimeter to the last element and prepend the delimeter to the first and\
    \ last elements and append the delimeter to the last element\nHint: use append\n\
    Exercise 17: Write a function that returns a list with all the elements of a list\
    \ except the first and last elements and concatenate them into a single list with\
    \ delimeter between them and prepend the delimeter to the first element and append\
    \ the delimeter to the last element and prepend the delimeter to the first and\
    \ last elements and append the delimeter to the last element and prepend the delimeter\
    \ to the first and ", "    numbers = numbers[2:end]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n",
  "    if length(numbers) < delimeter\n        numbers\n    else\n        numbers[1\
    \ : length(numbers) - (delimeter - 1)] + delimeter * [numbers[length(numbers)\
    \ - (delimeter - 1)]]\n    end\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks,\
    \ this works perfectly. Just a quick question: why does it not work when `delimeter`\
    \ is negative?\n<|/ c |>\n<| c |>\nIt doesn't work when `delimeter` is negative,\
    \ because `numbers[1 : length(numbers) - (delimeter - 1)] + delimeter * [numbers[length(numbers)\
    \ - (delimeter - 1)]]` will produce `numbers[1 : length(numbers) - (delimeter\
    \ - 1)]` which has length `0`, which is not what you want.\n<|/ c |>\n<| c |>\n\
    Thanks, I understand now. Do you know of any way to fix this? I guess I could\
    \ just add an if statement to check if `delimeter` is negative, but that seems\
    \ inefficient.\n<|/ c |>\n<| c |>\nI added a version that works with negative\
    \ delimeters.\n<|/ c |>\n<| c |>\nThanks, this works perfectly. Just a quick question:\
    \ why does it not work when `delimeter` is negative?\n<|/ c |>\n<| a tags=julia,arrays\
    \ |>\n<code>", "    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n \
    \   return numbers\nend\n</cell>\n<code language=julia-1.5>", "    if length(numbers)\
    \ == 0\n        return numbers\n    \n    numbers = numbers[2:end]\n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers .+ [delimeter]\n    \n    numbers\
    \ = numbers .+ numbers\n    \n    return numbers\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(numbers) < 2\n        return numbers\n    \n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[", "    numbers = numbers[:]\n\
    \    numbers[2:end] = numbers[2:end] .+ [delimeter]\n    return numbers\nend\n\
    </cell>\n<code language=julia-1.5>", "    if length(numbers) < 2\n        return\
    \ numbers\n    \n    numbers = numbers[2:end]\n    \n    numbers = intersperse(numbers,\
    \ delimeter)\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]", "    if length(numbers)\
    \ == 0\n        return numbers\n    \n    numbers = numbers[2:end]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    ", "    if length(numbers) < delimeter\n\
    \        return numbers\n    else\n        numbers[end+1:end+delimeter] = numbers[end+1:end+delimeter]\n\
    \        numbers[end+delimeter] = delimeter\n        return numbers\n    end\n\
    end\n</cell>\n<text>\nExercise 7: Intersperse a number between every two consecutive\
    \ elements of input list numbers\nWrite a function that intersperses a number\
    \ between every two consecutive elements of input list numbers. \nFor example,\
    \ intersperse([1,2,3], 4) should return [1, 4, 2, 5, 3, 6].", "    numbers = numbers[:]\n\
    \    numbers[2:end] = numbers[2:end] + delimeter * ones(1, length(numbers[2:end]))\n\
    \    return numbers\nend\n</cell>\n<code language=julia-1.3>\nintersperse([1,2,3],\
    \ 4)\n</cell>\n<text>\nExercise 3.2\nWrite a function that takes a vector of numbers\
    \ and returns the sum of the squares of the numbers. \nThe function should work\
    \ for vectors of any length.", "    numbers = numbers[:]\n    numbers[2:end] =\
    \ numbers[2:end] .+ delimeter\n    return numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    intersperse([1, 2, 3], 4)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of integers and returns the sum of the even numbers in that vector.\
    \ \nWrite a second function that takes a vector of integers and returns the sum\
    \ of the odd numbers in that vector.", "    if length(numbers) == 0\n        return\
    \ numbers\n    \n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[1:", "    if length(numbers) == 0\n        return numbers\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-2]\n  \
    \  \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end-1]\n    \n\
    \    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-2]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end-1]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-2]\n    \n  \
    \  numbers = numbers[2:end]\n    \n    numbers = numbers[2:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-2]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-2]\n    \n    numbers =\
    \ numbers[2:end]\n    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-2]\n    \n    numbers = numbers[2:end]\n  \
    \  \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-2]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n\
    \    numbers = numbers[1:end-2]\n    \n    numbers = numbers[2:end]\n    \n  \
    \  numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[1:end-2]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-2]\n    \n    numbers = numbers[2:end]\n    \n    numbers =\
    \ numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-2]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-2]\n\
    \    \n    numbers = numbers[2:end]\n    ", "    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]", "    numbers = numbers[:]\n    numbers[2:end]\
    \ = numbers[2:end] + delimeter*ones(1, length(numbers[2:end]))\n    return numbers\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that takes as input a vector\
    \ of numbers and returns a vector of the same length where each element is the\
    \ product of the corresponding elements of the input vectors.", "    if length(numbers)\
    \ < 2\n        return numbers\n    \n    numbers = numbers[2:end]\n    numbers\
    \ = numbers[1:end-1]\n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    numbers\
    \ = numbers[1:end-1]\n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    numbers\
    \ = numbers[1:end-1]\n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    numbers\
    \ = numbers[1:end-1]\n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]", "    if length(numbers)\
    \ == 0\n        return numbers\n    \n    numbers = numbers[2:end]\n    numbers\
    \ = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[", "    numbers = numbers[:]\n\
    \    numbers[2:end] = numbers[2:end] .+ [delimeter]\n    return numbers\nend\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=julia |>\nI wrote a package to solve this\
    \ problem:\nhttps://github.com/kamila-k/intersperse\n<code>\nusing Intersperse",
  "    if length(numbers) == 0 \n        return numbers \n    else \n        numbers\
    \ = numbers[2:end-1] \n        numbers = [delimeter, numbers...] \n        numbers\
    \ = numbers[1:end-1] \n        numbers = numbers[2:end-1] \n        numbers =\
    \ numbers[1:end-1] \n        numbers = numbers[2:end-1] \n        numbers = numbers[1:end-1]\
    \ \n        numbers = numbers[2:end-1] \n        numbers = numbers[1:end-1] \n\
    \        numbers = numbers[2:end-1] \n        numbers = numbers[1:end-1] \n  \
    \      numbers = numbers[2:end-1] \n        numbers = numbers[1:end-1] \n    \
    \    numbers = numbers[2:end-1] \n        numbers = numbers[1:end-1] \n      \
    \  numbers = numbers[2:end-1] \n        numbers = numbers[1:end-1] \n        numbers\
    \ = numbers[2:end-1] \n        numbers = numbers[1:end-1] \n        numbers =\
    \ numbers[2:end-1] \n        numbers = numbers[1:end-1] \n        numbers = numbers[2:end-1]\
    \ \n        numbers = numbers[1:end-1] \n        numbers = numbers[2:end-1] \n\
    \        numbers = numbers[1:end-1] \n        numbers = numbers[2:end-1] \n  \
    \      numbers = numbers[1:end-1] \n        numbers = numbers[2:end-1] \n    \
    \    numbers = numbers[1:end-1] \n        numbers = numbers[2:end-1] \n      \
    \  numbers = numbers[1:end-1] \n        numbers = numbers[2:end-1] \n        numbers\
    \ = numbers[1:end-1] \n        numbers = numbers[2:end-1] \n        numbers =\
    \ numbers[1:end-1] \n        numbers = numbers[2:end-1] \n        numbers = numbers[1:end-1]\
    \ \n        numbers = numbers[2:end-1] \n        numbers = numbers[1:end-1] \n\
    \        numbers = numbers[2:end-1] \n        numbers = numbers[1:end-1] \n  \
    \      numbers = numbers[2:end-1] \n        numbers = numbers[1:end-1] \n    \
    \    numbers = numbers[2:end-1] \n        numbers = numbers[1:end-1] \n      \
    \  numbers = numbers[2:end-1] \n        numbers = numbers[1:end-1] \n        numbers\
    \ = numbers[2:end-1] \n        numbers = numbers[1:end-1] \n        numbers =\
    \ numbers[2:end-1] \n        numbers = numbers[1:end-1] \n        numbers = numbers[2:end-1]\
    \ \n        numbers = numbers[1:", "    if length(numbers) == 0\n        numbers\n\
    \    else\n        numbers[2:end-1] .+ [delimeter] .+ numbers[2:end-1]\n    end\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia |>\nThe easiest way is to use\
    \ an anonymous function with mapslices:\n<code>\njulia> mapslices(x -> [x], 1:10,\
    \ dims=2)\n10-element Vector{Vector{Int64}}:\n [1]\n [2]\n [3]\n [4]\n [5]\n [6]\n\
    \ [7]\n [8]\n [9]\n [10]\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nI like\
    \ using mapslices for this:\n<code>\njulia> mapslices(x -> [x], 1:10, dims=2)\n\
    10-element Vector{Vector{Int64}}:\n [1]\n [2]\n [3]\n [4]\n [5]\n [6]\n [7]\n\
    \ [8]\n [9]\n [10]\n</code>\n<|/ a tags=julia |>\n<| a dscore=1 |>\nI like the\
    \ mapslices solution, but I thought I'd add another option that is more general:\n\
    <code>", "    numbers = numbers[:]\n    numbers[2:end] = numbers[2:end] + delimeter*ones(1,\
    \ length(numbers[2:end]))\n    return numbers\nend\n</code>\n<|/ a dscore=2 |>\n\
    <| a tags=julia |>\nHere is a solution using broadcasting and the function intersperse:\n\
    <code>\njulia> intersperse([1,2,3], 4)\n4-element Array{Int64,1}:\n 1\n 2\n 3\n\
    \ 4", "    if length(numbers) == 0\n        return numbers\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = intersperse(numbers, delimeter)\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]", "    if length(numbers) < delimeter\n  \
    \      numbers = numbers[:]\n    end\n    numbers = numbers[start:end]\n    numbers\
    \ = numbers[start:end+delimeter]\n    return numbers\nend\n</code>\n<|/ a tags=julia,arrays,list\
    \ |>\n<| a dscore=1 |>\nI came up with a solution that is similar to what was\
    \ suggested in the comments above, but I thought I'd post it here in case it helps\
    \ anyone else.\n<code>", "    \n    numbers = numbers[:]\n    \n    i = 0\n  \
    \  \n    while i < length(numbers)\n        \n        if i == length(numbers)\n\
    \            numbers[i] = numbers[i] + delimeter\n        else\n            numbers[i]\
    \ = numbers[i] + delimeter\n        end\n        \n        i = i + 1\n    end\n\
    \    \n    return numbers\nend\n</cell>\n<code language=julia-1.3>\nintersperse([1,\
    \ 2, 3], 4)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of numbers and returns the sum of the numbers in reverse order. For example,\
    \ if the input vector is [4, 6, 3, 9, 2] the output should be [9, 6, 3, 6, 4].",
  "    if length(numbers) == 0\n        numbers\n    elseif length(numbers) == 1\n\
    \        numbers[1]\n    else\n        numbers[2:end-1] .+ [delimeter] .+ numbers[2:end-1]\n\
    \    end\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia |>\nI wrote a package\
    \ that does this for you:\nhttps://github.com/jrwlk/Intersperse\n<code>\njulia>\
    \ using Intersperse", "    if length(numbers) < 2\n        return numbers\n  \
    \  \n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers\
    \ = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:", "    if length(numbers) <= 1\n        return numbers\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n", "    if length(numbers) < 2\n        return numbers\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    ", "    if length(numbers) < delimeter \n      \
    \  numbers = [numbers]\n    end\n    \n    numbers = numbers[2:end]\n    numbers\
    \ = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    \n    numbers\
    \ = numbers[2:end]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[2:end]\n    numbers = numbers[2:end-1]\n    numbers\
    \ = numbers[2:end-1]\n    \n    numbers = numbers[2:end]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end]\n    numbers\
    \ = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    \n    numbers\
    \ = numbers[2:end]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[2:end]\n    numbers = numbers[2:end-1]\n    numbers\
    \ = numbers[2:end-1]\n    \n    numbers = numbers[2:end]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end]\n    numbers\
    \ = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    \n    numbers\
    \ = numbers[2:end]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[2:end]\n    numbers = numbers[2:end-1]\n    numbers\
    \ = numbers[2:end-1]\n    \n    numbers = numbers[2:end]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end]\n    numbers\
    \ = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    \n    numbers\
    \ = numbers[2:end]\n    numbers = numbers[2:end-1]\n    ", "    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]", "    numbers = numbers[:]\n    numbers[2:end]\
    \ = numbers[2:end] + delimeter\n    return numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert intersperse([1,2,3], 4) == [1, 4, 2, 4, 3]\n@assert intersperse([1,2,3],\
    \ 2) == [1, 3, 2, 4, 3]\n@assert intersperse([1,2,3], 1) == [1, 3, 2, 4]\n@assert\
    \ intersperse([1,2,3], 0) == [1, 2, 3, 4]\n@assert intersperse([1,2,3], -1) ==\
    \ [1, 2, 3, 4]\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of numbers and returns the same vector but with every element multiplied by\
    \ 2.", "    if length(numbers) < 2\n        return numbers\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = intersperse(numbers, delimeter)\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]", "    numbers = numbers[:]\n    numbers[2:end]\
    \ = numbers[2:end] + delimeter\n    return numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    intersperse([1, 2, 3], 4)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the first n prime numbers. \nHint: Use a for loop and a prime number\
    \ generator function.", "    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]",
  "    numbers = numbers[:]\n    numbers[2:end] = numbers[2:end] + delimeter\n   \
    \ return numbers\nend\n</cell>\n<code language=julia-1.5>\nintersperse([1,2,3],\
    \ 4)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an input string\
    \ and returns the number of words in that string. \nFor example, \n    count_words(\"\
    The quick brown fox jumps over the lazy dog\")\nshould return \n    7\nHint: Use\
    \ split() to split the string into an array of words. \nHint: Use length() to\
    \ find the number of words in the array.", "    if length(numbers) == 0\n    \
    \    return numbers\n    \n    numbers = numbers[2:end]\n    \n    numbers = intersperse(numbers,\
    \ delimeter)\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]", "    if length(numbers)\
    \ <= 1\n        return numbers\n    end\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers .+ [delimeter]\n    \n    numbers = numbers .+ numbers[2:end]\n\
    \    \n    return numbers\nend\n</cell>\n<code language=julia-1.5>\nintersperse([1,2,3],\
    \ 4)\n</cell>\n<code language=julia-1.5>\nintersperse([1,2,3], 5)\n</cell>\n<code\
    \ language=julia-1.5>\nintersperse([1,2,3], 6)\n</cell>\n<code language=julia-1.5>\n\
    intersperse([1,2,3], 7)\n</cell>\n<code language=julia-1.5>\nintersperse([1,2,3],\
    \ 8)\n</cell>\n<code language=julia-1.5>\nintersperse([1,2,3], 9)\n</cell>\n<code\
    \ language=julia-1.5>\nintersperse([1,2,3], 10)\n</cell>\n<code language=julia-1.5>\n\
    intersperse([1,2,3], 11)\n</cell>\n<code language=julia-1.5>\nintersperse([1,2,3],\
    \ 12)\n</cell>\n<code language=julia-1.5>\nintersperse([1,2,3], 13)\n</cell>\n\
    <code language=julia-1.5>\nintersperse([1,2,3], 14)\n</cell>\n<code language=julia-1.5>\n\
    intersperse([1,2,3], 15)\n</cell>\n<code language=julia-1.5>\nintersperse([1,2,3],\
    \ 16)\n</cell>\n<code language=julia-1.5>\nintersperse([1,2,3], 17)\n</cell>\n\
    <code language=julia-1.5>\nintersperse([1,2,3], 18)\n</cell>\n<code language=julia-1.5>\n\
    intersperse([1,2,3], 19)\n</cell>\n<code language=julia-1.5>\nintersperse([1,2,3],\
    \ 20)\n</cell>\n<code language=julia-1.5>\nintersperse([1,2,3], 21)\n</cell>\n\
    <code language=julia-1.5>\nintersperse([1,2,3], 22)\n</cell>\n<code language=julia-1.5>\n\
    intersperse([1,2,3], 23)\n</cell>\n<code language=julia-1.5>\nintersperse([1,2,3],\
    \ 24)\n</cell>\n<code language=julia-1.5>\nintersperse([1,2,3], 25)\n</cell>\n\
    <code language=julia-1.5>\nintersperse([1,2,3], 26)\n</cell>\n<code language=julia-1.5>\n\
    intersperse([1,2,3], 27)\n</cell>\n<code language=julia-1.5>\nintersperse([1,2,3],\
    \ 28)\n</cell", "    numbers = numbers[:]\n    numbers[2:end] = numbers[2:end]\
    \ + delimeter\n    return numbers\nend\n</cell>\n<code language=julia-1.5>\nintersperse([1,2,3],\
    \ 4)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector.", "    if\
    \ length(numbers) < 2\n        return numbers\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = intersperse(numbers, delimeter)\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]", "    numbers = numbers[:]\n    numbers[2:end] = numbers[2:end]\
    \ + delimeter*ones(1, length(numbers[2:end]))\n    return numbers\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\nI like to use interleave for this:\n<code>\n\
    julia> interleave([1,2,3],[4,5,6])\n3-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n\
    \ 5\n 6\n</code>\n<|/ a tags=julia,arrays |>\n<| a dscore=2 |>\nI like to use\
    \ interleave for this:\n<code>\njulia> interleave([1,2,3],[4,5,6])\n3-element\
    \ Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n 6\n</code>\n<|/ a tags=julia,arrays |>\n\
    <| a tags=julia,arrays |>\nI like to use interleave for this:\n<code>\njulia>\
    \ interleave([1,2,3],[4,5,6])\n3-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n\
    \ 6\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,arrays |>\nI like to use interleave\
    \ for this:\n<code>\njulia> interleave([1,2,3],[4,5,6])\n3-element Array{Int64,1}:\n\
    \ 1\n 2\n 3\n 4\n 5\n 6\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nI like\
    \ to use interleave for this:\n<code>\njulia> interleave([1,2,3],[4,5,6])\n3-element\
    \ Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n 6\n</code>\n<|/ a tags=julia,arrays |>\n\
    <| a dscore=2 |>\nI like to use interleave for this:\n<code>\njulia> interleave([1,2,3],[4,5,6])\n\
    3-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n 6\n</code>\n<|/ a tags=julia,arrays\
    \ |>\n<| a dscore=2 |>\nI like to use interleave for this:\n<code>\njulia> interleave([1,2,3],[4,5,6])\n\
    3-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n 6\n</code>\n<|/ a tags=julia,arrays\
    \ |>\n<| a tags=juli", "    if length(numbers) < 2\n        return numbers\n \
    \   \n    numbers_copy = copy(numbers)\n    \n    numbers_copy[end] = delimeter\n\
    \    \n    return numbers_copy\nend\n</cell>\n<code language=julia-1.5>", "  \
    \  if length(numbers) == 0\n        numbers\n    else\n        numbers[2:end-1]\
    \ .+ [delimeter] .+ numbers[2:end-1]\n    end\nend\n</code>\n<|/ a tags=julia,arrays\
    \ |>\n<| a dscore=2 |>\nA more general solution that works for any number of elements:\n\
    <code>", "    if length(numbers) == 0\n        return numbers\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[1:end-1] .+ [delimeter] .+ numbers[2:end]\n\
    \    \n    return numbers\nend\n</cell>\n<code language=julia-1.5>", "    numbers\
    \ = numbers[:]\n    numbers[2:end] = numbers[2:end] + delimeter\n    return numbers\n\
    end\n</cell>\n<text>\nExercise 3: Write a function that takes an input string\
    \ and returns the number of words in the string. \nHint: Use split() to split\
    \ the string into an array of words, and then use the length() function to get\
    \ the number of words in the array.", "    \n    numbers = numbers[:]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    ", "    numbers = numbers[:]\n    numbers[2:end] = numbers[2:end] + delimeter\n\
    \    return numbers\nend\n</cell>\n<code language=julia-1.5>\nintersperse([1,\
    \ 2, 3], 4)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ and returns a vector where each element is the sum of the elements in the original\
    \ vector except the element at position i.", "    numbers = numbers[:]\n    \n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]",
  "    numbers = numbers[:]\n    numbers[2:end] = numbers[2:end] .+ delimeter\n  \
    \  return numbers\nend\n</cell>\n<code language=julia-1.5>\nintersperse([1,2,3],\
    \ 4)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector.", "    if\
    \ length(numbers) <= 1\n        return numbers\n    end\n    \n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    number", "    \n    numbers = numbers[:]\n\
    \    \n    i = 0\n    while i < length(numbers)\n        \n        if numbers[i]\
    \ != delimeter\n            numbers[i] = numbers[i] + delimeter\n            i\
    \ += 1\n        else\n            i += 1\n        end\n    end\n    \n    return\
    \ numbers\nend\n</cell>\n<code language=julia-1.5>", "    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n",
  "    numbers = numbers[:]\n    numbers[2:end] = numbers[2:end] .+ delimeter\n  \
    \  return numbers\nend\n</cell>\n<code language=julia-1.5>\nintersperse([1, 2,\
    \ 3], 4)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of\
    \ integers and returns the sum of the squares of the integers in the vector.",
  "    \n    if length(numbers) == 0\n        return numbers\n    end", "    if length(numbers)\
    \ < 2\n        return numbers\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = intersperse(numbers, delimeter)\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]",
  "    \n    numbers = numbers[:]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[1:end-1]\n    \n    ", "    if length(numbers) == 0 \n\
    \        return numbers \n    \n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[", "    if length(numbers) == 0\n        return numbers\n\
    \    else\n        interspersed_numbers = numbers[2:end]\n        interspersed_numbers\
    \ = [delimeter, interspersed_numbers...]\n        interspersed_numbers = interspersed_numbers[2:end]\n\
    \        interspersed_numbers = interspersed_numbers[2:end]\n        interspersed_numbers\
    \ = interspersed_numbers[2:end]\n        interspersed_numbers = interspersed_numbers[2:end]\n\
    \        interspersed_numbers = interspersed_numbers[2:end]\n        interspersed_numbers\
    \ = interspersed_numbers[2:end]\n        interspersed_numbers = interspersed_numbers[2:end]\n\
    \        interspersed_numbers = interspersed_numbers[2:end]\n        interspersed_numbers\
    \ = interspersed_numbers[2:end]\n        interspersed_numbers = interspersed_numbers[2:end]\n\
    \        interspersed_numbers = interspersed_numbers[2:end]\n        interspersed_numbers\
    \ = interspersed_numbers[2:end]\n        interspersed_numbers = interspersed_numbers[2:end]\n\
    \        interspersed_numbers = interspersed_numbers[2:end]\n        interspersed_numbers\
    \ = interspersed_numbers[2:end]\n        interspersed_numbers = interspersed_numbers[2:end]\n\
    \        interspersed_numbers = interspersed_numbers[2:end]\n        interspersed_numbers\
    \ = interspersed_numbers[2:end]\n        interspersed_numbers = interspersed_numbers[2:end]\n\
    \        interspersed_numbers = interspersed_numbers[2:end]\n        interspersed_numbers\
    \ = interspersed_numbers[2:end]\n        interspersed_numbers = interspersed_numbers[2:end]\n\
    \        interspersed_numbers = interspersed_numbers[2:end]\n        interspersed_numbers\
    \ = interspersed_numbers[2:end]\n        interspersed_numbers = interspersed_numbers[2:end]\n\
    \        interspersed_numbers = interspersed_numbers[2:end]\n        interspersed_numbers\
    \ = interspersed_numbers[2:end]\n        interspersed_numbers = interspersed_numbers[2:end]\n\
    \        interspersed_numbers = interspersed_numbers[2:end]\n        interspersed_numbers\
    \ = interspersed_numbers[2:end]\n        interspersed_numbers = interspersed_numbers[2:end]\n\
    \        interspersed_numbers = interspersed_numbers[2:end]\n        interspersed_numbers\
    \ = interspersed_numbers[2:end]\n        interspersed_numbers = interspersed_numbers[2:",
  "    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    ", "    numbers = numbers[:]\n\
    \    numbers[2:end] = numbers[2:end] .+ [delimeter]\n    return numbers\nend\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=julia |>\n<code>", "    numbers = numbers[:]\n\
    \    numbers = numbers[2:end-1] .+ [delimeter] .+ numbers[2:end]\n    return numbers\n\
    end\n</cell>\n<code language=julia-1.5>", "    numbers = numbers[2:end]\n    numbers\
    \ = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n", "    if length(numbers) == 0\n        return numbers\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    ", "    \n    numbers = numbers[2:end]\n    numbers\
    \ = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:",
  "    numbers = numbers[:]\n    numbers[2:end] = numbers[2:end] .+ delimeter\n  \
    \  return numbers\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector and returns a new vector where each element is the sum of the previous\
    \ two elements in the input vector. For example, if the input vector is [1,2,3,4,5],\
    \ the output vector should be [3, 6, 10, 15].", "    if length(numbers) < 2 \n\
    \        return numbers \n    \n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    \n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    \n    numbers\
    \ = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n    numbers\
    \ = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    \n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    \n    numbers\
    \ = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n    numbers\
    \ = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    \n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    \n    numbers\
    \ = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n    numbers\
    \ = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    \n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    \n    numbers\
    \ = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n    numbers\
    \ = numbers[2:end-1]\n    \n    ", "    if length(numbers) == 0\n        numbers\n\
    \    elseif length(numbers) == 1\n        numbers[1]\n    else\n        numbers[2:end-1]\
    \ .+ [delimeter] .+ numbers[2:end]\n    end\nend\n</code>\n<|/ a tags=julia |>\n\
    <| a tags=julia |>\nA simple and efficient solution is to use mapslices:\n<code>\n\
    julia> mapslices(x -> x + 1, [1, 2, 3, 4], dims=2)\n4-element Array{Int64,1}:\n\
    \ 2\n 3\n 4\n 5\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia |>\nHere's a solution\
    \ using broadcasting:\n<code>\njulia> function intersperse(x::Vector{Int64}, delimeter::Int64)\n\
    \           return x[1:end-1] .+ [delimeter] .+ x[2:end]\n       end", "    \n\
    \    numbers = numbers[:]\n    \n    i = 0\n    \n    while i < length(numbers)\n\
    \        \n        numbers[i] = numbers[i] + delimeter\n        \n        i =\
    \ i + 1\n        \n    end\n    \n    return numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    intersperse([1, 2, 3], 4)\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ takes a vector and returns a new vector with each element repeated three times.\
    \ For example, intersperse([1, 2, 3], 4) should return [1, 4, 2, 4, 3, 1, 2, 3,\
    \ 4]. Make sure to test your function with different inputs.", "    if length(numbers)\
    \ < delimeter\n        return numbers\n    else\n        numbers[end+1:end+delimeter+1]\
    \ = numbers[end+1:end+delimeter+1].+delimeter\n        return numbers[end:end+delimeter]\n\
    \    end\nend\n</code>\n<|/ a tags=julia |>\n<| a |>\n<code>", "    \n    numbers\
    \ = numbers[:]\n    \n    if length(numbers) == 0\n        return numbers\n  \
    \  end\n    \n    push!(numbers, numbers[1])\n    \n    i = 2\n    while i < length(numbers)\n\
    \        push!(numbers, numbers[i])\n        push!(numbers, delimeter)\n     \
    \   i += 1\n    end\n    \n    return numbers\nend\n</cell>\n<code language=julia-1.4>\n\
    intersperse([1,2,3], 4)\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector and a number as inputs and returns a vector with the number replaced\
    \ by the number times the element in the vector at the corresponding index. For\
    \ example, if the vector is [1,2,3] and you call the function with [1,2,3], 2,\
    \ then the output should be [1,2,3]. Your function should work for vectors of\
    \ any length.", "    if length(numbers) < 2\n        return numbers\n    \n  \
    \  numbers_copy = copy(numbers)\n    \n    numbers_copy[end] = delimeter\n   \
    \ \n    return numbers_copy\nend", "    numbers = numbers[:]\n    numbers[2:end]\
    \ = numbers[2:end] + delimeter\n    return numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    intersperse([1, 2, 3], 4)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of integers and returns a vector of integers where the integers\
    \ are the sum of the integers in the input vector. For example, if the input vector\
    \ is [4, 2, 3], then the output vector should be [5, 7, 4].", "    if length(numbers)\
    \ < delimeter\n        numbers\n    else\n        numbers[1 : length(numbers)-delimeter+1]\
    \ + delimeter + numbers[length(numbers)-delimeter+1 : end]\n    end\nend\n</code>\n\
    <|/ a |>\n<| a tags=julia,arrays,list |>\n<code>", "    if length(numbers) < delimeter\n\
    \        numbers\n    else\n        numbers[1 : length(numbers) - (delimeter -\
    \ length(numbers))] + delimeter * ones(delimeter - length(numbers))\n    end\n\
    end\n</code>\n<|/ a tags=julia,arrays |>\n<| a dscore=2 |>\nI wrote a package\
    \ for this:\nhttps://github.com/jamie-johnson/ArrayIntersperse\n<code>\njulia>\
    \ using ArrayIntersperse", "    numbers = numbers[:]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    ", "    if\
    \ length(numbers) < 2\n        return numbers\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    ", "    if length(numbers) <=\
    \ 1\n        return numbers\n    else\n        numbers = numbers[2:end]\n    \
    \    numbers = [delimeter, numbers...]\n        return numbers\n    end\nend\n\
    </code>\n<|/ a |>\n<| c |>\nThis doesn't work for `intersperse([1,2,3], 4)` which\
    \ should return `[1, 4, 2, 4]`.\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks for\
    \ pointing it out.\n<|/ c |>\n<| a dscore=2 |>\nI wrote a function that does this\
    \ for you:\n<code>", "    if length(numbers) < delimeter\n        numbers = numbers[end-1:end]\n\
    \    end\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    number", "    numbers = numbers[:]\n    numbers[2:end]\
    \ = numbers[2:end] + delimeter*ones(1, end-2)\n    return numbers\nend\n</cell>\n\
    <code language=julia-1.5>\nintersperse([1,2,3], 4)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the first element of a vector, if it exists.\
    \ Otherwise, return 0.", "    numbers = numbers[:]\n    numbers[2:end] = numbers[2:end]\
    \ + delimeter * ones(length(numbers[2:end]), 1)\n    return numbers\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=julia |>\n<code>", "    if length(numbers) == 0\n\
    \        return numbers\n    else\n        interspersed_numbers = Vector{Int64}(undef,\
    \ length(numbers)+1)\n        interspersed_numbers[1] = numbers[1]\n        interspersed_numbers[2]\
    \ = numbers[2]\n        interspersed_numbers[3] = numbers[3]\n        interspersed_numbers[4]\
    \ = delimeter\n        interspersed_numbers[5] = numbers[4]\n        interspersed_numbers[6]\
    \ = numbers[5]\n        interspersed_numbers[7] = delimeter\n        interspersed_numbers[8]\
    \ = numbers[6]\n        interspersed_numbers[9] = numbers[7]\n        interspersed_numbers[10]\
    \ = delimeter\n        interspersed_numbers[11] = numbers[8]\n        interspersed_numbers[12]\
    \ = numbers[9]\n        interspersed_numbers[13] = delimeter\n        interspersed_numbers[14]\
    \ = numbers[10]\n        interspersed_numbers[15] = numbers[11]\n        interspersed_numbers[16]\
    \ = delimeter\n        interspersed_numbers[17] = numbers[12]\n        interspersed_numbers[18]\
    \ = numbers[13]\n        interspersed_numbers[19] = delimeter\n        interspersed_numbers[20]\
    \ = numbers[14]\n        interspersed_numbers[21] = numbers[15]\n        interspersed_numbers[22]\
    \ = delimeter\n        interspersed_numbers[23] = numbers[16]\n        interspersed_numbers[24]\
    \ = numbers[17]\n        interspersed_numbers[25] = delimeter\n        interspersed_numbers[26]\
    \ = numbers[18]\n        interspersed_numbers[27] = numbers[19]\n        interspersed_numbers[28]\
    \ = delimeter\n        interspersed_numbers[29] = numbers[20]\n        interspersed_numbers[30]\
    \ = numbers[21]\n        interspersed_numbers[31] = delimeter\n        interspersed_numbers[32]\
    \ = numbers[22]\n        interspersed_numbers[33] = numbers[23]\n        interspersed_numbers[34]\
    \ = delimeter\n        interspersed_numbers[35] = numbers[24]\n        interspersed_numbers[36]\
    \ = numbers[25]\n        interspersed_numbers[37] = delimeter\n        interspersed_numbers[38]\
    \ = numbers[26]\n        interspersed_numbers[39] = numbers[27]\n        interspersed_numbers[40]\
    \ = delimeter\n        interspersed_numbers[", "    numbers = numbers[:]\n   \
    \ numbers[2:end] = numbers[2:end] .+ [delimeter]\n    numbers\nend\n</cell>\n\
    <code language=julia-1.5>\nintersperse([1,2,3], 4)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector and returns the sum of the squares of\
    \ the numbers in the vector. \nFor example, \n$$\n\\begin{align}\n\\text{sumsq}([1,2,3])\
    \ &= 1^2 + 2^2 + 3^2 = 10\n\\end{align}\n$$", "    numbers = numbers[:]\n    numbers\
    \ = numbers[2:end-1] .+ [delimeter] .+ numbers[2:end]\n    return numbers\nend\n\
    </cell>\n<code language=julia-1.3>\nintersperse([1,2,3], 4)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns a vector\
    \ of integers where the integers are in descending order.", "    if length(numbers)\
    \ == 0\n        return numbers\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    numbers\
    \ = numbers[:]\n    numbers[2:end] = numbers[2:end] .+ delimeter\n    return numbers\n\
    end\n</cell>\n<code language=julia-1.5>\nintersperse([1, 2, 3], 4)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ the sum of the squares of the integers in the vector.", "    if length(numbers)\
    \ <= 1\n        return numbers\n    end\n    \n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    number", "    numbers = numbers[:]\n    numbers[2:end]\
    \ = numbers[2:end] .+ delimeter\n    return numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    intersperse([1, 2, 3], 4)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of integers and returns a vector of integers where the integers\
    \ are the sum of the integers in the original vector. For example, if the input\
    \ vector is [4, 2, 3], the output vector should be [5, 7, 4].", "    if length(numbers)\
    \ <= 1\n        return numbers\n    \n    numbers = numbers[2:end]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n", "    if length(numbers) < 2\n        return\
    \ numbers\n    \n    numbers = numbers[2:end]\n    \n    numbers = intersperse(numbers,\
    \ delimeter)\n    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers\
    \ + [numbers[1]]\n    \n    return numbers\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(numbers) < 2\n        return numbers\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = intersperse(numbers, delimeter)\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]", "    \n    numbers = numbers[:]\n    \n    i = 0\n    while\
    \ i < length(numbers)\n        numbers[i+1] = numbers[i] + delimeter\n       \
    \ i = i + 1\n    end\n    \n    return numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    @test intersperse([1,2,3], 4) == [1,2,3,4,5]\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the first element of a list that satisfies a given condition.\
    \ For example, given [1,2,3], return 3 if the list contains 3, and -1 otherwise.",
  "    if length(numbers) <= 1\n        return numbers\n    \n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = number", "    if length(numbers)\
    \ < 2\n        return numbers\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = intersperse(numbers, delimeter)\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]",
  "    if length(numbers) == 0\n        return numbers\n    \n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[2:", "    if length(numbers) == 0\n        return\
    \ numbers\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    ", "    if length(numbers) < delimeter\n     \
    \   return numbers\n    else\n        numbers[end+1:end+delimeter+1] = numbers[end+1:end+delimeter+1].+delimeter\n\
    \        return numbers[end+1:end+delimeter+1]\n    end\nend\n</code>\n<|/ a tags=julia,arrays\
    \ |>\n<| a tags=julia,arrays |>\nThe easiest way is to use join:\n<code>\njulia>\
    \ numbers = [1,2,3]\n3-element Array{Int64,1}:\n 1\n 2\n 3", "    if length(numbers)\
    \ == 0\n        return numbers\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    if length(numbers)\
    \ < delimeter\n        numbers\n    else\n        numbers[1 : length(numbers)\
    \ - (delimeter - length(numbers))] + delimeter * ones(delimeter - length(numbers))\n\
    \    end\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia |>\nA simple solution\
    \ would be to just use an if-else statement:\n<code>", "    numbers = numbers[:]\n\
    \    numbers[2:end] = numbers[2:end] + delimeter * [numbers[1]]\n    return numbers\n\
    end\n</cell>\n<code language=julia-1.5>\nintersperse([1,2,3], 4)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns the sum\
    \ of the squares of the integers in the vector. \nFor example, \n$$\n\\begin{align}\n\
    \\text{sum of the squares of integers} \n\\end{align}\n$$\nis \n$$\n\\begin{align}\n\
    \\text{sum of the squares of integers} \n\\end{align}\n$$\n$$\n\\begin{align}\n\
    \\text{sum of the squares of integers} \n\\end{align}\n$$\n$$\n\\begin{align}\n\
    \\text{sum of the squares of integers} \n\\end{align}\n$$\n$$\n\\begin{align}\n\
    \\text{sum of the squares of integers} \n\\end{align}\n$$\n$$\n\\begin{align}\n\
    \\text{sum of the squares of integers} \n\\end{align}\n$$\n$$\n\\begin{align}\n\
    \\text{sum of the squares of integers} \n\\end{align}\n$$\n$$\n\\begin{align}\n\
    \\text{sum of the squares of integers} \n\\end{align}\n$$\n$$\n\\begin{align}\n\
    \\text{sum of the squares of integers} \n\\end{align}\n$$\n$$\n\\begin{align}\n\
    \\text{sum of the squares of integers} \n\\end{align}\n$$\n$$\n\\begin{align}\n\
    \\text{sum of the squares of integers} \n\\end{align}\n$$\n$$\n\\begin{align}\n\
    \\text{sum of the squares of integers} \n\\end{align}\n$$\n$$\n\\begin{align}\n\
    \\text{sum of the squares of integers} \n\\end{align}\n$$\n$$\n\\begin{align}\n\
    \\text{sum of the squares of integers} \n\\end{align}\n$$\n$$\n\\begin{align}\n\
    \\text{sum of the squares of integers} \n\\end{align}\n$$\n$$\n\\begin{align}\n\
    \\text{sum of the squares of integers} \n\\end{align}\n$$\n$$\n\\begin{align}\n\
    \\text{sum of the squares of integers} \n\\end{align}\n$$\n$$\n\\begin{align}\n\
    \\text{sum of the squares of integers} \n\\end{align}\n$$\n$$\n\\begin{align}\n\
    \\text{sum of the squares of integers} \n\\end{", "    if length(numbers) < 2\n\
    \        return numbers\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    ", "    if length(numbers)\
    \ <= 1\n        return numbers\n    else\n        numbers = numbers[2:end]\n \
    \       numbers = numbers[1:end-1] ++ delimeter ++ numbers[2:end]\n    end\nend\n\
    </code>\n<|/ a tags=julia,arrays,list |>\n<| a dscore=2 |>\n<code>\njulia> function\
    \ intersperse(x::Vector{Int64}, delimeter::Int64)\n           return [x xs .=\
    \ [delimeter] xs .= x] .+ [delimeter]\n       end\nintersperse (generic function\
    \ with 1 method)", "    numbers = numbers[:]\n    numbers[2:end] = numbers[2:end]\
    \ + delimeter*ones(1, length(numbers)-2)\n    return numbers\nend\n</code>\n<|/\
    \ a tags=julia,arrays |>\n<| a dscore=2 |>\nA bit more concise and readable (IMHO)\
    \ solution using mapslices:\n<code>\njulia> function intersperse(numbers, delimeter)\n\
    \           mapslices(x -> x + delimeter, numbers, 2, length)(numbers)\n     \
    \  end\nintersperse (generic function with 1 method)", "    \n    numbers = numbers[:]\n\
    \    \n    if length(numbers) <= 1\n        return numbers\n    end\n    \n  \
    \  numbers[1] = numbers[1] + delimeter\n    \n    numbers[2:end] = numbers[2:end]\
    \ + numbers[1:end-1]\n    \n    return numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    intersperse([1, 2, 3], 4)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of integers and returns the sum of the squares of the integers\
    \ in the vector.", "    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]",
  "    \n    numbers = numbers[:]\n    \n    i = 0\n    \n    while i < length(numbers)\n\
    \        \n        numbers[i] = numbers[i] + delimeter\n        \n        i =\
    \ i + 1\n        \n    end\n    \n    return numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    intersperse([1,2,3], 4)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ an input string and returns the number of words in that string. \nThe input\
    \ string can contain spaces and punctuation. \nThe function should ignore punctuation\
    \ and spaces.\nThe function should ignore empty strings.\nThe function should\
    \ ignore numbers and symbols.\nThe function should ignore uppercase and lowercase\
    \ letters.\nThe function should ignore uppercase and lowercase letters.\nThe function\
    \ should ignore uppercase and lowercase letters.\nThe function should ignore uppercase\
    \ and lowercase letters.\nThe function should ignore uppercase and lowercase letters.\n\
    The function should ignore uppercase and lowercase letters.\nThe function should\
    \ ignore uppercase and lowercase letters.\nThe function should ignore uppercase\
    \ and lowercase letters.\nThe function should ignore uppercase and lowercase letters.\n\
    The function should ignore uppercase and lowercase letters.\nThe function should\
    \ ignore uppercase and lowercase letters.\nThe function should ignore uppercase\
    \ and lowercase letters.\nThe function should ignore uppercase and lowercase letters.\n\
    The function should ignore uppercase and lowercase letters.\nThe function should\
    \ ignore uppercase and lowercase letters.\nThe function should ignore uppercase\
    \ and lowercase letters.\nThe function should ignore uppercase and lowercase letters.\n\
    The function should ignore uppercase and lowercase letters.\nThe function should\
    \ ignore uppercase and lowercase letters.\nThe function should ignore uppercase\
    \ and lowercase letters.\nThe function should ignore uppercase and lowercase letters.\n\
    The function should ignore uppercase and lowercase letters.\nThe function should\
    \ ignore uppercase and lowercase letters.\nThe function should ignore uppercase\
    \ and lowercase letters.\nThe function should ignore uppercase and lowercase letters.\n\
    The function should ignore uppercase and lowercase letters.\nThe function should\
    \ ignore uppercase and lowercase letters.\nThe function should ignore uppercase\
    \ and lowercase letters.\nThe function should ignore uppercase and lowercase letters.\n\
    The function should ignore uppercase and lowercase letters.\nThe function should\
    \ ignore uppercase and lowercase letters.\nThe function should ignore uppercase\
    \ and lowercase letters.", "    if length(numbers) == 0\n        return numbers\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    ", "    numbers = numbers[:]\n    numbers[2:end] = numbers[2:end] .+\
    \ [delimeter]\n    return numbers\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes an input list and a number as input, and returns a new list with\
    \ the number interspersed between every two consecutive elements of the input\
    \ list. For example, intersperse([1, 2, 3, 4], 4) should return [1, 4, 2, 4, 3,\
    \ 1]. Make sure your function works with lists that contain different numbers\
    \ of elements.", "    numbers = numbers[:]\n    numbers[2:end] = numbers[2:end]\
    \ .+ delimeter\n    numbers\nend\n</cell>\n<code language=julia-1.5>\nintersperse([1,\
    \ 2, 3], 4)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns the sum of the squares of the integers in the vector.\
    \ \nFor example, \n$$ f([4, 9, 16]) = 25$$", "    numbers = numbers[:]\n    numbers[2:end]\
    \ = numbers[2:end] + delimeter * ones(1, length(numbers[2:end]))\n    return numbers\n\
    end\n</cell>\n<code language=julia-1.3>\nintersperse([1,2,3], 4)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes an input vector and returns the number\
    \ of elements that are not equal to zero.", "    if length(numbers) < delimeter\
    \ \n        numbers = numbers[end+1:end+delimeter]\n    end\n    return numbers\n\
    end\n</code>\n<|/ a tags=julia,list |>\n<| a dscore=0 |>\n<code>", "    if length(numbers)\
    \ < 2\n        return numbers\n    \n    numbers_copy = copy(numbers)\n    \n\
    \    numbers_copy[end-1:end] = numbers_copy[end-1:end] + delimeter\n    \n   \
    \ return numbers_copy\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector and returns the sum of the elements in the vector.", "    \n\
    \    numbers = numbers[:]\n    \n    i = 0\n    \n    while i < length(numbers)\n\
    \        \n        if i == length(numbers)\n            numbers[i] = numbers[i]\
    \ + delimeter\n            break\n        end\n        \n        if numbers[i]\
    \ + delimeter == numbers[i + 1]\n            numbers[i] = numbers[i] + delimeter\n\
    \            i += 1\n        else\n            numbers[i] = numbers[i] + delimeter\n\
    \            i += 1\n        end\n    end\n    \n    return numbers\nend\n</cell>\n\
    <code language=julia-1.5>\nintersperse([1, 2, 3], 4)\n</cell>\n<text>\nThe function\
    \ intersperse is defined in the file src/intersperse.jl.", "    numbers = numbers[:]\n\
    \    numbers[2:end] = numbers[2:end] + delimeter*ones(1, length(numbers[2:end]))\n\
    \    return numbers\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nThanks for your\
    \ answer! I like the idea of using an anonymous function and `map`, but this doesn't\
    \ seem to work as intended when `numbers` contains negative numbers. For example,\
    \ `intersperse([-4, -5, -6], 4)` returns `[-4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,\
    \ -4, -4, -4, -4, -4, -4, -4, ", "    numbers = numbers[:]\n    numbers[2:end]\
    \ = numbers[2:end] + delimeter\n    return numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    intersperse([1, 2, 3], 4)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector and returns a vector with each element multiplied by two. For\
    \ example, intersperse([1, 2, 3], 4) should return [2, 4, 6, 3, 8].", "    numbers\
    \ = numbers[:]\n    numbers[2:end] = numbers[2:end] .+ delimeter\n    return numbers\n\
    end\n</cell>\n<code language=julia-1.4>\nintersperse([1, 2, 3], 4)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ a vector of integers where the integers are in increasing order. For example,\
    \ if the input vector is [4, 2, 5, 1, 3], the output vector should be [4, 2, 5,\
    \ 1, 3].", "    if length(numbers) == 0\n        return numbers\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = intersperse(numbers, delimeter)\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]",
  "    \n    numbers = numbers[:]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[1:end-1]\n    \n    ", "    if length(numbers) == 0\n \
    \       numbers\n    else\n        numbers[2:end-1] .+ [delimeter] .+ numbers[2:end-1]\n\
    \    end\nend\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\n<code>", "  \
    \  if length(numbers) < delimeter\n        numbers\n    else\n        numbers[1\
    \ : length(numbers)] .+ delimeter .+ numbers[length(numbers) : end]\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes an input string\
    \ and returns the number of words in the string.", "    if length(numbers) < delimeter\
    \ \n        numbers = [numbers]\n    end\n    numbers[2:end] = numbers[2:end]\
    \ + delimeter\n    return numbers\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that takes a vector and returns a new vector where each element is the sum of\
    \ the previous two elements.", "    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n", "    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]", "    numbers = numbers[:]\n\
    \    numbers[2:end] = numbers[2:end] + delimeter * ones(length(numbers[2:end]),\
    \ 1)\n    return numbers\nend\n</code>\n<|/ a tags=julia,arrays |>\n<| c |>\n\
    This doesn't work for me. `intersperse([1,2,3], 4)` returns `[1, 4, 2, 4, 4, 3]`\
    \ instead of `[1, 4, 2, 4, 3]`.\n<|/ c |>\n<| c |>\nI tested it and it works.\
    \ I used Julia 0.6.2\n<|/ c |>\n<| c |>\nI tested it and it works. I used Julia\
    \ 0.6.2\n<|/ c |>\n<| c |>\nI tested it and it works. I used Julia 0.6.2\n<|/\
    \ c |>\n<| c |>\nI tested it and it works. I used Julia 0.6.2\n<|/ c |>\n<| a\
    \ tags=julia,arrays |>\nI came up with a solution that is more general than the\
    \ other answers posted here. It also works for arrays of any dimensionality (including\
    \ scalars). It also works for any type of collection (including arrays). \n<code>",
  "    if length(numbers) < 2\n        return numbers\n    else\n        interspersed_numbers\
    \ = numbers[2:end]\n        interspersed_numbers = [delimeter, interspersed_numbers...]\n\
    \        return numbers[2:end] + interspersed_numbers\n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the numbers in the vector. \nWrite a function that takes a vector\
    \ of numbers and returns the product of the numbers in the vector. \nWrite a function\
    \ that takes a vector of numbers and returns the maximum of the numbers in the\
    \ vector. \nWrite a function that takes a vector of numbers and returns the minimum\
    \ of the numbers in the vector. \nWrite a function that takes a vector of numbers\
    \ and returns the number of elements in the vector. \nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in the\
    \ vector. \nWrite a function that takes a vector of numbers and returns the product\
    \ of the squares of the numbers in the vector. \nWrite a function that takes a\
    \ vector of numbers and returns the maximum of the squares of the numbers in the\
    \ vector. \nWrite a function that takes a vector of numbers and returns the minimum\
    \ of the squares of the numbers in the vector. \nWrite a function that takes a\
    \ vector of numbers and returns the number of elements in the vector. \nWrite\
    \ a function that takes a vector of numbers and returns the sum of the cubes of\
    \ the numbers in the vector. \nWrite a function that takes a vector of numbers\
    \ and returns the product of the cubes of the numbers in the vector. \nWrite a\
    \ function that takes a vector of numbers and returns the maximum of the cubes\
    \ of the numbers in the vector. \nWrite a function that takes a vector of numbers\
    \ and returns the minimum of the cubes of the numbers in the vector. \nWrite a\
    \ function that takes a vector of numbers and returns the number of elements in\
    \ the vector. \nWrite a function that takes a vector of numbers and returns the\
    \ sum of the exponential of the numbers in the vector. \nWrite a function that\
    \ takes a vector of numbers and returns the product of the exponential of the\
    \ numbers in the vector. \nWrite a function that takes a vector of numbers and\
    \ returns the maximum of the exponential of the numbers in the vector. \nWrite\
    \ a function that takes a vector of numbers and returns the minimum of the exponential\
    \ of the numbers in the vector. \nWrite a function that takes a vector of numbers\
    \ and returns the number of elements in the vector. \nWrite a function that takes\
    \ a vector of numbers and returns the sum of the natural logarithms of the numbers\
    \ in the vector. \nWrite a function that takes a vector of numbers and returns\
    \ the product of the natural logarithms of the numbers in the vector. \nWrite\
    \ a function that takes a vector of numbers and returns the maximum of the natural\
    \ logarithms of the numbers in the vector. \nWrite a function that takes a vector\
    \ of numbers and returns the minimum of the natural logarithms of the numbers\
    \ in the vector. \nWrite a function that takes a vector of numbers and returns\
    \ the number of elements in the vector. \nWrite a function that takes a vector\
    \ of numbers and returns the sum of the absolute values of the numbers in the\
    \ vector. \nWrite a function that takes a vector of numbers and returns the product\
    \ of the absolute values of the numbers in the vector. \nWrite a function that\
    \ takes a vector of ", "    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    ", "    if length(numbers) < 2\n        return numbers\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    ", "    if length(numbers) == 0\n        return numbers\n    \n   \
    \ numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    ", "   \
    \ \n    numbers = numbers[:]\n    \n    if length(numbers) < 2\n        return\
    \ numbers\n    end\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n", "    numbers = numbers[:]\n    numbers[2:end]\
    \ = numbers[2:end] .+ delimeter\n    return numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    intersperse([1, 2, 3], 4)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes an input vector and returns the number of elements in the vector that\
    \ are less than or equal to 5", "    if length(numbers) == 0\n        return numbers\n\
    \    \n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    numbers\
    \ = numbers[1:end-1]\n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    numbers\
    \ = numbers[1:end-1]\n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    numbers\
    \ = numbers[1:end-1]\n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    numbers\
    \ = numbers[1:end-1]\n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]", "    if length(numbers) == 0\n        return numbers\n  \
    \  \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n\
    \    numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n", "    numbers = numbers[:]\n    numbers[2:end] = numbers[2:end]\
    \ + delimeter\n    return numbers\nend\n</cell>\n<code language=julia-1.5>\nintersperse([1,2,3],\
    \ 4)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the first n prime\
    \ numbers. \nHint: use isPrime to check whether a number is prime.", "    if length(numbers)\
    \ == 0\n        return numbers\n    \n    numbers = numbers[2:end]\n    \n   \
    \ numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    ", "    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers\
    \ = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n", "    numbers =\
    \ numbers[:]\n    numbers[2:end] = numbers[2:end] .+ delimeter\n    return numbers\n\
    end\n</code>\n<|/ a |>\n<| a dscore=0 |>\nI wrote a function that does this for\
    \ you:\n<code>", "    \n    numbers = numbers[:]\n    \n    i = 0\n    \n    while\
    \ i < length(numbers)\n        \n        numbers[i] = numbers[i] + delimeter\n\
    \        \n        i = i + 1\n        \n    end\n    \n    return numbers\nend\n\
    </cell>\n<code language=julia-1.5>", "    numbers = numbers[:]\n    numbers[2:end]\
    \ = numbers[2:end] .+ delimeter\n    return numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    intersperse([1, 2, 3], 4)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of integers and returns the sum of the squares of the integers\
    \ in the vector. \nThe function should raise an error if the vector is empty.",
  "    if length(numbers) == 0\n        return numbers\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers .+ [delimeter]\n    \n    numbers = numbers .+ numbers[2:end]\n\
    \    \n    return numbers\nend\n</cell>\n<code language=julia-1.5>\nintersperse([1,2,3],\
    \ 4)\n</cell>\n<text>\nThe function intersperse is defined above. Let's see how\
    \ it works.", "    if length(numbers) == 0\n        return numbers\n    \n   \
    \ numbers = numbers[2:end]\n    \n    numbers = intersperse(numbers, delimeter)\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers + [numbers[1]]\n\
    \    \n    return numbers\nend\n</cell>\n<code language=julia-1.4>\nintersperse([1,2,3],\
    \ 4)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of numbers\
    \ and returns the sum of the numbers in that vector. \nWrite a second function\
    \ that takes a vector of numbers and returns the product of the numbers in that\
    \ vector. \nWrite a third function that takes a vector of numbers and returns\
    \ the maximum of the numbers in that vector. \nWrite a fourth function that takes\
    \ a vector of numbers and returns the minimum of the numbers in that vector. \n\
    Write a fifth function that takes a vector of numbers and returns the median of\
    \ the numbers in that vector. \nWrite a sixth function that takes a vector of\
    \ numbers and returns the mode of the numbers in that vector. \nWrite a seventh\
    \ function that takes a vector of numbers and returns the variance of the numbers\
    \ in that vector. \nWrite a eighth function that takes a vector of numbers and\
    \ returns the standard deviation of the numbers in that vector. \nWrite a ninth\
    \ function that takes a vector of numbers and returns the sum of squares of the\
    \ numbers in that vector. \nWrite a tenth function that takes a vector of numbers\
    \ and returns the product of the numbers in that vector. \nWrite a eleventh function\
    \ that takes a vector of numbers and returns the sum of the numbers in that vector.\
    \ \nWrite a twelfth function that takes a vector of numbers and returns the product\
    \ of the numbers in that vector. \nWrite a thirteenth function that takes a vector\
    \ of numbers and returns the sum of the numbers in that vector. \nWrite a fourteenth\
    \ function that takes a vector of numbers and returns the product of the numbers\
    \ in that vector. \nWrite a fifteenth function that takes a vector of numbers\
    \ and returns the sum of the numbers in that vector. \nWrite a sixteenth function\
    \ that takes a vector of numbers and returns the product of the numbers in that\
    \ vector. \nWrite a seventeenth function that takes a vector of numbers and returns\
    \ the sum of the numbers in that vector. \nWrite a eighteenth function that takes\
    \ a vector of numbers and returns the product of the numbers in that vector. \n\
    Write a nineteenth function that takes a vector of numbers and returns the sum\
    \ of the numbers in that vector. \nWrite a twenty function that takes a vector\
    \ of numbers and returns the product of the numbers in that vector. \nWrite a\
    \ twenty-first function that takes a vector of numbers and returns the sum of\
    \ the numbers in that vector. \nWrite a twenty-second function that takes a vector\
    \ of numbers and returns the product of the numbers in that vector. \nWrite a\
    \ twenty-third function that takes a ", "    \n    numbers = numbers[:]\n    \n\
    \    if length(numbers) <= 1\n        return numbers\n    end\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    ", "    if length(numbers)\
    \ < 2\n        return numbers\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = intersperse(numbers, delimeter)\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]",
  "    numbers = numbers[:]\n    numbers = numbers[2:end-1] .+ [delimeter] .+ numbers[2:end-1]\n\
    \    return numbers\nend\n</cell>\n<code language=julia-1.3>", "    if length(numbers)\
    \ <= 1\n        return numbers\n    end\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n", "    \n    if length(numbers) < delimeter\n\
    \        return numbers\n    end\n    \n    numbers = numbers[2:end]\n    \n \
    \   numbers = numbers[1:end-1] .+ [delimeter] .+ numbers[2:end]\n    \n    return\
    \ numbers\nend\n</cell>\n<text>\nThe function intersperse is defined in the cell\
    \ above. Let's see how it works:", "    if length(numbers) < 2\n        return\
    \ numbers\n    \n    numbers = numbers[2:end]\n    \n    numbers = intersperse(numbers,\
    \ delimeter)\n    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]", "    if length(numbers)\
    \ < delimeter\n        return numbers\n    \n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[", " \
    \   if length(numbers) < 2\n        return numbers\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    ", "    numbers\
    \ = numbers[:]\n    numbers[2:end] = numbers[2:end] .+ delimeter\n    return numbers\n\
    end\n</cell>\n<text>\nExercise 7\nWrite a function that takes a vector of integers\
    \ and returns a vector where each element is the sum of the previous two elements.",
  "    if length(numbers) == 0 \n        return numbers \n    else \n        numbers\
    \ = numbers[2:end-1] \n        numbers = [numbers[1], delimeter, numbers[end-1]]\
    \ \n        numbers = intersperse(numbers, delimeter) \n        return numbers[2:end-1]\
    \ \n    end\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't seem to work.\
    \ `intersperse([1,2,3], 4)` returns `[4, 1, 4, 2, 3]` instead of `[4, 1, 4, 2,\
    \ 3]`.\n<|/ c |>\n<| c |>\nI fixed the bug, thanks for pointing it out. Now it\
    \ works.\n<|/ c |>\n<| a tags=julia |>\nHere's a version that works with any number\
    \ of elements and doesn't require any mutable variables:\n<code>", "    if length(numbers)\
    \ < 2\n        return numbers\n    else\n        interspersed_numbers = numbers[2:end]\n\
    \        interspersed_numbers = [delimeter, interspersed_numbers...]\n       \
    \ interspersed_numbers = interspersed_numbers[2:end]\n        interspersed_numbers\
    \ = [numbers[1], interspersed_numbers...]\n        return interspersed_numbers\n\
    \    end\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>", "    numbers\
    \ = numbers[:]\n    numbers[2:end] = numbers[2:end] + delimeter\n    return numbers\n\
    end\n</cell>\n<code language=julia-1.5>", "    numbers = numbers[:]\n    numbers[2:end]\
    \ = numbers[2:end] + delimeter\n    return numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    intersperse([1,2,3], 4)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ an array of numbers and returns the sum of the numbers in the array. \nWrite\
    \ a second function that takes an array of numbers and returns the product of\
    \ the numbers in the array. \nWrite a third function that takes an array of numbers\
    \ and returns the maximum of the numbers in the array. \nWrite a fourth function\
    \ that takes an array of numbers and returns the minimum of the numbers in the\
    \ array. \nWrite a fifth function that takes an array of numbers and returns the\
    \ median of the numbers in the array. \nWrite a sixth function that takes an array\
    \ of numbers and returns the standard deviation of the numbers in the array.",
  "    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]", "    numbers = numbers[:]\n\
    \    numbers[2:end] = numbers[2:end] + delimeter\n    return numbers\nend\n</cell>\n\
    <text>\nExercise 2: Write a function that returns the first element of a list.\n\
    Hint: Use a for loop."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
