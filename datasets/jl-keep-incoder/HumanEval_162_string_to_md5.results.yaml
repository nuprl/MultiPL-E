name: HumanEval_162_string_to_md5
language: julia
results:
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = Digest.new(\"md5\")\n        md5.update(text)\n        return md5.digest().hex\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpp1vupzob.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpp1vupzob.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = Digest.new(\"md5\") \n        md5.update(text) \n        return md5.digest()\
    \ \nend\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\")\n\
    </cell>\n<code language=julia-1.5>\nstring_to_md5(\"\")\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\")\n</cell>\n\
    <code language=julia-1.5>\nstring_to_md5(\"Hello world\") \u2260 string_to_md5(\"\
    Hello world\") \u2260 string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"\
    Hello world\") \u2260 string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"\
    Hello world\") \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    ) \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\")\
    \ \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\")\
    \ \u2260 string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"\
    Hello world\") \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello\
    \ world\") \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    ) \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\")\
    \ \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\")\
    \ \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\")\
    \ \u2260 string_to_md5(\"Hello world\")\n</cell>\n<code language=\nusing Test\n\
    \n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\"\
    ) == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\
    \t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp7wmzn8l3.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp7wmzn8l3.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdyv1mmpd.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdyv1mmpd.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return None \n    else \n        digest\
    \ = md5(text) \n        return digest.hexdigest() \nend \n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n  \
    \  If 'text' is an empty string, return None.\nusing Test\n\n@testset begin\n\n\
    candidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp970uhs_7.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp970uhs_7.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkgjxnuj5.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkgjxnuj5.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5_hash = md5(text) \n        md5_hash_string = md5_hash.hexdigest \n  \
    \      return md5_hash_string \nend\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    Hello world\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes in a\
    \ string and returns the number of characters in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"\
    3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"\
    A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"password\"\
    ) == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpwcro6x94.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpwcro6x94.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0kznxv6q.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0kznxv6q.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpa5rl5bb1.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpa5rl5bb1.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5e7no_qx.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5e7no_qx.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = Digest.new(\"md5\") \n        md5.update(text) \n        return md5.digest()\
    \ \nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string 'text',\
    \ return its sha1 hash equivalent string.\n    If 'text' is an empty string, return\
    \ None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp8siygouz.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp8siygouz.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Given\
    \ a string 'text', return its md5 hash equivalent string.\n    If 'text' is an\
    \ empty string, return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmplsrnwr4y.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmplsrnwr4y.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return None \n    else \n        return\
    \ md5(text) \nend \n</cell>\n<code language=julia-1.4>\n\"\"\"\n    md5_hash_to_string(md5hash::String)\n\
    using Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6q2s0sy8.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6q2s0sy8.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    md5(text::String)\n\
    using Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1j_s1m17.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1j_s1m17.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    md5(text::String)\n\
    using Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmph_09mxp3.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmph_09mxp3.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return None \n    else \n        md5hash\
    \ = md5(text) \n        return md5hash.hexdigest() \nend \n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    \")\n</cell>\n<text>\nExercise: Write a function that takes a string as input\
    \ and returns the md5 hash of the string converted to lowercase. Test it on several\
    \ strings and print the results.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpam5ki373.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpam5ki373.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = digest.MD5()\n        md5.update(text)\n        return md5.digest()\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a string\
    \ 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpwpazktvw.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpwpazktvw.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return None \n    else \n        md5\
    \ = Digest.new(\"md5\") \n        md5.update(text) \n        return md5.digest()\
    \ \nend\n</cell>\n<code language=julia-1.4>\nstring_to_md5(\"Hello world\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string as input and\
    \ returns the md5 hash equivalent string of the text converted to lowercase. \n\
    If 'text' is an empty string, return None.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwcyz0kgc.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwcyz0kgc.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        Digest(text).hexdigest\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn2y91xjt.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpn2y91xjt.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given\
    \ a string 'text', return its md5 hash equivalent string.\n    If 'text' is an\
    \ empty string, return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpf1upwnic.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpf1upwnic.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5(text) \n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\"\
    ) == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\
    \t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpn3f6dat4.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpn3f6dat4.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return None \n    else \n        digest\
    \ = digest(text) \n        return digest.hex \nend \nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpw13u6m__.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpw13u6m__.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpw13u6m__.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = Digest.new(\"md5\") \n        md5.update(text) \n        return md5.digest()\
    \ \nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\n\
    candidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpv4ztrpky.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpv4ztrpky.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = Digest.new(\"md5\") \n        md5.update(text) \n        return md5.digest()\
    \ \nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\n\
    candidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp9sn9vnte.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp9sn9vnte.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt94b2g55.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpt94b2g55.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.1>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpw4q__w_o.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpw4q__w_o.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1hqn451s.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1hqn451s.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmph5htjzru.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmph5htjzru.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxcdse9h2.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxcdse9h2.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given\
    \ a string 'text', return its md5 hash equivalent string.\n    If 'text' is an\
    \ empty string, return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp8hp2ve6v.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp8hp2ve6v.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwggsdh7l.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwggsdh7l.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt6uafv7z.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpt6uafv7z.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string\
    \ 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb9slx4bw.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpb9slx4bw.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgwhi2hnm.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgwhi2hnm.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        Digest(text).hexdigest\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvgcp3f2b.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvgcp3f2b.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return None \n    else \n        digest\
    \ = digest(text) \n        return digest.hex \nend \nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzk4d3frh.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpzk4d3frh.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpzk4d3frh.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = digest.MD5()\n        md5.update(text)\n        return md5.digest()\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    )\n</cell>\n<text>\nExercise\nWrite a function that takes a string and returns\
    \ the md5 hash equivalent of the string if it exists or None if it doesn't.\n\
    using Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpcda_l7oo.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpcda_l7oo.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        Digest(text).hexdigest\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8mdc7fa8.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8mdc7fa8.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = digest.MD5()\n        md5.update(text)\n        return md5.digest()\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpasb09uaa.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpasb09uaa.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = digest(text) \n        return md5\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpxc2epmma.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpxc2epmma.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Given\
    \ a string 'text', return its md5 hash equivalent string.\n    If 'text' is an\
    \ empty string, return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpaq5w5ghy.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpaq5w5ghy.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = digest.MD5()\n        md5.update(text)\n        return md5.digest()\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string\
    \ 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpj_xjbksa.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpj_xjbksa.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string\
    \ 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfy1qddti.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfy1qddti.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqmswwx71.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqmswwx71.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        Digest.MD5.hexdigest(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwqxf6614.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwqxf6614.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return None \n    else \n        digest\
    \ = digest.MD5()\n        digest.update(text)\n        return digest.hexdigest()\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a filename 'filename',\
    \ return the md5 hash equivalent string.\n    If 'filename' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx_8wkh_3.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpx_8wkh_3.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvp8wcazw.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvp8wcazw.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfy2mhk_k.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfy2mhk_k.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given\
    \ a string 'text', return its md5 hash equivalent string.\n    If 'text' is an\
    \ empty string, return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp5sztdr7s.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp5sztdr7s.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppt9eibbi.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppt9eibbi.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = Digest.new(\"md5\")\n        md5.update(text)\n        return md5.digest().hex\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpzqil07a2.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpzqil07a2.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</cell>\n<code language=julia-1.3>\nstring_to_md5(\"\
    Hello world\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ as input and returns the md5 hash equivalent of the string in hexadecimal format.\n\
    using Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpof1rs2qj.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpof1rs2qj.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplsbr63li.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplsbr63li.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpglibr6_l.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpglibr6_l.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    md5(text::String)::String\n\
    using Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd141c1zn.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpd141c1zn.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpklzrp4ns.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpklzrp4ns.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf62eoeeb.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpf62eoeeb.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a binary\
    \ 'data' string, return its md5 hash equivalent string.\n    If 'data' is an empty\
    \ string, return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpuewpq7et.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpuewpq7et.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a vector\
    \ of strings 'texts', return their md5 hash equivalent strings.\n    If 'texts'\
    \ is an empty vector, return an empty vector.\nusing Test\n\n@testset begin\n\n\
    candidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1kmesony.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1kmesony.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return None \n    else \n        md5hash\
    \ = MD5(string_to_bytes(text)).hexdigest() \n        return md5hash \nend\n</cell>\n\
    <code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpu26y_6xh.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpu26y_6xh.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a vector\
    \ of strings, return the md5 hash equivalent string.\n    If 'text' is an empty\
    \ string, return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp44ozarg2.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp44ozarg2.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = Digest.new(\"md5\")\n        md5.update(text)\n        return md5.digest()\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a string\
    \ 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp5m19xi1b.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp5m19xi1b.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return None \n    else \n        return\
    \ md5(text) \nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"\
    3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"\
    A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"password\"\
    ) == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8xvroa4x.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8xvroa4x.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = Digest.new(\"md5\") \n        md5.update(text) \n        return md5.digest()\
    \ \nend\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the md5 hash of that string as a hexadecimal string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"\
    3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"\
    A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"password\"\
    ) == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp52m6f9lj.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp52m6f9lj.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = Digest.new(\"md5\") \n        md5.update(text) \n        return md5.digest()\
    \ \nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\n\
    candidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpl7ehpw9z.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpl7ehpw9z.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a vector\
    \ of strings 'texts', return their md5 hash equivalent\n    strings. If 'texts'\
    \ is an empty vector, return None.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpu45kig_z.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpu45kig_z.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given\
    \ a string 'text', return its sha1 hash equivalent string.\n    If 'text' is an\
    \ empty string, return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpholutbr9.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpholutbr9.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return Nothing\n    else \n       \
    \ return md5(text)\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"\
    3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"\
    A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"password\"\
    ) == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2lx9o9jb.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2lx9o9jb.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_1lf6zrv.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_1lf6zrv.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj3xb0xgp.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpj3xb0xgp.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\nstring_to_md5(\"Hello world\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the md5 hash equivalent of the string in hexadecimal.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"\
    3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"\
    A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"password\"\
    ) == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp185fs1nm.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp185fs1nm.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        Digest(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a string\
    \ 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr_dtirwz.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpr_dtirwz.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.1>\n\"\"\"\n    Given a vector\
    \ of strings 'texts', return their md5 hash equivalent vector.\n    If 'texts'\
    \ is an empty vector, return an empty vector.\nusing Test\n\n@testset begin\n\n\
    candidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprkrvgtej.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprkrvgtej.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.1>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4lm0yecv.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4lm0yecv.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7sp_qr2o.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7sp_qr2o.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return None \n    else \n        digest\
    \ = Digest.new(\"md5\") \n        digest.update(text) \n        return digest.hexdigest\
    \ \nend\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\")\n\
    </cell>\n<text>\nExercise\nWrite a function that takes a string as input and returns\
    \ the md5 hash equivalent of the string in hexadecimal format. \nThe function\
    \ should return nothing if text is an empty string.\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptc9o63lm.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptc9o63lm.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\nstring_to_md5(\"Hello world\"\
    )\n</cell>\n<text>\nExercise\nWrite a function that takes a string and returns\
    \ the md5 hash equivalent of the string. \nWrite a function that takes a string\
    \ and returns the md5 hash equivalent of the string.\nWrite a function that takes\
    \ a string and returns the md5 hash equivalent of the string.\nWrite a function\
    \ that takes a string and returns the md5 hash equivalent of the string.\nWrite\
    \ a function that takes a string and returns the md5 hash equivalent of the string.\n\
    Write a function that takes a string and returns the md5 hash equivalent of the\
    \ string.\nWrite a function that takes a string and returns the md5 hash equivalent\
    \ of the string.\nWrite a function that takes a string and returns the md5 hash\
    \ equivalent of the string.\nWrite a function that takes a string and returns\
    \ the md5 hash equivalent of the string.\nWrite a function that takes a string\
    \ and returns the md5 hash equivalent of the string.\nWrite a function that takes\
    \ a string and returns the md5 hash equivalent of the string.\nWrite a function\
    \ that takes a string and returns the md5 hash equivalent of the string.\nWrite\
    \ a function that takes a string and returns the md5 hash equivalent of the string.\n\
    Write a function that takes a string and returns the md5 hash equivalent of the\
    \ string.\nWrite a function that takes a string and returns the md5 hash equivalent\
    \ of the string.\nWrite a function that takes a string and returns the md5 hash\
    \ equivalent of the string.\nWrite a function that takes a string and returns\
    \ the md5 hash equivalent of the string.\nWrite a function that takes a string\
    \ and returns the md5 hash equivalent of the string.\nWrite a function that takes\
    \ a string and returns the md5 hash equivalent of the string.\nWrite a function\
    \ that takes a string and returns the md5 hash equivalent of the string.\nWrite\
    \ a function that takes a string and returns the md5 hash equivalent of the string.\n\
    Write a function that takes a string and returns the md5 hash equivalent of the\
    \ string.\nWrite a function that takes a string and returns the md5 hash equivalent\
    \ of the string.\nWrite a function that takes a string and returns the md5 hash\
    \ equivalent of the string.\nWrite a function that takes a string and returns\
    \ the md5 hash equivalent of the string.\nWrite a function that takes a string\
    \ and returns the md5 hash equivalent of the string.\nWrite a function that takes\
    \ a string and returns the md5 hash equivalent of the string.\nWrite a function\
    \ that takes a string and returns the md5 hash equivalent of the string.\nWrite\
    \ a function that takes a string and returns the md5 hash equivalent of the string.\n\
    Write a function that takes a string and returns the md5 hash equivalent of the\
    \ string.\nWrite a function that takes a string and returns the md5 hash equivalent\
    \ of the string.\nWrite a function that takes a string and returns the md5 hash\
    \ equivalent of the string.\nWrite a function that takes a string and returns\
    \ the md5 hash equivalent of the string.\nWrite a \nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7ku4d7ng.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7ku4d7ng.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5_hash = md5_hasher(text) \n        return md5_hash.hexdigest() \nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp5alyvumx.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp5alyvumx.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.1>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp79ak2a_1.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp79ak2a_1.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.1>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp42vyz26t.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp42vyz26t.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl77033um.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpl77033um.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return None \n    else \n        return\
    \ md5(text) \nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"\
    3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"\
    A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"password\"\
    ) == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4gs76afw.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4gs76afw.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\"\
    ) == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\
    \t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp1mviaqw9.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp1mviaqw9.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxmu29gwt.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxmu29gwt.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return Nothing\n    else \n  \
    \      md5 = digest.MD5()\n        md5.update(text)\n        return md5.digest()\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpy5sah5sp.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpy5sah5sp.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        Digest(text).hexdigest\n\
    \    end\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nI wrote a small library\
    \ to do this in Julia:\n<code>\nusing MD5\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi03wiaen.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpi03wiaen.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptmc9gg7s.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptmc9gg7s.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a binary\
    \ file 'filename', return the md5 hash equivalent string.\n    If 'filename' is\
    \ an empty string, return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7mcpsfog.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7mcpsfog.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return None \n    else \n        return\
    \ md5(text) \nend \n</cell>\n<code language=julia-1.3>\n\"\"\"\nGiven a string\
    \ 'text', return its sha1 hash equivalent string.\nIf 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpimi5uur_.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpimi5uur_.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given\
    \ a string 'text', return its md5 hash equivalent string.\n    If 'text' is an\
    \ empty string, return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp3co028sd.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp3co028sd.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5rkl6so6.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5rkl6so6.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return None \n    else \n        md5\
    \ = md5(text) \n        return md5.hexdigest() \nend \n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    Given a filename 'filename', return the md5 hash equivalent string.\n\
    \    If 'filename' is an empty string, return None.\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf89f_eiv.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpf89f_eiv.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp54sg82on.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp54sg82on.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = digest.MD5()\n        md5.update(text)\n        return md5.digest()\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpccvfwwv1.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpccvfwwv1.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return Nothing \n    else \n      \
    \  digest = md5(text) \n        return digest.hexdigest \nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpujde7kyu.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpujde7kyu.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = Digest.new(\"md5\") \n        md5.update(text) \n        return md5.digest()\
    \ \nend\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the md5 hash of that string.\nWrite a function that takes a string and returns\
    \ the md5 hash of that string as a hexadecimal string.\nWrite a function that\
    \ takes a string and returns the md5 hash of that string as a binary string.\n\
    Write a function that takes a string and returns the md5 hash of that string as\
    \ a base64 encoded string.\nWrite a function that takes a string and returns the\
    \ md5 hash of that string as a base64 encoded string with padding characters.\n\
    Write a function that takes a string and returns the md5 hash of that string as\
    \ a base64 encoded string with padding characters and a length parameter.\nWrite\
    \ a function that takes a string and returns the md5 hash of that string as a\
    \ base64 encoded string with padding characters, a length parameter, and a type\
    \ parameter.\nWrite a function that takes a string and returns the md5 hash of\
    \ that string as a base64 encoded string with padding characters, a length parameter,\
    \ and a type parameter and a digest parameter.\nWrite a function that takes a\
    \ string and returns the md5 hash of that string as a base64 encoded string with\
    \ padding characters, a length parameter, and a type parameter, an encoding parameter,\
    \ and a digest parameter.\nWrite a function that takes a string and returns the\
    \ md5 hash of that string as a base64 encoded string with padding characters,\
    \ a length parameter, and a type parameter, an encoding parameter, and a digest\
    \ parameter and a salt parameter.\nWrite a function that takes a string and returns\
    \ the md5 hash of that string as a base64 encoded string with padding characters,\
    \ a length parameter, and a type parameter, an encoding parameter, and a digest\
    \ parameter, an encoding parameter, and a salt parameter.\nWrite a function that\
    \ takes a string and returns the md5 hash of that string as a base64 encoded string\
    \ with padding characters, a length parameter, and a type parameter, an encoding\
    \ parameter, and a digest parameter, an encoding parameter, and a salt parameter\
    \ and a iteration parameter.\nWrite a function that takes a string and returns\
    \ the md5 hash of that string as a base64 encoded string with padding characters,\
    \ a length parameter, and a type parameter, an encoding parameter, and a digest\
    \ parameter, an encoding parameter, and a salt parameter, an iteration parameter,\
    \ and a salt parameter.\nWrite a function that takes a string and returns the\
    \ md5 hash of that string as a base64 encoded string with padding characters,\
    \ a \nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmprty1hulu.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmprty1hulu.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = Digest.new(\"md5\") \n        md5.update(text) \n        return md5.digest()\
    \ \nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\n\
    candidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp7jkzi143.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp7jkzi143.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcldbri01.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcldbri01.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6rxft824.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6rxft824.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj4qaj9zo.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpj4qaj9zo.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a vector\
    \ of strings, return their md5 hash equivalent vector.\n    If 'text' is an empty\
    \ vector, return an empty vector.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpur1592ws.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpur1592ws.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcfs2kzy6.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcfs2kzy6.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a string\
    \ 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcqzdx79q.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcqzdx79q.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given\
    \ a string 'text', return its md5 hash equivalent string.\n    If 'text' is an\
    \ empty string, return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpi6td6l4a.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpi6td6l4a.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = Digest.new(\"md5\") \n        md5.update(text) \n        return md5.digest()\
    \ \nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\n\
    candidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpdbzemt_o.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpdbzemt_o.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return None \n    else \n        md5\
    \ = Digest.new(\"md5\") \n        md5.update(text) \n        return md5.digest()\
    \ \nend\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\")\n\
    </cell>\n<code language=julia-1.5>\nstring_to_md5(\"\")\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\")\n</cell>\n\
    <code language=julia-1.5>\nstring_to_md5(\"Hello world\") \u2260 string_to_md5(\"\
    Hello world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    ) \u2260 string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\")\n</cell>\n\
    <code language=julia-1.5>\nstring_to_md5(\"Hello world\") \u2260 string_to_md5(\"\
    Hello world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    ) \u2260 string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\")\n</cell>\n\
    <code language=julia-1.5>\nstring_to_md5(\"Hello world\") \u2260 string_to_md5(\"\
    Hello world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    ) \u2260 string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\")\n</cell>\n\
    <code language=julia-1.5>\nstring_to_md5(\"Hello world\") \u2260 string_to_md5(\"\
    Hello world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    ) \u2260 string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\")\n</cell>\n\
    <code language=julia-1.5>\nstring_to_md5(\"Hello world\") \u2260 string_to_md5(\"\
    Hello world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    ) \u2260 string_to_md5(\"Hello world\")\n</cell>\n<code language=juli\nusing Test\n\
    \n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\"\
    ) == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\
    \t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpku726z2y.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpku726z2y.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = Digest.new(\"md5\")\n        md5.update(text.encode())\n        return\
    \ md5.digest()\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\"\
    ) == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\
    \t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpsq1f28ol.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpsq1f28ol.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    )\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\") === string_to_md5(\"\
    Hello world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8oxgaljc.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8oxgaljc.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd8m762zz.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpd8m762zz.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3w_e76hp.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3w_e76hp.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given\
    \ a string 'text', return its md5 hash equivalent string.\n    If 'text' is an\
    \ empty string, return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpj4_d121_.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpj4_d121_.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return Nothing\n    else \n  \
    \      md5 = Digest.new(\"md5\")\n        md5.update(text)\n        return md5.digest\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp7to0ihdm.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp7to0ihdm.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = digest(text) \n        return md5 \nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp2vgbmfyo.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp2vgbmfyo.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    md5(text::String)\n\
    using Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzxhyrg6j.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzxhyrg6j.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string\
    \ 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp2coy5ai.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpp2coy5ai.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnfij2auk.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnfij2auk.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = digest.MD5()\n        md5.update(text)\n        return md5.digest()\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\nstring_to_md5(\"Hello world\"\
    )\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the md5 hash of that string.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpa1yj_761.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpa1yj_761.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a binary\
    \ file 'filename', return its md5 hash equivalent string.\n    If 'filename' is\
    \ an empty string, return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg3_2difc.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpg3_2difc.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return None \n    else \n        md5hash\
    \ = md5(text) \n        return md5hash.hexdigest() \nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3emp0g4x.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3emp0g4x.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.1>\n\"\"\"\n    Given a string\
    \ 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpiihtlm4_.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpiihtlm4_.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = Digest.new(\"md5\")\n        md5.update(text)\n        return md5.digest().hex\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpccme_ag2.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpccme_ag2.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return None \n    else \n        md5\
    \ = digest.new() \n        md5.update(text) \n        return md5.digest() \nend\n\
    </cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy_kekm61.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpy_kekm61.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5(text) \nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia |>\nFor those\
    \ who are looking for a simple way to hash a string in Julia, here is a simple\
    \ implementation:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpxo6hooa1.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpxo6hooa1.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string\
    \ 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzpk10lcr.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzpk10lcr.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\nstring_to_md5(\"Hello world\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes in two strings and\
    \ returns their md5 hash equivalent strings. \nIf either of the strings is an\
    \ empty string, return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppysi4_19.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppysi4_19.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = digest.MD5()\n        md5.update(text)\n        return md5.digest()\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpt0r78fa2.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpt0r78fa2.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5(text) \n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\"\
    ) == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\
    \t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmptmt31lig.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmptmt31lig.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg__4eoyf.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpg__4eoyf.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return None \n    else \n        digest\
    \ = Digest.new(\"md5\") \n        digest.update(text) \n        return digest.hexdigest\
    \ \nend\n</cell>\n<code language=julia-1.4>\nstring_to_md5(\"Hello world\")\n\
    </cell>\n<text>\nExercise\nWrite a function that takes a string and returns the\
    \ md5 hash equivalent of the string. \nFor example, string_to_md5(\"Hello world\"\
    ) should return 3e25960a79dbc69b674cd4ec67a72c62\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4ysg3atn.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4ysg3atn.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    Hello world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\")\n</cell>\n<code\
    \ language=julia-1.5>\nstring_to_md5(\"Hello world\") === string_to_md5(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\")\n</cell>\n<code\
    \ language=julia-1.5>\nstring_to_md5(\"Hello world\") === string_to_md5(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\")\n</cell>\n<code\
    \ language=julia-1.5>\nstring_to_md5(\"Hello world\") === string_to_md5(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\")\n</cell>\n<code\
    \ language=julia-1.5>\nstring_to_md5(\"Hello world\") === string_to_md5(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\")\n</cell>\n<code language=\n\
    using Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpkl4f9dtp.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpkl4f9dtp.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string\
    \ 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb5bk33bm.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpb5bk33bm.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = digest.MD5()\n        md5.update(text)\n        return md5.digest()\n\
    \    end\nend\n</cell>\n<code language=julia-1.1>\nstring_to_md5(\"Hello world\"\
    )\n</cell>\n<code language=julia-1.1>\nstring_to_md5(\"\")\n</cell>\n<code language=julia-1.1>\n\
    string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\")\n</cell>\n\
    <code language=julia-1.1>\nstring_to_md5(\"Hello world\") \u2260 string_to_md5(\"\
    Hello world\") \u2260 string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.1>\n\
    string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"\
    Hello world\") \u2260 string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.1>\n\
    string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"\
    Hello world\") \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.1>\nstring_to_md5(\"Hello world\"\
    ) \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\")\
    \ \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\")\
    \ \u2260 string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.1>\n\
    string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"\
    Hello world\") \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello\
    \ world\") \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.1>\nstring_to_md5(\"Hello world\"\
    ) \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\")\
    \ \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\")\
    \ \u2260 string_to_md5(\"Hello world\") \u2260 string_to_md5(\"Hello world\")\
    \ \u2260 string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello\
    \ world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") ==\
    \ nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpr80y2q4f.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpr80y2q4f.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5(text) \n    end\nend\n</cell>\n<code language=julia-1.4>\nstring_to_md5(\"\
    Hello world\")\n</cell>\n<code language=julia-1.4>\nstring_to_md5(\"\")\n</cell>\n\
    <text>\nExercise\nWrite a function that takes a string as input and returns the\
    \ md5 hash equivalent of the string in hexadecimal.\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp0687rugq.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp0687rugq.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4f9xogfk.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4f9xogfk.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5(text) \n    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n  \
    \  md5(text::String)\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpc36iojpq.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpc36iojpq.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5ay6j7e8.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5ay6j7e8.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given\
    \ a string 'text', return its md5 hash equivalent string.\n    If 'text' is an\
    \ empty string, return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp0fkzj39r.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp0fkzj39r.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp281gquok.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp281gquok.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    md5(text::String)\n\
    using Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo590dl1t.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpo590dl1t.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.1>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm4lgwp1n.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpm4lgwp1n.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a string\
    \ 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpujqqd6dk.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpujqqd6dk.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = Digest.new(\"md5\")\n        md5.update(text)\n        return md5.digest().hex\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpzm1xqvpt.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpzm1xqvpt.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = Digest.new(\"md5\")\n        md5.update(text)\n        return md5.digest().hex\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\nstring_to_md5(\"Hello world\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the md5 hash equivalent of the string in hexadecimal format. \nFor example,\
    \ string_to_hex(\"Hello world\") should return \"3e25960a79dbc69b674cd4ec67a72c62\"\
    .\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpbn8mivgo.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpbn8mivgo.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr9lck_hd.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpr9lck_hd.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdrea9i_3.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdrea9i_3.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return Nothing \n    else \n      \
    \  digest = md5(text) \n        return digest.hexdigest() \nend \n</cell>\n<code\
    \ language=julia-1.5>\nstring_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\") == string_to_md5(\"Hello world\")\n</cell>\n<code\
    \ language=julia-1.5>\nstring_to_md5(\"Hello world\") == string_to_md5(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    ) == string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    Hello world\") == string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\") == string_to_md5(\"Hello world\")\n</cell>\n<code\
    \ language=julia-1.5>\nstring_to_md5(\"Hello world\") == string_to_md5(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    ) == string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    Hello world\") == string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\") == string_to_md5(\"Hello world\")\n</cell>\n<code\
    \ language=julia-1.5>\nstring_to_md5(\"Hello world\") == string_to_md5(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    ) == string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    Hello world\") == string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\") == string_to_md5(\"Hello world\")\n</cell>\n<code\
    \ language=julia-1.5>\nstring_to_md5(\"Hello world\") == string_to_md5(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    ) == string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    Hello world\") == string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\") == string_to_md5(\"Hello world\")\n</cell>\n<code\
    \ language=julia-1.5>\nstring_to_md5(\"Hello world\") == string_to_md5(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\n\
    using Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptzvq7px2.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptzvq7px2.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = Digest.new(\"md5\")\n        md5.update(text)\n        return md5.digest().hex\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpelhnlnv6.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpelhnlnv6.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5(text) \n    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n  \
    \  Given a string 'text', return its md5 hash equivalent string.\n    If 'text'\
    \ is an empty string, return None.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpm7prbqgm.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpm7prbqgm.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return None \n    else \n        return\
    \ md5(text) \nend \n</cell>\n<code language=julia-1.3>\n\"\"\"\n    md5(text::String)\n\
    using Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq3l3myb3.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpq3l3myb3.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = digest.MD5()\n        md5.update(text)\n        return md5.digest()\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Given a string\
    \ 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpxmi6jg2l.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpxmi6jg2l.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = Digest.new(\"md5\")\n        md5.update(text)\n        return md5.digest()\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpr7j5lr5e.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpr7j5lr5e.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    Hello world\")\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ and returns the md5 hash of that string as a hexadecimal string.\nusing Test\n\
    \n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\"\
    ) == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\
    \t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp9p55mz6i.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp9p55mz6i.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_rn4rd_v.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_rn4rd_v.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = Digest.new(\"md5\") \n        md5.update(text) \n        return md5.digest()\
    \ \nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\n\
    candidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpgz4ile2k.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpgz4ile2k.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        Digest(text).hexdigest\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdo2v3piz.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdo2v3piz.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.1>\n\"\"\"\n    Given a string\
    \ 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmps9hf0fbr.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmps9hf0fbr.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        Digest(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp8ll1cjy.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpp8ll1cjy.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return None \n    else \n        md5\
    \ = md5(text) \n        return md5.hex \nend \nusing Test\n\n@testset begin\n\n\
    candidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpav5dze1z.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpav5dze1z.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpav5dze1z.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjvtldou6.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjvtldou6.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string\
    \ 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_oibvg5n.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_oibvg5n.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string\
    \ 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfa8pw6jl.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfa8pw6jl.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpaz68khuf.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpaz68khuf.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5(text) \n    end\nend\n</cell>\n<code language=julia-1.1>\n\"\"\"\n  \
    \  md5(text::String)\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpat53ftnb.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpat53ftnb.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.1>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2mjdhoq9.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2mjdhoq9.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return Nothing \n    else \n      \
    \  digest = Digest.new(\"md5\") \n        digest.update(text) \n        return\
    \ digest.hexdigest \nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"\
    3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"\
    A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"password\"\
    ) == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp0yq13k4.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpp0yq13k4.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = digest(text) \n        md5 = \"$\" + md5\n        return md5\n    end\n\
    end\n</cell>\n<code language=julia-1.1>\n\"\"\"\n    Given a string 'text', return\
    \ its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\
    using Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp4o7zh9jr.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp4o7zh9jr.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return None \n    else \n        digest\
    \ = digest(text) \n        return digest.hex \nend \nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp17hn5wey.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp17hn5wey.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp17hn5wey.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return None \n    else \n        digest\
    \ = digest(text) \n        return digest.hex \nend \nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpc5vvu3u2.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpc5vvu3u2.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpc5vvu3u2.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.1>\nstring_to_md5(\"Hello world\"\
    )\n</cell>\n<text>\nExercise\nWrite a function that takes a string and returns\
    \ the md5 hash equivalent of the string. \nWrite a function that takes a string\
    \ and returns the md5 hash equivalent of the string. \nWrite a function that takes\
    \ a string and returns the md5 hash equivalent of the string. \nWrite a function\
    \ that takes a string and returns the md5 hash equivalent of the string. \nWrite\
    \ a function that takes a string and returns the md5 hash equivalent of the string.\
    \ \nWrite a function that takes a string and returns the md5 hash equivalent of\
    \ the string. \nWrite a function that takes a string and returns the md5 hash\
    \ equivalent of the string. \nWrite a function that takes a string and returns\
    \ the md5 hash equivalent of the string. \nWrite a function that takes a string\
    \ and returns the md5 hash equivalent of the string. \nWrite a function that takes\
    \ a string and returns the md5 hash equivalent of the string. \nWrite a function\
    \ that takes a string and returns the md5 hash equivalent of the string. \nWrite\
    \ a function that takes a string and returns the md5 hash equivalent of the string.\
    \ \nWrite a function that takes a string and returns the md5 hash equivalent of\
    \ the string. \nWrite a function that takes a string and returns the md5 hash\
    \ equivalent of the string. \nWrite a function that takes a string and returns\
    \ the md5 hash equivalent of the string. \nWrite a function that takes a string\
    \ and returns the md5 hash equivalent of the string. \nWrite a function that takes\
    \ a string and returns the md5 hash equivalent of the string. \nWrite a function\
    \ that takes a string and returns the md5 hash equivalent of the string. \nWrite\
    \ a function that takes a string and returns the md5 hash equivalent of the string.\
    \ \nWrite a function that takes a string and returns the md5 hash equivalent of\
    \ the string. \nWrite a function that takes a string and returns the md5 hash\
    \ equivalent of the string. \nWrite a function that takes a string and returns\
    \ the md5 hash equivalent of the string. \nWrite a function that takes a string\
    \ and returns the md5 hash equivalent of the string. \nWrite a function that takes\
    \ a string and returns the md5 hash equivalent of the string. \nWrite a function\
    \ that takes a string and returns the md5 hash equivalent of the string. \nWrite\
    \ a function that takes a string and returns the md5 hash equivalent of the string.\
    \ \nWrite a function that takes a string and returns the md5 hash equivalent of\
    \ the string. \nWrite a function that takes a string and returns the md5 hash\
    \ equivalent of the string. \nWrite a function that takes a string and returns\
    \ the md5 hash equivalent of the string. \nWrite a function that takes a string\
    \ and returns the md5 hash equivalent of the string. \nWrite a function that takes\
    \ a string and returns the md5 hash equivalent of the string. \n\nusing Test\n\
    \n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\"\
    ) == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\
    \t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwfx8zmap.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwfx8zmap.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return None \n    else \n        digest\
    \ = Digest.new(\"md5\") \n        digest.update(text) \n        return digest.hexdigest\
    \ \nend \n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\n\
    candidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfkvx4tjh.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfkvx4tjh.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return Nothing \n    else \n      \
    \  md5 = md5(text) \n        return md5.hexdigest() \nend \n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n  \
    \  If 'text' is an empty string, return None.\nusing Test\n\n@testset begin\n\n\
    candidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqp3v3hcb.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqp3v3hcb.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5_hash = md5(text) \n        return md5_hash.hexdigest \nend\n</cell>\n\
    <code language=julia-1.1>\n\"\"\"\n    Given a string 'text', return its sha1\
    \ hash equivalent string.\n    If 'text' is an empty string, return None.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello\
    \ world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") ==\
    \ nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpcehj7tl3.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpcehj7tl3.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given\
    \ a vector of strings, return their md5 hash equivalent vector.\n    If 'text'\
    \ is an empty vector, return an empty vector.\nusing Test\n\n@testset begin\n\n\
    candidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpherdk4g0.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpherdk4g0.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given\
    \ a string 'text', return its md5 hash equivalent string.\n    If 'text' is an\
    \ empty string, return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpaktx7r1k.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpaktx7r1k.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return Nothing\n    else \n       \
    \ hash = md5(text)\n        return hash.digest() \nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpiixzzxa0.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpiixzzxa0.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpa_ihfzvd.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpa_ihfzvd.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn9pul654.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpn9pul654.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given\
    \ a string 'text', return its md5 hash equivalent string.\n    If 'text' is an\
    \ empty string, return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpexm2m5wi.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpexm2m5wi.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a binary\
    \ 'data' string, return its md5 hash equivalent string.\n    If 'data' is an empty\
    \ string, return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkyymw2pz.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkyymw2pz.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7ok89lqo.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7ok89lqo.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4rs53jhf.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4rs53jhf.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5(text) \n    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n  \
    \  Given a string 'text', return its md5 hash equivalent string.\n    If 'text'\
    \ is an empty string, return None.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpq9r5xbm7.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpq9r5xbm7.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return Nothing\n    else \n  \
    \      md5(text) \n    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n\
    \    Given a string 'text', return its md5 hash equivalent string.\n    If 'text'\
    \ is an empty string, return None.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpz9cfc3jb.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpz9cfc3jb.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjytgsg0e.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjytgsg0e.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.1>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpewnf3_h5.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpewnf3_h5.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given\
    \ a vector of strings 'texts', return their md5 hash equivalent vectors.\n   \
    \ If 'texts' is an empty vector, return an empty vector.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"\
    3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"\
    A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"password\"\
    ) == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp6v1wtwmz.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp6v1wtwmz.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5_hash = md5_hasher(text) \n        md5_hash == md5_hasher(text) == md5_hasher(text)\
    \ == md5_hasher(text) == md5_hasher(text) == md5_hasher(text) == md5_hasher(text)\
    \ == md5_hasher(text) == md5_hasher(text) == md5_hasher(text) == md5_hasher(text)\
    \ == md5_hasher(text) == md5_hasher(text) == md5_hasher(text) == md5_hasher(text)\
    \ == md5_hasher(text) == md5_hasher(text) == md5_hasher(text) == md5_hasher(text)\
    \ == md5_hasher(text) == md5_hasher(text) == md5_hasher(text) == md5_hasher(text)\
    \ == md5_hasher(text) == md5_hasher(text) == md5_hasher(text) == md5_hasher(text)\
    \ == md5_hasher(text) == md5_hasher(text) == md5_hasher(text) == md5_hasher(text)\
    \ == md5_hasher(text) == md5_hasher(text) == md5_hasher(text) == md5_hasher(text)\
    \ == md5_hasher(text) == md5_hasher(text) == md5_hasher(text) == md5_hasher(text)\
    \ == md5_hasher(text) == md5_hasher(text) == md5_hasher(text) == md5_hasher(text)\
    \ == md5_hasher(text) == md5_hasher(text) == md5_hasher(text) == md5_hasher(text)\
    \ == md5_hasher(text) == md5_hasher(text) == md5_hasher(text) == md5_hasher(text)\
    \ == md5_hasher(text) == md5_hasher(text) == md5_hasher(text) == md5_hasher(text)\
    \ == md5_hasher(text) == md5_hasher(text) == md5_hasher(text) == md5_hasher(text)\
    \ == md5_hasher(text) == md5_hasher(text) == md5_hasher(text) == md5_hasher(text)\
    \ == md5_hasher(text) == md5_hasher(text) == md5_hasher(text) == md5_hasher(text)\
    \ == md5_hasher(text) == md5_hasher(text) == md5_hasher(text) == md5_hasher(text)\
    \ == md5_hasher(text) == md5_hasher(text) == md5_hasher(text) == md5_hasher(text)\
    \ == md5_hasher(text) == md5_hasher(text) == md5_hasher(text) == md5_hasher(text)\
    \ == md5_hasher(text) == md5_hasher(text) == md5_hash\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"\
    3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"\
    A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"password\"\
    ) == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpamho9yi9.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpamho9yi9.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpa17pgem1.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpa17pgem1.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5_hash = md5_hasher(text) \n        return md5_hash.hexdigest() \nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpuu_i_qe0.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpuu_i_qe0.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = digest.new()\n        md5.update(text)\n        return md5.digest()\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp83_h254m.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp83_h254m.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzahjicuo.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzahjicuo.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpixugi_mk.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpixugi_mk.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return Nothing\n    else \n       \
    \ md5hash = MD5()\n        md5hash.update(text)\n        return md5hash.hexdigest()\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a string\
    \ 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpaohe6cad.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpaohe6cad.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqi1monpo.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqi1monpo.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpok8v3kqi.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpok8v3kqi.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    md5(text::String)\n\
    using Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvvjy932e.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvvjy932e.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = digest.MD5()\n        md5.update(text)\n        return md5.digest()\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpb5dil84e.jl:9\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpb5dil84e.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxu7ckrn6.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxu7ckrn6.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a vector\
    \ of strings 'texts', return their md5 hash equivalent vectors.\n    If 'texts'\
    \ is an empty vector, return an empty vector.\nusing Test\n\n@testset begin\n\n\
    candidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpa2a13sf2.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpa2a13sf2.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return None \n    else \n        return\
    \ md5(text) \nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string\
    \ 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6yd65_vk.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6yd65_vk.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello\
    \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        Digest(text).hexdigest\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string\
    \ 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo8u3hryf.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpo8u3hryf.jl:14\n"
  exit_code: 1
  status: Exception
