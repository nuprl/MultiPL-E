name: HumanEval_89_encrypt
language: julia
results:
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A'..'Z')\n    rotated_alphabet = ('A'..'Z')\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rot\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpr1gz8huw.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpr1gz8huw.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = ('A'..'Z')\n    \n    alphabet = alphabet[(alphabet.size\
    \ - 1)::-1]\n    \n    alphabet = alphabet[(alphabet.size - 1)::-1]\n    \n  \
    \  alphabet = alphabet[(alphabet.size - 1)::-1]\n    \n    alphabet = alphabet[(alphabet.size\
    \ - 1)::-1]\n    \n    alphabet = alphabet[(alphabet.size - 1)::-1]\n    \n  \
    \  alphabet = alphabet[(alphabet.size - 1)::-1]\n    \n    alphabet = alphabet[(alphabet.size\
    \ - 1)::-1]\n    \n    alphabet = alphabet[(alphabet.size - 1)::-1]\n    \n  \
    \  alphabet = alphabet[(alphabet.size - 1)::-1]\n    \n    alphabet = alphabet[(alphabet.size\
    \ - 1)::-1]\n    \n    alphabet = alphabet[(alphabet.size - 1)::-1]\n    \n  \
    \  alphabet = alphabet[(alphabet.size - 1)::-1]\n    \n    alphabet = alphabet[(alphabet.size\
    \ - 1)::-1]\n    \n    alphabet = alphabet[(alphabet.size - 1)::-1]\n    \n  \
    \  alphabet = alphabet[(alphabet.size - 1)::-1]\n    \n    alphabet = alphabet[(alphabet.size\
    \ - 1)::-1]\n    \n    alphabet = alphabet[(alphabet.size - 1)::-1]\n    \n  \
    \  alphabet = alphabet[(alphabet.size - 1)::-1]\n    \n    alphabet = alphabet[(alphabet.size\
    \ - 1)::-1]\n    \n    alphabet = alphabet[(alphabet.size - 1)::-1]\n    \n  \
    \  alphabet = alphabet[(alphabet.size - 1)::-1]\n    \n    alphabet = alphabet[(alphabet.size\
    \ - 1)::-1]\n    \n    alphabet = alphabet[(alphabet.size - 1)::-1]\n    \n  \
    \  alphabet = alphabet[(alphabet.size - 1)::-1]\n    \n    alphabet = alphabet[(alphabet.size\
    \ - 1)::-1]\n    \n    alphabet = alphabet[(alphabet.size - 1)::-1]\n    \n  \
    \  alphabet = alphabet[(alphabet.size - 1)::-1]\n    \n    alphabet = alphabet[(alphabet.size\
    \ - 1)::-1]\n    \n    alphabet = alphabet[(alphabet.size - 1)::-1]\n    \n  \
    \  alphabet = alphabet[(alphabet.size - 1)::-1]\n    \n    alphabet = alphabet[(alphabet.size\
    \ - 1)::-1]\n    \n    alphabet = alphabet[(alphabet.size - 1)::-1]\n    \n  \
    \  alphabet = alphabet[(alphabet.size - 1)::-1]\n    \n    alphabet = alphabet[(alphabet.size\
    \ - 1)::-1]\n    \n    alphabet = alphabet[(alphabet.size - 1)::-1]\n    \n  \
    \  alphabet = alphabet[(alphabet.size - \nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: expected \"]\" or separator in arguments to \"\
    [ ]\"; got \"(alphabet.size - 1)::-1\"\nStacktrace:\n [1] top-level scope at /tmp/tmpijaghev5.jl:15\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpijaghev5.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A'..'Z')\n    rotated_alphabet = ('A'..'Z')\n    rotated_alphabet\
    \ = rotated_alphabet[2:] + rotated_alphabet[:2]\n    \n    encrypted_string =\
    \ \"\"\n    \n    for c in s:\n        if c in alphabet:\n            encrypted_string\
    \ += rotated_alphabet[alphabet.index(c) + 2]\n        else:\n            encrypted_string\
    \ += c\n    \n    return encrypted_string\n</code>\n<|/ a tags=string,encryption,haskell\
    \ |>\n<| a tags=string,encryption,haskell |>\nI wrote a solution that is similar\
    \ to what was suggested in the comments, but I thought it would be useful to share\
    \ it here for future reference.\n<code>\nimport Data.Char\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmp0xwcanzw.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp0xwcanzw.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    rotated_alphabet = alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_2fpu409.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_2fpu409.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A'..'Z')\n    alphabet = alphabet[alphabet.length div 2 -\
    \ 2]\n    alphabet = alphabet[alphabet.length div 2 - 1]\n    alphabet = alphabet[alphabet.length\
    \ div 2 - 2]\n    alphabet = alphabet[alphabet.length div 2 - 1]\n    alphabet\
    \ = alphabet[alphabet.length div 2 - 2]\n    alphabet = alphabet[alphabet.length\
    \ div 2 - 1]\n    alphabet = alphabet[alphabet.length div 2 - 2]\n    alphabet\
    \ = alphabet[alphabet.length div 2 - 1]\n    alphabet = alphabet[alphabet.length\
    \ div 2 - 2]\n    alphabet = alphabet[alphabet.length div 2 - 1]\n    alphabet\
    \ = alphabet[alphabet.length div 2 - 2]\n    alphabet = alphabet[alphabet.length\
    \ div 2 - 1]\n    alphabet = alphabet[alphabet.length div 2 - 2]\n    alphabet\
    \ = alphabet[alphabet.length div 2 - 1]\n    alphabet = alphabet[alphabet.length\
    \ div 2 - 2]\n    alphabet = alphabet[alphabet.length div 2 - 1]\n    alphabet\
    \ = alphabet[alphabet.length div 2 - 2]\n    alphabet = alphabet[alphabet.length\
    \ div 2 - 1]\n    alphabet = alphabet[alphabet.length div 2 - 2]\n    alphabet\
    \ = alphabet[alphabet.length div 2 - 1]\n    alphabet = alphabet[alphabet.length\
    \ div 2 - 2]\n    alphabet = alphabet[alphabet.length div 2 - 1]\n    alphabet\
    \ = alphabet[alphabet.length div 2 - 2]\n    alphabet = alphabet[alphabet.length\
    \ div 2 - 1]\n    alphabet = alphabet[alphabet.length div 2 - 2]\n    alphabet\
    \ = alphabet[alphabet.length div 2 - 1]\n    alphabet = alphabet[alphabet.length\
    \ div 2 - 2]\n    alphabet = alphabet[alphabet.length div 2 - 1]\n    alphabet\
    \ = alphabet[alphabet.length div 2 - 2]\n    alphabet = alphabet[alphabet.length\
    \ div 2 - 1]\n    alphabet = alphabet[alphabet.length div 2 - 2]\n    alphabet\
    \ = alphabet[alphabet.length div 2 - 1]\n    alphabet = alphabet[alphabet.length\
    \ div 2 - 2]\n    alphabet = alphabet[alphabet.length div 2 - 1]\n    alphabet\
    \ = alphabet[alphabet.length div 2 - 2]\n    alphabet = alphabet[alphabet.length\
    \ div 2 - 1]\n    alphabet = alphabet[alphabet.length div 2 - 2]\n    alphabet\
    \ = alphabet[alphabet.length div 2 - 1]\n    alphabet = alphabet[alphabet.length\
    \ div 2 - 2]\n    alphabet = alphabet[alphabet.length div 2 - 1]\n    alphabet\
    \ = alphabet[alphabet.length div 2 - 2]\n    alphabet = alphabet[alphabet.length\
    \ div 2 - \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk7h0kj67.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpk7h0kj67.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = list('abcdefghijklmnopqrstuvwxyz')\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet =\
    \ alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n\
    \    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet =\
    \ alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n\
    \    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet =\
    \ alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n\
    \    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet =\
    \ alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n\
    \    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet =\
    \ alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n\
    \    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet =\
    \ alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n\
    \    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet =\
    \ alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n\
    \    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet =\
    \ alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n\
    \    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet =\
    \ alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n\
    \    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet =\
    \ alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n\
    \    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet =\
    \ alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n\
    \    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet =\
    \ alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n\
    \    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet =\
    \ alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n\
    \    alphabet = alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet =\
    \ alphabet[2:-2]\n    alphabet = alphabet[2:-2]\n    alphabet = alphabet\nusing\
    \ Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") ==\
    \ \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid character literal\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpeuifsi29.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpeuifsi29.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    \nusing Test\n\n\
    @testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\
    \t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\")\
    \ == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmplelemza8.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmplelemza8.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmdh9qs6t.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpmdh9qs6t.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpmdh9qs6t.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A'..'Z')\n    alphabet = alphabet[alphabet.size - 2]\n  \
    \  alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet\nusing Test\n\
    \n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\"\
    )\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\"\
    ) == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpo4mdrb5u.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpo4mdrb5u.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpo4mdrb5u.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = rot13(alphabet)\n    alphabet = alphabet[1:] \n    alphabet\
    \ = alphabet*2\n    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n    alphabet\
    \ = alphabet[1:] \n    alphabet = alphabet*2\n    alphabet = alphabet[1:] \n \
    \   alphabet = alphabet*2\n    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n    alphabet = alphabet[1:]\
    \ \n    alphabet = alphabet*2\n    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n    alphabet = alphabet[1:]\
    \ \n    alphabet = alphabet*2\n    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n    alphabet = alphabet[1:]\
    \ \n    alphabet = alphabet*2\n    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n    alphabet = alphabet[1:]\
    \ \n    alphabet = alphabet*2\n    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n    alphabet = alphabet[1:]\
    \ \n    alphabet = alphabet*2\n    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n    alphabet = alphabet[1:]\
    \ \n    alphabet = alphabet*2\n    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n    alphabet = alphabet[1:]\
    \ \n    alphabet = alphabet*2\n    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n    alphabet = alphabet[1:]\
    \ \n    alphabet = alphabet*2\n    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n    alphabet = alphabet[1:]\
    \ \n    alphabet = alphabet*2\n    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n    alphabet = alphabet[1:]\
    \ \n    alphabet = alphabet*2\n    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:] \n    alphabet = alphabet*2\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpvdyokpgn.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpvdyokpgn.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[alphabet.length\
    \ div 2 - 2:alphabet.length div 2]\n    alphabet = alphabet[alphabet.length div\
    \ 2 - 1:alphabet.length div 2 + 1]\n    alphabet = alphabet[alphabet.length div\
    \ 2 - 1:alphabet.length div 2 + 1]\n    alphabet = alphabet[alphabet.length div\
    \ 2 - 1:alphabet.length div 2 + 1]\n    alphabet = alphabet[alphabet.length div\
    \ 2 - 1:alphabet.length div 2 + 1]\n    alphabet = alphabet[alphabet.length div\
    \ 2 - 1:alphabet.length div 2 + 1]\n    alphabet = alphabet[alphabet.length div\
    \ 2 - 1:alphabet.length div 2 + 1]\n    alphabet = alphabet[alphabet.length div\
    \ 2 - 1:alphabet.length div 2 + 1]\n    alphabet = alphabet[alphabet.length div\
    \ 2 - 1:alphabet.length div 2 + 1]\n    alphabet = alphabet[alphabet.length div\
    \ 2 - 1:alphabet.length div 2 + 1]\n    alphabet = alphabet[alphabet.length div\
    \ 2 - 1:alphabet.length div 2 + 1]\n    alphabet = alphabet[alphabet.length div\
    \ 2 - 1:alphabet.length div 2 + 1]\n    alphabet = alphabet[alphabet.length div\
    \ 2 - 1:alphabet.length div 2 + 1]\n    alphabet = alphabet[alphabet.length div\
    \ 2 - 1:alphabet.length div 2 + 1]\n    alphabet = alphabet[alphabet.length div\
    \ 2 - 1:alphabet.length div 2 + 1]\n    alphabet = alphabet[alphabet.length div\
    \ 2 - 1:alphabet.length div 2 + 1]\n    alphabet = alphabet[alphabet.length div\
    \ 2 - 1:alphabet.length div 2 + 1]\n    alphabet = alphabet[alphabet.length div\
    \ 2 - 1:alphabet.length div 2 + 1]\n    alphabet = alphabet[alphabet.length div\
    \ 2 - 1:alphabet.length div 2 + 1]\n    alphabet = alphabet[alphabet.length div\
    \ 2 - 1:alphabet.length div 2 + 1]\n    alphabet = alphabet[alphabet.length div\
    \ 2 - 1:alphabet.length div 2 + 1]\n    alphabet = alphabet[alphabet.length div\
    \ 2 - 1:alphabet.length div 2 + 1]\n    alphabet = alphabet[alphabet.length div\
    \ 2 - 1:alphabet.length div 2 + 1]\n    alphabet = alphabet[alphabet.length div\
    \ 2 - 1:alphabet.length div 2 + 1]\n    alphabet = alphabet[alphabet.length div\
    \ 2 - 1:alphabet.length div 2 + 1]\n    alphabet = alphabet[alphabet.length div\
    \ 2 - 1:alphabet.length div 2 + 1]\n    alphabet = alphabet[alphabet.length div\
    \ 2 - 1:alphabet.length div 2 + 1]\n    alphabet = alphabet[alphabet.length div\
    \ 2 - 1:alphabet.length div 2 + 1]\n    alphabet\nusing Test\n\n@testset begin\n\
    \ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpr6ic9m57.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpr6ic9m57.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpr6ic9m57.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[2:] + alphabet[:2]\
    \ # shift the alphabet down by 2\n    alphabet = alphabet[1::2] # shift the alphabet\
    \ down by 1\n    alphabet = alphabet[::-1] # reverse the alphabet\n    alphabet\
    \ = alphabet[1::2] # shift the alphabet down by 1\n    alphabet = alphabet[::-1]\
    \ # reverse the alphabet\n    alphabet = alphabet[1::2] # shift the alphabet down\
    \ by 1\n    alphabet = alphabet[::-1] # reverse the alphabet\n    alphabet = alphabet[1::2]\
    \ # shift the alphabet down by 1\n    alphabet = alphabet[::-1] # reverse the\
    \ alphabet\n    alphabet = alphabet[1::2] # shift the alphabet down by 1\n   \
    \ alphabet = alphabet[::-1] # reverse the alphabet\n    alphabet = alphabet[1::2]\
    \ # shift the alphabet down by 1\n    alphabet = alphabet[::-1] # reverse the\
    \ alphabet\n    alphabet = alphabet[1::2] # shift the alphabet down by 1\n   \
    \ alphabet = alphabet[::-1] # reverse the alphabet\n    alphabet = alphabet[1::2]\
    \ # shift the alphabet down by 1\n    alphabet = alphabet[::-1] # reverse the\
    \ alphabet\n    alphabet = alphabet[1::2] # shift the alphabet down by 1\n   \
    \ alphabet = alphabet[::-1] # reverse the alphabet\n    alphabet = alphabet[1::2]\
    \ # shift the alphabet down by 1\n    alphabet = alphabet[::-1] # reverse the\
    \ alphabet\n    alphabet = alphabet[1::2] # shift the alphabet down by 1\n   \
    \ alphabet = alphabet[::-1] # reverse the alphabet\n    alphabet = alphabet[1::2]\
    \ # shift the alphabet down by 1\n    alphabet = alphabet[::-1] # reverse the\
    \ alphabet\n    alphabet = alphabet[1::2] # shift the alphabet down by 1\n   \
    \ alphabet = alphabet[::-1] # reverse the alphabet\n    alphabet = alphabet[1::2]\
    \ # shift the alphabet down by 1\n    alphabet = alphabet[::-1] # reverse the\
    \ alphabet\n    alphabet = alphabet[1::2] # shift the alphabet down by 1\n   \
    \ alphabet = alphabet[::-1] # reverse the alphabet\n    alphabet = alphabet[1::2]\
    \ # shift the alphabet down by 1\n    alphabet = alphabet[::-1] # reverse the\
    \ alphabet\n    alphabet = alphabet[1::2] # shift the alphabet down by 1\n   \
    \ alphabet = alphabet[::-1] # reverse the alphabet\n    alphabet = alphabet[1::2]\
    \ # shift the alphabet down by 1\n    alphabet = alphabet[::-1] # reverse the\
    \ alphabet\n    alphabet = alphabet[1::2] # shift the alphabet down by 1\n   \
    \ alphabet = \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmp4k_olvp7.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp4k_olvp7.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A'..'Z')\n    alphabet = alphabet[(alphabet.size - 2)::-1]\n\
    \    alphabet = alphabet[(alphabet.size - 1)::-1]\n    alphabet = alphabet[(alphabet.size\
    \ - 1)::-1]\n    alphabet = alphabet[(alphabet.size - 1)::-1]\n    alphabet =\
    \ alphabet[(alphabet.size - 1)::-1]\n    alphabet = alphabet[(alphabet.size -\
    \ 1)::-1]\n    alphabet = alphabet[(alphabet.size - 1)::-1]\n    alphabet = alphabet[(alphabet.size\
    \ - 1)::-1]\n    alphabet = alphabet[(alphabet.size - 1)::-1]\n    alphabet =\
    \ alphabet[(alphabet.size - 1)::-1]\n    alphabet = alphabet[(alphabet.size -\
    \ 1)::-1]\n    alphabet = alphabet[(alphabet.size - 1)::-1]\n    alphabet = alphabet[(alphabet.size\
    \ - 1)::-1]\n    alphabet = alphabet[(alphabet.size - 1)::-1]\n    alphabet =\
    \ alphabet[(alphabet.size - 1)::-1]\n    alphabet = alphabet[(alphabet.size -\
    \ 1)::-1]\n    alphabet = alphabet[(alphabet.size - 1)::-1]\n    alphabet = alphabet[(alphabet.size\
    \ - 1)::-1]\n    alphabet = alphabet[(alphabet.size - 1)::-1]\n    alphabet =\
    \ alphabet[(alphabet.size - 1)::-1]\n    alphabet = alphabet[(alphabet.size -\
    \ 1)::-1]\n    alphabet = alphabet[(alphabet.size - 1)::-1]\n    alphabet = alphabet[(alphabet.size\
    \ - 1)::-1]\n    alphabet = alphabet[(alphabet.size - 1)::-1]\n    alphabet =\
    \ alphabet[(alphabet.size - 1)::-1]\n    alphabet = alphabet[(alphabet.size -\
    \ 1)::-1]\n    alphabet = alphabet[(alphabet.size - 1)::-1]\n    alphabet = alphabet[(alphabet.size\
    \ - 1)::-1]\n    alphabet = alphabet[(alphabet.size - 1)::-1]\n    alphabet =\
    \ alphabet[(alphabet.size - 1)::-1]\n    alphabet = alphabet[(alphabet.size -\
    \ 1)::-1]\n    alphabet = alphabet[(alphabet.size - 1)::-1]\n    alphabet = alphabet[(alphabet.size\
    \ - 1)::-1]\n    alphabet = alphabet[(alphabet.size - 1)::-1]\n    alphabet =\
    \ alphabet[(alphabet.size - 1)::-1]\n    alphabet = alphabet[(alphabet.size -\
    \ 1)::-1]\n    alphabet = alphabet[(alphabet.size - 1)::-1]\n    alphabet = alphabet[(alphabet.size\
    \ - 1)::-1]\n    alphabet = alphabet[(alphabet.size - 1)::-1]\n    alphabet =\
    \ alphabet[(alphabet.size - 1)::-1]\n    alphabet = alphabet[(alphabet.size -\
    \ 1)::-1]\n    alphabet = alphabet[(alphabet.size - 1)::\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: expected \"]\" or separator in arguments to \"\
    [ ]\"; got \"(alphabet.size - 2)::-1\"\nStacktrace:\n [1] top-level scope at /tmp/tmp6s3kmfd9.jl:13\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp6s3kmfd9.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[alphabet.length\
    \ mod 2 :: -2]\n    alphabet = alphabet[alphabet.length div 2 :: -2]\n    alphabet\
    \ = alphabet[alphabet.length div 2 :: -2]\n    alphabet = alphabet[alphabet.length\
    \ div 2 :: -2]\n    alphabet = alphabet[alphabet.length div 2 :: -2]\n    alphabet\
    \ = alphabet[alphabet.length div 2 :: -2]\n    alphabet = alphabet[alphabet.length\
    \ div 2 :: -2]\n    alphabet = alphabet[alphabet.length div 2 :: -2]\n    alphabet\
    \ = alphabet[alphabet.length div 2 :: -2]\n    alphabet = alphabet[alphabet.length\
    \ div 2 :: -2]\n    alphabet = alphabet[alphabet.length div 2 :: -2]\n    alphabet\
    \ = alphabet[alphabet.length div 2 :: -2]\n    alphabet = alphabet[alphabet.length\
    \ div 2 :: -2]\n    alphabet = alphabet[alphabet.length div 2 :: -2]\n    alphabet\
    \ = alphabet[alphabet.length div 2 :: -2]\n    alphabet = alphabet[alphabet.length\
    \ div 2 :: -2]\n    alphabet = alphabet[alphabet.length div 2 :: -2]\n    alphabet\
    \ = alphabet[alphabet.length div 2 :: -2]\n    alphabet = alphabet[alphabet.length\
    \ div 2 :: -2]\n    alphabet = alphabet[alphabet.length div 2 :: -2]\n    alphabet\
    \ = alphabet[alphabet.length div 2 :: -2]\n    alphabet = alphabet[alphabet.length\
    \ div 2 :: -2]\n    alphabet = alphabet[alphabet.length div 2 :: -2]\n    alphabet\
    \ = alphabet[alphabet.length div 2 :: -2]\n    alphabet = alphabet[alphabet.length\
    \ div 2 :: -2]\n    alphabet = alphabet[alphabet.length div 2 :: -2]\n    alphabet\
    \ = alphabet[alphabet.length div 2 :: -2]\n    alphabet = alphabet[alphabet.length\
    \ div 2 :: -2]\n    alphabet = alphabet[alphabet.length div 2 :: -2]\n    alphabet\
    \ = alphabet[alphabet.length div 2 :: -2]\n    alphabet = alphabet[alphabet.length\
    \ div 2 :: -2]\n    alphabet = alphabet[alphabet.length div 2 :: -2]\n    alphabet\
    \ = alphabet[alphabet.length div 2 :: -2]\n    alphabet = alphabet[alphabet.length\
    \ div 2 :: -2]\n    alphabet = alphabet[alphabet.length div 2 :: -2]\n    alphabet\
    \ = alphabet[alphabet.length div 2 :: -2]\n    alphabet = alphabet[alphabet.length\
    \ div 2 :: -2]\n    alphabet = alphabet[alphabet.length div 2 :: -2]\n    alphabet\
    \ = alphabet[alphabet.length div 2 :: \nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: expected \"]\" or separator in arguments to \"\
    [ ]\"; got \"2::-2\"\nStacktrace:\n [1] top-level scope at /tmp/tmpgrj_384r.jl:13\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpgrj_384r.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = ('A'..'Z')\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[1:alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet\nusing Test\n\n@testset begin\n\ncandidate =\
    \ encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"(alphabet.size - 2):\"\
    \ range expression \nStacktrace:\n [1] top-level scope at /tmp/tmppdbnycy0.jl:15\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmppdbnycy0.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplgi0kpfv.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplgi0kpfv.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.size\
    \ - 2..alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwk5igxsh.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpwk5igxsh.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpwk5igxsh.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = Array{Char}(letters)\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = \nusing Test\n\n@testset begin\n\
    \ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp16flvzjb.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp16flvzjb.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp16flvzjb.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu7q4t1p4.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpu7q4t1p4.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpu7q4t1p4.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = Array{Char}(\n        'abcdefghijklmnopqrstuvwxyz'\n      \
    \  'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n        '0123456789'\n    )\n    \n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid character literal\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpzps89qcr.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzps89qcr.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[1:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[1:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[1:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[1:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[1:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[1:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[1:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[1:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[1:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[1:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[1:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[1:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[1:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[1:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[1:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[1:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[1:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[1:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[1:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[1:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[1:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[1:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[1:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[1:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[1:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[1:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[1:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe01znpwg.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpe01znpwg.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpe01znpwg.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[1::2]\n   \
    \ alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe5bhmtow.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpe5bhmtow.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpe5bhmtow.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet\
    \ = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet =\
    \ alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n \
    \   alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n  \
    \  alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet\
    \ = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet =\
    \ alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n \
    \   alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n  \
    \  alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmp0rxeuvnj.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp0rxeuvnj.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n\
    \    rotated_alphabet = alphabet[1::2] + alphabet[0::2]\n    encrypted_string\
    \ = \"\"\n    for c in s\n        encrypted_string += rotated_alphabet[alphabet.index(c)]\n\
    \    return encrypted_string\n</code>\n<|/ a tags=string,encryption,haskell |>\n\
    <| c |>\n`alphabet[1::2] + alphabet[0::2]` can be written `alphabet[1..]`.\n<|/\
    \ c |>\n<| a |>\n<code>\nimport Data.Char\nimport Data.List\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6sxo4e8_.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6sxo4e8_.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[1:]\
    \ + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[3:]\
    \ + alphabet[:3]\n    alphabet = alphabet[4:] + alphabet[:4]\n    alphabet = alphabet[5:]\
    \ + alphabet[:5]\n    alphabet = alphabet[6:] + alphabet[:6]\n    alphabet = alphabet[7:]\
    \ + alphabet[:7]\n    alphabet = alphabet[8:] + alphabet[:8]\n    alphabet = alphabet[9:]\
    \ + alphabet[:9]\n    alphabet = alphabet[10:] + alphabet[:10]\n    alphabet =\
    \ alphabet[11:] + alphabet[:11]\n    alphabet = alphabet[12:] + alphabet[:12]\n\
    \    alphabet = alphabet[13:] + alphabet[:13]\n    alphabet = alphabet[14:] +\
    \ alphabet[:14]\n    alphabet = alphabet[15:] + alphabet[:15]\n    alphabet =\
    \ alphabet[16:] + alphabet[:16]\n    alphabet = alphabet[17:] + alphabet[:17]\n\
    \    alphabet = alphabet[18:] + alphabet[:18]\n    alphabet = alphabet[19:] +\
    \ alphabet[:19]\n    alphabet = alphabet[20:] + alphabet[:20]\n    alphabet =\
    \ alphabet[21:] + alphabet[:21]\n    alphabet = alphabet[22:] + alphabet[:22]\n\
    \    alphabet = alphabet[23:] + alphabet[:23]\n    alphabet = alphabet[24:] +\
    \ alphabet[:24]\n    alphabet = alphabet[25:] + alphabet[:25]\n    alphabet =\
    \ alphabet[26:] + alphabet[:26]\n    alphabet = alphabet[27:] + alphabet[:27]\n\
    \    alphabet = alphabet[28:] + alphabet[:28]\n    alphabet = alphabet[29:] +\
    \ alphabet[:29]\n    alphabet = alphabet[30] + alphabet[:30]\n    alphabet = alphabet[31:]\
    \ + alphabet[:31]\n    alphabet = alphabet[32:] + alphabet[:32]\n    alphabet\
    \ = alphabet[33:] + alphabet[:33]\n    alphabet = alphabet[34:] + alphabet[:34]\n\
    \    alphabet = alphabet[35:] + alphabet[:35]\n    alphabet = alphabet[36:] +\
    \ alphabet[:36]\n    alphabet = alphabet[37:] + alphabet[:37]\n    alphabet =\
    \ alphabet[38:] + alphabet[:38]\n    alphabet = alphabet[39:] + alphabet[:39]\n\
    \    alphabet = alphabet[40] + alphabet[:40]\n    alphabet = \nusing Test\n\n\
    @testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\
    \t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\")\
    \ == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpwyb9ae56.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpwyb9ae56.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:]\n   \
    \ alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:]\n    alphabet\
    \ = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[1:]\
    \ + alphabet[:1]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[1:] + alphabet[:1]\n   \
    \ alphabet = alphabet[2:]\n    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet\
    \ = alphabet[2:]\n    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:]\n   \
    \ alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:]\n    alphabet\
    \ = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[1:]\
    \ + alphabet[:1]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[1:] + alphabet[:1]\n   \
    \ alphabet = alphabet[2:]\n    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet\
    \ = alphabet[2:]\n    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:]\n   \
    \ alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:]\n    alphabet\
    \ = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[1:]\
    \ + alphabet[:1]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[1:] + alphabet[:1]\n   \
    \ alphabet = alphabet[2:]\n    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet\
    \ = alphabet[2:]\n    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:]\n   \
    \ alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:]\n    alphabet\
    \ = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[1:]\
    \ + alphabet[:1]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpfcqwqlao.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpfcqwqlao.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    alphabet =\
    \ alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    \n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n   \
    \ alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n    alphabet\
    \ = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    \n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n   \
    \ alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n    alphabet\
    \ = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    \n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n   \
    \ alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n    alphabet\
    \ = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    \n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n   \
    \ alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n    alphabet\
    \ = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    \n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n   \
    \ alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n    alphabet\
    \ = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    \n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n   \
    \ alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n    alphabet\
    \ = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgfw0yb2h.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpgfw0yb2h.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpgfw0yb2h.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[1:]\
    \ + alphabet[:1]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpb7ctq2i8.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpb7ctq2i8.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9fcy7o67.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9fcy7o67.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    rotated_alphabet = alphabet[1::2]\
    \ + alphabet[1::2]\n    \n    encrypted_string = s\n    for i in encrypted_string\n\
    \        encrypted_string = encrypted_string.replace(i, rotated_alphabet[i])\n\
    \    end\n    return encrypted_string\nend\n</cell>\n<code language=julia-1.0>\n\
    encrypt(\"hi\")\n</cell>\n<code language=julia-1.0>\nencrypt(\"asdfghjkl\")\n\
    </cell>\n<code language=julia-1.0>\nencrypt(\"gf\")\n</cell>\n<code language=julia-1.0>\n\
    encrypt(\"et\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ as an argument and returns the string in reverse. \n    For example:\n    reverse(\"\
    hi\") returns 'ih'\n    reverse(\"asdfghjkl\") returns 'kjldfga'\n    reverse(\"\
    gf\") returns 'gfedcba'\n    reverse(\"et\") returns 'etedfgh'\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") ==\
    \ \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxstdvlkh.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxstdvlkh.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z')\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[1:] + alphabet[:1]\n   \
    \ alphabet = alphabet[2:] + alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:]\
    \ + alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[1:] +\
    \ alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[1:] + alphabet[:1]\n  \
    \  alphabet = alphabet[2:] + alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:]\
    \ + alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[1:] +\
    \ alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[1:] + alphabet[:1]\n  \
    \  alphabet = alphabet[2:] + alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:]\
    \ + alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[1:] +\
    \ alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[1:] + alphabet[:1]\n  \
    \  alphabet = alphabet[2:] + alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:]\
    \ + alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[1:] +\
    \ alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[1:] + alphabet[:1]\n  \
    \  alphabet = alphabet[2:] + alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:]\
    \ + alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[1:] +\
    \ alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[1:] + alphabet[:1]\n  \
    \  alphabet = alphabet[2:] + alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:]\
    \ + alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[1:] +\
    \ alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[1:] + alphabet[:1]\n  \
    \  alphabet = alphabet[2:] + alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:]\
    \ + alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[1:] +\
    \ alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[1:] + alphabet[:1]\n  \
    \  alphabet = alphabet[2:] + alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:]\
    \ + alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[1:] +\
    \ alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[1:] + alphabet[:1]\n  \
    \  alphabet = alphabet[2:] + alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[2:]\
    \ + alphabet[1:] + alphabet\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpcjmm2rwo.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpcjmm2rwo.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.size\
    \ - 2..alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgkplkpdq.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpgkplkpdq.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpgkplkpdq.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdp7oedem.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpdp7oedem.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpdp7oedem.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = alphabet\n    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::-2]\n    alphabet = alphabet[1::2] + alphabet[-1::-2]\n    alphabet\
    \ = alphabet[1::2]\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpm9xb_4x6.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpm9xb_4x6.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = Array('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\
    \ 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z')\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\nusing Test\n\
    \n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\"\
    )\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\"\
    ) == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp40w4afvi.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp40w4afvi.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp40w4afvi.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = alphabet\n    alphabet = alphabet[alphabet.length div 2 ..\
    \ alphabet.length]\n    alphabet = alphabet[alphabet.length div 2 .. alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length div 2 .. alphabet.length]\n    alphabet\
    \ = alphabet[alphabet.length div 2 .. alphabet.length]\n    alphabet = alphabet[alphabet.length\
    \ div 2 .. alphabet.length]\n    alphabet = alphabet[alphabet.length div 2 ..\
    \ alphabet.length]\n    alphabet = alphabet[alphabet.length div 2 .. alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length div 2 .. alphabet.length]\n    alphabet\
    \ = alphabet[alphabet.length div 2 .. alphabet.length]\n    alphabet = alphabet[alphabet.length\
    \ div 2 .. alphabet.length]\n    alphabet = alphabet[alphabet.length div 2 ..\
    \ alphabet.length]\n    alphabet = alphabet[alphabet.length div 2 .. alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length div 2 .. alphabet.length]\n    alphabet\
    \ = alphabet[alphabet.length div 2 .. alphabet.length]\n    alphabet = alphabet[alphabet.length\
    \ div 2 .. alphabet.length]\n    alphabet = alphabet[alphabet.length div 2 ..\
    \ alphabet.length]\n    alphabet = alphabet[alphabet.length div 2 .. alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length div 2 .. alphabet.length]\n    alphabet\
    \ = alphabet[alphabet.length div 2 .. alphabet.length]\n    alphabet = alphabet[alphabet.length\
    \ div 2 .. alphabet.length]\n    alphabet = alphabet[alphabet.length div 2 ..\
    \ alphabet.length]\n    alphabet = alphabet[alphabet.length div 2 .. alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length div 2 .. alphabet.length]\n    alphabet\
    \ = alphabet[alphabet.length div 2 .. alphabet.length]\n    alphabet = alphabet[alphabet.length\
    \ div 2 .. alphabet.length]\n    alphabet = alphabet[alphabet.length div 2 ..\
    \ alphabet.length]\n    alphabet = alphabet[alphabet.length div 2 .. alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length div 2 .. alphabet.length]\n    alphabet\
    \ = alphabet[alphabet.length div 2 .. alphabet.length]\n    alphabet = alphabet[alphabet.length\
    \ div 2 .. alphabet.length]\n    alphabet = alphabet[alphabet.length div 2 ..\
    \ alphabet.length]\n    alphabet = alphabet[alphabet.length div 2 .. alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length div 2 .. alphabet.length]\n    alphabet\
    \ = alphabet[alphabet.length div 2 .. alphabet\nusing Test\n\n@testset begin\n\
    \ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsgwo_voi.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsgwo_voi.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A'..'Z')\n    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length/2]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length/2]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length/2]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length/2]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length/2]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length/2]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length/2]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length/2]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length/2]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length/2]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length/2]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length/2]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length/2]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length/2]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length/2]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length/2]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length/2]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length/2]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length/2]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length/2]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length/2]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length/2]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length/2]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length/2]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length/2]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length/2]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length/2]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length/\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvkn889kd.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvkn889kd.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A'..'Z')\n    alphabet_rotated = alphabet[(alphabet.size\
    \ - 1) - alphabet.rotate(2)]\n    alphabet_rotated |> String.reverse |> String.map\
    \ alphabet_rotated |> String.join \nend\n</code>\n<|/ a tags=julia,string |>\n\
    <| a |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"alphabet_rotated\" after end of\
    \ expression\nStacktrace:\n [1] top-level scope at /tmp/tmpp352__73.jl:14\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpp352__73.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A'..'Z')\n    rotated_alphabet = ('A'..'Z')\n    rotated_alphabet\
    \ = rotated_alphabet[2:] + rotated_alphabet[:2]\n    rotated_alphabet = rotated_alphabet[2:]\
    \ + rotated_alphabet[:2]\n    rotated_alphabet = rotated_alphabet[2:] + rotated_alphabet[:2]\n\
    \    rotated_alphabet = rotated_alphabet[2:] + rotated_alphabet[:2]\n    rotated_alphabet\
    \ = rotated_alphabet[2:] + rotated_alphabet[:2]\n    rotated_alphabet = rotated_alphabet[2:]\
    \ + rotated_alphabet[:2]\n    rotated_alphabet = rotated_alphabet[2:] + rotated_alphabet[:2]\n\
    \    rotated_alphabet = rotated_alphabet[2:] + rotated_alphabet[:2]\n    rotated_alphabet\
    \ = rotated_alphabet[2:] + rotated_alphabet[:2]\n    rotated_alphabet = rotated_alphabet[2:]\
    \ + rotated_alphabet[:2]\n    rotated_alphabet = rotated_alphabet[2:] + rotated_alphabet[:2]\n\
    \    rotated_alphabet = rotated_alphabet[2:] + rotated_alphabet[:2]\n    rotated_alphabet\
    \ = rotated_alphabet[2:] + rotated_alphabet[:2]\n    rotated_alphabet = rotated_alphabet[2:]\
    \ + rotated_alphabet[:2]\n    rotated_alphabet = rotated_alphabet[2:] + rotated_alphabet[:2]\n\
    \    rotated_alphabet = rotated_alphabet[2:] + rotated_alphabet[:2]\n    rotated_alphabet\
    \ = rotated_alphabet[2:] + rotated_alphabet[:2]\n    rotated_alphabet = rotated_alphabet[2:]\
    \ + rotated_alphabet[:2]\n    rotated_alphabet = rotated_alphabet[2:] + rotated_alphabet[:2]\n\
    \    rotated_alphabet = rotated_alphabet[2:] + rotated_alphabet[:2]\n    rotated_alphabet\
    \ = rotated_alphabet[2:] + rotated_alphabet[:2]\n    rotated_alphabet = rotated_alphabet[2:]\
    \ + rotated_alphabet[:2]\n    rotated_alphabet = rotated_alphabet[2:] + rotated_alphabet[:2]\n\
    \    rotated_alphabet = rotated_alphabet[2:] + rotated_alphabet[:2]\n    rotated_alphabet\
    \ = rotated_alphabet[2:] + rotated_alphabet[:2]\n    rotated_alphabet = rotated_alphabet[2:]\
    \ + rotated_alphabet[:2]\n    rotated_alphabet = rotated_alphabet[2:] + rotated_alphabet[:2]\n\
    \    rotated_alphabet = rotated_alphabet[2:] + rotated_alphabet[:2]\n    rotated_alphabet\
    \ = rotated_alphabet[2:] + rotated_alphabet[:2]\n    rotated_alphabet = rotated_alphabet[2:]\
    \ + rotated_alphabet[:2]\n    rotated_alphabet = rotated_alphabet[2:] + rotated_alphabet[:2]\n\
    \    rotated_alphabet = rotated_alphabet[2:] + rotated_alphabet[:2]\n    rotated_alphabet\
    \ = rotated_alphabet[2:] + \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpf2qznae7.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpf2qznae7.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    \n    rotated_alphabet\
    \ = alphabet[1::2] + alphabet[::2]\n    \n    encrypted_string = \"\"\n    \n\
    \    for char in s\n        encrypted_string += rotated_alphabet[alphabet.index(char)]\n\
    \    \n    return encrypted_string\n    \nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcbratpwc.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcbratpwc.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A'..'Z')\n    alphabet_rotated = alphabet[(alphabet.size\
    \ - 1) - alphabet.rotate(2)]\n    alphabet_rotated_reversed = alphabet[(alphabet.size\
    \ - 1) - alphabet.rotate(-2)]\n    alphabet_rotated = alphabet_rotated[::-1]\n\
    \    alphabet_rotated_reversed = alphabet_rotated_reversed[::-1]\n    \n    alphabet_rotated_reversed\
    \ = alphabet_rotated_reversed.reverse()\n    \n    alphabet_rotated_reversed =\
    \ alphabet_rotated_reversed.reverse()\n    \n    alphabet_rotated_reversed = alphabet_rotated_reversed.reverse()\n\
    \    \n    alphabet_rotated_reversed = alphabet_rotated_reversed.reverse()\n \
    \   \n    alphabet_rotated_reversed = alphabet_rotated_reversed.reverse()\n  \
    \  \n    alphabet_rotated_reversed = alphabet_rotated_reversed.reverse()\n   \
    \ \n    alphabet_rotated_reversed = alphabet_rotated_reversed.reverse()\n    \n\
    \    alphabet_rotated_reversed = alphabet_rotated_reversed.reverse()\n    \n \
    \   alphabet_rotated_reversed = alphabet_rotated_reversed.reverse()\n    \n  \
    \  alphabet_rotated_reversed = alphabet_rotated_reversed.reverse()\n    \n   \
    \ alphabet_rotated_reversed = alphabet_rotated_reversed.reverse()\n    \n    alphabet_rotated_reversed\
    \ = alphabet_rotated_reversed.reverse()\n    \n    alphabet_rotated_reversed =\
    \ alphabet_rotated_reversed.reverse()\n    \n    alphabet_rotated_reversed = alphabet_rotated_reversed.reverse()\n\
    \    \n    alphabet_rotated_reversed = alphabet_rotated_reversed.reverse()\n \
    \   \n    alphabet_rotated_reversed = alphabet_rotated_reversed.reverse()\n  \
    \  \n    alphabet_rotated_reversed = alphabet_rotated_reversed.reverse()\n   \
    \ \n    alphabet_rotated_reversed = alphabet_rotated_reversed.reverse()\n    \n\
    \    alphabet_rotated_reversed = alphabet_rotated_reversed.reverse()\n    \n \
    \   alphabet_rotated_reversed = alphabet_rotated_reversed.reverse()\n    \n  \
    \  alphabet_rotated_reversed = alphabet_rotated_reversed.reverse()\n    \n   \
    \ alphabet_rotated_reversed = alphabet_rotated_reversed.reverse()\n    \n    alphabet_rotated_reversed\
    \ = alphabet_rotated_reversed.reverse()\n    \n    alphabet_rotated_reversed =\
    \ alphabet_rotated_reversed.reverse()\n    \n    alphabet_rotated_reversed = \n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: expected \"]\" or separator in arguments to \"\
    [ ]\"; got \"::-1\"\nStacktrace:\n [1] top-level scope at /tmp/tmpgk0rcep7.jl:15\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpgk0rcep7.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A'..'Z')\n    alphabet_rotated_down = alphabet[(alphabet.size\
    \ - 1) - alphabet.index('A')]\n    alphabet_rotated_up = alphabet[(alphabet.size\
    \ - 1) - alphabet.index('Z')]\n    alphabet_rotated_down = alphabet_rotated_down\
    \ * 2\n    alphabet_rotated_up = alphabet_rotated_up * 2\n    \n    rotated_alphabet\
    \ = alphabet_rotated_down + alphabet_rotated_up\n    \n    encrypted_string =\
    \ \"\"\n    for character in s\n        encrypted_string += rotated_alphabet[(alphabet.index(character)\
    \ - alphabet.index('A')) % alphabet.size]\n    \n    return encrypted_string\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqb59a0_n.jl:26\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqb59a0_n.jl:26\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = Array{Char}(('A'..'Z'))\n    \n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[1:end-1]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpuimutwrj.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpuimutwrj.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpuimutwrj.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqzdm430a.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqzdm430a.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = list(\"abcdefghijklmnopqrstuvwxyz\")\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmphyy5f0o1.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmphyy5f0o1.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmp3lm9c1rk.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp3lm9c1rk.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n\
    \    \n    encrypted_string = \"\"\n    \n    for letter in alphabet\n       \
    \ encrypted_string += letter\n    \n    return encrypted_string\nend\n</cell>\n\
    <code language=julia-1.0>\nencrypt(\"hi\")\n</cell>\n<code language=julia-1.0>\n\
    encrypt(\"asdfghjkl\")\n</cell>\n<code language=julia-1.0>\nencrypt(\"gf\")\n\
    </cell>\n<code language=julia-1.0>\nencrypt(\"et\")\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that takes a string as an argument and returns a string\
    \ decrypted with the alphabet being rotated. \nThe alphabet should be rotated\
    \ in a manner such that the letters shift down by two multiplied to two places.\n\
    For example:\ndecrypt('lm') returns 'hi'\ndecrypt('ewhjklnop') returns 'asdfghjkl'\n\
    decrypt('kj') returns 'gf'\ndecrypt('ix') returns 'et'\n\"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\
    \t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\")\
    \ == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp50xjk67a.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp50xjk67a.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    \n    alphabet = alphabet[2:]\n\
    \    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n\
    \    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet\
    \ = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n\
    \    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n\
    \    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet\
    \ = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n\
    \    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n\
    \    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet\
    \ = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n\
    \    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n\
    \    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet\
    \ = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n\
    \    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n\
    \    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet\
    \ = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n\
    \    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n\
    \    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet\
    \ = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n\
    \    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n\
    \    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet\
    \ = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n\
    \    \n    alphabet = alphabet[2:]\n    \n    alphabet = \nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpttkj02ss.jl:15\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpttkj02ss.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = Array(\"abcdefghijklmnopqrstuvwxyz\")\n    rotated_alphabet\
    \ = Array(\"nopqrstuvwxyzabcdefghijklm\")\n    \n    encrypted_string = \"\"\n\
    \    for c in s\n        encrypted_string += alphabet[alphabet.index(c) + rotated_alphabet.index(c)]\n\
    \    end\n    \n    return encrypted_string\nend\n</cell>\n<code language=julia-1.0>\n\
    encrypt(\"hi\")\n</cell>\n<code language=julia-1.0>\nencrypt(\"asdfghjkl\")\n\
    </cell>\n<code language=julia-1.0>\nencrypt(\"gf\")\n</cell>\n<code language=julia-1.0>\n\
    encrypt(\"et\")\n</cell>\n<text>\nExercise: Write a function that decrypts a string\
    \ encrypted with the \n    alphabet being rotated. \n    The alphabet should be\
    \ rotated in a manner such that the letters \n    shift down by two multiplied\
    \ to two places.\n    For example:\n    decrypt('lm') returns 'hi'\n    decrypt('ewhjklnop')\
    \ returns 'asdfghjkl'\n    decrypt('kj') returns 'gf'\n    decrypt('ix') returns\
    \ 'et'\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp10pai2z1.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp10pai2z1.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = string.ascii_lowercase\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmp1rh50822.jl:15\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp1rh50822.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppdy39_cr.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmppdy39_cr.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmppdy39_cr.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet\
    \ = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet =\
    \ alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n \
    \   alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n  \
    \  alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet\
    \ = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet =\
    \ alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n \
    \   alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n  \
    \  alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpcjpxg7g4.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpcjpxg7g4.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A'..'Z')\n    alphabet = alphabet[alphabet.size - 2 :: -1]\n\
    \    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet =\
    \ alphabet[alphabet.size - 2 :: -1]\n    alphabet = alphabet[alphabet.size - 1\
    \ :: -1]\n    alphabet = alphabet[alphabet.size - 2 :: -1]\n    alphabet = alphabet[alphabet.size\
    \ - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 2 :: -1]\n    alphabet =\
    \ alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 2\
    \ :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet =\
    \ alphabet[alphabet.size - 2 :: -1]\n    alphabet = alphabet[alphabet.size - 1\
    \ :: -1]\n    alphabet = alphabet[alphabet.size - 2 :: -1]\n    alphabet = alphabet[alphabet.size\
    \ - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 2 :: -1]\n    alphabet =\
    \ alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 2\
    \ :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet =\
    \ alphabet[alphabet.size - 2 :: -1]\n    alphabet = alphabet[alphabet.size - 1\
    \ :: -1]\n    alphabet = alphabet[alphabet.size - 2 :: -1]\n    alphabet = alphabet[alphabet.size\
    \ - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 2 :: -1]\n    alphabet =\
    \ alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 2\
    \ :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet =\
    \ alphabet[alphabet.size - 2 :: -1]\n    alphabet = alphabet[alphabet.size - 1\
    \ :: -1]\n    alphabet = alphabet[alphabet.size - 2 :: -1]\n    alphabet = alphabet[alphabet.size\
    \ - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 2 :: -1]\n    alphabet =\
    \ alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 2\
    \ :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: \nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: expected \"]\" or separator in arguments to \"\
    [ ]\"; got \"(alphabet.size - 2::-)1\"\nStacktrace:\n [1] top-level scope at /tmp/tmpmff5d0p9.jl:13\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpmff5d0p9.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[1::2]\n   \
    \ alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp29rtqvh5.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp29rtqvh5.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp29rtqvh5.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet\nusing\
    \ Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") ==\
    \ \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpz4_vnj28.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpz4_vnj28.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpz4_vnj28.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[1:alphabet.length-1]\n    alphabet = alphabet*2\n   \
    \ alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[1:alphabet.length-1]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[1:alphabet.length-1]\n    alphabet = alphabet*2\n   \
    \ alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[1:alphabet.length-1]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[1:alphabet.length-1]\n    alphabet = alphabet*2\n   \
    \ alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[1:alphabet.length-1]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[1:alphabet.length-1]\n    alphabet = alphabet*2\n   \
    \ alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[1:alphabet.length-1]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[1:alphabet.length-1]\n    alphabet = alphabet*2\n   \
    \ alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[1:alphabet.length-1]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[1:alphabet.length-1]\n    alphabet = alphabet*2\n   \
    \ alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[1:alphabet.length-1]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[1:alphabet.length-1]\n    alphabet = alphabet*2\n   \
    \ alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[1:alphabet.length-1]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[1:alphabet.length-1]\n    alphabet = alphabet*2\n   \
    \ alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[1:alphabet.length-1]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[1:alphabet.length-1]\n    alphabet = alphabet*2\n   \
    \ alphabet = alphabet[alphabet.length/2:alphabet.length]\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprp5r7r1c.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmprp5r7r1c.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmprp5r7r1c.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet\
    \ = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet =\
    \ alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n \
    \   alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n  \
    \  alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet\
    \ = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet =\
    \ alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n \
    \   alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n  \
    \  alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpn_logx9l.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpn_logx9l.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A'..'Z')\n    alphabet_rotated_down = alphabet |> Enum.map(flip\
    \ Enum.drop) |> Enum.zip\n    alphabet_rotated_up = alphabet |> Enum.map(flip\
    \ Enum.take) |> Enum.zip\n    alphabet_rotated_down = alphabet_rotated_down |>\
    \ Enum.map(flip Enum.drop) |> Enum.zip\n    alphabet_rotated_up = alphabet_rotated_up\
    \ |> Enum.map(flip Enum.take) |> Enum.zip\n    alphabet_rotated_down = alphabet_rotated_down\
    \ |> Enum.map(flip Enum.drop) |> Enum.zip\n    alphabet_rotated_up = alphabet_rotated_up\
    \ |> Enum.map(flip Enum.take) |> Enum.zip\n    alphabet_rotated_down = alphabet_rotated_down\
    \ |> Enum.map(flip Enum.drop) |> Enum.zip\n    alphabet_rotated_up = alphabet_rotated_up\
    \ |> Enum.map(flip Enum.take) |> Enum.zip\n    alphabet_rotated_down = alphabet_rotated_down\
    \ |> Enum.map(flip Enum.drop) |> Enum.zip\n    alphabet_rotated_up = alphabet_rotated_up\
    \ |> Enum.map(flip Enum.take) |> Enum.zip\n    alphabet_rotated_down = alphabet_rotated_down\
    \ |> Enum.map(flip Enum.drop) |> Enum.zip\n    alphabet_rotated_up = alphabet_rotated_up\
    \ |> Enum.map(flip Enum.take) |> Enum.zip\n    alphabet_rotated_down = alphabet_rotated_down\
    \ |> Enum.map(flip Enum.drop) |> Enum.zip\n    alphabet_rotated_up = alphabet_rotated_up\
    \ |> Enum.map(flip Enum.take) |> Enum.zip\n    alphabet_rotated_down = alphabet_rotated_down\
    \ |> Enum.map(flip Enum.drop) |> Enum.zip\n    alphabet_rotated_up = alphabet_rotated_up\
    \ |> Enum.map(flip Enum.take) |> Enum.zip\n    alphabet_rotated_down = alphabet_rotated_down\
    \ |> Enum.map(flip Enum.drop) |> Enum.zip\n    alphabet_rotated_up = \nusing Test\n\
    \n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\"\
    )\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\"\
    ) == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpscg6s9jq.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpscg6s9jq.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z')\n\
    \    rotated_alphabet = ('A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \    \n    encrypted_string = \"\"\n    \n    for character in s\n        encrypted_string\
    \ += rotated_alphabet[(alphabet.index(character) + 2) % 26]\n    \n    return\
    \ encrypted_string\nend\n</cell>\n<code language=julia-1.5>\nencrypt(\"hi\")\n\
    </cell>\n<text>\nExercise 3\nWrite a function decrypt that takes a string as an\
    \ argument and returns a string decrypted with the alphabet being rotated. \n\
    \    The alphabet should be rotated in a manner such that the letters shift down\
    \ by two multiplied to two places.\n    For example:\n    decrypt('lm') returns\
    \ 'hi'\n    decrypt('ewhjklnop') returns 'asdfghjkl'\n    decrypt('kj') returns\
    \ 'gf'\n    decrypt('ix') returns 'et'\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdlj_e4ut.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdlj_e4ut.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = list(\"abcdefghijklmnopqrstuvwxyz\")\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[1:alphabet.length/2]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[alphabet.length/2:]\n    alphabet\
    \ = alphabet[1:alphabet.length/2]\n    alphabet = alphabet*2\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[1:alphabet.length/2]\n    alphabet = alphabet*2\n   \
    \ alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[1:alphabet.length/2]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[alphabet.length/2:]\n    alphabet\
    \ = alphabet[1:alphabet.length/2]\n    alphabet = alphabet*2\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[1:alphabet.length/2]\n    alphabet = alphabet*2\n   \
    \ alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[1:alphabet.length/2]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[alphabet.length/2:]\n    alphabet\
    \ = alphabet[1:alphabet.length/2]\n    alphabet = alphabet*2\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[1:alphabet.length/2]\n    alphabet = alphabet*2\n   \
    \ alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[1:alphabet.length/2]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[alphabet.length/2:]\n    alphabet\
    \ = alphabet[1:alphabet.length/2]\n    alphabet = alphabet*2\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[1:alphabet.length/2]\n    alphabet = alphabet*2\n   \
    \ alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[1:alphabet.length/2]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[alphabet.length/2:]\n    alphabet\
    \ = alphabet[1:alphabet.length/2]\n    alphabet = alphabet*2\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[1:alphabet.length/2]\n    alphabet = alphabet*2\n   \
    \ alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[1:alphabet.length/2]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[alphabet.length/2:]\n    alphabet\
    \ = alphabet[1:alphabet.length/2]\n    alphabet = alphabet*2\n    alphabet = alphabet[alphabet.length/2:]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpww6b9bbl.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpww6b9bbl.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\nusing Test\n\n\
    @testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\
    \t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\")\
    \ == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpihxlarfb.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpihxlarfb.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpihxlarfb.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = String.ascii_lowercase\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n\
    \    alphabet = alphabet[alphabet.len\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjozr1pjd.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjozr1pjd.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = string.ascii_lowercase\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpi8tn8lrm.jl:15\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpi8tn8lrm.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[2:] + \nusing Test\n\n@testset begin\n\
    \ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmp3_b1gd18.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp3_b1gd18.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()..alphabet.len()-1]\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()..alphabet.len()-1]\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()..alphabet.len()-1]\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()..alphabet.len()-1]\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()..alphabet.len()-1]\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()..alphabet.len()-1]\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    alphabet = alphabet[alphabet.len()..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()..alphabet.len()-1]\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    \nusing Test\n\
    \n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\"\
    )\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\"\
    ) == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmw72s39d.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpmw72s39d.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpmw72s39d.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.length\
    \ mod 2 :: Int]\n    alphabet = alphabet[alphabet.length div 2 :: Int]\n    alphabet\
    \ = alphabet[alphabet.length div 2 :: Int]\n    alphabet = alphabet[alphabet.length\
    \ div 2 :: Int]\n    alphabet = alphabet[alphabet.length div 2 :: Int]\n    alphabet\
    \ = alphabet[alphabet.length div 2 :: Int]\n    alphabet = alphabet[alphabet.length\
    \ div 2 :: Int]\n    alphabet = alphabet[alphabet.length div 2 :: Int]\n    alphabet\
    \ = alphabet[alphabet.length div 2 :: Int]\n    alphabet = alphabet[alphabet.length\
    \ div 2 :: Int]\n    alphabet = alphabet[alphabet.length div 2 :: Int]\n    alphabet\
    \ = alphabet[alphabet.length div 2 :: Int]\n    alphabet = alphabet[alphabet.length\
    \ div 2 :: Int]\n    alphabet = alphabet[alphabet.length div 2 :: Int]\n    alphabet\
    \ = alphabet[alphabet.length div 2 :: Int]\n    alphabet = alphabet[alphabet.length\
    \ div 2 :: Int]\n    alphabet = alphabet[alphabet.length div 2 :: Int]\n    alphabet\
    \ = alphabet[alphabet.length div 2 :: Int]\n    alphabet = alphabet[alphabet.length\
    \ div 2 :: Int]\n    alphabet = alphabet[alphabet.length div 2 :: Int]\n    alphabet\
    \ = alphabet[alphabet.length div 2 :: Int]\n    alphabet = alphabet[alphabet.length\
    \ div 2 :: Int]\n    alphabet = alphabet[alphabet.length div 2 :: Int]\n    alphabet\
    \ = alphabet[alphabet.length div 2 :: Int]\n    alphabet = alphabet[alphabet.length\
    \ div 2 :: Int]\n    alphabet = alphabet[alphabet.length div 2 :: Int]\n    alphabet\
    \ = alphabet[alphabet.length div 2 :: Int]\n    alphabet = alphabet[alphabet.length\
    \ div 2 :: Int]\n    alphabet = alphabet[alphabet.length div 2 :: Int]\n    alphabet\
    \ = alphabet[alphabet.length div 2 :: Int]\n    alphabet = alphabet[alphabet.length\
    \ div 2 :: Int]\n    alphabet = alphabet[alphabet.length div 2 :: Int]\n    alphabet\
    \ = alphabet[alphabet.length div 2 :: Int]\n    alphabet = alphabet[alphabet.length\
    \ div 2 :: Int]\n    alphabet = alphabet[alphabet.length div 2 :: Int]\n    alphabet\
    \ = alphabet[alphabet\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t\
    @test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpun89zhat.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpun89zhat.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A'..'Z')\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdzxrdpeg.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdzxrdpeg.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = rot13(alphabet)\n    alphabet = alphabet[1:] \n    alphabet\
    \ = alphabet*2\n    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n    alphabet\
    \ = alphabet[1:] \n    alphabet = alphabet*2\n    alphabet = alphabet[1:] \n \
    \   alphabet = alphabet*2\n    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n    alphabet = alphabet[1:]\
    \ \n    alphabet = alphabet*2\n    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n    alphabet = alphabet[1:]\
    \ \n    alphabet = alphabet*2\n    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n    alphabet = alphabet[1:]\
    \ \n    alphabet = alphabet*2\n    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n    alphabet = alphabet[1:]\
    \ \n    alphabet = alphabet*2\n    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n    alphabet = alphabet[1:]\
    \ \n    alphabet = alphabet*2\n    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n    alphabet = alphabet[1:]\
    \ \n    alphabet = alphabet*2\n    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n    alphabet = alphabet[1:]\
    \ \n    alphabet = alphabet*2\n    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n    alphabet = alphabet[1:]\
    \ \n    alphabet = alphabet*2\n    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n    alphabet = alphabet[1:]\
    \ \n    alphabet = alphabet*2\n    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n    alphabet = alphabet[1:]\
    \ \n    alphabet = alphabet*2\n    alphabet = alphabet[1:] \n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:] \n    alphabet = alphabet*2\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpmoa28s_f.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpmoa28s_f.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A'..'Z')\n    alphabet = alphabet[alphabet.size - 2]\n  \
    \  alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1]\n    alphabet\nusing Test\n\
    \n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\"\
    )\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\"\
    ) == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjnujvggg.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpjnujvggg.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpjnujvggg.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.size\
    \ - 2..alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpip0xe4yh.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpip0xe4yh.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpip0xe4yh.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = rot13(alphabet)\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.findIndex(alphabet[alphabet.\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmp6j70gyn8.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp6j70gyn8.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = Array{Char}(('A'..'Z'))\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[1:\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpne8jeh07.jl:82\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpne8jeh07.jl:82\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A'..'Z')\n    alphabet = alphabet[alphabet.size - 2 :: -1]\n\
    \    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size\
    \ - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet =\
    \ alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1\
    \ :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size\
    \ - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet =\
    \ alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1\
    \ :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size\
    \ - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet =\
    \ alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1\
    \ :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size\
    \ - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet =\
    \ alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1\
    \ :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size\
    \ - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet =\
    \ alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1\
    \ :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size\
    \ - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet =\
    \ alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1\
    \ :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size\
    \ - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet =\
    \ alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1\
    \ :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size\
    \ - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet =\
    \ alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1\
    \ :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: \nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: expected \"]\" or separator in arguments to \"\
    [ ]\"; got \"(alphabet.size - 2::-)1\"\nStacktrace:\n [1] top-level scope at /tmp/tmp6wtzma98.jl:13\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp6wtzma98.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = ('A'..'Z')\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    \n    alphabet = alphabet[alphabet.size - 2]\n    \n    alphabet =\
    \ alphabet[alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size - 2]\n\
    \    \n    alphabet = alphabet[alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    \n    alphabet = alphabet[alphabet.size - 2]\n    \n    alphabet =\
    \ alphabet[alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size - 2]\n\
    \    \n    alphabet = alphabet[alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    \n    alphabet = alphabet[alphabet.size - 2]\n    \n    alphabet =\
    \ alphabet[alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size - 2]\n\
    \    \n    alphabet = alphabet[alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    \n    alphabet = alphabet[alphabet.size - 2]\n    \n    alphabet =\
    \ alphabet[alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size - 2]\n\
    \    \n    alphabet = alphabet[alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    \n    alphabet = alphabet[alphabet.size - 2]\n    \n    alphabet =\
    \ alphabet[alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size - 2]\n\
    \    \n    alphabet = alphabet[alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    \n    alphabet = alphabet[alphabet.size - 2]\n    \n    alphabet =\
    \ alphabet[alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size - 2]\n\
    \    \n    alphabet = alphabet[alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    \n    alphabet = alphabet[alphabet.size - 2]\n    \n    alphabet =\
    \ alphabet[alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size - 2]\n\
    \    \n    alphabet = alphabet[alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    \n    alphabet = alphabet[alphabet.size - 2]\n    \n    alphabet =\
    \ alphabet[alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size - 2]\n\
    \    \n    alphabet = alphabet[alphabet.size - 2]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2]\n    \n    alphabet = alphabet[alphab\nusing Test\n\n@testset begin\n\n\
    candidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqlil8_9e.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqlil8_9e.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet\
    \ = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet =\
    \ alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n \
    \   alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n  \
    \  alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet\
    \ = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet =\
    \ alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n \
    \   alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n  \
    \  alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmp7ykc3e_f.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp7ykc3e_f.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = alphabet\n    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet\
    \ = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmp02t6cnt6.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp02t6cnt6.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet_length = len(alphabet)\n\
    \    encrypted_string = ''\n    for letter in s:\n        encrypted_string +=\
    \ alphabet[(alphabet_length - alphabet.index(letter)) - 2]\n    return encrypted_string\n\
    </code>\n<|/ a tags=string,encryption,python,python-3.x |>\n<| a dscore=0 |>\n\
    <code>\ndef encrypt(s):\n    alphabet = string.ascii_lowercase\n    encrypted_string\
    \ = ''\n    for letter in s:\n        encrypted_string += alphabet[(alphabet.index(letter)\
    \ + 2) % 26]\n    return encrypted_string\n</code>\n<|/ a tags=string,encryption,python,python-3.x\
    \ |>\n<| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding why and/or how this code answers the question improves its long-term\
    \ value.\n<|/ c |>\n<| a tags=string,encryption,python,python-3.x |>\n<code>\n\
    def encrypt(s):\n    alphabet = string.ascii_lowercase\n    encrypted_string =\
    \ ''\n    for letter in s:\n        encrypted_string += alphabet[(alphabet.index(letter)\
    \ + 2) % 26]\n    return encrypted_string\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,encryption,python,python-3.x\
    \ |>\n<code>\ndef encrypt(s):\n    alphabet = string.ascii_lowercase\n    encrypted_string\
    \ = ''\n    for letter in s:\n        encrypted_string += alphabet[(alphabet.index(letter)\
    \ + 2) % 26]\n    return encrypted_string\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    While this code may answer the question, providing additional context regarding\
    \ why and/or how this code answers the question improves its long-term value.\n\
    <|/ c |>\n<| a tags=string,encryption,python,python-3.x |>\n<code>\ndef encrypt(s):\n\
    \    alphabet = string.ascii_lowercase\n    encrypted_string = ''\n    for letter\
    \ in s:\n        encrypted_string += alphabet[(alphabet.index(letter) + 2) % 26]\n\
    \    return encrypted_string\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this\
    \ code may answer the question, providing additional context regarding why and/or\
    \ how this code answers the question improves its long-term value.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\ndef encrypt(s):\n    alphabet = string.ascii_lowercase\n\
    \    encrypted_string = ''\n    for letter in s:\n        encrypted_string +=\
    \ alphabet[(alphabet.index(letter) + 2) % 26]\n    return encrypted_string\n</code>\n\
    <|/ a tags=string,encryption,python,python-3.x |>\n<| c |>\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid character literal\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpp0bs13pb.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpp0bs13pb.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    alphabet =\
    \ alphabet[alphabet.size - 2:alphabet.size + 1]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2:alphabet.size + 1]\n    \n    alphabet = alphabet[alphabet.size - 2:alphabet.size\
    \ + 1]\n    \n    alphabet = alphabet[alphabet.size - 2:alphabet.size + 1]\n \
    \   \n    alphabet = alphabet[alphabet.size - 2:alphabet.size + 1]\n    \n   \
    \ alphabet = alphabet[alphabet.size - 2:alphabet.size + 1]\n    \n    alphabet\
    \ = alphabet[alphabet.size - 2:alphabet.size + 1]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2:alphabet.size + 1]\n    \n    alphabet = alphabet[alphabet.size - 2:alphabet.size\
    \ + 1]\n    \n    alphabet = alphabet[alphabet.size - 2:alphabet.size + 1]\n \
    \   \n    alphabet = alphabet[alphabet.size - 2:alphabet.size + 1]\n    \n   \
    \ alphabet = alphabet[alphabet.size - 2:alphabet.size + 1]\n    \n    alphabet\
    \ = alphabet[alphabet.size - 2:alphabet.size + 1]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2:alphabet.size + 1]\n    \n    alphabet = alphabet[alphabet.size - 2:alphabet.size\
    \ + 1]\n    \n    alphabet = alphabet[alphabet.size - 2:alphabet.size + 1]\n \
    \   \n    alphabet = alphabet[alphabet.size - 2:alphabet.size + 1]\n    \n   \
    \ alphabet = alphabet[alphabet.size - 2:alphabet.size + 1]\n    \n    alphabet\
    \ = alphabet[alphabet.size - 2:alphabet.size + 1]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2:alphabet.size + 1]\n    \n    alphabet = alphabet[alphabet.size - 2:alphabet.size\
    \ + 1]\n    \n    alphabet = alphabet[alphabet.size - 2:alphabet.size + 1]\n \
    \   \n    alphabet = alphabet[alphabet.size - 2:alphabet.size + 1]\n    \n   \
    \ alphabet = alphabet[alphabet.size - 2:alphabet.size + 1]\n    \n    alphabet\
    \ = alphabet[alphabet.size - 2:alphabet.size + 1]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2:alphabet.size + 1]\n    \n    alphabet = alphabet[alphabet.size - 2:alphabet.size\
    \ + 1]\n    \n    alphabet = alphabet[alphabet.size - 2:alphabet.size + 1]\n \
    \   \n    alphabet = alphabet[alphabet.size - 2:alphabet.size + 1]\n    \n   \
    \ alphabet = alphabet[alphabet.size - 2:alphabet.size + 1]\n    \n    alphabet\
    \ = alphabet[alphabet.size - 2:alphabet.size + \nusing Test\n\n@testset begin\n\
    \ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8ae63902.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8ae63902.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = rot13(alphabet)\n    \n    alphabet = alphabet[1:] +\
    \ alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet\
    \ = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:]\
    \ + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n   \
    \ alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] +\
    \ alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet\
    \ = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:]\
    \ + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n   \
    \ alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] +\
    \ alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet\
    \ = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:]\
    \ + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n   \
    \ alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] +\
    \ alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet\
    \ = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:]\
    \ + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n   \
    \ alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] +\
    \ alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet\
    \ = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:]\
    \ + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n   \
    \ alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] +\
    \ alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpc5aflktn.jl:15\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpc5aflktn.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    return ''.join(alphabet[alphabet.index(letter)] for letter in s)\nend\n</cell>\n\
    <code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmp2lilj51p.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp2lilj51p.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.size\
    \ - 2..alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpm40m549t.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpm40m549t.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpm40m549t.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphz4p4am8.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphz4p4am8.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[alphabet.length\
    \ div 2 - 2:alphabet.length div 2]\n    alphabet = alphabet[alphabet.length div\
    \ 2 - 1:alphabet.length div 2]\n    alphabet = alphabet[alphabet.length div 2\
    \ - 1:alphabet.length div 2]\n    alphabet = alphabet[alphabet.length div 2 -\
    \ 1:alphabet.length div 2]\n    alphabet = alphabet[alphabet.length div 2 - 1:alphabet.length\
    \ div 2]\n    alphabet = alphabet[alphabet.length div 2 - 1:alphabet.length div\
    \ 2]\n    alphabet = alphabet[alphabet.length div 2 - 1:alphabet.length div 2]\n\
    \    alphabet = alphabet[alphabet.length div 2 - 1:alphabet.length div 2]\n  \
    \  alphabet = alphabet[alphabet.length div 2 - 1:alphabet.length div 2]\n    alphabet\
    \ = alphabet[alphabet.length div 2 - 1:alphabet.length div 2]\n    alphabet =\
    \ alphabet[alphabet.length div 2 - 1:alphabet.length div 2]\n    alphabet = alphabet[alphabet.length\
    \ div 2 - 1:alphabet.length div 2]\n    alphabet = alphabet[alphabet.length div\
    \ 2 - 1:alphabet.length div 2]\n    alphabet = alphabet[alphabet.length div 2\
    \ - 1:alphabet.length div 2]\n    alphabet = alphabet[alphabet.length div 2 -\
    \ 1:alphabet.length div 2]\n    alphabet = alphabet[alphabet.length div 2 - 1:alphabet.length\
    \ div 2]\n    alphabet = alphabet[alphabet.length div 2 - 1:alphabet.length div\
    \ 2]\n    alphabet = alphabet[alphabet.length div 2 - 1:alphabet.length div 2]\n\
    \    alphabet = alphabet[alphabet.length div 2 - 1:alphabet.length div 2]\n  \
    \  alphabet = alphabet[alphabet.length div 2 - 1:alphabet.length div 2]\n    alphabet\
    \ = alphabet[alphabet.length div 2 - 1:alphabet.length div 2]\n    alphabet =\
    \ alphabet[alphabet.length div 2 - 1:alphabet.length div 2]\n    alphabet = alphabet[alphabet.length\
    \ div 2 - 1:alphabet.length div 2]\n    alphabet = alphabet[alphabet.length div\
    \ 2 - 1:alphabet.length div 2]\n    alphabet = alphabet[alphabet.length div 2\
    \ - 1:alphabet.length div 2]\n    alphabet = alphabet[alphabet.length div 2 -\
    \ 1:alphabet.length div 2]\n    alphabet = alphabet[alphabet.length div 2 - 1:alphabet.length\
    \ div 2]\n    alphabet = alphabet[alphabet.length div 2 - 1:alphabet.length div\
    \ 2]\n    alphabet = alphabet[alphabet.length div 2 - 1:alphabet.length div 2]\n\
    \    alphabet = alphabet[alphabet.length div 2 - 1:alphabet\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp87w3ch3q.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp87w3ch3q.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpddawdquu.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpddawdquu.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = list('abcdefghijklmnopqrstuvwxyz')\n    \n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid character literal\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp5c6ykw99.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5c6ykw99.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.size\
    \ - 2..alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0beu0xel.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp0beu0xel.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp0beu0xel.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphab\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t\
    @test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj1gvsae0.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpj1gvsae0.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = Array(\"abcdefghijklmnopqrstuvwxyz\")\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmp99vpda6q.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp99vpda6q.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = alphabet\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:]\
    \ + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n   \
    \ alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] +\
    \ alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet\
    \ = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:]\
    \ + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n   \
    \ alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] +\
    \ alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet\
    \ = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:]\
    \ + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n   \
    \ alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] +\
    \ alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet\
    \ = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:]\
    \ + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n   \
    \ alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] +\
    \ alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet\
    \ = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:]\
    \ + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n   \
    \ alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] +\
    \ alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet\
    \ = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpy9tk5yoi.jl:15\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpy9tk5yoi.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A'..'Z')\n    alphabet = alphabet[alphabet.size - 2..alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp46d60uhl.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp46d60uhl.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = ('A'..'Z')\n    \n    encrypted_string = ''\n    \n \
    \   for c in s\n        \n        if c in alphabet\n            \n           \
    \ index = alphabet.index(c)\n            \n            encrypted_string += alphabet[(index+2)%26]\n\
    \            \n        else\n            \n            encrypted_string += c\n\
    \            \n        end\n        \n    end\n    \n    return encrypted_string\n\
    end\n</cell>\n<code language=julia-1.0>\nencrypt(\"hi\")\n</cell>\n<code language=julia-1.0>\n\
    encrypt(\"asdfghjkl\")\n</cell>\n<code language=julia-1.0>\nencrypt(\"gf\")\n\
    </cell>\n<code language=julia-1.0>\nencrypt(\"et\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string as an argument and returns the string\
    \ reversed.\nFor example:\nreverse(\"hello\") returns \"olleh\"\nreverse(\"asdfghjkl\"\
    ) returns \"kjdfhgas\"\nreverse(\"gf\") returns \"gfedcba\"\nreverse(\"et\") returns\
    \ \"etx\"\nHint: Reverse a string is just concatenating it with the string reversed.\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid character literal\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpxgqbz4ml.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxgqbz4ml.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A'..'Z')\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1lffn0kd.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1lffn0kd.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.size\
    \ - 2..alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3uldt1nu.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp3uldt1nu.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp3uldt1nu.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmp8luukeu4.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp8luukeu4.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A'..'Z')\n    alphabet_rotated_down = alphabet[2:]\n    alphabet_rotated_up\
    \ = alphabet[1:] + alphabet[:1]\n    \n    s_rotated_down = alphabet_rotated_down\
    \ * 2\n    s_rotated_up = alphabet_rotated_up * 2\n    \n    s_rotated_down =\
    \ s_rotated_down.zip(alphabet_rotated_up)\n    s_rotated_up = s_rotated_up.zip(alphabet_rotated_down)\n\
    \    \n    s_rotated_down = s_rotated_down.map(x => x.reverse)\n    s_rotated_up\
    \ = s_rotated_up.map(x => x.reverse)\n    \n    s_rotated_down = s_rotated_down.map(x\
    \ => x.reverse)\n    s_rotated_up = s_rotated_up.map(x => x.reverse)\n    \n \
    \   s_rotated_down = s_rotated_down.map(x => x.reverse)\n    s_rotated_up = s_rotated_up.map(x\
    \ => x.reverse)\n    \n    s_rotated_down = s_rotated_down.map(x => x.reverse)\n\
    \    s_rotated_up = s_rotated_up.map(x => x.reverse)\n    \n    s_rotated_down\
    \ = s_rotated_down.map(x => x.reverse)\n    s_rotated_up = s_rotated_up.map(x\
    \ => x.reverse)\n    \n    s_rotated_down = s_rotated_down.map(x => x.reverse)\n\
    \    s_rotated_up = s_rotated_up.map(x => x.reverse)\n    \n    s_rotated_down\
    \ = s_rotated_down.map(x => x.reverse)\n    s_rotated_up = s_rotated_up.map(x\
    \ => x.reverse)\n    \n    s_rotated_down = s_rotated_down.map(x => x.reverse)\n\
    \    s_rotated_up = s_rotated_up.map(x => x.reverse)\n    \n    s_rotated_down\
    \ = s_rotated_down.map(x => x.reverse)\n    s_rotated_up = s_rotated_up.map(x\
    \ => x.reverse)\n    \n    s_rotated_down = s_rotated_down.map(x => x.reverse)\n\
    \    s_rotated_up = s_rotated_up.map(x => x.reverse)\n    \n    s_rotated_down\
    \ = s_rotated_down.map(x => x.reverse)\n    s_rotated_up = s_rotated_up.map(x\
    \ => x.reverse)\n    \n    s_rotated_down = s_rotated_down.map(x \nusing Test\n\
    \n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\"\
    )\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\"\
    ) == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmp0tipiggj.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp0tipiggj.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A'..'Z')\n    alphabet = alphabet[(alphabet.size - 1) / 2:(alphabet.size\
    \ - 1) / 2 + 1]\n    alphabet = alphabet[(alphabet.size - 1) / 2:(alphabet.size\
    \ - 1) / 2 + 1]\n    alphabet = alphabet[(alphabet.size - 1) / 2:(alphabet.size\
    \ - 1) / 2 + 1]\n    alphabet = alphabet[(alphabet.size - 1) / 2:(alphabet.size\
    \ - 1) / 2 + 1]\n    alphabet = alphabet[(alphabet.size - 1) / 2:(alphabet.size\
    \ - 1) / 2 + 1]\n    alphabet = alphabet[(alphabet.size - 1) / 2:(alphabet.size\
    \ - 1) / 2 + 1]\n    alphabet = alphabet[(alphabet.size - 1) / 2:(alphabet.size\
    \ - 1) / 2 + 1]\n    alphabet = alphabet[(alphabet.size - 1) / 2:(alphabet.size\
    \ - 1) / 2 + 1]\n    alphabet = alphabet[(alphabet.size - 1) / 2:(alphabet.size\
    \ - 1) / 2 + 1]\n    alphabet = alphabet[(alphabet.size - 1) / 2:(alphabet.size\
    \ - 1) / 2 + 1]\n    alphabet = alphabet[(alphabet.size - 1) / 2:(alphabet.size\
    \ - 1) / 2 + 1]\n    alphabet = alphabet[(alphabet.size - 1) / 2:(alphabet.size\
    \ - 1) / 2 + 1]\n    alphabet = alphabet[(alphabet.size - 1) / 2:(alphabet.size\
    \ - 1) / 2 + 1]\n    alphabet = alphabet[(alphabet.size - 1) / 2:(alphabet.size\
    \ - 1) / 2 + 1]\n    alphabet = alphabet[(alphabet.size - 1) / 2:(alphabet.size\
    \ - 1) / 2 + 1]\n    alphabet = alphabet[(alphabet.size - 1) / 2:(alphabet.size\
    \ - 1) / 2 + 1]\n    alphabet = alphabet[(alphabet.size - 1) / 2:(alphabet.size\
    \ - 1) / 2 + 1]\n    alphabet = alphabet[(alphabet.size - 1) / 2:(alphabet.size\
    \ - 1) / 2 + 1]\n    alphabet = alphabet[(alphabet.size - 1) / 2:(alphabet.size\
    \ - 1) / 2 + 1]\n    alphabet = alphabet[(alphabet.size - 1) / 2:(alphabet.size\
    \ - 1) / 2 + 1]\n    alphabet = alphabet[(alphabet.size - 1) / 2:(alphabet.size\
    \ - 1) / 2 + 1]\n    alphabet = alphabet[(alphabet.size - 1) / 2:(alphabet.size\
    \ - 1) / 2 + 1]\n    alphabet = alphabet[(alphabet.size - 1) / 2:(alphabet.size\
    \ - 1) / 2 + 1]\n    alphabet = alphabet[(alphabet.size - 1) / 2:(alphabet.size\
    \ - 1) / 2 + 1]\n    alphabet = alphabet[(alphabet.size - 1) / 2:(alphabet.size\
    \ - 1) / 2 + 1]\n    alphabet\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmy_jr1e3.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpmy_jr1e3.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpmy_jr1e3.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',\
    \ 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") ==\
    \ \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3s5og33s.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp3s5og33s.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp3s5og33s.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet\
    \ = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet =\
    \ alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n \
    \   alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n  \
    \  alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet\
    \ = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet =\
    \ alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n \
    \   alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n  \
    \  alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmp0riadw7x.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp0riadw7x.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = alphabet\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = \nusing Test\n\
    \n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\"\
    )\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\"\
    ) == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid operator \"..-\" near column 27\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbjpkgafr.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbjpkgafr.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n\
    \    rotated_alphabet = alphabet[2:] + alphabet[:2]\n    encrypted_string = s\n\
    \    for c in encrypted_string\n        encrypted_string = encrypted_string.replace(c.to_s,\
    \ rotated_alphabet[alphabet.index(c)])\n    end\n    return encrypted_string\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `encrypt(\"asdfghjkl\"\
    )` returns `\"ewhjklnop\"` instead of `\"ix\"`.\n<|/ c |>\n<| c |>\nI fixed the\
    \ bug, thanks for pointing it out\n<|/ c |>\n<| c |>\nThis doesn't work. `encrypt(\"\
    asdfghjkl\")` returns `\"ewhjklnop\"` instead of `\"ix\"`.\n<|/ c |>\n<| c |>\n\
    I fixed the bug, thanks for pointing it out\n<|/ c |>\n<| c |>\nThis doesn't work.\
    \ `encrypt(\"asdfghjkl\")` returns `\"ewhjklnop\"` instead of `\"ix\"`.\n<|/ c\
    \ |>\n<| a |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t\
    @test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpnmx3n6_o.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpnmx3n6_o.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n\
    \    alphabet = alphabet[alphabet.len()-1..alphabet.len()]\n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \    alphabet = alphabet[alphabet.len()-2..alphabet.len()-3]\n    alphabet = alphabet[alphabet.len()-3..alphabet.len()-4]\n\
    \    alphabet = alphabet[alphabet.len()-4..alphabet.len()-5]\n    alphabet = alphabet[alphabet.len()-5..alphabet.len()-6]\n\
    \    alphabet = alphabet[alphabet.len()-6..alphabet.len()-7]\n    alphabet = alphabet[alphabet.len()-7..alphabet.len()-8]\n\
    \    alphabet = alphabet[alphabet.len()-8..alphabet.len()-9]\n    alphabet = alphabet[alphabet.len()-9..alphabet.len()-10]\n\
    \    alphabet = alphabet[alphabet.len()-10..alphabet.len()-11]\n    alphabet =\
    \ alphabet[alphabet.len()-11..alphabet.len()-12]\n    alphabet = alphabet[alphabet.len()-12..alphabet.len()-13]\n\
    \    alphabet = alphabet[alphabet.len()-13..alphabet.len()-14]\n    alphabet =\
    \ alphabet[alphabet.len()-14..alphabet.len()-15]\n    alphabet = alphabet[alphabet.len()-15..alphabet.len()-16]\n\
    \    alphabet = alphabet[alphabet.len()-16..alphabet.len()-17]\n    alphabet =\
    \ alphabet[alphabet.len()-17..alphabet.len()-18]\n    alphabet = alphabet[alphabet.len()-18..alphabet.len()-19]\n\
    \    alphabet = alphabet[alphabet.len()-19..alphabet.len()-20]\n    alphabet =\
    \ alphabet[alphabet.len()-20..alphabet.len()-21]\n    alphabet = alphabet[alphabet.len()-21..alphabet.len()-22]\n\
    \    alphabet = alphabet[alphabet.len()-22..alphabet.len()-23]\n    alphabet =\
    \ alphabet[alphabet.len()-23..alphabet.len()-24]\n    alphabet = alphabet[alphabet.len()-24..alphabet.len()-25]\n\
    \    alphabet = alphabet[alphabet.len()-25..alphabet.len()-26]\n    alphabet =\
    \ alphabet\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_zxtx68p.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp_zxtx68p.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp_zxtx68p.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet += string.ascii_uppercase\n\
    \    alphabet += string.digits\n    alphabet += string.punctuation\n    alphabet\
    \ += string.whitespace\n    alphabet += string.ascii_lowercase\n    alphabet +=\
    \ string.ascii_uppercase\n    alphabet += string.digits\n    alphabet += string.punctuation\n\
    \    alphabet += string.whitespace\n    alphabet += string.ascii_lowercase\n \
    \   alphabet += string.ascii_uppercase\n    alphabet += string.digits\n    alphabet\
    \ += string.punctuation\n    alphabet += string.whitespace\n    alphabet += string.ascii_lowercase\n\
    \    alphabet += string.ascii_uppercase\n    alphabet += string.digits\n    alphabet\
    \ += string.punctuation\n    alphabet += string.whitespace\n    alphabet += string.ascii_lowercase\n\
    \    alphabet += string.ascii_uppercase\n    alphabet += string.digits\n    alphabet\
    \ += string.punctuation\n    alphabet += string.whitespace\n    alphabet += string.ascii_lowercase\n\
    \    alphabet += string.ascii_uppercase\n    alphabet += string.digits\n    alphabet\
    \ += string.punctuation\n    alphabet += string.whitespace\n    alphabet += string.ascii_lowercase\n\
    \    alphabet += string.ascii_uppercase\n    alphabet += string.digits\n    alphabet\
    \ += string.punctuation\n    alphabet += string.whitespace\n    alphabet += string.ascii_lowercase\n\
    \    alphabet += string.ascii_uppercase\n    alphabet += string.digits\n    alphabet\
    \ += string.punctuation\n    alphabet += string.whitespace\n    alphabet += string.ascii_lowercase\n\
    \    alphabet += string.ascii_uppercase\n    alphabet += string.digits\n    alphabet\
    \ += string.punctuation\n    alphabet += string.whitespace\n    alphabet += string.ascii_lowercase\n\
    \    alphabet += string.ascii_uppercase\n    alphabet += string.digits\n    alphabet\
    \ += string.punctuation\n    alphabet += string.whitespace\n    alphabet += string.ascii_lowercase\n\
    \    alphabet += string.ascii_uppercase\n    alphabet += string.digits\n    alphabet\
    \ += string.punctuation\n    alphabet += string.whitespace\n    alphabet += string.ascii_lowercase\n\
    \    alphabet += string.ascii_uppercase\n    alphabet += string.digits\n    alphabet\
    \ += string.punctuation\n    alphabet += string.whitespace\n    alphabet += string.ascii_lowercase\n\
    \    alphabet += string.ascii_uppercase\n    alphabet += string.digits\n    alphabet\
    \ += string.punctuation\n    alphabet += string.whitespace\n    alphabet += string.ascii_\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnyxeeneh.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpnyxeeneh.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpnyxeeneh.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A'..'Z')\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxjpkc1v6.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxjpkc1v6.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = rot13(alphabet)\n    alphabet = alphabet * 2\n    alphabet\
    \ = alphabet - 26\n    alphabet = alphabet + 26\n    alphabet = alphabet * 2\n\
    \    alphabet = alphabet - 26\n    alphabet = alphabet + 26\n    alphabet = alphabet\
    \ * 2\n    alphabet = alphabet - 26\n    alphabet = alphabet + 26\n    alphabet\
    \ = alphabet * 2\n    alphabet = alphabet - 26\n    alphabet = alphabet + 26\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet - 26\n    alphabet = alphabet\
    \ + 26\n    alphabet = alphabet * 2\n    alphabet = alphabet - 26\n    alphabet\
    \ = alphabet + 26\n    alphabet = alphabet * 2\n    alphabet = alphabet - 26\n\
    \    alphabet = alphabet + 26\n    alphabet = alphabet * 2\n    alphabet = alphabet\
    \ - 26\n    alphabet = alphabet + 26\n    alphabet = alphabet * 2\n    alphabet\
    \ = alphabet - 26\n    alphabet = alphabet + 26\n    alphabet = alphabet * 2\n\
    \    alphabet = alphabet - 26\n    alphabet = alphabet + 26\n    alphabet = alphabet\
    \ * 2\n    alphabet = alphabet - 26\n    alphabet = alphabet + 26\n    alphabet\
    \ = alphabet * 2\n    alphabet = alphabet - 26\n    alphabet = alphabet + 26\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet - 26\n    alphabet = alphabet\
    \ + 26\n    alphabet = alphabet * 2\n    alphabet = alphabet - 26\n    alphabet\
    \ = alphabet + 26\n    alphabet = alphabet * 2\n    alphabet = alphabet - 26\n\
    \    alphabet = alphabet + 26\n    alphabet = alphabet * 2\n    alphabet = alphabet\
    \ - 26\n    alphabet = alphabet + 26\n    alphabet = alphabet * 2\n    alphabet\
    \ = alphabet - 26\n    alphabet = alphabet + 26\n    alphabet = alphabet * 2\n\
    \    alphabet = alphabet - 26\n    alphabet = alphabet + 26\n    alphabet = alphabet\
    \ * 2\n    alphabet = alphabet - 26\n    alphabet = alphabet + 26\n    alphabet\
    \ = alphabet * 2\n    alphabet = alphabet - 26\n    alphabet = alphabet + 26\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet - 26\n    alphabet = alphabet\
    \ + 26\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjttb94qd.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpjttb94qd.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpjttb94qd.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = Array{Char}(('A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'))\n\
    \    \n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[2:end]\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnzpw6mww.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpnzpw6mww.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpnzpw6mww.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxqvyppag.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxqvyppag.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n\"\"\"Create a function decrypt that takes a string as an argument and\n\
    \    returns a string decrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq36f8nwa.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpq36f8nwa.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpq36f8nwa.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzlrt90w6.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzlrt90w6.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    rotated_alphabet\
    \ = alphabet[alphabet.size - alphabet.size - alphabet.index(\"a\") + 1]\n    \n\
    \    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.size - rotated_alphabet.index(\"\
    z\")]\n    \n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.size -\
    \ rotated_alphabet.index(\"z\")]\n    \n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.size\
    \ - rotated_alphabet.index(\"z\")]\n    \n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.size\
    \ - rotated_alphabet.index(\"z\")]\n    \n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.size\
    \ - rotated_alphabet.index(\"z\")]\n    \n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.size\
    \ - rotated_alphabet.index(\"z\")]\n    \n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.size\
    \ - rotated_alphabet.index(\"z\")]\n    \n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.size\
    \ - rotated_alphabet.index(\"z\")]\n    \n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.size\
    \ - rotated_alphabet.index(\"z\")]\n    \n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.size\
    \ - rotated_alphabet.index(\"z\")]\n    \n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.size\
    \ - rotated_alphabet.index(\"z\")]\n    \n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.size\
    \ - rotated_alphabet.index(\"z\")]\n    \n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.size\
    \ - rotated_alphabet.index(\"z\")]\n    \n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.size\
    \ - rotated_alphabet.index(\"z\")]\n    \n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.size\
    \ - rotated_alphabet.index(\"z\")]\n    \n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.size\
    \ - rotated_alphabet.index(\"z\")]\n    \n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.size\
    \ - rotated_alphabet.index(\"z\")]\n    \n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.size\
    \ - rotated_alphabet.index(\"z\")]\n    \n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.size\
    \ - rotated_alphabet.index\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2kqbkazc.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2kqbkazc.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = ('A'..'Z')\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2..alphabet.size - 1]\n    \n    alphabet = alphabet[alphabet.size - 2..alphabet.size\
    \ - 1]\n    \n    alphabet = alphabet[alphabet.size - 2..alphabet.size - 1]\n\
    \    \n    alphabet = alphabet[alphabet.size - 2..alphabet.size - 1]\n    \n \
    \   alphabet = alphabet[alphabet.size - 2..alphabet.size - 1]\n    \n    alphabet\
    \ = alphabet[alphabet.size - 2..alphabet.size - 1]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2..alphabet.size - 1]\n    \n    alphabet = alphabet[alphabet.size - 2..alphabet.size\
    \ - 1]\n    \n    alphabet = alphabet[alphabet.size - 2..alphabet.size - 1]\n\
    \    \n    alphabet = alphabet[alphabet.size - 2..alphabet.size - 1]\n    \n \
    \   alphabet = alphabet[alphabet.size - 2..alphabet.size - 1]\n    \n    alphabet\
    \ = alphabet[alphabet.size - 2..alphabet.size - 1]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2..alphabet.size - 1]\n    \n    alphabet = alphabet[alphabet.size - 2..alphabet.size\
    \ - 1]\n    \n    alphabet = alphabet[alphabet.size - 2..alphabet.size - 1]\n\
    \    \n    alphabet = alphabet[alphabet.size - 2..alphabet.size - 1]\n    \n \
    \   alphabet = alphabet[alphabet.size - 2..alphabet.size - 1]\n    \n    alphabet\
    \ = alphabet[alphabet.size - 2..alphabet.size - 1]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2..alphabet.size - 1]\n    \n    alphabet = alphabet[alphabet.size - 2..alphabet.size\
    \ - 1]\n    \n    alphabet = alphabet[alphabet.size - 2..alphabet.size - 1]\n\
    \    \n    alphabet = alphabet[alphabet.size - 2..alphabet.size - 1]\n    \n \
    \   alphabet = alphabet[alphabet.size - 2..alphabet.size - 1]\n    \n    alphabet\
    \ = alphabet[alphabet.size - 2..alphabet.size - 1]\n    \n    alphabet = alphabet[alphabet.size\
    \ - 2..alphabet.size - 1]\n    \n    alphabet = alphabet[alphabet.size - 2..alphabet.size\
    \ - 1]\n    \n    alphabet = alphabet[alphabet.size - 2..alphabet.size - 1]\n\
    \    \n    alphabet = alphabet[alphabet.size - 2..alphabet.size - 1]\n    \n \
    \   alphabet = alphabet[alphabet.size - 2..alphabet.size - 1]\n    \n    alphabet\
    \ = alphabet[\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpng4pkgw7.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpng4pkgw7.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A'..'Z')\n    rotated_alphabet = alphabet[alphabet.length\
    \ mod 2 :: Int]\n    rotated_alphabet = rotated_alphabet[1 .. rotated_alphabet.length]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length .. alphabet.length div\
    \ 2]\n    rotated_alphabet = rotated_alphabet[alphabet.length div 2 .. alphabet.length]\n\
    \    rotated_alphabet = rotated_alphabet[1 .. rotated_alphabet.length]\n    rotated_alphabet\
    \ = rotated_alphabet[alphabet.length .. alphabet.length div 2]\n    rotated_alphabet\
    \ = rotated_alphabet[alphabet.length div 2 .. alphabet.length]\n    rotated_alphabet\
    \ = rotated_alphabet[1 .. rotated_alphabet.length]\n    rotated_alphabet = rotated_alphabet[alphabet.length\
    \ .. alphabet.length div 2]\n    rotated_alphabet = rotated_alphabet[alphabet.length\
    \ div 2 .. alphabet.length]\n    rotated_alphabet = rotated_alphabet[1 .. rotated_alphabet.length]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length .. alphabet.length div\
    \ 2]\n    rotated_alphabet = rotated_alphabet[alphabet.length div 2 .. alphabet.length]\n\
    \    rotated_alphabet = rotated_alphabet[1 .. rotated_alphabet.length]\n    rotated_alphabet\
    \ = rotated_alphabet[alphabet.length .. alphabet.length div 2]\n    rotated_alphabet\
    \ = rotated_alphabet[alphabet.length div 2 .. alphabet.length]\n    rotated_alphabet\
    \ = rotated_alphabet[1 .. rotated_alphabet.length]\n    rotated_alphabet = rotated_alphabet[alphabet.length\
    \ .. alphabet.length div 2]\n    rotated_alphabet = rotated_alphabet[alphabet.length\
    \ div 2 .. alphabet.length]\n    rotated_alphabet = rotated_alphabet[1 .. rotated_alphabet.length]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length .. alphabet.length div\
    \ 2]\n    rotated_alphabet = rotated_alphabet[alphabet.length div 2 .. alphabet.length]\n\
    \    rotated_alphabet = rotated_alphabet[1 .. rotated_alphabet.length]\n    rotated_alphabet\
    \ = rotated_alphabet[alphabet.length .. alphabet.length div 2]\n    rotated_alphabet\
    \ = rotated_alphabet[alphabet.length div 2 .. alphabet.length]\n    rotated_alphabet\
    \ = rotated_alphabet[1 .. rotated_alphabet.length]\n    rotated_alphabet = rotated_alphabet[alphabet.length\
    \ .. alphabet.length div 2]\n    rotated_alphabet = rotated_alphabet[alphabet\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4dj2xgc_.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4dj2xgc_.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet\
    \ = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet =\
    \ alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n \
    \   alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n  \
    \  alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet\
    \ = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet =\
    \ alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n \
    \   alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n  \
    \  alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\nusing\
    \ Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") ==\
    \ \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmp51zt_9j9.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp51zt_9j9.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppqmy_8fj.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmppqmy_8fj.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmppqmy_8fj.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    alphabet =\
    \ alphabet[1:len(alphabet)-1]\n    \n    alphabet = alphabet * 2\n    \n    alphabet\
    \ = alphabet[1:len(alphabet)-1]\n    \n    alphabet = alphabet * 2\n    \n   \
    \ alphabet = alphabet[1:len(alphabet)-1]\n    \n    alphabet = alphabet * 2\n\
    \    \n    alphabet = alphabet[1:len(alphabet)-1]\n    \n    alphabet = alphabet\
    \ * 2\n    \n    alphabet = alphabet[1:len(alphabet)-1]\n    \n    alphabet =\
    \ alphabet * 2\n    \n    alphabet = alphabet[1:len(alphabet)-1]\n    \n    alphabet\
    \ = alphabet * 2\n    \n    alphabet = alphabet[1:len(alphabet)-1]\n    \n   \
    \ alphabet = alphabet * 2\n    \n    alphabet = alphabet[1:len(alphabet)-1]\n\
    \    \n    alphabet = alphabet * 2\n    \n    alphabet = alphabet[1:len(alphabet)-1]\n\
    \    \n    alphabet = alphabet * 2\n    \n    alphabet = alphabet[1:len(alphabet)-1]\n\
    \    \n    alphabet = alphabet * 2\n    \n    alphabet = alphabet[1:len(alphabet)-1]\n\
    \    \n    alphabet = alphabet * 2\n    \n    alphabet = alphabet[1:len(alphabet)-1]\n\
    \    \n    alphabet = alphabet * 2\n    \n    alphabet = alphabet[1:len(alphabet)-1]\n\
    \    \n    alphabet = alphabet * 2\n    \n    alphabet = alphabet[1:len(alphabet)-1]\n\
    \    \n    alphabet = alphabet * 2\n    \n    alphabet = alphabet[1:len(alphabet)-1]\n\
    \    \n    alphabet = alphabet * 2\n    \n    alphabet = alphabet[1:len(alphabet)-1]\n\
    \    \n    alphabet = alphabet * 2\n    \n    alphabet = alphabet[1:len(alphabet)-1]\n\
    \    \n    alphabet = alphabet * 2\n    \n    alphabet = alphabet[1:len(alphabet)-1]\n\
    \    \n    alphabet = alphabet * 2\n    \n    alphabet = alphabet[1:len(alphabet)-1]\n\
    \    \n    alphabet = alphabet * 2\n    \n    alphabet = alphabet[1:len(alphabet)-1]\n\
    \    \n    alphabet = alphabet * 2\n    \n    alphabet = alphabet[1:len(alphabet)-1]\n\
    \    \n    alphabet = alphabet * 2\n    \n    alphabet = alphabet[1:len(alphabet)-1]\n\
    \    \n    alphabet = alphabet * 2\n    \n    alphabet = alphabet[1:len(alphabet)\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0izol2ka.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0izol2ka.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmp5dgjolm3.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp5dgjolm3.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = ('A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z')\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgt6nwrn6.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpgt6nwrn6.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpgt6nwrn6.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',\
    \ 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    alphabet\
    \ = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet\nusing Test\n\n@testset begin\n\n\
    candidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4ghgxm2m.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp4ghgxm2m.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp4ghgxm2m.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpnp1o4a4r.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpnp1o4a4r.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet\
    \ = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet =\
    \ alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n \
    \   alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n  \
    \  alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet\
    \ = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet =\
    \ alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n \
    \   alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n  \
    \  alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmp14rvb_02.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp14rvb_02.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = list(\"abcdefghijklmnopqrstuvwxyz\")\n    alphabet = alphabet[2:]\
    \ + alphabet[:2] # shift down by two \n    alphabet = alphabet[2:] + alphabet[:2]\
    \ # shift down by two \n    alphabet = alphabet[2:] + alphabet[:2] # shift down\
    \ by two \n    alphabet = alphabet[2:] + alphabet[:2] # shift down by two \n \
    \   alphabet = alphabet[2:] + alphabet[:2] # shift down by two \n    alphabet\
    \ = alphabet[2:] + alphabet[:2] # shift down by two \n    alphabet = alphabet[2:]\
    \ + alphabet[:2] # shift down by two \n    alphabet = alphabet[2:] + alphabet[:2]\
    \ # shift down by two \n    alphabet = alphabet[2:] + alphabet[:2] # shift down\
    \ by two \n    alphabet = alphabet[2:] + alphabet[:2] # shift down by two \n \
    \   alphabet = alphabet[2:] + alphabet[:2] # shift down by two \n    alphabet\
    \ = alphabet[2:] + alphabet[:2] # shift down by two \n    alphabet = alphabet[2:]\
    \ + alphabet[:2] # shift down by two \n    alphabet = alphabet[2:] + alphabet[:2]\
    \ # shift down by two \n    alphabet = alphabet[2:] + alphabet[:2] # shift down\
    \ by two \n    alphabet = alphabet[2:] + alphabet[:2] # shift down by two \n \
    \   alphabet = alphabet[2:] + alphabet[:2] # shift down by two \n    alphabet\
    \ = alphabet[2:] + alphabet[:2] # shift down by two \n    alphabet = alphabet[2:]\
    \ + alphabet[:2] # shift down by two \n    alphabet = alphabet[2:] + alphabet[:2]\
    \ # shift down by two \n    alphabet = alphabet[2:] + alphabet[:2] # shift down\
    \ by two \n    alphabet = alphabet[2:] + alphabet[:2] # shift down by two \n \
    \   alphabet = alphabet[2:] + alphabet[:2] # shift down by two \n    alphabet\
    \ = alphabet[2:] + alphabet[:2] # shift down by two \n    alphabet = alphabet[2:]\
    \ + alphabet[:2] # shift down by two \n    alphabet = alphabet[2:] + alphabet[:2]\
    \ # shift down by two \n    alphabet = alphabet[2:] + alphabet[:2] # shift down\
    \ by two \n    alphabet = alphabet[2:] + alphabet[:2] # shift down by two \n \
    \   alphabet = alphabet[2:] + alphabet[:2] # shift down by two \n    alphabet\
    \ = alphabet[2:] + alphabet[:2] # shift down by two \n    alphabet = alphabet[2:]\
    \ + alphabet[:2] # shift down by two \n    alphabet = alphabet[2:] + alphabet[:2]\
    \ # shift down by two \n    alphabet = alphabet[2:] + alphabet[:2] # shift down\
    \ by two \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmp25fmsq78.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp25fmsq78.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = alphabet\n    alphabet = alphabet[1:] // 'a' // alphabet[1:]\
    \ // 'b' // alphabet[1:] // 'c' // alphabet[1:] // 'd' // alphabet[1:] // 'e'\
    \ // alphabet[1:] // 'f' // alphabet[1:] // 'g' // alphabet[1:] // 'h' // alphabet[1:]\
    \ // 'i' // alphabet[1:] // 'j' // alphabet[1:] // 'k' // alphabet[1:] // 'l'\
    \ // alphabet[1:] // 'm' // alphabet[1:] // 'n' // alphabet[1:] // 'o' // alphabet[1:]\
    \ // 'p' // alphabet[1:] // 'q' // alphabet[1:] // 'r' // alphabet[1:] // 's'\
    \ // alphabet[1:] // 't' // alphabet[1:] // 'u' // alphabet[1:] // 'v' // alphabet[1:]\
    \ // 'w' // alphabet[1:] // 'x' // alphabet[1:] // 'y' // alphabet[1:] // 'z'\n\
    \    alphabet = alphabet[1:] // 'a' // alphabet[1:] // 'b' // alphabet[1:] //\
    \ 'c' // alphabet[1:] // 'd' // alphabet[1:] // 'e' // alphabet[1:] // 'f' //\
    \ alphabet[1:] // 'g' // alphabet[1:] // 'h' // alphabet[1:] // 'i' // alphabet[1:]\
    \ // 'j' // alphabet[1:] // 'k' // alphabet[1:] // 'l' // alphabet[1:] // 'm'\
    \ // alphabet[1:] // 'n' // alphabet[1:] // 'o' // alphabet[1:] // 'p' // alphabet[1:]\
    \ // 'q' // alphabet[1:] // 'r' // alphabet[1:] // 's' // alphabet[1:] // 't'\
    \ // alphabet[1:] // 'u' // alphabet[1:] // 'v' // alphabet[1:] // 'w' // alphabet[1:]\
    \ // 'x' // alphabet[1:] // 'y' // alphabet[1:] // 'z'\n    alphabet = alphabet[1:]\
    \ // 'a' // alphabet[1:] // 'b' // alphabet[1:] // 'c' // alphabet[1:] // 'd'\
    \ // alphabet[1:] // 'e' // alphabet[1:] // 'f' // alphabet[1:] // 'g' // alphabet[1:]\
    \ // 'h' // alphabet[1:] // 'i' // alphabet[1:] // 'j' // alphabet[1:] // 'k\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpacxvf0pn.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpacxvf0pn.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A'..'Z')\n    rotated_alphabet = ('A'..'Z')\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rotated_alphabet[2:]\n    rotated_alphabet = rotated_alphabet[2:]\n    rotated_alphabet\
    \ = rot\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmp2_h2xmfd.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp2_h2xmfd.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n\
    \    rotated_alphabet = alphabet[2:] + alphabet[:2]\n    \n    encrypted_string\
    \ = s\n    \n    for i in encrypted_string\n        encrypted_string = encrypted_string.replace(i,\
    \ rotated_alphabet[alphabet.index(i)])\n    \n    return encrypted_string\nend\n\
    </cell>\n<code language=julia-1.0>\nencrypt(\"hi\")\n</cell>\n<code language=julia-1.0>\n\
    encrypt(\"asdfghjkl\")\n</cell>\n<code language=julia-1.0>\nencrypt(\"gf\")\n\
    </cell>\n<code language=julia-1.0>\nencrypt(\"et\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string as an argument and returns the string\
    \ in reverse order. \n    For example:\n    reverse_encrypt('hi') returns 'ih'\n\
    \    reverse_encrypt('asdfghjkl') returns 'kjldfga'\n    reverse_encrypt('gf')\
    \ returns 'gfedcba'\n    reverse_encrypt('et') returns 'etuxba'\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmp5h5n44zc.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp5h5n44zc.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = alphabet\n    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet\
    \ = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpixyn6j12.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpixyn6j12.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.size\
    \ - 2..alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size\
    \ - 2]\n    alphabet = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet\
    \ = alphabet[alphabet.size - 1..alphabet.size - 2]\n    alphabet = alphabet[alphabet.size\
    \ - 1..alphabet.size - 2]\n    \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjb7k9k_5.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpjb7k9k_5.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpjb7k9k_5.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    alphabet =\
    \ alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \    \n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n   \
    \ alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    \n    alphabet\
    \ = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \    \n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n   \
    \ alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    \n    alphabet\
    \ = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \    \n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n   \
    \ alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    \n    alphabet\
    \ = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \    \n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n   \
    \ alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    \n    alphabet\
    \ = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \    \n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n   \
    \ alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    \n    alphabet\
    \ = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \    \n    alphabet = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n   \
    \ alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n    \n    alphabet\
    \ = alphabet[alphabet.len()-2..alphabet.len()-1]\n    \n    alphabet = alphabet[alphabet.len()-1..alphabet.len()-2]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp45_jaddl.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp45_jaddl.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp45_jaddl.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::2]\nusing Test\n\n@testset begin\n\
    \ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmp6mlik1iw.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp6mlik1iw.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = alphabet\n    alphabet = alphabet[alphabet.size - 2:end]\n\
    \    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    \nusing Test\n\
    \n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\"\
    )\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\"\
    ) == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn5mcguiz.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpn5mcguiz.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpn5mcguiz.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5abumytv.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp5abumytv.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp5abumytv.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n\
    \    \n    rotated_alphabet = alphabet[1::2] + alphabet[0::2]\n    \n    encrypted_string\
    \ = \"\"\n    \n    for letter in s\n        encrypted_string += rotated_alphabet[alphabet.index(letter)]\n\
    \    \n    return encrypted_string\n    \nend\n</cell>\n<code language=julia-1.5>\n\
    encrypt(\"hi\")\n</cell>\n<code language=julia-1.5>\nencrypt(\"asdfghjkl\")\n\
    </cell>\n<code language=julia-1.5>\nencrypt(\"gf\")\n</cell>\n<code language=julia-1.5>\n\
    encrypt(\"et\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ as an argument and returns the string with all the letters shifted one place\
    \ to the right. \nFor example:\nshift('hi') returns 'ih'\nshift('asdfghjkl') returns\
    \ 'asdfgjhkl'\nshift('gf') returns 'gfedc'\nshift('et') returns 'etv'\nHint: Use\
    \ a for loop to iterate through the string and append each character to a new\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbpb5am26.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbpb5am26.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = string.ascii_lowercase\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[0:2]\n    \n    alphabet = alphabet[::-1]\n    \n    \nusing Test\n\
    \n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\"\
    )\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\"\
    ) == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpivhhfemj.jl:15\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpivhhfemj.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n\
    \    \n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet\
    \ = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n \
    \   alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpout_y5j4.jl:15\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpout_y5j4.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n\
    \    \n    rotated_alphabet = alphabet[1::2] + alphabet[::2]\n    \n    encrypted_string\
    \ = \"\"\n    \n    for c in s:\n        encrypted_string += rotated_alphabet[alphabet.index(c)]\n\
    \    \n    return encrypted_string\nend\n</cell>\n<code language=julia-1.0>\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyf25rth_.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyf25rth_.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet\
    \ = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet =\
    \ alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n \
    \   alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n  \
    \  alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet\
    \ = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet =\
    \ alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n \
    \   alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n  \
    \  alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\nusing\
    \ Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") ==\
    \ \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpuw3txp0m.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpuw3txp0m.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = string.ascii_lowercase\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet =\
    \ alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n\
    \    \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n  \
    \  \n    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n\
    \    alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n  \
    \  alphabet = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    alphabet\
    \ = alphabet[1::2]\n    \n    alphabet = alphabet[1::2]\n    \n    \nusing Test\n\
    \n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\"\
    )\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\"\
    ) == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbd42gb0g.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpbd42gb0g.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpbd42gb0g.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A'..'Z')\n    alphabet_rotated_down = alphabet[2:]\n    alphabet_rotated_up\
    \ = alphabet[1:2]\n    alphabet_rotated_left = alphabet[2:1]\n    alphabet_rotated_right\
    \ = alphabet[1:2]\n    alphabet_rotated_up = alphabet[1:2]\n    alphabet_rotated_left\
    \ = alphabet[2:1]\n    alphabet_rotated_right = alphabet[1:2]\n    alphabet_rotated_up\
    \ = alphabet[1:2]\n    alphabet_rotated_left = alphabet[2:1]\n    alphabet_rotated_right\
    \ = alphabet[1:2]\n    alphabet_rotated_up = alphabet[1:2]\n    alphabet_rotated_left\
    \ = alphabet[2:1]\n    alphabet_rotated_right = alphabet[1:2]\n    alphabet_rotated_up\
    \ = alphabet[1:2]\n    alphabet_rotated_left = alphabet[2:1]\n    alphabet_rotated_right\
    \ = alphabet[1:2]\n    alphabet_rotated_up = alphabet[1:2]\n    alphabet_rotated_left\
    \ = alphabet[2:1]\n    alphabet_rotated_right = alphabet[1:2]\n    alphabet_rotated_up\
    \ = alphabet[1:2]\n    alphabet_rotated_left = alphabet[2:1]\n    alphabet_rotated_right\
    \ = alphabet[1:2]\n    alphabet_rotated_up = alphabet[1:2]\n    alphabet_rotated_left\
    \ = alphabet[2:1]\n    alphabet_rotated_right = alphabet[1:2]\n    alphabet_rotated_up\
    \ = alphabet[1:2]\n    alphabet_rotated_left = alphabet[2:1]\n    alphabet_rotated_right\
    \ = alphabet[1:2]\n    alphabet_rotated_up = alphabet[1:2]\n    alphabet_rotated_left\
    \ = alphabet[2:1]\n    alphabet_rotated_right = alphabet[1:2]\n    alphabet_rotated_up\
    \ = alphabet[1:2]\n    alphabet_rotated_left = alphabet[2:1]\n    alphabet_rotated_right\
    \ = alphabet[1:2]\n    alphabet_rotated_up = alphabet[1:2]\n    alphabet_rotated_left\
    \ = alphabet[2:1]\n    alphabet_rotated_right = alphabet[1:2]\n    alphabet_rotated_up\
    \ = alphabet[1:2]\n    alphabet_rotated_left = alphabet[2:1]\n    alphabet_rotated_right\
    \ = alphabet[1:2]\n    alphabet_rotated_up = alphabet[1:2]\n    alphabet_rotated_left\
    \ = alphabet[2:1]\n    alphabet_rotated_right = alphabet[1:2]\n    alphabet_rotated_up\
    \ = alphabet[1:2]\n    alphabet_rotated_left = alphabet[2:1]\n    alphabet_rotated_right\
    \ = alphabet[1:2]\n    alphabet_rotated_up = alphabet[1:2]\n    alphabet_rotated_left\
    \ = alphabet[2:1]\n    alphabet_rotated_right = alphabet[1:2]\n    alphabet_rotated_up\
    \ = alphabet[1:2]\n    \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpn6hav84f.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpn6hav84f.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpomxxel7u.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpomxxel7u.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = rot13(alphabet)\n    alphabet = alphabet[alphabet == alphabet[end]]\n\
    \    alphabet = alphabet[1:end-1]\n    alphabet = alphabet*2\n    alphabet = alphabet[1:end]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[1:end]\n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:end]\n    alphabet = alphabet*2\n    alphabet = alphabet[1:end]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[1:end]\n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:end]\n    alphabet = alphabet*2\n    alphabet = alphabet[1:end]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[1:end]\n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:end]\n    alphabet = alphabet*2\n    alphabet = alphabet[1:end]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[1:end]\n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:end]\n    alphabet = alphabet*2\n    alphabet = alphabet[1:end]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[1:end]\n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:end]\n    alphabet = alphabet*2\n    alphabet = alphabet[1:end]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[1:end]\n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:end]\n    alphabet = alphabet*2\n    alphabet = alphabet[1:end]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[1:end]\n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:end]\n    alphabet = alphabet*2\n    alphabet = alphabet[1:end]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[1:end]\n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:end]\n    alphabet = alphabet*2\n    alphabet = alphabet[1:end]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[1:end]\n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:end]\n    alphabet = alphabet*2\n    alphabet = alphabet[1:end]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[1:end]\n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:end]\n    alphabet = alphabet*2\n    alphabet = alphabet[1:end]\n\
    \    alphabet = alphabet*2\n    alphabet = alphabet[1:end]\n    alphabet = alphabet*2\n\
    \    alphabet = alphabet[1:end]\n    alphabet = alphabet*2\n    alphabet = alphabet[1:end]\n\
    \    alphabet = alphabet*2\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppm17bhi0.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmppm17bhi0.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmppm17bhi0.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet += string.ascii_uppercase\n\
    \    alphabet += string.digits\n    alphabet += string.punctuation\n    alphabet\
    \ += string.whitespace\n    alphabet += string.ascii_lowercase\n    alphabet +=\
    \ string.ascii_uppercase\n    alphabet += string.digits\n    alphabet += string.punctuation\n\
    \    alphabet += string.whitespace\n    alphabet += string.ascii_lowercase\n \
    \   alphabet += string.ascii_uppercase\n    alphabet += string.digits\n    alphabet\
    \ += string.punctuation\n    alphabet += string.whitespace\n    alphabet += string.ascii_lowercase\n\
    \    alphabet += string.ascii_uppercase\n    alphabet += string.digits\n    alphabet\
    \ += string.punctuation\n    alphabet += string.whitespace\n    alphabet += string.ascii_lowercase\n\
    \    alphabet += string.ascii_uppercase\n    alphabet += string.digits\n    alphabet\
    \ += string.punctuation\n    alphabet += string.whitespace\n    alphabet += string.ascii_lowercase\n\
    \    alphabet += string.ascii_uppercase\n    alphabet += string.digits\n    alphabet\
    \ += string.punctuation\n    alphabet += string.whitespace\n    alphabet += string.ascii_lowercase\n\
    \    alphabet += string.ascii_uppercase\n    alphabet += string.digits\n    alphabet\
    \ += string.punctuation\n    alphabet += string.whitespace\n    alphabet += string.ascii_lowercase\n\
    \    alphabet += string.ascii_uppercase\n    alphabet += string.digits\n    alphabet\
    \ += string.punctuation\n    alphabet += string.whitespace\n    alphabet += string.ascii_lowercase\n\
    \    alphabet += string.ascii_uppercase\n    alphabet += string.digits\n    alphabet\
    \ += string.punctuation\n    alphabet += string.whitespace\n    alphabet += string.ascii_lowercase\n\
    \    alphabet += string.ascii_uppercase\n    alphabet += string.digits\n    alphabet\
    \ += string.punctuation\n    alphabet += string.whitespace\n    alphabet += string.ascii_lowercase\n\
    \    alphabet += string.ascii_uppercase\n    alphabet += string.digits\n    alphabet\
    \ += string.punctuation\n    alphabet += string.whitespace\n    alphabet += string.ascii_lowercase\n\
    \    alphabet += string.ascii_uppercase\n    alphabet += string.digits\n    alphabet\
    \ += string.punctuation\n    alphabet += string.whitespace\n    alphabet += string.ascii_lowercase\n\
    \    alphabet += string.ascii_uppercase\n    alphabet += string.digits\n    alphabet\
    \ += string.punctuation\n    alphabet += string.whitespace\n    alphabet += string.ascii_\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkylvtz53.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpkylvtz53.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpkylvtz53.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = String.fromCharCode('A'.charCodeAt(0) + 2)\n    alphabet =\
    \ String.fromCharCode('A'.charCodeAt(0) + 2)\n    alphabet = String.fromCharCode('A'.charCodeAt(0)\
    \ + 2)\n    alphabet = String.fromCharCode('A'.charCodeAt(0) + 2)\n    alphabet\
    \ = String.fromCharCode('A'.charCodeAt(0) + 2)\n    alphabet = String.fromCharCode('A'.charCodeAt(0)\
    \ + 2)\n    alphabet = String.fromCharCode('A'.charCodeAt(0) + 2)\n    alphabet\
    \ = String.fromCharCode('A'.charCodeAt(0) + 2)\n    alphabet = String.fromCharCode('A'.charCodeAt(0)\
    \ + 2)\n    alphabet = String.fromCharCode('A'.charCodeAt(0) + 2)\n    alphabet\
    \ = String.fromCharCode('A'.charCodeAt(0) + 2)\n    alphabet = String.fromCharCode('A'.charCodeAt(0)\
    \ + 2)\n    alphabet = String.fromCharCode('A'.charCodeAt(0) + 2)\n    alphabet\
    \ = String.fromCharCode('A'.charCodeAt(0) + 2)\n    alphabet = String.fromCharCode('A'.charCodeAt(0)\
    \ + 2)\n    alphabet = String.fromCharCode('A'.charCodeAt(0) + 2)\n    alphabet\
    \ = String.fromCharCode('A'.charCodeAt(0) + 2)\n    alphabet = String.fromCharCode('A'.charCodeAt(0)\
    \ + 2)\n    alphabet = String.fromCharCode('A'.charCodeAt(0) + 2)\n    alphabet\
    \ = String.fromCharCode('A'.charCodeAt(0) + 2)\n    alphabet = String.fromCharCode('A'.charCodeAt(0)\
    \ + 2)\n    alphabet = String.fromCharCode('A'.charCodeAt(0) + 2)\n    alphabet\
    \ = String.fromCharCode('A'.charCodeAt(0) + 2)\n    alphabet = String.fromCharCode('A'.charCodeAt(0)\
    \ + 2)\n    alphabet = String.fromCharCode('A'.charCodeAt(0) + 2)\n    alphabet\
    \ = String.fromCharCode('A'.charCodeAt(0) + 2)\n    alphabet = String.fromCharCode('A'.charCodeAt(0)\
    \ + 2)\n    alphabet = String.fromCharCode('A'.charCodeAt(0) + 2)\n    alphabet\
    \ = String.fromCharCode('A'.charCodeAt(0) + 2)\n    alphabet = String.fromCharCode('A'.charCodeAt(0)\
    \ + 2)\n    alphabet = String.fromCharCode('A'.charCodeAt(0) + 2)\n    alphabet\
    \ = String.fromCharCode('A'.charCodeAt(0) + 2)\n    alphabet = String.fromCharCode('A'.charCodeAt(0)\
    \ + 2)\n    alphabet = String.fromCharCode('A'.charCodeAt(0) + 2)\n    alphabet\
    \ = String.fromCharCode('A'.charCodeAt(0) + 2)\n    alphabet = String.fromCharCode('A'.charCodeAt(0)\
    \ + 2)\n    alphabet = String.fromCharCode('A'.charCodeAt(0) + 2)\n    alphabet\
    \ = String.fromCharCode('A'.charCodeAt(0) + 2)\n    alphabet = String.fromCharCode('A'.charCodeAt(0)\
    \ + 2)\n    alphabet = String.from\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppaelnvso.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmppaelnvso.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmppaelnvso.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = Array(\"abcdefghijklmnopqrstuvwxyz\")\n    \n    rotated_alphabet\
    \ = alphabet[1::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\n    \n\
    \    rotated_alphabet = rotated_alphabet[1::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\n\
    \    \n    rotated_alphabet = rotated_alphabet[1::2]\n    \n    rotated_alphabet\
    \ = rotated_alphabet[1::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\n\
    \    \n    rotated_alphabet = rotated_alphabet[1::2]\n    \n    rotated_alphabet\
    \ = rotated_alphabet[1::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\n\
    \    \n    rotated_alphabet = rotated_alphabet[1::2]\n    \n    rotated_alphabet\
    \ = rotated_alphabet[1::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\n\
    \    \n    rotated_alphabet = rotated_alphabet[1::2]\n    \n    rotated_alphabet\
    \ = rotated_alphabet[1::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\n\
    \    \n    rotated_alphabet = rotated_alphabet[1::2]\n    \n    rotated_alphabet\
    \ = rotated_alphabet[1::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\n\
    \    \n    rotated_alphabet = rotated_alphabet[1::2]\n    \n    rotated_alphabet\
    \ = rotated_alphabet[1::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\n\
    \    \n    rotated_alphabet = rotated_alphabet[1::2]\n    \n    rotated_alphabet\
    \ = rotated_alphabet[1::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\n\
    \    \n    rotated_alphabet = rotated_alphabet[1::2]\n    \n    rotated_alphabet\
    \ = rotated_alphabet[1::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\n\
    \    \n    rotated_alphabet = rotated_alphabet[1::2]\n    \n    rotated_alphabet\
    \ = rotated_alphabet[1::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\n\
    \    \n    rotated_alphabet = rotated_alphabet[1::2]\n    \n    rotated_alphabet\
    \ = rotated_alphabet[1::2]\n    \n    rotated_alphabet = rotated_alphabet[1::2]\n\
    \    \n    rotated_alphabet = rotated_alphabet[1::2]\n    \n    rot\nusing Test\n\
    \n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\"\
    )\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\"\
    ) == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3aew723y.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp3aew723y.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp3aew723y.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    \nusing Test\n\n\
    @testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\
    \t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\")\
    \ == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpdcb_y94a.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpdcb_y94a.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = \n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmp6fpq73_w.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp6fpq73_w.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = alphabet\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n\
    \    alphabet = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet\
    \ = alphabet[1..-1]\n    alphabet = alphabet[1..-1]\n    alphabet = \nusing Test\n\
    \n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\"\
    )\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\"\
    ) == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid operator \"..-\" near column 27\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpihfj2qr7.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpihfj2qr7.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = alphabet\n    alphabet = alphabet[1:length(alphabet)-1]\n \
    \   alphabet = alphabet[1:length(alphabet)-1]\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet[1:length(alphabet)-1]\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet[1:length(alphabet)-1]\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet[1:length(alphabet)-1]\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet[1:length(alphabet)-1]\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet[1:length(alphabet)-1]\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet[1:length(alphabet)-1]\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet[1:length(alphabet)-1]\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet[1:length(alphabet)-1]\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet[1:length(alphabet)-1]\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet[1:length(alphabet)-1]\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet[1:length(alphabet)-1]\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet[1:length(alphabet)-1]\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet[1:length(alphabet)-1]\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet[1:length(alphabet)-1]\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet[1:length(alphabet)-1]\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet[1:length(alphabet)-1]\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet[1:length(alphabet)-1]\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet[1:length(alphabet)-1]\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet[1:length(alphabet)-1]\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet[1:length(alphabet)-1]\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet[1:length(alphabet)-1]\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet[1:length(alphabet)-1]\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet[1:length(alphabet)-1]\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet[1:length(alphabet)-1]\n    alphabet = alphabet[1:length(alphabet\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwteutp8o.jl:64\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwteutp8o.jl:64\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnbs75a39.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnbs75a39.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\
    \    alphabet = alphabet * 2\n    alphabet = alphabet[1:length(alphabet)-1]\n\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppcq65i65.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmppcq65i65.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmppcq65i65.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A'..'Z')\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet\
    \ = alphabet[alphabet.length/2:alphabet.length*2-1]\n    alphabet = alphabet[alphabet.length\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp66qkkt5t.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp66qkkt5t.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = string.ascii_lowercase\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmp66ywyxjt.jl:15\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp66ywyxjt.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/2:]\n\
    \    alphabet = alphabet[alphabet.length/2:]\n    alphabet = alphabet[alphabet.length/\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpmc1qjsbx.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpmc1qjsbx.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    rotated_alphabet = alphabet[alphabet.size\
    \ - 2:] + alphabet[1:alphabet.size - 2]\n    rotated_alphabet = rotated_alphabet[alphabet.size\
    \ - 2:] + rotated_alphabet[1:alphabet.size - 2]\n    rotated_alphabet = rotated_alphabet[alphabet.size\
    \ - 2:] + rotated_alphabet[1:alphabet.size - 2]\n    rotated_alphabet = rotated_alphabet[alphabet.size\
    \ - 2:] + rotated_alphabet[1:alphabet.size - 2]\n    rotated_alphabet = rotated_alphabet[alphabet.size\
    \ - 2:] + rotated_alphabet[1:alphabet.size - 2]\n    rotated_alphabet = rotated_alphabet[alphabet.size\
    \ - 2:] + rotated_alphabet[1:alphabet.size - 2]\n    rotated_alphabet = rotated_alphabet[alphabet.size\
    \ - 2:] + rotated_alphabet[1:alphabet.size - 2]\n    rotated_alphabet = rotated_alphabet[alphabet.size\
    \ - 2:] + rotated_alphabet[1:alphabet.size - 2]\n    rotated_alphabet = rotated_alphabet[alphabet.size\
    \ - 2:] + rotated_alphabet[1:alphabet.size - 2]\n    rotated_alphabet = rotated_alphabet[alphabet.size\
    \ - 2:] + rotated_alphabet[1:alphabet.size - 2]\n    rotated_alphabet = rotated_alphabet[alphabet.size\
    \ - 2:] + rotated_alphabet[1:alphabet.size - 2]\n    rotated_alphabet = rotated_alphabet[alphabet.size\
    \ - 2:] + rotated_alphabet[1:alphabet.size - 2]\n    rotated_alphabet = rotated_alphabet[alphabet.size\
    \ - 2:] + rotated_alphabet[1:alphabet.size - 2]\n    rotated_alphabet = rotated_alphabet[alphabet.size\
    \ - 2:] + rotated_alphabet[1:alphabet.size - 2]\n    rotated_alphabet = rotated_alphabet[alphabet.size\
    \ - 2:] + rotated_alphabet[1:alphabet.size - 2]\n    rotated_alphabet = rotated_alphabet[alphabet.size\
    \ - 2:] + rotated_alphabet[1:alphabet.size - 2]\n    rotated_alphabet = rotated_alphabet[alphabet.size\
    \ - 2:] + rotated_alphabet[1:alphabet.size - 2]\n    rotated_alphabet = rotated_alphabet[alphabet.size\
    \ - 2:] + rotated_alphabet[1:alphabet.size - 2]\n    rotated_alphabet = rotated_alphabet[alphabet.size\
    \ - 2:] + rotated_alphabet[1:alphabet.size - 2]\n    rotated_alphabet = rotated_alphabet[alphabet.size\
    \ - 2:] + rotated_alphabet[1:alphabet.size - 2]\n    rotated_alphabet = rotated_alphabet[alphabet.size\
    \ - 2:] + rotated_alphabet[1:alphabet.size - 2]\n    rotated_alphabet = rotated_alphabet[alphabet.size\
    \ - 2:] + rotated_alphabet\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"(alphabet.size - 2):\"\
    \ range expression \nStacktrace:\n [1] top-level scope at /tmp/tmpxd4xv6on.jl:13\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpxd4xv6on.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    rotated_alphabet\
    \ = alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[alphabet.index(alphabet[\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9b1ewfuk.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9b1ewfuk.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = ('A'..'Z')\n    \n    encrypted_string = \"\"\n    \n\
    \    for c in s\n        \n        if c in alphabet\n            \n          \
    \  encrypted_string += alphabet[(alphabet.index(c)+2)%26]\n            \n    \
    \    else\n            \n            encrypted_string += c\n            \n   \
    \     end\n        \n    end\n    \n    return encrypted_string\nend\n</cell>\n\
    <code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppvqi1upt.jl:33\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppvqi1upt.jl:33\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = Array(\"abcdefghijklmnopqrstuvwxyz\")\n    rotated_alphabet\
    \ = Array(\"nopqrstuvwxyzabcdefghijklm\")\n    \n    encrypted_string = \"\"\n\
    \    for c in s\n        encrypted_string += alphabet[alphabet.index(c) + rotated_alphabet.index(c)]\n\
    \    return encrypted_string\nend\n</cell>\n<code language=julia-1.0>\nencrypt(\"\
    hi\")\n</cell>\n<code language=julia-1.0>\nencrypt(\"asdfghjkl\")\n</cell>\n<code\
    \ language=julia-1.0>\nencrypt(\"gf\")\n</cell>\n<code language=julia-1.0>\nencrypt(\"\
    et\")\n</cell>\n<text>\nExercise: Write a function that takes a string as an argument\
    \ and returns the number of characters in the string. \n    For example:\n   \
    \ length('hi') returns 5\n    length('asdfghjkl') returns 13\n    length('gf')\
    \ returns 3\n    length('et') returns 5\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6c47foph.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6c47foph.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A'..'Z')\n    rotated_alphabet = alphabet[(alphabet.size\
    \ - 1)::-1]\n    rotated_alphabet = rotated_alphabet[1:(alphabet.size - 1):-1]\n\
    \    rotated_alphabet = rotated_alphabet[(alphabet.size - 1)::-1]\n    rotated_alphabet\
    \ = rotated_alphabet[1:(alphabet.size - 1):-1]\n    rotated_alphabet = rotated_alphabet[(alphabet.size\
    \ - 1)::-1]\n    rotated_alphabet = rotated_alphabet[1:(alphabet.size - 1):-1]\n\
    \    rotated_alphabet = rotated_alphabet[(alphabet.size - 1)::-1]\n    rotated_alphabet\
    \ = rotated_alphabet[1:(alphabet.size - 1):-1]\n    rotated_alphabet = rotated_alphabet[(alphabet.size\
    \ - 1)::-1]\n    rotated_alphabet = rotated_alphabet[1:(alphabet.size - 1):-1]\n\
    \    rotated_alphabet = rotated_alphabet[(alphabet.size - 1)::-1]\n    rotated_alphabet\
    \ = rotated_alphabet[1:(alphabet.size - 1):-1]\n    rotated_alphabet = rotated_alphabet[(alphabet.size\
    \ - 1)::-1]\n    rotated_alphabet = rotated_alphabet[1:(alphabet.size - 1):-1]\n\
    \    rotated_alphabet = rotated_alphabet[(alphabet.size - 1)::-1]\n    rotated_alphabet\
    \ = rotated_alphabet[1:(alphabet.size - 1):-1]\n    rotated_alphabet = rotated_alphabet[(alphabet.size\
    \ - 1)::-1]\n    rotated_alphabet = rotated_alphabet[1:(alphabet.size - 1):-1]\n\
    \    rotated_alphabet = rotated_alphabet[(alphabet.size - 1)::-1]\n    rotated_alphabet\
    \ = rotated_alphabet[1:(alphabet.size - 1):-1]\n    rotated_alphabet = rotated_alphabet[(alphabet.size\
    \ - 1)::-1]\n    rotated_alphabet = rotated_alphabet[1:(alphabet.size - 1):-1]\n\
    \    rotated_alphabet = rotated_alphabet[(alphabet.size - 1)::-1]\n    rotated_alphabet\
    \ = rotated_alphabet[1:(alphabet.size - 1):-1]\n    rotated_alphabet = rotated_alphabet[(alphabet.size\
    \ - 1)::-1]\n    rotated_alphabet = rotated_alphabet[1:(alphabet.size - 1):-1]\n\
    \    rotated_alphabet = rotated_alphabet[(alphabet.size - 1)::-1]\n    rotated_alphabet\
    \ = rotated_alphabet[1:(alphabet.size - 1):-1]\n    rotated_alphabet = rotated_alphabet[(alphabet.size\
    \ - 1)::-1]\n    rotated_alphabet = rotated_alphabet[1:(alphabet.size - 1):-1]\n\
    \    rotated_alphabet = rotated_alphabet[(alphabet.size - 1)::-1]\n    rotated_alphabet\
    \ = rotated_alphabet\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t\
    @test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: expected \"]\" or separator in arguments to \"\
    [ ]\"; got \"(alphabet.size - 1)::-1\"\nStacktrace:\n [1] top-level scope at /tmp/tmpy9xx7nxa.jl:13\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpy9xx7nxa.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A'..'Z')\n    alphabet = alphabet[alphabet.size - 2:end]\n\
    \    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.size - 2:end]\n    alphabet = alphabet[alphabet.size\
    \ - 2:end]\n    alphabet = alphabet[alphabet.\nusing Test\n\n@testset begin\n\n\
    candidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpuoo7vvan.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpuoo7vvan.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.size\
    \ - 2:alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2:alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2:alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2:alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2:alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2:alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2:alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2:alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2:alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2:alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2:alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2:alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2:alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2:alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2:alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2:alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2:alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2:alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2:alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2:alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2:alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2:alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2:alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2:alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2:alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2:alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2:alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2:alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2:alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2:alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2:alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2:alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2:alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2:alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2:alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphab\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t\
    @test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpct8fffnm.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpct8fffnm.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet\
    \ = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet =\
    \ alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n \
    \   alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n  \
    \  alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet\
    \ = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet =\
    \ alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n \
    \   alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n  \
    \  alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpp6cqy49h.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpp6cqy49h.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = Array{Char}(('A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'))\n\
    \    \n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[2:end]\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpf834rjhs.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpf834rjhs.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpf834rjhs.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    \n    alphabet = alphabet[2:]\n\
    \    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n\
    \    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet\
    \ = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n\
    \    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n\
    \    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet\
    \ = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n\
    \    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n\
    \    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet\
    \ = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n\
    \    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n\
    \    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet\
    \ = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n\
    \    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n\
    \    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet\
    \ = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n\
    \    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n\
    \    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet\
    \ = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n\
    \    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n\
    \    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet\
    \ = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n    \n    alphabet = alphabet[2:]\n\
    \    \n    alphabet = alphabet[2:]\n    \n    alphabet = \nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpyeb19l_s.jl:15\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpyeb19l_s.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet\
    \ = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet =\
    \ alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n \
    \   alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n  \
    \  alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet\
    \ = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet =\
    \ alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n \
    \   alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n  \
    \  alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpp3v0312_.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpp3v0312_.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z')\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[1:] + alphabet[:1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n\
    \    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n\
    \    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n\
    \    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n\
    \    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n\
    \    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n\
    \    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n\
    \    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n\
    \    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n\
    \    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n\
    \    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n\
    \    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n\
    \    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n\
    \    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n\
    \    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n\
    \    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n\
    \    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n\
    \    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n\
    \    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n\
    \    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n\
    \    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n\
    \    alphabet = alphabet[2:] + alphabet[:1]\n    alphabet = alphabet[2:] + alphabet[:1]\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpwxrzzxja.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpwxrzzxja.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n    \n \
    \   alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet[1::2]\n\
    \    \n    alphabet = alphabet[::-1]\n    \n    alphabet = alphabet[1::2] + alphabet\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpuborn06s.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpuborn06s.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',\
    \ 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[alphabet.index(s[0]):alphabet.index(s[0])\
    \ + alphabet.index(s[1])] + alphabet[alphabet.index(s[1]):alphabet.index(s[1])\
    \ + alphabet.index(s[2])]\n    alphabet = alphabet[alphabet.index(s[2]):alphabet.index(s[2])\
    \ + alphabet.index(s[3])]\n    alphabet = alphabet[alphabet.index(s[3]):alphabet.index(s[3])\
    \ + alphabet.index(s[4])]\n    alphabet = alphabet[alphabet.index(s[4]):alphabet.index(s[4])\
    \ + alphabet.index(s[5])]\n    alphabet = alphabet[alphabet.index(s[5]):alphabet.index(s[5])\
    \ + alphabet.index(s[6])]\n    alphabet = alphabet[alphabet.index(s[6]):alphabet.index(s[6])\
    \ + alphabet.index(s[7])]\n    alphabet = alphabet[alphabet.index(s[7]):alphabet.index(s[7])\
    \ + alphabet.index(s[8])]\n    alphabet = alphabet[alphabet.index(s[8]):alphabet.index(s[8])\
    \ + alphabet.index(s[9])]\n    alphabet = alphabet[alphabet.index(s[9]):alphabet.index(s[9])\
    \ + alphabet.index(s[10])]\n    alphabet = alphabet[alphabet.index(s[10]):alphabet.index(s[10])\
    \ + alphabet.index(s[11])]\n    alphabet = alphabet[alphabet.index(s[11]):alphabet.index(s[11])\
    \ + alphabet.index(s[12])]\n    alphabet = alphabet[alphabet.index(s[12]):alphabet.index(s[12])\
    \ + alphabet.index(s[13])]\n    alphabet = alphabet[alphabet.index(s[13]):alphabet.index(s[13])\
    \ + alphabet.index(s[14])]\n    alphabet = alphabet[alphabet.index(s[14]):alphabet.index(s[14])\
    \ + alphabet.index(s[15])]\n    alphabet = alphabet[alphabet.index(s[15]):alphabet.index(s[15])\
    \ + alphabet.index(s[16])]\n    alphabet = alphabet[alphabet.index(s[16]):alphabet.index(s[16])\
    \ + alphabet.index(s[17])]\n    alphabet = alphabet[alphabet.index(s[17]):alphabet.index(s[17])\
    \ + alphabet.index(s[18])]\n    alphabet = alphabet[alphabet.index(s[18]):alphabet.index(s[18])\
    \ + alphabet.index(s[19])]\n    alphabet\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmp2psyeodq.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp2psyeodq.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    rotated_alphabet = alphabet[alphabet.size\
    \ - 2..alphabet.size - 1]\n    rotated_alphabet = rotated_alphabet[alphabet.length/2..alphabet.length/2]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length/2..alphabet.length/2]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length/2..alphabet.length/2]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length/2..alphabet.length/2]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length/2..alphabet.length/2]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length/2..alphabet.length/2]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length/2..alphabet.length/2]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length/2..alphabet.length/2]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length/2..alphabet.length/2]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length/2..alphabet.length/2]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length/2..alphabet.length/2]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length/2..alphabet.length/2]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length/2..alphabet.length/2]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length/2..alphabet.length/2]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length/2..alphabet.length/2]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length/2..alphabet.length/2]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length/2..alphabet.length/2]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length/2..alphabet.length/2]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length/2..alphabet.length/2]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length/2..alphabet.length/2]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length/2..alphabet.length/2]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length/2..alphabet.length/2]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length/2..alphabet.length/2]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length/2..alphabet.length/2]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length/2..alphabet.length/2]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length/2..alphabet.length/2]\n\
    \    rotated_alphabet = rotated_alphabet[alphabet.length\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmmx7fzte.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmmx7fzte.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size\
    \ - 2 : alphabet.size - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size\
    \ - 1]\n    alphabet = alphabet[alphabet.size - 2 : alphabet.size - 1]\n    alphabet\
    \ = alphabet[alphab\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t\
    @test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpejtmgnmt.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpejtmgnmt.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[alphabet.length\
    \ div 2:alphabet.length div 2 + alphabet.length div 2]\n    return string.join([alphabet[alphabet.index(letter)\
    \ + 2] for letter in s], \"\")\nend\n</cell>\n<code language=julia-1.0>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") ==\
    \ \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0vcjhjm4.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0vcjhjm4.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = Array{Char}(('A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'))\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[alphabet]\n    alphabet\
    \ = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n\
    \    alphabet = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n    alphabet\
    \ = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n\
    \    alphabet = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n    alphabet\
    \ = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n\
    \    alphabet = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n    alphabet\
    \ = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n\
    \    alphabet = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n    alphabet\
    \ = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n\
    \    alphabet = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n    alphabet\
    \ = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n\
    \    alphabet = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n    alphabet\
    \ = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n\
    \    alphabet = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n    alphabet\
    \ = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n\
    \    alphabet = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n    alphabet\
    \ = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n\
    \    alphabet = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n    alphabet\
    \ = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n\
    \    alphabet = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n    alphabet\
    \ = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n    alphabet = alphabet[alphabet]\n\
    \    alphabet = alphabet[alphabet]\n    alphabet = alphabet[\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgehev73c.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgehev73c.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A'..'Z')\n    alphabet = alphabet[alphabet.size - 2 :: -1]\n\
    \    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size\
    \ - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet =\
    \ alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1\
    \ :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size\
    \ - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet =\
    \ alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1\
    \ :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size\
    \ - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet =\
    \ alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1\
    \ :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size\
    \ - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet =\
    \ alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1\
    \ :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size\
    \ - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet =\
    \ alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1\
    \ :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size\
    \ - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet =\
    \ alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1\
    \ :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size\
    \ - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet =\
    \ alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1\
    \ :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size\
    \ - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: -1]\n    alphabet =\
    \ alphabet[alphabet.size - 1 :: -1]\n    alphabet = alphabet[alphabet.size - 1\
    \ :: -1]\n    alphabet = alphabet[alphabet.size - 1 :: \nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: expected \"]\" or separator in arguments to \"\
    [ ]\"; got \"(alphabet.size - 2::-)1\"\nStacktrace:\n [1] top-level scope at /tmp/tmpud06__63.jl:13\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpud06__63.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[1::2]\n   \
    \ alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgxvbx55h.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpgxvbx55h.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpgxvbx55h.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet\nusing\
    \ Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") ==\
    \ \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3l_4lzvg.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp3l_4lzvg.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp3l_4lzvg.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n\
    \    \n    rotated_alphabet = alphabet[2:] + alphabet[0:2]\n    \n    encrypted_string\
    \ = \"\"\n    \n    for character in s\n        encrypted_string += rotated_alphabet[alphabet.index(character)]\n\
    \    \n    return encrypted_string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpku63slbs.jl:15\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpku63slbs.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = ('A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z')\n\
    \    \n    alphabet = alphabet[2:] + alphabet[:2] # rotate alphabet by 2\n   \
    \ \n    alphabet = alphabet[2:] + alphabet[:2] # rotate alphabet by 2\n    \n\
    \    alphabet = alphabet[2:] + alphabet[:2] # rotate alphabet by 2\n    \n   \
    \ alphabet = alphabet[2:] + alphabet[:2] # rotate alphabet by 2\n    \n    alphabet\
    \ = alphabet[2:] + alphabet[:2] # rotate alphabet by 2\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2] # rotate alphabet by 2\n    \n    alphabet = alphabet[2:] + alphabet[:2]\
    \ # rotate alphabet by 2\n    \n    alphabet = alphabet[2:] + alphabet[:2] # rotate\
    \ alphabet by 2\n    \n    alphabet = alphabet[2:] + alphabet[:2] # rotate alphabet\
    \ by 2\n    \n    alphabet = alphabet[2:] + alphabet[:2] # rotate alphabet by\
    \ 2\n    \n    alphabet = alphabet[2:] + alphabet[:2] # rotate alphabet by 2\n\
    \    \n    alphabet = alphabet[2:] + alphabet[:2] # rotate alphabet by 2\n   \
    \ \n    alphabet = alphabet[2:] + alphabet[:2] # rotate alphabet by 2\n    \n\
    \    alphabet = alphabet[2:] + alphabet[:2] # rotate alphabet by 2\n    \n   \
    \ alphabet = alphabet[2:] + alphabet[:2] # rotate alphabet by 2\n    \n    alphabet\
    \ = alphabet[2:] + alphabet[:2] # rotate alphabet by 2\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2] # rotate alphabet by 2\n    \n    alphabet = alphabet[2:] + alphabet[:2]\
    \ # rotate alphabet by 2\n    \n    alphabet = alphabet[2:] + alphabet[:2] # rotate\
    \ alphabet by 2\n    \n    alphabet = alphabet[2:] + alphabet[:2] # rotate alphabet\
    \ by 2\n    \n    alphabet = alphabet[2:] + alphabet[:2] # rotate alphabet by\
    \ 2\n    \n    alphabet = alphabet[2:] + alphabet[:2] # rotate alphabet by 2\n\
    \    \n    alphabet = alphabet[2:] + alphabet[:2] # rotate alphabet by 2\n   \
    \ \n    alphabet = alphabet[2:] + alphabet[:2] # rotate alphabet by 2\n    \n\
    \    alphabet = alphabet[2:] + alphabet[:2] # rotate alphabet by 2\n    \n   \
    \ alphabet\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpeshg9lwq.jl:15\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpeshg9lwq.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = alphabet\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:]\
    \ + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n   \
    \ alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] +\
    \ alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet\
    \ = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:]\
    \ + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n   \
    \ alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] +\
    \ alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet\
    \ = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:]\
    \ + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n   \
    \ alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] +\
    \ alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet\
    \ = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:]\
    \ + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n   \
    \ alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] +\
    \ alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet\
    \ = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:]\
    \ + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n   \
    \ alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] +\
    \ alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \n    alphabet\
    \ = alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    \n    alphabet = alphabet[1:] + alphabet[:1]\n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmp1iufj9yz.jl:15\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp1iufj9yz.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwvwynt8c.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpwvwynt8c.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpwvwynt8c.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet\
    \ = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet =\
    \ alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n \
    \   alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n  \
    \  alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet\
    \ = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet =\
    \ alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n \
    \   alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n  \
    \  alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmps6zs6vc2.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmps6zs6vc2.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    \n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") ==\
    \ \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpmrq30zrm.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpmrq30zrm.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = ('A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z')\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqtu2tyf6.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpqtu2tyf6.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpqtu2tyf6.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = String.ascii_lowercase\n    \n    alphabet = alphabet[alphabet.length\
    \ mod 2 :: -2]\n    \n    return alphabet[alphabet.index(s)+1] + alphabet[alphabet.index(s)-1]\n\
    end\n</cell>\n<code language=julia-1.5>\nencrypt(\"hi\")\n</cell>\n<code language=julia-1.5>\n\
    encrypt(\"asdfghjkl\")\n</cell>\n<code language=julia-1.5>\nencrypt(\"gf\")\n\
    </cell>\n<code language=julia-1.5>\nencrypt(\"et\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string as an argument and returns the string\
    \ reversed.\nFor example:\nreverse(\"hello\") returns \"olleh\"\nreverse(\"asdfghjkl\"\
    ) returns \"kjdfhgas\"\nreverse(\"gf\") returns \"gfedcba\"\nreverse(\"et\") returns\
    \ \"et\"\nHint: Reverse the string using slicing.\nusing Test\n\n@testset begin\n\
    \ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: expected \"]\" or separator in arguments to \"\
    [ ]\"; got \"2::-2\"\nStacktrace:\n [1] top-level scope at /tmp/tmp1mjgvbh3.jl:15\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp1mjgvbh3.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length]\n    alphabet = alphabet[alphabet.length/2:alphabet.length\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppb3kzxiy.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppb3kzxiy.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = rot13(alphabet)\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = alphabet[1:] + alphabet[:1]\n\
    \    alphabet = alphabet[1:] + alphabet[:1]\n    alphabet = \nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpds6ko909.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpds6ko909.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmppm7ng6rw.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmppm7ng6rw.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A'..'Z')\n    rotated_alphabet = alphabet[(alphabet.size\
    \ - 1)::-1]\n    rotated_alphabet .= alphabet[alphabet.size - 2:]\n    rotated_alphabet\
    \ .= alphabet[alphabet.size - 1:0:-1]\n    rotated_alphabet .= alphabet[alphabet.size\
    \ - 2:0:-1]\n    rotated_alphabet .= alphabet[alphabet.size - 3:0:-1]\n    rotated_alphabet\
    \ .= alphabet[alphabet.size - 4:0:-1]\n    rotated_alphabet .= alphabet[alphabet.size\
    \ - 5:0:-1]\n    rotated_alphabet .= alphabet[alphabet.size - 6:0:-1]\n    rotated_alphabet\
    \ .= alphabet[alphabet.size - 7:0:-1]\n    rotated_alphabet .= alphabet[alphabet.size\
    \ - 8:0:-1]\n    rotated_alphabet .= alphabet[alphabet.size - 9:0:-1]\n    rotated_alphabet\
    \ .= alphabet[alphabet.size - 10:0:-1]\n    rotated_alphabet .= alphabet[alphabet.size\
    \ - 11:0:-1]\n    rotated_alphabet .= alphabet[alphabet.size - 12:0:-1]\n    rotated_alphabet\
    \ .= alphabet[alphabet.size - 13:0:-1]\n    rotated_alphabet .= alphabet[alphabet.size\
    \ - 14:0:-1]\n    rotated_alphabet .= alphabet[alphabet.size - 15:0:-1]\n    rotated_alphabet\
    \ .= alphabet[alphabet.size - 16:0:-1]\n    rotated_alphabet .= alphabet[alphabet.size\
    \ - 17:0:-1]\n    rotated_alphabet .= alphabet[alphabet.size - 18:0:-1]\n    rotated_alphabet\
    \ .= alphabet[alphabet.size - 19:0:-1]\n    rotated_alphabet .= alphabet[alphabet.size\
    \ - 20:0:-1]\n    rotated_alphabet .= alphabet[alphabet.size - 21:0:-1]\n    rotated_alphabet\
    \ .= alphabet[alphabet.size - 22:0:-1]\n    rotated_alphabet .= alphabet[alphabet.size\
    \ - 23:0:-1]\n    rotated_alphabet .= alphabet[alphabet.size - 24:0:-1]\n    rotated_alphabet\
    \ .= alphabet[alphabet.size - 25:0:-1]\n    rotated_alphabet .= alphabet[alphabet.size\
    \ - 26:0:-1]\n    rotated_alphabet .= alphabet[alphabet.size - 27:0:-1]\n    rotated_alphabet\
    \ .= alphabet[alphabet.size - 28:0:-1]\n    rotated_alphabet .= alphabet[alphabet.size\
    \ - 29:0:-1]\n    rotated_\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: expected \"]\" or separator in arguments to \"\
    [ ]\"; got \"(alphabet.size - 1)::-1\"\nStacktrace:\n [1] top-level scope at /tmp/tmpz1wm6ia5.jl:13\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpz1wm6ia5.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = list('abcdefghijklmnopqrstuvwxyz')\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[alphabet.index(s[0]):alphabet.index(s[0])\
    \ + 2]\n    return ''.join(alphabet[alphabet.index(s[0]):alphabet.index(s[0])\
    \ + 2] + s[1:])\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid character literal\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp0k3p_bfu.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0k3p_bfu.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    alphabet =\
    \ alphabet[1:] + alphabet[:1]\n    \n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    \n    alphabet = alphabet[3:] + alphabet[:3]\n    \n    alphabet = alphabet[4:]\
    \ + alphabet[:4]\n    \n    alphabet = alphabet[5:] + alphabet[:5]\n    \n   \
    \ alphabet = alphabet[6:] + alphabet[:6]\n    \n    alphabet = alphabet[7:] +\
    \ alphabet[:7]\n    \n    alphabet = alphabet[8:] + alphabet[:8]\n    \n    alphabet\
    \ = alphabet[9:] + alphabet[:9]\n    \n    alphabet = alphabet[10:] + alphabet[:10]\n\
    \    \n    alphabet = alphabet[11:] + alphabet[:11]\n    \n    alphabet = alphabet[12:]\
    \ + alphabet[:12]\n    \n    alphabet = alphabet[13:] + alphabet[:13]\n    \n\
    \    alphabet = alphabet[14:] + alphabet[:14]\n    \n    alphabet = alphabet[15:]\
    \ + alphabet[:15]\n    \n    alphabet = alphabet[16:] + alphabet[:16]\n    \n\
    \    alphabet = alphabet[17:] + alphabet[:17]\n    \n    alphabet = alphabet[18:]\
    \ + alphabet[:18]\n    \n    alphabet = alphabet[19:] + alphabet[:19]\n    \n\
    \    alphabet = alphabet[20:] + alphabet[:20]\n    \n    alphabet = alphabet[21:]\
    \ + alphabet[:21]\n    \n    alphabet = alphabet[22:] + alphabet[:22]\n    \n\
    \    alphabet = alphabet[23:] + alphabet[:23]\n    \n    alphabet = alphabet[24:]\
    \ + alphabet[:24]\n    \n    alphabet = alphabet[25:] + alphabet[:25]\n    \n\
    \    alphabet = alphabet[26:] + alphabet[:26]\n    \n    alphabet = alphabet[27:]\
    \ + alphabet[:27]\n    \n    alphabet = alphabet[28:] + alphabet[:28]\n    \n\
    \    alphabet = alphabet[29:] + alphabet[:29]\n    \n    alphabet = alphabet[30:]\
    \ + alphabet[:30]\n    \n    alphabet = alphabet[31:] + alphabet[:31]\n    \n\
    \    alphabet = alphabet[32:] + alphabet[:32]\n    \n    alphabet = alphabet[33:]\
    \ + alphabet[:33]\n    \n    alphabet = alphabet[34:] + alphabet[:34]\n    \n\
    \    alphabet = alphabet[35:] + \nusing Test\n\n@testset begin\n\ncandidate =\
    \ encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpdw3hw1rq.jl:15\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpdw3hw1rq.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = Array{Char}(Char.(string.ascii_lowercase))\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[end:-1:1]\n\
    \    \n    alphabet = alphabet[end:-1:1]\n    alphabet = alphabet[2:end]\n   \
    \ alphabet = alphabet[1:end-1]\n    alphabet = alphabet[end:-1:1]\n    \n    alphabet\
    \ = alphabet[end:-1:1]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n\
    \    alphabet = alphabet[end:-1:1]\n    \n    alphabet = alphabet[end:-1:1]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet\
    \ = alphabet[end:-1:1]\n    \n    alphabet = alphabet[end:-1:1]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[end:-1:1]\n\
    \    \n    alphabet = alphabet[end:-1:1]\n    alphabet = alphabet[2:end]\n   \
    \ alphabet = alphabet[1:end-1]\n    alphabet = alphabet[end:-1:1]\n    \n    alphabet\
    \ = alphabet[end:-1:1]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n\
    \    alphabet = alphabet[end:-1:1]\n    \n    alphabet = alphabet[end:-1:1]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet\
    \ = alphabet[end:-1:1]\n    \n    alphabet = alphabet[end:-1:1]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[end:-1:1]\n\
    \    \n    alphabet = alphabet[end:-1:1]\n    alphabet = alphabet[2:end]\n   \
    \ alphabet = alphabet[1:end-1]\n    alphabet = alphabet[end:-1:1]\n    \n    alphabet\
    \ = alphabet[end:-1:1]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n\
    \    alphabet = alphabet[end:-1:1]\n    \n    alphabet = alphabet[end:-1:1]\n\
    \    alphabet = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet\
    \ = alphabet[end:-1:1]\n    \n    alphabet = alphabet[end:-1:1]\n    alphabet\
    \ = alphabet[2:end]\n    alphabet = alphabet[1:end-1]\n    alphabet = alphabet[end:-1:1]\n\
    \    \n    alphabet = alphabet[end:-1:1]\n    alphabet = alphabet[2:end]\n   \
    \ alphabet = alphabet[1:end-1]\n    alphabet = alphabet[end:-1:1]\n    \n    alphabet\
    \ = alphabet[end:-1:1]\n    alphabet = alphabet[2:\nusing Test\n\n@testset begin\n\
    \ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"\
    asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_wd_u1jc.jl:85\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_wd_u1jc.jl:85\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = Array(\"abcdefghijklmnopqrstuvwxyz\")\n    \n    encrypted_string\
    \ = \"\"\n    \n    for c in s\n        \n        encrypted_string += alphabet[alphabet.index(c)\
    \ + 2]\n        \n    return encrypted_string\n    \nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk078kvab.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpk078kvab.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n\
    \    rotated_alphabet = alphabet[2:] + alphabet[:2]\n    \n    encrypted_string\
    \ = ''\n    for character in s\n        encrypted_string += rotated_alphabet[alphabet.index(character)]\n\
    \    \n    return encrypted_string\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmplxkup84z.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmplxkup84z.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet\
    \ = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet =\
    \ alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n \
    \   alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n  \
    \  alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet\
    \ = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet =\
    \ alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n \
    \   alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n  \
    \  alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpezp0z99p.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpezp0z99p.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    \n    alphabet = list(\"abcdefghijklmnopqrstuvwxyz\")\n    \n    alphabet\
    \ = alphabet[2:] + alphabet[:2] # shift the letters down by two and up by two\n\
    \    \n    alphabet = alphabet[2:] + alphabet[:2] # shift the letters down by\
    \ two and up by two\n    \n    alphabet = alphabet[2:] + alphabet[:2] # shift\
    \ the letters down by two and up by two\n    \n    alphabet = alphabet[2:] + alphabet[:2]\
    \ # shift the letters down by two and up by two\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2] # shift the letters down by two and up by two\n    \n    alphabet\
    \ = alphabet[2:] + alphabet[:2] # shift the letters down by two and up by two\n\
    \    \n    alphabet = alphabet[2:] + alphabet[:2] # shift the letters down by\
    \ two and up by two\n    \n    alphabet = alphabet[2:] + alphabet[:2] # shift\
    \ the letters down by two and up by two\n    \n    alphabet = alphabet[2:] + alphabet[:2]\
    \ # shift the letters down by two and up by two\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2] # shift the letters down by two and up by two\n    \n    alphabet\
    \ = alphabet[2:] + alphabet[:2] # shift the letters down by two and up by two\n\
    \    \n    alphabet = alphabet[2:] + alphabet[:2] # shift the letters down by\
    \ two and up by two\n    \n    alphabet = alphabet[2:] + alphabet[:2] # shift\
    \ the letters down by two and up by two\n    \n    alphabet = alphabet[2:] + alphabet[:2]\
    \ # shift the letters down by two and up by two\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2] # shift the letters down by two and up by two\n    \n    alphabet\
    \ = alphabet[2:] + alphabet[:2] # shift the letters down by two and up by two\n\
    \    \n    alphabet = alphabet[2:] + alphabet[:2] # shift the letters down by\
    \ two and up by two\n    \n    alphabet = alphabet[2:] + alphabet[:2] # shift\
    \ the letters down by two and up by two\n    \n    alphabet = alphabet[2:] + alphabet[:2]\
    \ # shift the letters down by two and up by two\n    \n    alphabet = alphabet[2:]\
    \ + alphabet[:2] # shift the letters down by two and up by two\n    \n    alphabet\
    \ = alphabet[2:] + alphabet[:2] # \nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmprd57ed8m.jl:15\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmprd57ed8m.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = list(\"abcdefghijklmnopqrstuvwxyz\")\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[alphabet.index(s)+2:]\n    alphabet\
    \ = alphabet[alphabet.index(s)+2:]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[alphabet.index(s)+2:]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[alphabet.index(s)+2:]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[alphabet.index(s)+2:]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[alphabet.index(s)+2:]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[alphabet.index(s)+2:]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[alphabet.index(s)+2:]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[alphabet.index(s)+2:]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[alphabet.index(s)+2:]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[alphabet.index(s)+2:]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[alphabet.index(s)+2:]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[alphabet.index(s)+2:]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[alphabet.index(s)+2:]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[alphabet.index(s)+2:]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[alphabet.index(s)+2:]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[alphabet.index(s)+2:]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[alphabet.index(s)+2:]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[alphabet.index(s)+2:]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[alphabet.index(s)+2:]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[alphabet.index(s)+2:]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[alphabet.index(s)+2:]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[alphabet.index(s)+\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpejhwo0bl.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpejhwo0bl.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = string.ascii_lowercase\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet\
    \ = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet =\
    \ alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n \
    \   alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n  \
    \  alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n \
    \   alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n  \
    \  alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n   \
    \ alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet\
    \ = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet =\
    \ alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n\
    \    alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n \
    \   alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n  \
    \  alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n   \
    \ alphabet = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet\
    \ = alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet =\
    \ alphabet[2:] + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] +\
    \ alphabet[:2]\n    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\n\
    \    alphabet = alphabet[::-1]\n    alphabet = alphabet[2:] + alphabet[:2]\nusing\
    \ Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") ==\
    \ \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmps6959_zk.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmps6959_zk.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n\
    \    rotated_alphabet = alphabet[2:] + alphabet[:2]\n    rotated_alphabet.reverse()\n\
    \    \n    encrypted_string = \"\"\n    for character in s\n        encrypted_string\
    \ += rotated_alphabet[alphabet.index(character)]\n    end\n    return encrypted_string\n\
    end\n</cell>\n<code language=julia-1.5>\nencrypt(\"hi\")\n</cell>\n<code language=julia-1.5>\n\
    encrypt(\"asdfghjkl\")\n</cell>\n<code language=julia-1.5>\nencrypt(\"gf\")\n\
    </cell>\n<code language=julia-1.5>\nencrypt(\"et\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string as an argument and returns the string\
    \ reversed. \nFor example:\nreverse(\"hi\") returns 'ih'\nreverse(\"asdfghjkl\"\
    ) returns 'kjdfhg'\nreverse(\"gf\") returns 'gfedc'\nreverse(\"et\") returns 'etgf'\n\
    Hint: use the reverse function.\nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\
    \t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\"\
    )\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\
    \t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\t@test(candidate(\"\
    hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"\
    a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmp5aj34bl1.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp5aj34bl1.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet.length]\n\
    \    alphabet = alphabet[alphabet.length/2:alphabet.length/2+alphabet\nusing Test\n\
    \n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\") == \"lm\"\
    )\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"gf\"\
    ) == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpynlf_qq9.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpynlf_qq9.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet =\
    \ alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n\
    \    alphabet = alphabet[1::2]\n    alphabet = alphabet[1::2]\n    alphabet\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7cs2kq86.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp7cs2kq86.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp7cs2kq86.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = list('abcdefghijklmnopqrstuvwxyz')\n    alphabet = alphabet[2:]\
    \ + alphabet[:2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2]\
    \ + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet\
    \ = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2] + alphabet[-1::2]\n\
    \    alphabet = alphabet[1::2] + alphabet[-1::2]\n    alphabet = alphabet[1::2]\
    \ + \nusing Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"\
    hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid character literal\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpqqzl_x0s.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqqzl_x0s.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[alphabet.len():]\n\
    \    alphabet = alphabet[1:alphabet.len()]\n    alphabet = alphabet[2:]\n    alphabet\
    \ = alphabet[2:]\n    alphabet = alphabet[1:alphabet.len()]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[1:alphabet.len()]\n    alphabet\
    \ = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[1:alphabet.len()]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[1:alphabet.len()]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[1:alphabet.len()]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[1:alphabet.len()]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[1:alphabet.len()]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[1:alphabet.len()]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[1:alphabet.len()]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[1:alphabet.len()]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[1:alphabet.len()]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[1:alphabet.len()]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[1:alphabet.len()]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[1:alphabet.len()]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[1:alphabet.len()]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[1:alphabet.len()]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[1:alphabet.len()]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[1:alphabet.len()]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[1:alphabet.len()]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[1:\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"alphabet.len():\"\
    \ range expression \nStacktrace:\n [1] top-level scope at /tmp/tmpafkryfo0.jl:13\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpafkryfo0.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n\
    \    alphabet = alphabet[2:]\n    alphabet = alphabet[2:]\n    alphabet = alphabet\n\
    using Test\n\n@testset begin\n\ncandidate = encrypt;\n\t@test(candidate(\"hi\"\
    ) == \"lm\")\n\t@test(candidate(\"asdfghjkl\") == \"ewhjklnop\")\n\t@test(candidate(\"\
    gf\") == \"kj\")\n\t@test(candidate(\"et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\n\t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\n\t@test(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n\t@test(candidate(\"a\") ==\
    \ \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpy71f6233.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpy71f6233.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    rotated_alphabet = alphabet[(alphabet.index(alphabet[alphabet.length-1])+2):(alphabet.index(alphabet[alphabet.length-1])+4)]\n\
    \    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.length-1]\n    rotated_alphabet\
    \ = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.length-1]\n\
    \    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.length-1]\n\
    \    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.length-1]\n\
    \    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.length-1]\n\
    \    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.length-1]\n\
    \    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.length-1]\n\
    \    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.length-1]\n\
    \    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.length-1]\n\
    \    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.length-1]\n\
    \    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.length-1]\n\
    \    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.length-1]\n\
    \    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.length-1]\n\
    \    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.length-1]\n\
    \    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.length-1]\n\
    \    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.length-1]\n\
    \    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.length-1]\n\
    \    rotated_alphabet = rotated_alphabet*2\n    rotated_alphabet = rotated_alphabet[1:rotated_alphabet.length-1]\n\
    \    rotated_alphabet = rotated_alphabet*\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpb2f83c2i.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpb2f83c2i.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpb2f83c2i.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Create a function encrypt that takes a string as an argument and\n\
    \    returns a string encrypted with the alphabet being rotated. \n    The alphabet\
    \ should be rotated in a manner such that the letters \n    shift down by two\
    \ multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n\
    \    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n\
    \    encrypt('et') returns 'ix'\n    \"\"\"\nfunction encrypt(s::String)::String\
    \ \n    alphabet = ('A'..'Z')\n    alphabet = alphabet[alphabet.size - 2:]\n \
    \   alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.size - 2:]\n    alphabet = alphabet[alphabet.size\
    \ - 2:]\n    alphabet = alphabet[alphabet.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = encrypt;\n\t@test(candidate(\"hi\") == \"lm\")\n\t@test(candidate(\"asdfghjkl\"\
    ) == \"ewhjklnop\")\n\t@test(candidate(\"gf\") == \"kj\")\n\t@test(candidate(\"\
    et\") == \"ix\")\n\t@test(candidate(\"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    \t@test(candidate(\"hellomyfriend\") == \"lippsqcjvmirh\")\n\t@test(candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\n\t@test(candidate(\"a\") == \"e\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"(alphabet.size - 2):\"\
    \ range expression \nStacktrace:\n [1] top-level scope at /tmp/tmpod0kcjt0.jl:13\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpod0kcjt0.jl:13\n"
  exit_code: 1
  status: Exception
