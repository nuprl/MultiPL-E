name: HumanEval_33_sort_third
language: julia
prompt: "\"\"\"This function takes a list l and returns a list l' such that\n    l'\
  \ is identical to l in the indicies that are not divisible by three, while its values\
  \ at the indicies that are divisible by three are equal\n    to the values of the\
  \ corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1,\
  \ 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n\
  \    \"\"\"\nfunction sort_third(l::Vector{Int64})::Vector{Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = sort_third;\n\t@test(candidate([5,\
  \ 6, 3, 4, 8, 9, 2]) == [2, 6, 3, 4, 8, 9, 5])\n\t@test(candidate([5, 8, 3, 4, 6,\
  \ 9, 2]) == [2, 8, 3, 4, 6, 9, 5])\n\t@test(candidate([5, 6, 9, 4, 8, 3, 2]) ==\
  \ [2, 6, 9, 4, 8, 3, 5])\n\t@test(candidate([5, 6, 3, 4, 8, 9, 2, 1]) == [2, 6,\
  \ 3, 4, 8, 9, 5, 1])\nend\n"
completions: ["    l = sort(l)\n    l = l[findall(l % 3 == 0)]\n    l = l[findall(l\
    \ % 3 != 0)]\n    return l\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a list l and returns a list l' such that\n    l' is identical to\
    \ l in the indicies that are not divisible by three, while its values at the indicies\
    \ that are divisible by three are equal\n    to the values of the corresponding\
    \ indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n \
    \   >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\
    \"", "    l = sort(l)\n    l = l[findall(l % 3 == 0)]\n    l = l[findall(l % 3\
    \ != 0)]\n    return l\nend\n</cell>\n<code language=julia-1.0>", "    \n    l\
    \ = sort(l)\n    \n    lenl = length(l)\n    \n    lenl2 = lenl/3\n    \n    lenl3\
    \ = lenl2/3\n    \n    lenl4 = lenl3/3\n    \n    lenl5 = lenl4/3\n    \n    lenl6\
    \ = lenl5/3\n    \n    lenl7 = lenl6/3\n    \n    lenl8 = lenl7/3\n    \n    lenl9\
    \ = lenl8/3\n    \n    lenl10 = lenl9/3\n    \n    lenl11 = lenl10/3\n    \n \
    \   lenl12 = lenl11/3\n    \n    lenl13 = lenl12/3\n    \n    lenl14 = lenl13/3\n\
    \    \n    lenl15 = lenl14/3\n    \n    lenl16 = lenl15/3\n    \n    lenl17 =\
    \ lenl16/3\n    \n    lenl18 = lenl17/3\n    \n    lenl19 = lenl18/3\n    \n \
    \   lenl20 = lenl19/3\n    \n    lenl21 = lenl20/3\n    \n    lenl22 = lenl21/3\n\
    \    \n    lenl23 = lenl22/3\n    \n    lenl24 = lenl23/3\n    \n    lenl25 =\
    \ lenl24/3\n    \n    lenl26 = lenl25/3\n    \n    lenl27 = lenl26/3\n    \n \
    \   lenl28 = lenl27/3\n    \n    lenl29 = lenl28/3\n    \n    lenl30 = lenl29/3\n\
    \    \n    lenl31 = lenl30/3\n    \n    lenl32 = lenl31/3\n    \n    lenl33 =\
    \ lenl32/3\n    \n    lenl34 = lenl33/3\n    \n    lenl35 = lenl34/3\n    \n \
    \   lenl36 = lenl35/3\n    \n    lenl37 = lenl36/3\n    \n    lenl38 = lenl37/3\n\
    \    \n    lenl39 = lenl38/3\n    \n    lenl40 = lenl39/3\n    \n    lenl41 =\
    \ lenl40/3\n    \n    lenl42 = ", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    l = sort(l)\n    l = l[findall(l % 3 == 0)]\n    return l\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list l and returns\
    \ a list l' such that\n    l' is identical to l in the indicies that are not divisible\
    \ by three, while its values at the indicies that are divisible by three are equal\n\
    \    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1,\
    \ 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6,\
    \ 3, 4, 8, 9, 5]\n    \"\"\"", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n\
    \    l = l[findall(l .% 3 != 0)]\n    return l\nend\n</code>\n<|/ a tags=julia,sorting\
    \ |>\n<| c |>\nThanks for your answer. I'm sorry I didn't specify this in the\
    \ question, but I wanted to avoid using any packages. I should have mentioned\
    \ this in the question. Sorry about that.\n<|/ c |>\n<| c |>\nNo worries, I appreciate\
    \ you taking the time to answer my question. I'll try your solution and see if\
    \ it works.\n<|/ c |>\n<| c |>\nI added a solution without using any packages.\
    \ I hope it helps.\n<|/ c |>\n<| c |>\nThanks again for your help. I appreciate\
    \ it. I tried your solution and it worked perfectly. I'm going to accept your\
    \ answer as soon as I can.\n<|/ c |>\n<| a |>\nThis solution uses only basic functions\
    \ from Base and Base.sort:\n<code>", "    l = sort(l)\n    l = l[findall(l % 3\
    \ == 0)]\n    l = l[findall(l % 3 == 1)]\n    return l\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't work. `sort` sorts the list in-place, so `l` is sorted\
    \ in the function and `l` is returned unsorted. `sort!` sorts the list in-place\
    \ and returns the sorted list.\n<|/ c |>\n<| c |>\nThanks for pointing that out.\
    \ I've edited my answer to reflect this.\n<|/ c |>\n<| a dscore=0 |>\n<code>",
  "    l = sort(l)\n    l = l[findall(l % 3 == 0)]\n    l = l[findall(l % 3 == 1)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    \n    l = sort(l)\n\
    \    \n    l = l[findall(l .% 3 == 0)]\n    \n    l = l[findall(l .% 3 != 0)]\n\
    \    \n    l = sort(l)\n    \n    return l\nend", "    l = sort(l)\n    l = l[findall(l\
    \ .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\nend\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=1 |>\nHere's a solution using Julia's built-in function\
    \ partition:\n<code>", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n   \
    \ l = l[findall(l .% 3 != 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[findall(l % 3 == 0)]\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.3>", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n  \
    \  l = l[findall(l .% 3 == 1)]\n    return l\nend\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThis does not provide an answer to the question. To critique or request\
    \ clarification from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/27867564)\n\
    <|/ c |>\n<| c |>\nI believe this does answer the question, though I agree with\
    \ you that it is unclear what the OP wants. I added a comment to the question\
    \ to clarify.\n<|/ c |>\n<| c |>\nI believe this does answer the question, though\
    \ I agree with you that it is unclear what the OP wants. I added a comment to\
    \ the question to clarify.\n<|/ c |>\n<| c |>\nI believe this does answer the\
    \ question, though I agree with you that it is unclear what the OP wants. I added\
    \ a comment to the question to clarify.\n<|/ c |>\n<| c |>\nI believe this does\
    \ answer the question, though I agree with you that it is unclear what the OP\
    \ wants. I added a comment to the question to clarify.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    l = sort(l)\n    \n    l = l[findall(l .% 3 == 0)]\n    \n    l = l[findall(l\
    \ .% 3 != 0)]\n    \n    l = sort(l)\n    \n    return l\nend", "    l = sort(l)\n\
    \    l = l[findall(l .% 3 == 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    l = sort(l)\n    \n    l = l[findall(l % 3 == 0)]\n    \n    l = sort(l)\n\
    \    \n    l = l[findall(l % 3 != 0)]\n    \n    return l\nend", "    l = sort(l)\n\
    \    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return\
    \ l\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't seem to work. `sort_third([5,\
    \ 6, 3, 4, 8, 9, 2])` returns `[5, 6, 3, 4, 8, 9, 2]` instead of `[2, 6, 3, 4,\
    \ 8, 9, 5]`.\n<|/ c |>\n<| c |>\nI edited my answer to fix the bug. Thanks for\
    \ pointing it out.\n<|/ c |>\n<| a dscore=1 |>\n<code>", "    l = sort(l)\n  \
    \  l = l[findall(l % 3 == 0)]\n    l = l[findall(l % 3 == 1)]\n    return l\n\
    end", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .%\
    \ 3 != 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n\
    \    l = l[findall(l .% 3 == 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n\
    \    l = sort(l)\n    return l\nend\n</cell>\n<code language=julia-1.5>", "  \
    \  l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.0>", "    l = sort(l)\n  \
    \  l = l[findall(l % 3 == 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[findall(l % 3 == 0)]\n    l = l[findall(l % 3 != 0)]\n\
    \    return l\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ list l and returns a list l' such that\n    l' is identical to l in the indicies\
    \ that are not divisible by three, while its values at the indicies that are divisible\
    \ by three are equal\n    to the values of the corresponding indicies of l, but\
    \ sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5,\
    \ 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"", "    l = sort(l)\n\
    \    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n\
    \    l = l[findall(l .% 3 != 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 == 1)]\n\
    \    return l\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", " \
    \   l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 !=\
    \ 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n\
    \    l = l[findall(l % 3 == 0)]\n    l = l[findall(l % 3 == 1)]\n    return l\n\
    end\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l\
    \ .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a list l and returns a list l' such that\n\
    \    l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n    to the\
    \ values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1,\
    \ 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6,\
    \ 3, 4, 8, 9, 5]\n    \"\"\"", "    \n    l = sort(l)\n    \n    for i in 1:length(l)\n\
    \        if mod(l[i], 3) == 0\n            push!(l, l[i])\n        end\n    end\n\
    \    \n    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n\
    \    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return\
    \ l\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,sorting |>\n<code>", " \
    \   l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    return l\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    return l\nend\n\
    </cell>\n<code language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l .%\
    \ 3 == 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n\
    \    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return\
    \ l\nend", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l\
    \ .% 3 != 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>", "    l\
    \ = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n\
    \    return l\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia |>\n<code>", " \
    \   \n    l = sort(l)\n    \n    third = l[div(length(l), 3)]\n    \n    third\
    \ = third[div(length(third), 2)]\n    \n    third = third[div(length(third), 1)]\n\
    \    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = third[div(length(thir", "    \n    third = Int64[]\n\
    \    \n    for x in l\n        if x % 3 == 0\n            push!(third, x)\n  \
    \      else\n            push!(third, x)\n            push!(third, x)\n      \
    \  end\n    end\n    \n    third = third[2:end]\n    \n    third = third[sort!(third)]\n\
    \    \n    return third\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n\
    \    l = l[findall(l % 3 == 0)]\n    l = sort(l)\n    return l\nend\n</cell>\n\
    <code language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n\
    \    l = l[findall(l .% 3 != 0)]\n    l = sort(l)\n    return l\nend\n</cell>\n\
    <code language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n\
    \    l = l[findall(l .% 3 != 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[findall(l % 3 == 0)]\n    l = l[findall(l % 3 != 0)]\n\
    \    return l\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like your solution,\
    \ but I believe it can be simplified a little bit more. `sort` sorts in-place,\
    \ so you don't need to assign the result to `l`. Also, `sort!` modifies the original\
    \ array, so you don't need to assign the result to `l`. Also, `sort!` modifies\
    \ the original array, so you don't need to assign the result to `l`. Also, `sort!`\
    \ modifies the original array, so you don't need to assign the result to `l`.\
    \ Also, `sort!` modifies the original array, so you don't need to assign the result\
    \ to `l`. Also, `sort!` modifies the original array, so you don't need to assign\
    \ the result to `l`. Also, `sort!` modifies the original array, so you don't need\
    \ to assign the result to `l`. Also, `sort!` modifies the original array, so you\
    \ don't need to assign the result to `l`. Also, `sort!` modifies the original\
    \ array, so you don't need to assign the result to `l`. Also, `sort!` modifies\
    \ the original array, so you don't need to assign the result to `l`. Also, `sort!`\
    \ modifies the original array, so you don't need to assign the result to `l`.\
    \ Also, `sort!` modifies the original array, so you don't need to assign the result\
    \ to `l`. Also, `sort!` modifies the original array, so you don't need to assign\
    \ the result to `l`. Also, `sort!` modifies the original array, so you don't need\
    \ to assign the result to `l`. Also, `sort!` modifies the original array, so you\
    \ don't need to assign the result to `l`. Also, `sort!` modifies the original\
    \ array, so you don't need to assign the result to `l`. Also, `sort!` modifies\
    \ the original array, so you don't need to assign the result to `l`. Also, `sort!`\
    \ modifies the original array, so you don't need to assign the result to `l`.\
    \ Also, `sort!` modifies the original array, so you don't need to assign the result\
    \ to `l`. Also, `sort!` modifies the original array, so you don't need to assign\
    \ the result to `l`. Also, `sort!` modifies the original array, so you don't need\
    \ to assign the result to `l`. Also, `sort!` modifies the original array, so you\
    \ don't need to assign the result to `l`. Also, `sort!` modifies the original\
    \ array, so you don't need to assign the result to `l`. Also, `sort!` modifies\
    \ the original array, so you don't need to assign ", "    \n    l = sort(l)\n\
    \    \n    third = l[3:end]\n    \n    third = sort(third)\n    \n    third =\
    \ third[2:end]\n    \n    third = sort(third)\n    \n    third = third[1:end]\n\
    \    \n    third = sort(third)\n    \n    third = third[1:end]\n    \n    third\
    \ = sort(third)\n    \n    third = third[1:end]\n    \n    third = sort(third)\n\
    \    \n    third = third[1:end]\n    \n    third = sort(third)\n    \n    third\
    \ = third[1:end]\n    \n    third = sort(third)\n    \n    third = third[1:end]\n\
    \    \n    third = sort(third)\n    \n    third = third[1:end]\n    \n    third\
    \ = sort(third)\n    \n    third = third[1:end]\n    \n    third = sort(third)\n\
    \    \n    third = third[1:end]\n    \n    third = sort(third)\n    \n    third\
    \ = third[1:end]\n    \n    third = sort(third)\n    \n    third = third[1:end]\n\
    \    \n    third = sort(third)\n    \n    third = third[1:end]\n    \n    third\
    \ = sort(third)\n    \n    third = third[1:end]\n    \n    third = sort(third)\n\
    \    \n    third = third[1:end]\n    \n    third = sort(third)\n    \n    third\
    \ = third[1:end]\n    \n    third = sort(third)\n    \n    third = third[1:end]\n\
    \    \n    third = sort(third)\n    \n    third = third[1:end]\n    \n    third\
    \ = sort(third)\n    \n    third = third[1:end]\n    \n    third = sort(third)\n\
    \    \n    third = third[1:end]\n    \n    third = sort(third)\n    \n    third\
    \ = third[1:end]\n    \n    third = sort(third)\n    \n    third = third[1:end]\n\
    \    \n    third = sort(third)\n    \n    third = third[1:end]\n    \n    third\
    \ = sort(third)\n    \n    third = third[1:end]\n    \n    third = sort(third)\n\
    \    \n    third = third[1:end]\n    \n    third = sort(third)\n    \n    third\
    \ = third[1:end]\n    ", "    l = sort(l)\n    l = l[findall(l % 3 == 0)]\n  \
    \  l = l[findall(l % 3 == 1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    third = Int64[]\n    \n    for x in l\n        if x % 3 == 0\n      \
    \      push!(third, x)\n        else\n            push!(third, x)\n          \
    \  push!(third, x)\n        end\n    end\n    \n    third\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n  \
    \  return l\nend\n</code>\n<|/ a tags=julia,sorting |>\n<| a dscore=0 |>\n<code>",
  "    l = sort(l)\n    l = l[findall(l % 3 == 0)]\n    l = l[findall(l % 3 == 1)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    \n    l = sort(l)\n\
    \    \n    third = l[div(length(l), 3)]\n    \n    third = third[div(length(third),\
    \ 2)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = sort(third)\n\
    \    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 2)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = sort(third)\n\
    \    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 2)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = sort(third)\n\
    \    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 2)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = sort(third)\n\
    \    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 2)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = sort(third)\n\
    \    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 2)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = sort(third)\n\
    \    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 2)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = sort(third)\n\
    \    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 2)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = sort(third)\n\
    \    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 2)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = sort(third)\n\
    \    \n    third = third[div(length(third), 3)]\n    \n    third = ", "    l =\
    \ sort(l)\n    l = l[findall(l .% 3 == 0)]\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n  \
    \  l = l[findall(l .% 3 != 0)]\n    return l\nend\n</code>\n<|/ a tags=julia |>\n\
    <| c |>\nThanks for your answer. Your code works perfectly for my example, but\
    \ when I try it on my actual data it gives me an error.\n<|/ c |>\n<| c |>\nI\
    \ added my actual data into the original post. Could you take a look at it?\n\
    <|/ c |>\n<| c |>\nI added my actual data into the original post. Could you take\
    \ a look at it?\n<|/ c |>\n<| c |>\nI added my actual data into the original post.\
    \ Could you take a look at it?\n<|/ c |>\n<| c |>\nI added my actual data into\
    \ the original post. Could you take a look at it?\n<|/ c |>\n<| a dscore=1 |>\n\
    I wrote a function that does what you want, but it's pretty ugly and I wouldn't\
    \ recommend using it unless you really need to. \n<code>", "    l = sort(l)\n\
    \    l = l[findall(l % 3 == 0)]\n    l = l[findall(l % 3 != 0)]\n    return l\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia,sorting |>\n<code>", "    l =\
    \ sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n\
    \    l = sort(l)\n    return l\nend\n</code>\n<|/ a tags=julia |>\n<| a tags=julia\
    \ |>\n<code>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    l = sort(l)\n    \n    l = l[findall(l .% 3 == 0)]\n    \n    l = l[findall(l\
    \ .% 3 != 0)]\n    \n    l = sort(l)\n    \n    return l\nend", "    l = sort(l)\n\
    \    l = l[findall(l % 3 == 0)]\n    l = l[findall(l % 3 == 1)]\n    return l\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work. Try `sort_third([5,\
    \ 6, 3, 4, 8, 9, 2])`.\n<|/ c |>\n<| c |>\nI see what you mean. I'll fix it.\n\
    <|/ c |>\n<| c |>\nThis doesn't work. Try `sort_third([5, 6, 3, 4, 8, 9, 2])`.\n\
    <|/ c |>\n<| c |>\nI fixed it. I had a typo in the second line.\n<|/ c |>\n<|\
    \ c |>\nThis doesn't work. Try `sort_third([5, 6, 3, 4, 8, 9, 2])`.\n<|/ c |>\n\
    <| a tags=julia |>\nI believe this can be done with just one line of code using\
    \ sortperm:\n<code>\njulia> sortperm([5, 6, 3, 4, 8, 9, 2])\n2-element Array{Int64,1}:\n\
    \ 2\n 6\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work. Try `sortperm([5,\
    \ 6, 3, 4, 8, 9, 2])`.\n<|/ c |>\n<| c |>\nI fixed it. I had a typo in the second\
    \ line.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "    l = sort(l)\n    l = l[findall(l\
    \ .% 3 == 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>", "    l\
    \ = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n  \
    \  l = l[findall(l .% 3 == 0)]\n    return l\nend\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nThis doesn't work if there are duplicate values in the list. For example,\
    \ `sort_third([5, 6, 3, 4, 8, 9, 2])` returns `[2, 6, 3, 4, 8, 9, 5]` instead\
    \ of `[5, 6, 3, 4, 8, 9, 2]`.\n<|/ c |>\n<| c |>\nI see what you mean. I'll edit\
    \ my answer to fix that.\n<|/ c |>\n<| a |>\n<code>", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    l = sort(l)\n    l = l[findall(l .% 3 ==\
    \ 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[findall(l % 3 == 0)]\n    return l\nend\n</code>\n<|/\
    \ a tags=julia,sorting |>\n<| c |>\nThis doesn't work if you have a vector of\
    \ Int64 and want to sort it by Int64. For example, `sort_third([Int64(5), Int64(6),\
    \ Int64(3), Int64(4), Int64(8), Int64(9), Int64(2), Int64(7)])` gives `[Int64(2),\
    \ Int64(7), Int64(3), Int64(4), Int64(5), Int64(6), Int64(8), Int64(9)]` instead\
    \ of `[Int64(2), Int64(7), Int64(3), Int64(4), Int64(5), Int64(6), Int64(8), Int64(9),\
    \ Int64(5)]`.\n<|/ c |>\n<| c |>\nI added a version that works with Int64\n<|/\
    \ c |>\n<| c |>\nThanks for your answer! I added a version that works with Int64\n\
    <|/ c |>\n<| a tags=julia,sorting |>\n<code>", "    l = sort(l)\n    l = l[findall(l\
    \ % 3 == 0)]\n    l = sort(l)\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n  \
    \  l = l[findall(l % 3 == 0)]\n    return l\nend\n</cell>\n<code language=julia-1.3>",
  "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n\
    \    return l\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia |>\n<code>", " \
    \   l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 !=\
    \ 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>", "    \n    l =\
    \ sort(l)\n    \n    third = l[div(length(l)-1,3)+1]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n",
  "    l = sort(l)\n    l = l[findall(l % 3 == 0)]\n    l = sort(l)\n    return l\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    l = sort(l)\n    \n    for\
    \ i in 1:length(l)\n        if mod(l[i],3) == 0\n            push!(l, l[i])\n\
    \        end\n    end\n    \n    return l\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a list l and returns a list l' such that\n    l' is\
    \ identical to l in the indicies that are not divisible by three, while its values\
    \ at the indicies that are divisible by three are equal\n    to the values of\
    \ the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n\
    \    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8,\
    \ 9, 5]\n    \"\"\"", "    l = sort(l)\n    l = l[findall(l % 3 == 0)]\n    l\
    \ = l[findall(l % 3 != 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n\
    \    return l\nend\n</code>\n<|/ a tags=julia,sorting,arrays |>\n<| c |>\nThis\
    \ doesn't work if there are duplicate values in the array. For example, `sort_third([5,\
    \ 6, 3, 4, 8, 9, 2, 5])` returns `[2, 5, 6, 3, 4, 8, 9, 5]`.\n<|/ c |>\n<| c |>\n\
    Yes, I realized that after I posted my comment. I've added a fix for that case.\n\
    <|/ c |>\n<| a tags=julia,sorting,arrays |>\n<code>", "    l = sort(l)\n    l\
    \ = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\nend\n\
    </cell>\n<code language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l .%\
    \ 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\nend\n</code>\n<|/ a\
    \ |>\n<| a tags=julia |>\n<code>", "    l = sort(l)\n    l = l[findall(l .% 3\
    \ == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\nend\n</cell>\n<code language=julia-1.0>",
  "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    return l\nend\n</cell>\n\
    <code language=julia-1.3>", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n  \
    \  l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    l = sort(l)\n\
    \    return l\nend\n</code>\n<|/ a tags=julia,sorting,arrays |>\n<| c |>\nThanks\
    \ for your answer! I realized that my question was unclear and edited it accordingly.\
    \ Your solution does not work for me, because I need the array to be sorted in\
    \ the indicies that are not divisible by three.\n<|/ c |>\n<| c |>\nI edited my\
    \ answer to include a solution that does what you want.\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer! I realized that my question was unclear and edited it accordingly.\
    \ Your solution does not work for me, because I need the array to be sorted in\
    \ the indicies that are not divisible by three.\n<|/ c |>\n<| c |>\nI edited my\
    \ answer to include a solution that does what you want.\n<|/ c |>\n<| a |>\nI\
    \ believe that this is what you are looking for:\n<code>\njulia> function sort_third(l::Vector{Int64})::Vector{Int64}\n\
    \           l = sort(l)\n           l = l[findall(l .% 3 == 0)]\n           l\
    \ = l[findall(l .% 3 != 0)]\n           l = sort(l)\n           return l\n   \
    \    end\nsort_third (generic function with 1 method)", "    l = sort(l)\n   \
    \ l = l[findall(l % 3 == 0)]\n    l = l[findall(l % 3 != 0)]\n    return l\nend\n\
    </cell>\n<code language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l .%\
    \ 3 == 0)]\n    return l\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a list l and returns a list l' such that\n    l' is identical to l in\
    \ the indicies that are not divisible by three, while its values at the indicies\
    \ that are divisible by three are equal\n    to the values of the corresponding\
    \ indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n \
    \   >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\
    \"", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .%\
    \ 3 != 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n\
    \    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l\
    \ .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\nend\n</code>\n<|/\
    \ a dscore=0 |>\n<| a |>\n<code>", "    l = sort(l)\n    l = l[findall(l % 3 ==\
    \ 0)]\n    l = l[findall(l % 3 != 0)]\n    return l\nend\n</code>\n<|/ a tags=julia,sorting\
    \ |>\n<| c |>\nThis doesn't work if there are duplicate values in the list. For\
    \ example, `sort_third([5, 6, 3, 4, 8, 9, 2, 5])` returns `[2, 5, 6, 3, 4, 8,\
    \ 9, 5]`.\n<|/ c |>\n<| c |>\nI added a version that doesn't have this problem.\n\
    <|/ c |>\n<| a tags=julia,sorting |>\n<code>", "    l = sort(l)\n    l = l[findall(l\
    \ .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\nend\n</code>\n<|/\
    \ a tags=julia,sorting |>\n<| a dscore=0 |>\n<code>", "    l = sort(l)\n    l\
    \ = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\nend\n\
    </code>\n<|/ a tags=julia |>\n<| c |>\nThis doesn't seem to work. `sort_third([5,\
    \ 6, 3, 4, 8, 9, 2])` returns `[2, 6, 3, 4, 8, 9, 5]`.\n<|/ c |>\n<| c |>\nI fixed\
    \ the bug. Thanks for pointing it out.\n<|/ c |>\n<| a dscore=2 |>\nI believe\
    \ this can be done with sortperm:\n<code>\njulia> sortperm([5,6,3,4,8,9,2])\n\
    5-element Array{Int64,1}:\n 2\n 6\n 3\n 4\n 8\n 9\n 5\n</code>\n<|/ a tags=julia\
    \ |>\n<| c |>\nThis doesn't seem to work. `sortperm([5, 6, 3, 4, 8, 9, 2])` returns\
    \ `[2, 6, 3, 4, 8, 9, 5]`.\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing\
    \ it out.\n<|/ c |>\n<| a tags=julia |>\n<code>\njulia> function sort_third(l::Vector{Int64})::Vector{Int64}\
    \ \n           l = sort(l)\n           l = l[findall(l .% 3 == 0)]\n         \
    \  l = l[findall(l .% 3 != 0)]\n           return l\n       end\nsort_third (generic\
    \ function with 1 method)", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n\
    \    l = l[findall(l .% 3 != 0)]\n    return l\nend", "    \n    l = sort(l)\n\
    \    \n    l = l[findall(l % 3 == 0)]\n    \n    l = l[findall(l % 3 == 1)]\n\
    \    \n    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n\
    \    l = l[findall(l % 3 == 0)]\n    l = l[findall(l % 3 != 0)]\n    l = sort(l)\n\
    \    return l\nend\n</cell>\n<code language=julia-1.0>", "    \n    l = sort(l)\n\
    \    \n    l = l[findall(l .% 3 == 0)]\n    \n    l = l[findall(l .% 3 != 0)]\n\
    \    \n    l = sort(l)\n    \n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    return l\nend", "    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    l = sort(l)\n    l =\
    \ l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>", "    \n    l = sort(l)\n    \n\
    \    third = l[div(length(l), 3)]\n    \n    third = third[div(length(third),\
    \ 2)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = sort(third)\n\
    \    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 2)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = sort(third)\n\
    \    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 2)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = sort(third)\n\
    \    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 2)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = sort(third)\n\
    \    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 2)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = sort(third)\n\
    \    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 2)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = sort(third)\n\
    \    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 2)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = sort(third)\n\
    \    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 2)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = sort(third)\n\
    \    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 2)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = sort(third)\n\
    \    \n    third = third[div(length(third), 3)]\n    \n    third = ", "    \n\
    \    l = sort(l)\n    \n    third = l[div(length(l), 3)]\n    \n    third = sort(third)\n\
    \    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[div(length(third), 3)]\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n", "    l = sort(l)\n    l = l[findall(l % 3 == 0)]\n    l = sort(l)\n\
    \    return l\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    l = sort(l)\n\
    \    \n    l = l[findall(l .% 3 == 0)]\n    \n    l = sort(l)\n    \n    l = l[findall(l\
    \ .% 3 != 0)]\n    \n    return l\nend\n</cell>\n<code language=julia-1.5>", " \
    \   l = sort(l)\n    l = l[findall(l % 3 == 0)]\n    l = l[findall(l % 3 != 0)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n  \
    \  l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\n\
    end\n</cell>\n<code language=julia-1.0>", "    \n    l = sort(l)\n    \n    l\
    \ = l[findall(l .% 3 == 0)]\n    \n    l = l[findall(l .% 3 != 0)]\n    \n   \
    \ l = sort(l)\n    \n    return l\nend\n</cell>\n<code language=julia-1.5>", " \
    \   l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 !=\
    \ 0)]\n    l = sort(l)\n    return l\nend\n</code>\n<|/ a |>\n<| c |>\nThis doesn't\
    \ work if the list contains duplicates.\n<|/ c |>\n<| c |>\nIt doesn't work if\
    \ the list contains duplicates. Try `sort_third([5, 6, 3, 4, 8, 9, 2, 5])`.\n\
    <|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing it out. :)\n<|/ c |>\n\
    <| a dscore=1 |>\nThe accepted answer doesn't work for duplicates. Here's a version\
    \ that does:\n<code>", "    l = sort(l)\n    l = l[findall(l % 3 == 0)]\n    l\
    \ = l[findall(l % 3 != 0)]\n    return l\nend\n</code>\n<|/ a tags=julia,sorting\
    \ |>\n<| a tags=julia,sorting |>\n<code>", "    l = sort(l)\n    l = l[findall(l\
    \ % 3 == 0)]\n    l = l[findall(l % 3 == 1)]\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n  \
    \  l = l[findall(l .% 3 != 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[findall(l % 3 == 0)]\n    l = l[findall(l % 3 == 1)]\n\
    \    return l\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", " \
    \   \n    l = sort(l)\n    \n    third = l[div(length(l), 3)]\n    \n    third\
    \ = third[div(length(third), 2)]\n    \n    third = third[div(length(third), 1)]\n\
    \    \n    third = sort(third)\n    \n    third = third[div(length(third), 3)]\n\
    \    \n    third = third[div(length(third), 2)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = sort(third)\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[div(length(third), 2)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = sort(third)\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[div(length(third), 2)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = sort(third)\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[div(length(third), 2)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = sort(third)\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[div(length(third), 2)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = sort(third)\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[div(length(third), 2)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = sort(third)\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[div(length(third), 2)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = sort(third)\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[div(length(third), 2)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = sort(third)\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = ", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l\
    \ .% 3 != 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>", "    \n\
    \    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n    third = l[div(length(l)-1,3)+1]\n    \n    third = l[div(length(l)-1,3)+1]\n\
    \    \n", "    l = sort(l)\n    l = l[findall(l % 3 == 0)]\n    l = l[findall(l\
    \ % 3 == 1)]\n    return l\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    I wrote a function that does this in Julia 1.5.1:\n<code>", "    l = sort(l)\n\
    \    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l\
    \ % 3 == 0)]\n    l = l[findall(l % 3 != 0)]\n    return l\nend\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "    l = sort(l)\n    l = l[findall(l\
    \ .% 3 == 0)]\n    return l\nend\n</cell>\n<text>\nExercise: Write a function\
    \ that takes a list l and returns a list l' such that\n    l' is identical to\
    \ l in the indicies that are not divisible by three, while its values at the indicies\
    \ that are divisible by three are equal\n    to the values of the corresponding\
    \ indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n \
    \   >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\
    \"", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .%\
    \ 3 != 0)]\n    return l\nend\n</cell>\n<code language=julia-1.3>", "    l = sort(l)\n\
    \    l = l[findall(l % 3 == 0)]\n    l = l[findall(l % 3 == 1)]\n    return l\n\
    end\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l\
    \ .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    l = sort(l)\n    \n    l = l[findall(l .% 3\
    \ == 0)]\n    \n    l = l[findall(l .% 3 != 0)]\n    \n    l = sort(l)\n    \n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    \n    l = sort(l)\n\
    \    \n    l = l[findall(l .% 3 == 0)]\n    \n    l = sort(l)\n    \n    return\
    \ l\nend", "    l = sort(l)\n    l = l[findall(l % 3 == 0)]\n    l = l[findall(l\
    \ % 3 == 1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>", "    l =\
    \ sort(l)\n    l = l[findall(l % 3 == 0)]\n    l = l[findall(l % 3 == 1)]\n  \
    \  return l\nend\n</cell>\n<code language=julia-1.5>", "    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    l = sort(l)\n    \n    l =\
    \ l[findall(l % 3 == 0)]\n    \n    l = l[findall(l % 3 != 0)]\n    \n    l =\
    \ sort(l)\n    \n    return l\nend\n</cell>\n<code language=julia-1.4>", "   \
    \ l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n\
    \    return l\nend", "    \n    l = sort(l)\n    \n    l = l[findall(l % 3 ==\
    \ 0)]\n    \n    l = l[findall(l % 3 != 0)]\n    \n    l = sort(l)\n    \n   \
    \ return l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n    l\
    \ = l[findall(l % 3 == 0)]\n    l = l[findall(l % 3 == 1)]\n    return l\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l\
    \ = l[findall(l .% 3 != 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    \n    l = sort(l)\n\
    \    \n    l = l[findall(l .% 3 == 0)]\n    \n    l = l[findall(l .% 3 != 0)]\n\
    \    \n    l = sort(l)\n    \n    return l\nend", "    l = sort(l)\n    l = l[findall(l\
    \ .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n  \
    \  l = l[findall(l .% 3 != 0)]\n    return l\nend\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\n<code>", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n\
    \    l = l[findall(l .% 3 != 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n  \
    \  l = l[findall(l .% 3 == 0)]\n    return l\nend\n</cell>\n<code language=julia-1.3>",
  "    l = sort(l)\n    l = l[findall(l % 3 == 0)]\n    l = l[findall(l % 3 == 1)]\n\
    \    return l\nend\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\n<code>",
  "    l = sort(l)\n    l = l[findall(l % 3 == 0)]\n    l = sort(l)\n    return l\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list l and returns\
    \ a list l' such that\n    l' is identical to l in the indicies that are not divisible\
    \ by three, while its values at the indicies that are divisible by three are equal\n\
    \    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1,\
    \ 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6,\
    \ 3, 4, 8, 9, 5]\n    \"\"\"", "    l = sort(l)\n    l = l[findall(l % 3 == 0)]\n\
    \    l = l[findall(l % 3 == 1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n\
    \    return l\nend\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\n<code>",
  "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n  \
    \  l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\n\
    end\n</cell>\n<code language=julia-1.3>", "    l = sort(l)\n    l = l[findall(l\
    \ .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.3>", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n  \
    \  l = l[findall(l .% 3 != 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    l = sort(l)\n    \n    lenght = length(l)\n    \n    third = lenght %\
    \ 3\n    \n    lenght = lenght - third\n    \n    lenght = lenght + 1\n    \n\
    \    lenght = lenght + 1\n    \n    lenght = lenght + 1\n    \n    lenght = lenght\
    \ + 1\n    \n    lenght = lenght + 1\n    \n    lenght = lenght + 1\n    \n  \
    \  lenght = lenght + 1\n    \n    lenght = lenght + 1\n    \n    lenght = lenght\
    \ + 1\n    \n    lenght = lenght + 1\n    \n    lenght = lenght + 1\n    \n  \
    \  lenght = lenght + 1\n    \n    lenght = lenght + 1\n    \n    lenght = lenght\
    \ + 1\n    \n    lenght = lenght + 1\n    \n    lenght = lenght + 1\n    \n  \
    \  lenght = lenght + 1\n    \n    lenght = lenght + 1\n    \n    lenght = lenght\
    \ + 1\n    \n    lenght = lenght + 1\n    \n    lenght = lenght + 1\n    \n  \
    \  lenght = lenght + 1\n    \n    lenght = lenght + 1\n    \n    lenght = lenght\
    \ + 1\n    \n    lenght = lenght + 1\n    \n    lenght = lenght + 1\n    \n  \
    \  lenght = lenght + 1\n    \n    lenght = lenght + 1\n    \n    lenght = lenght\
    \ + 1\n    \n    lenght = lenght + 1\n    \n    lenght = lenght + 1\n    \n  \
    \  lenght = lenght + 1\n    \n    lenght = lenght + 1\n    \n    lenght = lenght\
    \ + 1\n    \n    lenght = lenght + 1\n    \n    lenght = lenght + 1\n    \n  \
    \  lenght = lenght + 1\n    \n    lenght = lenght + 1\n    \n    lenght = lenght\
    \ + 1\n    \n    lenght = lenght + 1\n    \n    lenght = lenght + 1\n    \n  \
    \  lenght = lenght + 1\n    \n    lenght = lenght + 1\n    \n    lenght = lenght\
    \ + 1\n    \n    lenght = lenght + 1\n    \n    lenght = lenght + 1\n    \n  \
    \  lenght = lenght + 1\n    \n    len", "    \n    l = sort(l)\n    \n    l =\
    \ l[findall(l .% 3 == 0)]\n    \n    l = l[findall(l .% 3 != 0)]\n    \n    l\
    \ = sort(l)\n    \n    return l\nend\n</cell>\n<code language=julia-1.5>", " \
    \   l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 !=\
    \ 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>", "    \n    l =\
    \ sort(l)\n    \n    l = l[findall(l % 3 == 0)]\n    \n    l = l[findall(l % 3\
    \ != 0)]\n    \n    l = sort(l)\n    \n    return l\nend", "    l = sort(l)\n\
    \    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l\
    \ .% 3 == 0)]\n    l = l[findall(l .% 3 == 1)]\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n  \
    \  l = l[findall(l .% 3 != 0)]\n    return l\nend\n</code>\n<|/ a tags=julia,sorting\
    \ |>\n<| c |>\nThis doesn't work for me. `sort_third([5, 6, 3, 4, 8, 9, 2])` returns\
    \ `[2, 6, 3, 4, 8, 9, 5]`.\n<|/ c |>\n<| c |>\nI tested it on julia 0.6.2 and\
    \ 0.6.3. What version are you using?\n<|/ c |>\n<| c |>\nI tested it on julia\
    \ 0.6.2 and 0.6.3. What version are you using?\n<|/ c |>\n<| c |>\nI tested it\
    \ on julia 0.6.2 and 0.6.3. What version are you using?\n<|/ c |>\n<| c |>\nI\
    \ tested it on julia 0.6.2 and 0.6.3. What version are you using?\n<|/ c |>\n\
    <| a tags=julia,sorting |>\n<code>\njulia> function sort_third(l::Vector{Int64})::Vector{Int64}\n\
    \           l = sort(l)\n           l = l[findall(l .% 3 == 0)]\n           l\
    \ = l[findall(l .% 3 != 0)]\n           return l\n       end\nsort_third (generic\
    \ function with 1 method)", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n\
    \    return l\nend\n</cell>\n<text>\nExercise: Write a function that takes a list\
    \ l and returns a list l' such that\n    l' is identical to l in the indicies\
    \ that are not divisible by three, while its values at the indicies that are divisible\
    \ by three are equal\n    to the values of the corresponding indicies of l, but\
    \ sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5,\
    \ 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"", "    \n    l = sort(l)\n\
    \    \n    third = l[3:end]\n    \n    third = sort(third)\n    \n    third =\
    \ third[2:end]\n    \n    third = sort(third)\n    \n    third = third[1:end]\n\
    \    \n    third = sort(third)\n    \n    third = third[1:end]\n    \n    third\
    \ = sort(third)\n    \n    third = third[1:end]\n    \n    third = sort(third)\n\
    \    \n    third = third[1:end]\n    \n    third = sort(third)\n    \n    third\
    \ = third[1:end]\n    \n    third = sort(third)\n    \n    third = third[1:end]\n\
    \    \n    third = sort(third)\n    \n    third = third[1:end]\n    \n    third\
    \ = sort(third)\n    \n    third = third[1:end]\n    \n    third = sort(third)\n\
    \    \n    third = third[1:end]\n    \n    third = sort(third)\n    \n    third\
    \ = third[1:end]\n    \n    third = sort(third)\n    \n    third = third[1:end]\n\
    \    \n    third = sort(third)\n    \n    third = third[1:end]\n    \n    third\
    \ = sort(third)\n    \n    third = third[1:end]\n    \n    third = sort(third)\n\
    \    \n    third = third[1:end]\n    \n    third = sort(third)\n    \n    third\
    \ = third[1:end]\n    \n    third = sort(third)\n    \n    third = third[1:end]\n\
    \    \n    third = sort(third)\n    \n    third = third[1:end]\n    \n    third\
    \ = sort(third)\n    \n    third = third[1:end]\n    \n    third = sort(third)\n\
    \    \n    third = third[1:end]\n    \n    third = sort(third)\n    \n    third\
    \ = third[1:end]\n    \n    third = sort(third)\n    \n    third = third[1:end]\n\
    \    \n    third = sort(third)\n    \n    third = third[1:end]\n    \n    third\
    \ = sort(third)\n    \n    third = third[1:end]\n    \n    third = sort(third)\n\
    \    \n    third = third[1:end]\n    \n    third = sort(third)\n    \n    third\
    \ = third[1:end]\n    ", "    \n    l = sort(l)\n    \n    third = l[3:end]\n\
    \    \n    third = sort(third)\n    \n    third = third[2:end]\n    \n    third\
    \ = sort(third)\n    \n    third = third[1:end]\n    \n    third = sort(third)\n\
    \    \n    third = third[1:end]\n    \n    third = sort(third)\n    \n    third\
    \ = third[1:end]\n    \n    third = sort(third)\n    \n    third = third[1:end]\n\
    \    \n    third = sort(third)\n    \n    third = third[1:end]\n    \n    third\
    \ = sort(third)\n    \n    third = third[1:end]\n    \n    third = sort(third)\n\
    \    \n    third = third[1:end]\n    \n    third = sort(third)\n    \n    third\
    \ = third[1:end]\n    \n    third = sort(third)\n    \n    third = third[1:end]\n\
    \    \n    third = sort(third)\n    \n    third = third[1:end]\n    \n    third\
    \ = sort(third)\n    \n    third = third[1:end]\n    \n    third = sort(third)\n\
    \    \n    third = third[1:end]\n    \n    third = sort(third)\n    \n    third\
    \ = third[1:end]\n    \n    third = sort(third)\n    \n    third = third[1:end]\n\
    \    \n    third = sort(third)\n    \n    third = third[1:end]\n    \n    third\
    \ = sort(third)\n    \n    third = third[1:end]\n    \n    third = sort(third)\n\
    \    \n    third = third[1:end]\n    \n    third = sort(third)\n    \n    third\
    \ = third[1:end]\n    \n    third = sort(third)\n    \n    third = third[1:end]\n\
    \    \n    third = sort(third)\n    \n    third = third[1:end]\n    \n    third\
    \ = sort(third)\n    \n    third = third[1:end]\n    \n    third = sort(third)\n\
    \    \n    third = third[1:end]\n    \n    third = sort(third)\n    \n    third\
    \ = third[1:end]\n    \n    third = sort(third)\n    \n    third = third[1:end]\n\
    \    \n    third = sort(third)\n    \n    third = third[1:end]\n    ", "    l\
    \ = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.3>", "    l = sort(l)\n  \
    \  l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes a list l and returns\
    \ a list l' such that\n    l' is identical to l in the indicies that are not divisible\
    \ by three, while its values at the indicies that are divisible by three are equal\n\
    \    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1,\
    \ 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6,\
    \ 3, 4, 8, 9, 5]\n    \"\"\"", "    l = sort(l)\n    l = l[findall(l % 3 == 0)]\n\
    \    l = l[findall(l % 3 == 1)]\n    return l\nend\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=sorting,julia |>\nI like your solution, but I thought I'd offer a more\
    \ general solution that doesn't require you to know the size of the input vector.\
    \ \n<code>", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l\
    \ .% 3 == 1)]\n    return l\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't\
    \ work for me. `sort_third([5, 6, 3, 4, 8, 9, 2])` returns `[2, 6, 3, 4, 8, 9,\
    \ 5]`\n<|/ c |>\n<| c |>\nI tested it on Julia 0.6.2 and it works. What version\
    \ are you using?\n<|/ c |>\n<| c |>\nI'm using 0.6.2. I tried it on 0.6.2 as well.\
    \ I'm on Windows 7. Maybe it's an issue with my version of Julia?\n<|/ c |>\n\
    <| c |>\nI tested it on 0.6.2 on Windows 7 and it works. I suspect that your version\
    \ of Julia is different from mine.\n<|/ c |>\n<| c |>\nI tested it on 0.6.2 on\
    \ Windows 7 and it works. I suspect that your version of Julia is different from\
    \ mine.\n<|/ c |>\n<| a tags=julia |>\nThis should work:\n<code>", "    \n   \
    \ l = sort(l)\n    \n    third = l[3:end]\n    \n    third = sort(third)\n   \
    \ \n    third = third[2:end]\n    \n    third = sort(third)\n    \n    third =\
    \ third[1:end]\n    \n    third = sort(third)\n    \n    third = third[1:end]\n\
    \    \n    third = sort(third)\n    \n    third = third[1:end]\n    \n    third\
    \ = sort(third)\n    \n    third = third[1:end]\n    \n    third = sort(third)\n\
    \    \n    third = third[1:end]\n    \n    third = sort(third)\n    \n    third\
    \ = third[1:end]\n    \n    third = sort(third)\n    \n    third = third[1:end]\n\
    \    \n    third = sort(third)\n    \n    third = third[1:end]\n    \n    third\
    \ = sort(third)\n    \n    third = third[1:end]\n    \n    third = sort(third)\n\
    \    \n    third = third[1:end]\n    \n    third = sort(third)\n    \n    third\
    \ = third[1:end]\n    \n    third = sort(third)\n    \n    third = third[1:end]\n\
    \    \n    third = sort(third)\n    \n    third = third[1:end]\n    \n    third\
    \ = sort(third)\n    \n    third = third[1:end]\n    \n    third = sort(third)\n\
    \    \n    third = third[1:end]\n    \n    third = sort(third)\n    \n    third\
    \ = third[1:end]\n    \n    third = sort(third)\n    \n    third = third[1:end]\n\
    \    \n    third = sort(third)\n    \n    third = third[1:end]\n    \n    third\
    \ = sort(third)\n    \n    third = third[1:end]\n    \n    third = sort(third)\n\
    \    \n    third = third[1:end]\n    \n    third = sort(third)\n    \n    third\
    \ = third[1:end]\n    \n    third = sort(third)\n    \n    third = third[1:end]\n\
    \    \n    third = sort(third)\n    \n    third = third[1:end]\n    \n    third\
    \ = sort(third)\n    \n    third = third[1:end]\n    \n    third = sort(third)\n\
    \    \n    third = third[1:end]\n    ", "    l = sort(l)\n    l = l[findall(l\
    \ % 3 == 0)]\n    l = l[findall(l % 3 != 0)]\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n  \
    \  l = l[findall(l .% 3 == 1)]\n    return l\nend\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nThis doesn't work for me. `sort_third([5, 6, 3, 4, 8, 9, 2])` returns\
    \ `[5, 6, 3, 4, 8, 9, 2]` instead of `[5, 6, 3, 4, 8, 9, 2]`.\n<|/ c |>\n<| c\
    \ |>\nI tested it and it works fine for me. Are you sure you copied the code correctly?\n\
    <|/ c |>\n<| c |>\nI copied the code exactly as you wrote it. I'm using Julia\
    \ 1.5.1. Maybe it's an issue with my version of Julia?\n<|/ c |>\n<| c |>\nI tested\
    \ it on Julia 1.5.1 and it works fine. Maybe try updating Julia to see if that\
    \ helps.\n<|/ c |>\n<| c |>\nI updated Julia to 1.5.1 and it still doesn't work.\
    \ I'm going to try updating my version of Julia to see if that helps.\n<|/ c |>\n\
    <| a dscore=1 |>\nThe answer by is correct, but I thought I'd post a more Julian\
    \ way of doing this (which I believe is more efficient):\n<code>", "    l = sort(l)\n\
    \    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n\
    \    l = l[findall(l .% 3 != 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n\
    \    return l\nend", "    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n\
    \    return l\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ list l and returns a list l' such that\n    l' is identical to l in the indicies\
    \ that are not divisible by three, while its values at the indicies that are divisible\
    \ by three are equal\n    to the values of the corresponding indicies of l, but\
    \ sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5,\
    \ 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"", "    l = sort(l)\n\
    \    l = l[findall(l % 3 == 0)]\n    l = l[findall(l % 3 == 1)]\n    return l\n\
    end\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l\
    \ .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l % 3 == 0)]\n   \
    \ l = l[findall(l % 3 != 0)]\n    return l\nend\n</code>\n<|/ a tags=julia,sorting,arrays\
    \ |>\n<| c |>\nThis doesn't work for me. `sort_third([5, 6, 3, 4, 8, 9, 2])` returns\
    \ `[2, 6, 3, 4, 8, 9, 5]` instead of `[5, 6, 3, 4, 8, 9, 2]`.\n<|/ c |>\n<| c\
    \ |>\nI tested it on julia 1.5.1 and it works. I guess it depends on which version\
    \ of julia you are using. Maybe try `sort_third([5, 6, 3, 4, 8, 9, 2])` on julia\
    \ 1.5.1\n<|/ c |>\n<| c |>\nI tested it on julia 1.5.1 and it works. I guess it\
    \ depends on which version of julia you are using. Maybe try `sort_third([5, 6,\
    \ 3, 4, 8, 9, 2])` on julia 1.5.1\n<|/ c |>\n<| c |>\nI tested it on julia 1.5.1\
    \ and it works. I guess it depends on which version of julia you are using. Maybe\
    \ try `sort_third([5, 6, 3, 4, 8, 9, 2])` on julia 1.5.1\n<|/ c |>\n<| c |>\n\
    I tested it on julia 1.5.1 and it works. I guess it depends on which version of\
    \ julia you are using. Maybe try `sort_third([5, 6, 3, 4, 8, 9, 2])` on julia\
    \ 1.5.1\n<|/ c |>\n<| a tags=julia,sorting,arrays |>\n<code>", "    \n    l =\
    \ sort(l)\n    \n    l = l[findall(l .% 3 == 0)]\n    \n    l = l[findall(l .%\
    \ 3 != 0)]\n    \n    l = sort(l)\n    \n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    \n    l = sort(l)\n\
    \    \n    l = l[findall(l .% 3 == 0)]\n    \n    l = l[findall(l .% 3 != 0)]\n\
    \    \n    l = sort(l)\n    \n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    l = sort(l)\n    \n    l = l[findall(l % 3 == 0)]\n    \n    l = l[findall(l\
    \ % 3 != 0)]\n    \n    return l\nend\n</cell>\n<code language=julia-1.5>", " \
    \   l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 !=\
    \ 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>", "    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    l = sort(l)\n    l = l[findall(l\
    \ % 3 == 0)]\n    l = sort(l)\n    return l\nend\n</code>\n<|/ a |>\n<| c |>\n\
    I like this solution, but I wonder if there is a way to do this without using\
    \ an anonymous function?\n<|/ c |>\n<| c |>\nI added a version without anonymous\
    \ function\n<|/ c |>\n<| c |>\nI added a version without anonymous function\n\
    <|/ c |>\n<| c |>\nI added a version without anonymous function\n<|/ c |>\n<|\
    \ a tags=julia,sorting |>\nI like your solution, but I wonder if there is a way\
    \ to do this without using an anonymous function?", "    \n    l = sort(l)\n \
    \   \n    l = l[findall(l .% 3 == 0)]\n    \n    l = l[findall(l .% 3 != 0)]\n\
    \    \n    l = sort(l)\n    \n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n  \
    \  l = l[findall(l % 3 == 0)]\n    l = l[findall(l % 3 == 1)]\n    return l\n\
    end\n</code>\n<|/ a |>\n<| c |>\nThis doesn't seem to work. `sort_third([5, 6,\
    \ 3, 4, 8, 9, 2])` returns `[2, 6, 3, 4, 8, 9, 5]`.\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works. I edited my answer to include a link to the full code I used.\n\
    <|/ c |>\n<| c |>\nI tested it again and it works. I edited my answer to include\
    \ a link to the full code I used.\n<|/ c |>\n<| c |>\nI tested it again and it\
    \ works. I edited my answer to include a link to the full code I used.\n<|/ c\
    \ |>\n<| a dscore=0 |>\n<code>", "    \n    l = sort(l)\n    \n    third = l[div(length(l),\
    \ 3)]\n    \n    third = third[div(length(third), 2)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = sort(third)\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[div(length(third), 2)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = sort(third)\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[div(length(third), 2)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = sort(third)\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[div(length(third), 2)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = sort(third)\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[div(length(third), 2)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = sort(third)\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[div(length(third), 2)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = sort(third)\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[div(length(third), 2)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = sort(third)\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[div(length(third), 2)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = sort(third)\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = third[div(length(third), 2)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = sort(third)\n    \n    third = third[div(length(third),\
    \ 3)]\n    \n    third = ", "    \n    l = sort(l)\n    \n    l = l[findall(l\
    \ .% 3 == 0)]\n    \n    l = sort(l)\n    \n    l = l[findall(l .% 3 != 0)]\n\
    \    \n    return l\nend\n</cell>\n<code language=julia-1.5>", "    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    l = sort(l)\n    l = l[findall(l\
    \ .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n  \
    \  l = l[findall(l .% 3 != 0)]\n    return l\nend\n</cell>\n<text>\nExercise 4\n\
    Write a function that takes a list l and returns a list l' such that\n    l' is\
    \ identical to l in the indicies that are not divisible by three, while its values\
    \ at the indicies that are divisible by three are equal\n    to the values of\
    \ the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n\
    \    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8,\
    \ 9, 5]\n    \"\"\"", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l\
    \ = l[findall(l .% 3 != 0)]\n    return l\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a list l and returns a list l' such that\n    l' is\
    \ identical to l in the indicies that are not divisible by three, while its values\
    \ at the indicies that are divisible by three are equal\n    to the values of\
    \ the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n\
    \    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8,\
    \ 9, 5]\n    \"\"\"", "    l = sort(l)\n    l = l[findall(l % 3 == 0)]\n    l\
    \ = l[findall(l % 3 != 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n  \
    \  l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\n\
    end\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l\
    \ .% 3 == 0)]\n    return l\nend", "    l = sort(l)\n    l = l[findall(l % 3 ==\
    \ 0)]\n    l = l[findall(l % 3 == 1)]\n    return l\nend\n</code>\n<|/ a tags=julia\
    \ |>\n<| c |>\nThis doesn't work if there are duplicates in the list. For example,\
    \ `sort_third([5, 6, 3, 4, 8, 9, 2, 5])` returns `[2, 6, 3, 4, 8, 9, 5, 5]`.\n\
    <|/ c |>\n<| c |>\nYes, I noticed that and fixed it\n<|/ c |>\n<| a |>\nThe answer\
    \ by is correct but can be improved. \nThe first thing that comes to mind is that\
    \ it sorts the list twice (once in the first line and once in the second line).\
    \ \nThe second thing is that it sorts the list three times (once in the first\
    \ line and once in the second line and once in the third line). \nThe third thing\
    \ is that it sorts the list four times (once in the first line and once in the\
    \ second line and once in the third line and once in the fourth line).\nThe fourth\
    \ thing is that it sorts the list five times (once in the first line and once\
    \ in the second line and once in the third line and once in the fourth line and\
    \ once in the fifth line).\nThe fifth thing is that it sorts the list six times\
    \ (once in the first line and once in the second line and once in the third line\
    \ and once in the fourth line and once in the fifth line and once in the sixth\
    \ line).\nThe sixth thing is that it sorts the list seven times (once in the first\
    \ line and once in the second line and once in the third line and once in the\
    \ fourth line and once in the fifth line and once in the sixth line and once in\
    \ the seventh line).\nThe seventh thing is that it sorts the list eight times\
    \ (once in the first line and once in the second line and once in the third line\
    \ and once in the fourth line and once in the fifth line and once in the sixth\
    \ line and once in the seventh line and once in the eighth line).\nThe eighth\
    \ thing is that it sorts the list nine times (once in the first line and once\
    \ in the second line and once in the third line and once in the fourth line and\
    \ once in the fifth line and once in the sixth line and once in the seventh line\
    \ and once in the eighth line and once in the ninth line).\nThe ninth thing is\
    \ that it sorts the list ten times (once in the first line and once in the second\
    \ line and once in the third line and once in the fourth line and ", "    l =\
    \ sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n\
    \    return l\nend\n</code>\n<|/ a tags=julia,sorting |>\n<| c |>\nThis doesn't\
    \ work for me. `sort_third([5, 6, 3, 4, 8, 9, 2])` returns `[2, 6, 3, 4, 8, 9,\
    \ 5]`.\n<|/ c |>\n<| c |>\nI tested it on Julia 0.6.2 and it works. I guess you\
    \ used a different version. Can you try it again and let me know if it works?\n\
    <|/ c |>\n<| c |>\nI tested it on Julia 0.6.2 and it works. I guess you used a\
    \ different version. Can you try it again and let me know if it works?\n<|/ c\
    \ |>\n<| c |>\nI tested it on Julia 0.6.2 and it works. I guess you used a different\
    \ version. Can you try it again and let me know if it works?\n<|/ c |>\n<| c |>\n\
    I tested it on Julia 0.6.2 and it works. I guess you used a different version.\
    \ Can you try it again and let me know if it works?\n<|/ c |>\n<| a tags=julia,sorting\
    \ |>\n<code>", "    \n    l = sort(l)\n    \n    l = l[findall(l .% 3 == 0)]\n\
    \    \n    l = sort(l)\n    \n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n\
    \    return l\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nI like the idea of\
    \ using sort! But I still don't understand why my code doesn't work. Could you\
    \ please elaborate on that?\n<|/ c |>\n<| c |>\nI added an explanation to my answer.\
    \ Hope it helps.\n<|/ c |>\n<| c |>\nThanks for the explanation! I understand\
    \ now why my code doesn't work. Your code works perfectly though.\n<|/ c |>\n\
    <| a dscore=1 |>\nThe reason your code doesn't work is that your function sort_third\
    \ is returning a Vector{Int64}, but your function sort_third is supposed to return\
    \ a Vector{Int}. \nThe reason your code doesn't work is that your function sort_third\
    \ is returning a Vector{Int64}, but your function sort_third is supposed to return\
    \ a Vector{Int}. \nThe reason your code doesn't work is that your function sort_third\
    \ is returning a Vector{Int64}, but your function sort_third is supposed to return\
    \ a Vector{Int}. \nThe reason your code doesn't work is that your function sort_third\
    \ is returning a Vector{Int64}, but your function sort_third is supposed to return\
    \ a Vector{Int}. \nThe reason your code doesn't work is that your function sort_third\
    \ is returning a Vector{Int64}, but your function sort_third is supposed to return\
    \ a Vector{Int}. \nThe reason your code doesn't work is that your function sort_third\
    \ is returning a Vector{Int64}, but your function sort_third is supposed to return\
    \ a Vector{Int}. \nThe reason your code doesn't work is that your function sort_third\
    \ is returning a Vector{Int64}, but your function sort_third is supposed to return\
    \ a Vector{Int}. \nThe reason your code doesn't work is that your function sort_third\
    \ is returning a Vector{Int64}, but your function sort_third is supposed to return\
    \ a Vector{Int}. \nThe reason your code doesn't work is that your function sort_third\
    \ is returning a Vector{Int64}, but your function sort_third is supposed to return\
    \ a Vector{Int}. \nThe reason your code doesn't work is that your function sort_third\
    \ is returning a Vector{Int64}, but your function sort_third is supposed to return\
    \ a Vector{Int}. \nThe reason your code doesn't work is that your function sort_third\
    \ is returning a Vector{Int64}, but your function sort_third is supposed to ",
  "    \n    l = sort(l)\n    \n    l = l[findall(l .% 3 == 0)]\n    \n    l = l[findall(l\
    \ .% 3 != 0)]\n    \n    l = sort(l)\n    \n    return l\nend\n</cell>\n<code\
    \ language=julia-1.3>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
