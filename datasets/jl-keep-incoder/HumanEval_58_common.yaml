name: HumanEval_58_common
language: julia
prompt: "\"\"\"Return sorted unique common elements for two lists.\n    >>> common([1,\
  \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5,\
  \ 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\nfunction common(l1::Vector{Int64},\
  \ l2::Vector{Int64})::Vector{Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = common;\n\t@test(candidate([1,\
  \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5,\
  \ 3, 2, 8], [3, 2]) == [2, 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2,\
  \ 3, 4])\n\t@test(candidate([4, 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\n\
  end\n"
completions: ["    \n    common = Set()\n    \n    for el in l1 do \n        if !contains(common,\
    \ el) \n            common = Set([el])\n        else \n            common = Set([el]\
    \ ++ common)\n        end\n    end\n    \n    for el in l2 do \n        if !contains(common,\
    \ el) \n            common = Set([el])\n        else \n            common = Set([el]\
    \ ++ common)\n        end\n    end\n    \n    return common\nend\n</code>\n<|/\
    \ a dscore=2 |>\n<| a dscore=2 |>\nI wrote a Julia package called SetOps.jl that\
    \ implements set operations in Julia. Here are some examples:\n<code>\njulia>\
    \ SetOps.union([1,2,3], [2,3,4])\nSet([1,2,3,4])", "    \n    common = Set()\n\
    \    for elt in l1 do \n        if elt in l2 \n            common = common + elt\n\
    \        end\n    end\n    return common\nend", "    \n    common = Set()\n  \
    \  \n    for x in l1\n        push!(common, x)\n    end\n    \n    for x in l2\n\
    \        push!(common, x)\n    end\n    \n    common\nend\n</cell>\n<code language=julia-1.5>\n\
    @test common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n\
    @test common([5, 3, 2, 8], [3, 2]) == [2, 3]\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the number of times each element appears in two vectors.",
  "    \n    common = Set()\n    for x in l1\n        push!(common, x)\n    end\n\
    \    for x in l2\n        push!(common, x)\n    end\n    \n    common\nend", " \
    \   \n    common = Set()\n    \n    for x in l1\n        push!(common, x)\n  \
    \  end\n    \n    for x in l2\n        push!(common, x)\n    end\n    \n    return\
    \ collect(common)\nend", "    \n    common = Set()\n    for x in l1 do \n    \
    \    common = Set([x] + common)\n    end\n    for x in l2 do \n        common\
    \ = Set([x] + common)\n    end\n    return common\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    common = Set()\n    for x in l1\n        push!(common, x)\n    end\n\
    \    for x in l2\n        push!(common, x)\n    end\n    \n    return collect(common)\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n    \n  \
    \  for x in l1\n        push!(common, x)\n    end\n    \n    for x in l2\n   \
    \     push!(common, x)\n    end\n    \n    common\nend\n</cell>\n<code language=julia-1.5>\n\
    @time common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n</cell>\n<code\
    \ language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n</cell>\n<code\
    \ language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n</cell>\n<code\
    \ language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n</cell>\n<code\
    \ language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n</cell>\n<code\
    \ language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n</cell>\n<code\
    \ language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n</cell>\n<code\
    \ language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n</cell>\n<code\
    \ language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n</cell>\n<code\
    \ language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])", "    \n    common\
    \ = Set()\n    \n    for el in l1\n        push!(common, el)\n    end\n    \n\
    \    for el in l2\n        push!(common, el)\n    end\n    \n    common\nend",
  "    \n    common = Set()\n    \n    for x in l1\n        push!(common, x)\n   \
    \ end\n    \n    for x in l2\n        push!(common, x)\n    end\n    \n    return\
    \ sort(common)\nend", "    \n    common = Set()\n    for x in l1\n        push!(common,\
    \ x)\n    end\n    for x in l2\n        push!(common, x)\n    end\n    common\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n    \n  \
    \  for el in l1\n        if !contains(common, el)\n            common = Set([el])\n\
    \        else\n            common = Set([el] ++ common)\n        end\n    end\n\
    \    \n    for el in l2\n        if !contains(common, el)\n            common\
    \ = Set([el])\n        else\n            common = Set([el] ++ common)\n      \
    \  end\n    end\n    \n    return common\nend", "    \n    common = Set()\n  \
    \  for x in l1\n        push!(common, x)\n    end\n    for x in l2\n        push!(common,\
    \ x)\n    end\n    common\nend\n</cell>\n<code language=julia-1.5>", "    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    common = Set()\n\
    \    for x in l1\n        push!(common, x)\n    end\n    for x in l2\n       \
    \ push!(common, x)\n    end\n    \n    return collect(common)\nend\n</cell>\n\
    <code language=julia-1.4>", "    \n    common = Set()\n    for x in l1\n     \
    \   push!(common, x)\n    end\n    for x in l2\n        push!(common, x)\n   \
    \ end\n    \n    return sort(common)\nend", "    \n    common = Set()\n    \n\
    \    for i in l1\n        common.add(i)\n    end\n    \n    for i in l2\n    \
    \    common.add(i)\n    end\n    \n    return common\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    common = Set()\n    \n    for x in l1\n        push!(common, x)\n   \
    \ end\n    \n    for x in l2\n        push!(common, x)\n    end\n    \n    return\
    \ common\nend", "    \n    common = Set()\n    for x in l1\n        push!(common,\
    \ x)\n    end\n    for x in l2\n        push!(common, x)\n    end\n    common\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n    \n  \
    \  for x in l1\n        push!(common, x)\n    end\n    \n    for x in l2\n   \
    \     push!(common, x)\n    end\n    \n    return collect(common)\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    common = Set()\n    for x in l1\n     \
    \   push!(common, x)\n    end\n    for x in l2\n        push!(common, x)\n   \
    \ end\n    common\nend", "    \n    common = Set()\n    \n    for x in l1\n  \
    \      if !contains(common, x)\n            push!(common, x)\n        end\n  \
    \  end\n    \n    for x in l2\n        if !contains(common, x)\n            push!(common,\
    \ x)\n        end\n    end\n    \n    return common\nend", "    \n    common =\
    \ Set()\n    \n    for elt in l1 do \n        if elt in l2 \n            common\
    \ = union(common, elt)\n        end\n    end\n    \n    return common\nend", " \
    \   \n    common = Set()\n    \n    for a in l1\n        for b in l2\n       \
    \     if a == b\n                common = Set([a])\n                break\n  \
    \          else\n                common = Set([a]) & common\n        end\n   \
    \ end\n    \n    return common\nend", "    \n    common = Set()\n    for x in\
    \ l1\n        push!(common, x)\n    end\n    for x in l2\n        push!(common,\
    \ x)\n    end\n    \n    common\nend", "    \n    common = Set()\n    for x in\
    \ l1\n        push!(common, x)\n    end\n    for x in l2\n        push!(common,\
    \ x)\n    end\n    \n    return collect(common)\nend", "    \n    common = Set()\n\
    \    common = Set([i for i in l1 if i in l2])\n    return common\nend", "    \n\
    \    common = Set()\n    \n    for x in l1\n        push!(common, x)\n    end\n\
    \    \n    for x in l2\n        push!(common, x)\n    end\n    \n    return collect(common)\n\
    end", "    \n    common = Set()\n    for x in l1\n        push!(common, x)\n \
    \   end\n    for x in l2\n        push!(common, x)\n    end\n    \n    return\
    \ collect(common)\nend", "    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    common = Set()\n    \n    for el in l1\n        common =\
    \ Set([el]) | common\n    end\n    \n    for el in l2\n        common = Set([el])\
    \ | common\n    end\n    \n    return common\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    common = Set()\n    \n    for x in l1\n        if x in common\n     \
    \       continue\n        push!(common, x)\n    end\n    \n    for x in l2\n \
    \       if x in common\n            continue\n        push!(common, x)\n    end\n\
    \    \n    return common\nend", "    \n    common = Set()\n    \n    for x in\
    \ l1\n        if !contains(common, x)\n            push!(common, x)\n        end\n\
    \    end\n    \n    for x in l2\n        if !contains(common, x)\n           \
    \ push!(common, x)\n        end\n    end\n    \n    return common\nend", "   \
    \ \n    common = Set()\n    for a in l1\n        for b in l2\n            if a\
    \ == b\n                common = Set([a])\n                break\n        end\n\
    \    end\n    return common\nend", "    \n    common = Set()\n    \n    for x\
    \ in l1 do \n        push!(common, x)\n    end\n    \n    for x in l2 do \n  \
    \      push!(common, x)\n    end\n    \n    return sort(common)\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    common = Set()\n    for a in l1\n     \
    \   for b in l2\n            if a == b\n                common.add(a)\n      \
    \      end\n        end\n    end\n    return common\nend", "    \n    common =\
    \ Set()\n    \n    for a in l1\n        for b in l2\n            if a == b\n \
    \               common.add(a)\n            end\n        end\n    end\n    \n \
    \   return common\nend", "    \n    common = Set()\n    \n    for el1 in l1\n\
    \        for el2 in l2\n            if el1 == el2\n                common = Set([el1])\n\
    \            else\n                common = Set([el1]) \u222A common\n       \
    \     end\n        end\n    end\n    \n    return common\nend", "    \n    common\
    \ = Set()\n    \n    for x in l1\n        push!(common, x)\n    end\n    \n  \
    \  for x in l2\n        push!(common, x)\n    end\n    \n    common\nend\n</cell>\n\
    <code language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n</cell>\n<code\
    \ language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time common([5, 3, 2, 8], [3, 2])\n</cell>\n<code language=julia-1.5>\n@time\
    \ common([5, 3, 2, 8], [3, 2])\n</cell>\n<code language=julia-1.5>\n@time common([5,\
    \ 3, 2, 8], [3, 2])\n</cell>\n<code language=julia-1.5>\n@time common([5, 3, 2,\
    \ 8], [3, 2])\n</cell>\n<code language=julia-1.5>\n@time common([5, 3, 2, 8],\
    \ [3, 2])\n</cell>\n<code language=julia-1.5>\n@time common([5, 3, 2, 8], [3,\
    \ 2])\n</cell>\n<code language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n\
    </cell>\n<code language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n</cell>\n\
    <code language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n</cell>\n<code\
    \ language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time common([5, 3, 2, 8], [3, 2])\n</cell>\n<code language=julia-1.5>\n@time\
    \ common([5, 3, 2, 8], [3, 2])\n</cell>\n<code language=julia-1.5>\n@time common([5,\
    \ 3, 2, 8], [3, 2])\n</cell>\n<code language=julia-1.5>\n@time common([5, 3, 2,\
    \ 8], [3, 2])\n</cell>\n<code language=julia-1.5>\n@time common([5, 3, 2, 8],\
    \ [3, 2])\n</cell>\n<code language=julia-1.5>\n@time common([5, 3, 2, 8], [3,\
    \ 2])\n</cell>\n<code language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n\
    </cell>\n<code language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n</cell>\n\
    <code language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n</cell>\n<code\
    \ language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n</cell>\n<code language=",
  "    \n    common = Set()\n    \n    for el in l1 \n        common = Set([el] +\
    \ common)\n    end\n    \n    for el in l2 \n        common = Set([el] + common)\n\
    \    end\n    \n    return common\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    common =\
    \ Set()\n    for el in l1\n        common = Set([el]) & common\n    end\n    for\
    \ el in l2\n        common = Set([el]) & common\n    end\n    return common\n\
    end", "    \n    common = Set()\n    for el in l1\n        common = Set([el] +\
    \ common)\n    end\n    for el in l2\n        common = Set([el] + common)\n  \
    \  end\n    return common\nend\n</cell>\n<code language=julia-1.3>", "    \n \
    \   common = Set()\n    for x in l1\n        push!(common, x)\n    end\n    for\
    \ x in l2\n        push!(common, x)\n    end\n    common\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    common = Set()\n    for x in l1\n        push!(common,\
    \ x)\n    end\n    for x in l2\n        push!(common, x)\n    end\n    \n    return\
    \ collect(common)\nend", "    \n    common = Set()\n    \n    for elt in l1 \n\
    \        if elt in l2 \n            common = common.add!(elt)\n        end\n \
    \   end\n    \n    return common\nend", "    \n    common = Set()\n    \n    for\
    \ x in l1\n        push!(common, x)\n    end\n    \n    for x in l2\n        push!(common,\
    \ x)\n    end\n    \n    return collect(common)\nend", "    \n    common = Set()\n\
    \    \n    for x in l1\n        push!(common, x)\n    end\n    \n    for x in\
    \ l2\n        push!(common, x)\n    end\n    \n    common\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    common = Set()\n    \n    for i in l1\n   \
    \     common.add(i)\n    end\n    \n    for i in l2\n        common.add(i)\n \
    \   end\n    \n    return common\nend", "    \n    common = Set()\n    \n    for\
    \ el1 in l1\n        for el2 in l2\n            if el1 == el2\n              \
    \  common = Set([el1])\n                break\n        end\n    end\n    \n  \
    \  return common\nend\n</cell>\n<code language=julia-1.5>", "    \n    common\
    \ = Set()\n    for elt in l1 do \n        common = common & Set(elt)\n    end\n\
    \    for elt in l2 do \n        common = common & Set(elt)\n    end\n    return\
    \ common\nend", "    \n    common = Set()\n    \n    for a in l1\n        for\
    \ b in l2\n            if a == b\n                common.add(a)\n            end\n\
    \        end\n    end\n    \n    return common\nend", "    \n    common = Set()\n\
    \    common = Set([i for i in l1 if i in l2])\n    common = Set([i for i in l2\
    \ if i in l1])\n    common = Set([i for i in l1 if i in l2])\n    common = Set([i\
    \ for i in l2 if i in l1])\n    common = Set([i for i in l1 if i in l2])\n   \
    \ common = Set([i for i in l2 if i in l1])\n    common = Set([i for i in l2 if\
    \ i in l1])\n    common = Set([i for i in l1 if i in l2])\n    common = Set([i\
    \ for i in l2 if i in l1])\n    common = Set([i for i in l2 if i in l1])\n   \
    \ common = Set([i for i in l1 if i in l2])\n    common = Set([i for i in l2 if\
    \ i in l1])\n    common = Set([i for i in l2 if i in l1])\n    common = Set([i\
    \ for i in l1 if i in l2])\n    common = Set([i for i in l2 if i in l1])\n   \
    \ common = Set([i for i in l2 if i in l1])\n    common = Set([i for i in l1 if\
    \ i in l2])\n    common = Set([i for i in l2 if i in l1])\n    common = Set([i\
    \ for i in l2 if i in l1])\n    common = Set([i for i in l1 if i in l2])\n   \
    \ common = Set([i for i in l2 if i in l1])\n    common = Set([i for i in l2 if\
    \ i in l1])\n    common = Set([i for i in l1 if i in l2])\n    common = Set([i\
    \ for i in l2 if i in l1])\n    common = Set([i for i in l2 if i in l1])\n   \
    \ common = Set([i for i in l1 if i in l2])\n    common = Set([i for i in l2 if\
    \ i in l1])\n    common = Set([i for i in l2 if i in l1])\n    common = Set([i\
    \ for i in l1 if i in l2])\n    common = Set([i for i in l2 if i in l1])\n   \
    \ common = Set([i for i in l2 if i in l1])\n    common = Set([i for i in l1 if\
    \ i in l2])\n    common = Set([i for i in l2 if i in l1])\n    common = Set([i\
    \ for i in l2 if i in l1])\n    common = Set([i for i in l1 if i in l2])\n   \
    \ common = Set([i for i in l2 if i in l1])\n    common = Set([i for i in l2 if\
    \ i in l1])\n    common = Set([i for i in l1 if i in l2])\n    common = Set([i\
    \ for i in l2 if i in l1])\n    common = Set([i for i in l2 if i in l", "    \n\
    \    common = Set()\n    for x in l1\n        push!(common, x)\n    end\n    for\
    \ x in l2\n        push!(common, x)\n    end\n    \n    return collect(common)\n\
    end", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    common\
    \ = Set()\n    \n    for el in l1\n        common = Set([el]) & common\n    end\n\
    \    \n    for el in l2\n        common = Set([el]) & common\n    end\n    \n\
    \    return common\nend", "    \n    common = Set()\n    for x in l1\n       \
    \ push!(common, x)\n    end\n    for x in l2\n        push!(common, x)\n    end\n\
    \    common\nend", "    \n    common = Set()\n    for x in l1\n        push!(common,\
    \ x)\n    end\n    for x in l2\n        push!(common, x)\n    end\n    \n    return\
    \ collect(common)\nend", "    \n    common = Set()\n    for x in l1\n        push!(common,\
    \ x)\n    end\n    for x in l2\n        push!(common, x)\n    end\n    \n    return\
    \ common\nend", "    \n    common = Set()\n    \n    for x in l1\n        if x\
    \ in l2\n            common.add(x)\n        end\n    end\n    \n    return common\n\
    end\n</cell>\n<text>\nThe function above is called common() because it is short\
    \ for common elements. It is also called a set because it is used to store unique\
    \ elements. A set is like a list but does not allow duplicates.", "    \n    common\
    \ = Set()\n    common = Set([i for i in l1 if i in l2])\n    common = Set([i for\
    \ i in l2 if i in l1])\n    common = Set([i for i in l1 if i in l2])\n    common\
    \ = Set([i for i in l2 if i in l1])\n    common = Set([i for i in l1 if i in l2])\n\
    \    common = Set([i for i in l2 if i in l1])\n    common = Set([i for i in l1\
    \ if i in l2])\n    common = Set([i for i in l2 if i in l1])\n    common = Set([i\
    \ for i in l1 if i in l2])\n    common = Set([i for i in l2 if i in l1])\n   \
    \ common = Set([i for i in l1 if i in l2])\n    common = Set([i for i in l2 if\
    \ i in l1])\n    common = Set([i for i in l1 if i in l2])\n    common = Set([i\
    \ for i in l2 if i in l1])\n    common = Set([i for i in l1 if i in l2])\n   \
    \ common = Set([i for i in l2 if i in l1])\n    common = Set([i for i in l1 if\
    \ i in l2])\n    common = Set([i for i in l2 if i in l1])\n    common = Set([i\
    \ for i in l1 if i in l2])\n    common = Set([i for i in l2 if i in l1])\n   \
    \ common = Set([i for i in l1 if i in l2])\n    common = Set([i for i in l2 if\
    \ i in l1])\n    common = Set([i for i in l1 if i in l2])\n    common = Set([i\
    \ for i in l2 if i in l1])\n    common = Set([i for i in l1 if i in l2])\n   \
    \ common = Set([i for i in l2 if i in l1])\n    common = Set([i for i in l1 if\
    \ i in l2])\n    common = Set([i for i in l2 if i in l1])\n    common = Set([i\
    \ for i in l1 if i in l2])\n    common = Set([i for i in l2 if i in l1])\n   \
    \ common = Set([i for i in l1 if i in l2])\n    common = Set([i for i in l2 if\
    \ i in l1])\n    common = Set([i for i in l1 if i in l2])\n    common = Set([i\
    \ for i in l2 if i in l1])\n    common = Set([i for i in l1 if i in l2])\n   \
    \ common = Set([i for i in l2 if i in l1])\n    common = Set([i for i in l1 if\
    \ i in l2])\n    common = Set([i for i in l2 if i in l1])\n    common = Set([i\
    \ for i in l1 if i in l2])\n    common = Set([i for i in l2 if i in l1])\n   \
    \ common = Set", "    \n    common = Set()\n    for elt in l1 \n        if elt\
    \ in l2 \n            common = union(common, elt)\n        end\n    end\n    \n\
    \    return common\nend", "    \n    common = Set()\n    for x in l1\n       \
    \ push!(common, x)\n    end\n    for x in l2\n        push!(common, x)\n    end\n\
    \    common\nend\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n\
    \    \n    for x in l1\n        push!(common, x)\n    end\n    \n    for x in\
    \ l2\n        push!(common, x)\n    end\n    \n    common\nend", "    \n    common\
    \ = Set()\n    \n    for elt in l1 \n        if elt in l2 \n            common\
    \ = union(common, elt)\n        end\n    end\n    \n    return common\nend", " \
    \   \n    common = Set()\n    for x in l1\n        push!(common, x)\n    end\n\
    \    for x in l2\n        push!(common, x)\n    end\n    common\nend\n</cell>\n\
    <code language=julia-1.4>", "    \n    common = Set()\n    for x in l1\n     \
    \   push!(common, x)\n    end\n    for x in l2\n        push!(common, x)\n   \
    \ end\n    common\nend", "    \n    common = Set()\n    \n    for el in l1\n \
    \       if !contains(common, el)\n            common = Set([el])\n        end\n\
    \    end\n    \n    for el in l2\n        if !contains(common, el)\n         \
    \   common = Set([el])\n        end\n    end\n    \n    return common\nend", " \
    \   \n    common = Set()\n    for x in l1\n        push!(common, x)\n    end\n\
    \    for x in l2\n        push!(common, x)\n    end\n    \n    return collect(common)\n\
    end", "    \n    common = Set()\n    \n    for i in l1\n        common.add(i)\n\
    \    end\n    \n    for i in l2\n        common.add(i)\n    end\n    \n    return\
    \ common\nend\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n\
    \    for x in l1\n        push!(common, x)\n    end\n    for x in l2\n       \
    \ push!(common, x)\n    end\n    \n    return collect(common)\nend", "    \n \
    \   common = Set()\n    \n    for x in l1\n        push!(common, x)\n    end\n\
    \    \n    for x in l2\n        push!(common, x)\n    end\n    \n    common\n\
    end", "    \n    common = Set()\n    \n    for el in l1 do \n        common =\
    \ Set([el] + common)\n    end\n    \n    for el in l2 do \n        common = Set([el]\
    \ + common)\n    end\n    \n    return common\nend", "    \n    common = Set()\n\
    \    for a in l1\n        for b in l2\n            if a == b\n               \
    \ common.add(a)\n            end\n        end\n    end\n    return common\nend",
  "    \n    common = Set()\n    for x in l1\n        push!(common, x)\n    end\n\
    \    for x in l2\n        push!(common, x)\n    end\n    \n    return collect(common)\n\
    end", "    \n    common = Set()\n    \n    for a in l1\n        for b in l2\n\
    \            if a == b\n                common = Set([a])\n            else\n\
    \                common = Set([a] ++ common)\n        end\n    end\n    \n   \
    \ return common\nend\n</cell>\n<code language=julia-1.5>", "    \n    common =\
    \ Set()\n    \n    for x in l1\n        push!(common, x)\n    end\n    \n    for\
    \ x in l2\n        push!(common, x)\n    end\n    \n    common\nend", "    \n\
    \    common = Set()\n    \n    for x in l1\n        push!(common, x)\n    end\n\
    \    \n    for x in l2\n        push!(common, x)\n    end\n    \n    return collect(common)\n\
    end", "    \n    common = Set()\n    for x in l1 \n        push!(common, x)\n\
    \    end\n    for x in l2\n        push!(common, x)\n    end\n    \n    return\
    \ sort(common)\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>", " \
    \   \n    common = Set()\n    \n    for x in l1\n        push!(common, x)\n  \
    \  end\n    \n    for x in l2\n        push!(common, x)\n    end\n    \n    common\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n    for x\
    \ in l1\n        push!(common, x)\n    end\n    for x in l2\n        push!(common,\
    \ x)\n    end\n    \n    return collect(common)\nend", "    \n    common = Set()\n\
    \    for x in l1\n        push!(common, x)\n    end\n    for x in l2\n       \
    \ push!(common, x)\n    end\n    common\nend", "    \n    common = Set()\n   \
    \ \n    for x in l1\n        push!(common, x)\n    end\n    \n    for x in l2\n\
    \        push!(common, x)\n    end\n    \n    common\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    common = Set()\n    for x in l1\n        push!(common, x)\n    end\n\
    \    for x in l2\n        push!(common, x)\n    end\n    common\nend\n</cell>\n\
    <code language=julia-1.5>\n@time common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n</cell>\n<code language=julia-1.5>\n@time common([5, 3, 2, 8],\
    \ [3, 2])\n</cell>\n<text>\nExercise\nWrite a function that returns the number\
    \ of unique elements in a given vector. \nWrite a function that returns the number\
    \ of unique elements in a given vector. \nWrite a function that returns the number\
    \ of unique elements in a given vector. \nWrite a function that returns the number\
    \ of unique elements in a given vector. \nWrite a function that returns the number\
    \ of unique elements in a given vector. \nWrite a function that returns the number\
    \ of unique elements in a given vector. \nWrite a function that returns the number\
    \ of unique elements in a given vector. \nWrite a function that returns the number\
    \ of unique elements in a given vector. \nWrite a function that returns the number\
    \ of unique elements in a given vector. \nWrite a function that returns the number\
    \ of unique elements in a given vector. \nWrite a function that returns the number\
    \ of unique elements in a given vector. \nWrite a function that returns the number\
    \ of unique elements in a given vector. \nWrite a function that returns the number\
    \ of unique elements in a given vector. \nWrite a function that returns the number\
    \ of unique elements in a given vector. \nWrite a function that returns the number\
    \ of unique elements in a given vector. \nWrite a function that returns the number\
    \ of unique elements in a given vector. \nWrite a function that returns the number\
    \ of unique elements in a given vector. \nWrite a function that returns the number\
    \ of unique elements in a given vector. \nWrite a function that returns the number\
    \ of unique elements in a given vector. \nWrite a function that returns the number\
    \ of unique elements in a given vector. \nWrite a function that returns the number\
    \ of unique elements in a given vector. \nWrite a function that returns the number\
    \ of unique elements in a given vector. \nWrite a function that returns the number\
    \ of unique elements in a given vector. \nWrite a function that returns the number\
    \ of unique elements in a given vector. \nWrite a function that returns the number\
    \ of unique elements in a given vector. \nWrite a function that returns the number\
    \ of unique elements in a given vector. \nWrite a function that returns the number\
    \ of unique elements in a given vector. \nWrite a function that returns the number\
    \ of unique elements in a given vector. \nWrite a function that returns the number\
    \ of unique elements in a given vector. \nWrite a function that returns the number\
    \ of unique elements in a given vector. \nWrite a function that returns the number\
    \ of unique elements in a given vector. \nWrite a function that returns the number\
    \ of unique elements in a given vector. \nWrite a function that returns the number\
    \ of unique elements in a given vector. \nWrite a function that returns the number\
    \ of unique elements in a given vector. \nWrite a function that returns the ",
  "    \n    common = Set()\n    \n    for x in l1\n        push!(common, x)\n   \
    \ end\n    \n    for x in l2\n        push!(common, x)\n    end\n    \n    return\
    \ collect(common)\nend", "    \n    common = Set()\n    \n    for x in l1\n  \
    \      push!(common, x)\n    end\n    \n    for x in l2\n        push!(common,\
    \ x)\n    end\n    \n    return collect(common)\nend\n</cell>\n<code language=julia-1.5>\n\
    @test common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n\
    @test common([5, 3, 2, 8], [3, 2]) == [2, 3]\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of times each element appears in two vectors.",
  "    \n    common = Set()\n    \n    for x in l1\n        push!(common, x)\n   \
    \ end\n    \n    for x in l2\n        push!(common, x)\n    end\n    \n    return\
    \ collect(common)\nend", "    \n    common = Set()\n    for x in l1\n        common.add(x)\n\
    \    end\n    for x in l2\n        common.add(x)\n    end\n    common\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    common = Set()\n    \n    for i in l1\n\
    \        for j in l2\n            if i == j\n                common = Set([i,\
    \ j])\n            end\n        end\n    end\n    \n    return common\nend", " \
    \   \n    common = Set()\n    for x in l1\n        push!(common, x)\n    end\n\
    \    for x in l2\n        push!(common, x)\n    end\n    common\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    common = Set()\n    \n    for x in l1\n\
    \        push!(common, x)\n    end\n    \n    for x in l2\n        push!(common,\
    \ x)\n    end\n    \n    return collect(common)\nend", "    \n    common = Set()\n\
    \    for x in l1\n        common = Set([x] ++ common)\n    end\n    for x in l2\n\
    \        common = Set([x] ++ common)\n    end\n    return common\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    common = Set()\n    for x in l1\n     \
    \   common = Set([x] ++ common)\n    end\n    for x in l2\n        common = Set([x]\
    \ ++ common)\n    end\n    return common\nend", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    common = Set()\n    \n    for elt in l1\
    \ \n        if elt in l2 \n            common = union(common, elt)\n        end\n\
    \    end\n    \n    return common\nend", "    \n    common = Set()\n    for x\
    \ in l1 \u222A l2\n        push!(common, x)\n    end\n    \n    return common\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n    \n  \
    \  for i in l1\n        common = Set([i | common])\n    end\n    \n    for i in\
    \ l2\n        common = Set([i | common])\n    end\n    \n    return common\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    common = Set()\n    for x in l1\n\
    \        common = Set([x] ++ common)\n    end\n    for x in l2\n        common\
    \ = Set([x] ++ common)\n    end\n    return common\nend", "    \n    common =\
    \ Set()\n    for x in l1\n        common = Set([x] ++ common)\n    end\n    for\
    \ x in l2\n        common = Set([x] ++ common)\n    end\n    return Set([x for\
    \ x in common if x != 0])\nend\n</cell>\n<code language=julia-1.5>", "    \n \
    \   common = Set()\n    \n    for i in l1\n        common = Set([i | common])\n\
    \    end\n    \n    for i in l2\n        common = Set([i | common])\n    end\n\
    \    \n    return common\nend", "    \n    common = Set()\n    \n    for x in\
    \ l1\n        push!(common, x)\n    end\n    \n    for x in l2\n        push!(common,\
    \ x)\n    end\n    \n    return common\nend", "    \n    common = Set()\n    for\
    \ x in l1\n        push!(common, x)\n    end\n    for x in l2\n        push!(common,\
    \ x)\n    end\n    common\nend\n</cell>\n<code language=julia-1.5>", "    \n \
    \   common = Set()\n    \n    for x in l1\n        push!(common, x)\n    end\n\
    \    \n    for x in l2\n        push!(common, x)\n    end\n    \n    common\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n    \n  \
    \  for elt in l1 do \n        if elt in l2 \n            common = union(common,\
    \ elt)\n        end\n    end\n    \n    return common\nend", "    \n    common\
    \ = Set()\n    for x in l1\n        push!(common, x)\n    end\n    for x in l2\n\
    \        push!(common, x)\n    end\n    \n    return collect(common)\nend\n</cell>\n\
    <code language=julia-1.3>", "    \n    common = Set()\n    for x in l1\n     \
    \   push!(common, x)\n    end\n    for x in l2\n        push!(common, x)\n   \
    \ end\n    \n    return collect(common)\nend", "    \n    common = Set()\n   \
    \ for x in l1\n        common = Set([x] ++ common)\n    end\n    for x in l2\n\
    \        common = Set([x] ++ common)\n    end\n    common\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    common = Set()\n    \n    for x in l1\n   \
    \     if x in common\n            continue\n        push!(common, x)\n    end\n\
    \    \n    for x in l2\n        if x in common\n            continue\n       \
    \ push!(common, x)\n    end\n    \n    return common\nend", "    \n    common\
    \ = Set()\n    \n    for x in l1\n        push!(common, x)\n    end\n    \n  \
    \  for x in l2\n        push!(common, x)\n    end\n    \n    return sort(common)\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n    \n  \
    \  for i in l1\n        common.add(i)\n    end\n    \n    for i in l2\n      \
    \  common.add(i)\n    end\n    \n    common\nend", "    \n    common = Set()\n\
    \    \n    for x in l1\n        push!(common, x)\n    end\n    \n    for x in\
    \ l2\n        push!(common, x)\n    end\n    \n    return collect(common)\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    common = Set()\n    for x in l1\n\
    \        push!(common, x)\n    end\n    for x in l2\n        push!(common, x)\n\
    \    end\n    \n    common\nend", "    \n    common = Set()\n    for x in l1\n\
    \        common = Set([x] ++ common)\n    end\n    for x in l2\n        common\
    \ = Set([x] ++ common)\n    end\n    return common\nend", "    \n    common =\
    \ Set()\n    for el in l1\n        common = Set([el] + common)\n    end\n    for\
    \ el in l2\n        common = Set([el] + common)\n    end\n    return common\n\
    end", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    common = Set()\n    for\
    \ x in l1\n        push!(common, x)\n    end\n    for x in l2\n        push!(common,\
    \ x)\n    end\n    common\nend", "    \n    common = Set()\n    for x in l1\n\
    \        push!(common, x)\n    end\n    for x in l2\n        push!(common, x)\n\
    \    end\n    common\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector and returns a vector where each element is the product of the\
    \ corresponding elements in the original vectors.", "    \n    common = Set()\n\
    \    for x in l1\n        push!(common, x)\n    end\n    for x in l2\n       \
    \ push!(common, x)\n    end\n    \n    return collect(common)\nend\n</code>\n\
    <|/ a tags=julia |>\n<| a tags=julia |>\nThe most efficient way is to use Sets:\n\
    <code>\njulia> function common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64}\n\
    \           common = Set()\n           for x in l1\n               push!(common,\
    \ x)\n           end\n           for x in l2\n               push!(common, x)\n\
    \           end\n           return collect(common)\n       end\ncommon (generic\
    \ function with 1 method)", "    \n    common = Set()\n    \n    for x in l1\n\
    \        push!(common, x)\n    end\n    \n    for x in l2\n        push!(common,\
    \ x)\n    end\n    \n    return collect(common)\nend\n</cell>\n<code language=julia-1.4>",
  "    \n    common = Set()\n    \n    for x in l1\n        push!(common, x)\n   \
    \ end\n    \n    for x in l2\n        push!(common, x)\n    end\n    \n    return\
    \ collect(common)\nend\n</cell>\n<code language=julia-1.4>", "    \n    common\
    \ = Set()\n    \n    for x in l1\n        push!(common, x)\n    end\n    \n  \
    \  for x in l2\n        push!(common, x)\n    end\n    \n    common\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    common = Set()\n    for x in l1\n     \
    \   common = common & Set(l2)\n    end\n    \n    return common\nend", "    \n\
    \    common = Set()\n    \n    for x in l1\n        push!(common, x)\n    end\n\
    \    \n    for x in l2\n        push!(common, x)\n    end\n    \n    common\n\
    end", "    \n    common = Set()\n    \n    for x in l1\n        push!(common,\
    \ x)\n    end\n    \n    for x in l2\n        push!(common, x)\n    end\n    \n\
    \    return sort(common)\nend", "    \n    common = Set()\n    \n    for a in\
    \ l1\n        for b in l2\n            if a == b\n                common = Set([a])\n\
    \            else\n                common = Set([a] ++ common)\n        end\n\
    \    end\n    \n    return common\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    common = Set()\n    for x in l1\n        push!(common, x)\n    end\n\
    \    for x in l2\n        push!(common, x)\n    end\n    \n    return collect(common)\n\
    end", "    \n    common = Set()\n    \n    for el1 in l1\n        for el2 in l2\n\
    \            if el1 == el2\n                common = Set([el1])\n            else\n\
    \                common = Set([el1]) \u222A common\n            end\n        end\n\
    \    end\n    \n    return common\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    common = Set()\n    for x in l1\n        common = Set([x] ++ common)\n\
    \    end\n    for x in l2\n        common = Set([x] ++ common)\n    end\n    return\
    \ common\nend", "    \n    common = Set()\n    for x in l1\n        push!(common,\
    \ x)\n    end\n    for x in l2\n        push!(common, x)\n    end\n    \n    return\
    \ collect(common)\nend", "    \n    common = Set()\n    for x in l1\n        push!(common,\
    \ x)\n    end\n    for x in l2\n        push!(common, x)\n    end\n    common\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n    \n  \
    \  for i in l1\n        common.add(i)\n    end\n    \n    for i in l2\n      \
    \  common.add(i)\n    end\n    \n    return common\nend", "    \n    common =\
    \ Set()\n    for x in l1\n        push!(common, x)\n    end\n    for x in l2\n\
    \        push!(common, x)\n    end\n    \n    return collect(common)\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    common = Set()\n    for x in l1\n     \
    \   push!(common, x)\n    end\n    for x in l2\n        push!(common, x)\n   \
    \ end\n    \n    return collect(common)\nend", "    \n    common = Set()\n   \
    \ for x in l1\n        push!(common, x)\n    end\n    for x in l2\n        push!(common,\
    \ x)\n    end\n    \n    common\nend", "    \n    common = Set()\n    for x in\
    \ l1 do \n        common = Set([x] + common)\n    end\n    for x in l2 do \n \
    \       common = Set([x] + common)\n    end\n    return common\nend", "    \n\
    \    common = Set()\n    for x in l1\n        push!(common, x)\n    end\n    for\
    \ x in l2\n        push!(common, x)\n    end\n    common\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9,\
    \ 653, 121])\n</cell>\n<code language=julia-1.5>\n@time common([5, 3, 2, 8], [3,\
    \ 2])\n</cell>\n<code language=julia-1.5>\n@time common([1, 4, 3, 34, 653, 2,\
    \ 5], [5, 7, 1, 5, 9, 653, 121])\n</cell>\n<code language=julia-1.5>\n@time common([5,\
    \ 3, 2, 8], [3, 2])\n</cell>\n<code language=julia-1.5>\n@time common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n</cell>\n<code language=julia-1.5>\n\
    @time common([5, 3, 2, 8], [3, 2])\n</cell>\n<code language=julia-1.5>\n@time\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n</cell>\n<code\
    \ language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n</cell>\n<code\
    \ language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n</cell>\n<code\
    \ language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n</cell>\n<code\
    \ language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n</cell>\n<code\
    \ language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n</cell>\n<code\
    \ language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n</cell>\n<code language=",
  "    \n    common = Set()\n    for x in l1\n        push!(common, x)\n    end\n\
    \    for x in l2\n        push!(common, x)\n    end\n    common\nend", "    \n\
    \    common = Set()\n    for x in l1\n        if x in common\n            continue\n\
    \        for y in l2\n            if y in common\n                continue\n \
    \           if x == y\n                common = Set([x])\n                break\n\
    \        end\n    end\n    return common\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    common = Set()\n    \n    for i in l1\n        common = Set([i | common])\n\
    \    end\n    \n    for i in l2\n        common = Set([i | common])\n    end\n\
    \    \n    return common\nend", "    \n    common = Set()\n    \n    for x in\
    \ l1\n        push!(common, x)\n    end\n    \n    for x in l2\n        push!(common,\
    \ x)\n    end\n    \n    return collect(common)\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    common = Set()\n    for x in l1\n        common = Set([x] ++ common)\n\
    \    end\n    for x in l2\n        common = Set([x] ++ common)\n    end\n    common\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n    \n  \
    \  for x in l1\n        push!(common, x)\n    end\n    \n    for x in l2\n   \
    \     push!(common, x)\n    end\n    \n    return common\nend", "    \n    common\
    \ = Set()\n    \n    for x in l1\n        push!(common, x)\n    end\n    \n  \
    \  for x in l2\n        push!(common, x)\n    end\n    \n    common\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of times each element\
    \ appears in two lists.", "    \n    common = Set()\n    for x in l1\n       \
    \ push!(common, x)\n    end\n    for x in l2\n        push!(common, x)\n    end\n\
    \    common\nend\n</cell>\n<code language=julia-1.5>\n@time common([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n</cell>\n<code language=julia-1.5>\n\
    @time common([5, 3, 2, 8], [3, 2])\n</cell>\n<text>\nExercise\nWrite a function\
    \ that returns the number of unique elements in a given list.", "    \n    common\
    \ = Set()\n    for x in l1\n        common = Set([x] ++ common)\n    end\n   \
    \ for x in l2\n        common = Set([x] ++ common)\n    end\n    return common\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n    for x\
    \ in l1\n        push!(common, x)\n    end\n    for x in l2\n        push!(common,\
    \ x)\n    end\n    \n    return sort(common)\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    common = Set()\n    \n    for x in l1\n        push!(common, x)\n   \
    \ end\n    \n    for x in l2\n        push!(common, x)\n    end\n    \n    common\n\
    end\n</cell>\n<code language=julia-1.5>\n@test common([1, 4, 3, 34, 653, 2, 5],\
    \ [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n@test common([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n</cell>\n<text>\nExercise: Write a function that returns the number\
    \ of unique elements in two vectors.", "    \n    common = Set()\n    \n    for\
    \ x in l1\n        push!(common, x)\n    end\n    \n    for x in l2\n        push!(common,\
    \ x)\n    end\n    \n    common\nend\n</cell>\n<code language=julia-1.3>", " \
    \   \n    common = Set()\n    for x in l1\n        if x in common\n          \
    \  continue\n        push!(common, x)\n    end\n    for x in l2\n        if x\
    \ in common\n            continue\n        push!(common, x)\n    end\n    \n \
    \   return common\nend\n</cell>\n<code language=julia-1.5>", "    \n    common\
    \ = Set()\n    \n    for el in l1\n        if !contains(common, el)\n        \
    \    common = Set([el])\n        else\n            common = Set([el] ++ common)\n\
    \        end\n    end\n    \n    for el in l2\n        if !contains(common, el)\n\
    \            common = Set([el])\n        else\n            common = Set([el] ++\
    \ common)\n        end\n    end\n    \n    return common\nend", "    \n    common\
    \ = Set()\n    for x in l1\n        push!(common, x)\n    end\n    for x in l2\n\
    \        push!(common, x)\n    end\n    \n    return collect(common)\nend", " \
    \   \n    common = Set()\n    \n    for x in l1\n        push!(common, x)\n  \
    \  end\n    \n    for x in l2\n        push!(common, x)\n    end\n    \n    return\
    \ collect(common)\nend\n</cell>\n<code language=julia-1.5>", "    \n    common\
    \ = Set()\n    \n    for x in l1\n        push!(common, x)\n    end\n    \n  \
    \  for x in l2\n        push!(common, x)\n    end\n    \n    return sort(common)\n\
    end", "    \n    common = Set()\n    for x in l1\n        push!(common, x)\n \
    \   end\n    for x in l2\n        push!(common, x)\n    end\n    common\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    common = Set()\n    \n    for\
    \ x in l1\n        push!(common, x)\n    end\n    \n    for x in l2\n        push!(common,\
    \ x)\n    end\n    \n    common\nend", "    \n    common = Set()\n    for x in\
    \ l1\n        push!(common, x)\n    end\n    for x in l2\n        push!(common,\
    \ x)\n    end\n    \n    common\nend", "    \n    common = Set()\n    \n    for\
    \ x in l1\n        push!(common, x)\n    end\n    \n    for x in l2\n        push!(common,\
    \ x)\n    end\n    \n    return collect(common)\nend", "    \n    common = Set()\n\
    \    \n    for x in l1\n        if x in l2\n            common.add(x)\n      \
    \  end\n    end\n    \n    return common\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    common = Set()\n    for elt in l1 \u222A l2\n        common = common\
    \ \u222A Set([elt])\n    end\n    return common\nend\n</cell>\n<text>\nThe function\
    \ above is called common in Julia. Julia has a built-in set data structure that\
    \ allows us to efficiently find common elements. We use the \u222A operator to\
    \ find the common elements. We then return the common elements.", "    \n    common\
    \ = Set()\n    for x in l1\n        push!(common, x)\n    end\n    for x in l2\n\
    \        push!(common, x)\n    end\n    common\nend\n</code>\n<|/ a tags=julia,set\
    \ |>\n<| c |>\nThis doesn't work for me. `julia> common([1,2,3], [4,5,6])\n2-element\
    \ Array{Int64,1}:\n 3\n 2`\n<|/ c |>\n<| c |>\nI tested it on Julia 0.6.2 and\
    \ it works. I guess you used a previous version of Julia.\n<|/ c |>\n<| c |>\n\
    I tested it on Julia 0.6.2 and it works. I guess you used a previous version of\
    \ Julia.\n<|/ c |>\n<| c |>\nI tested it on Julia 0.6.2 and it works. I guess\
    \ you used a previous version of Julia.\n<|/ c |>\n<| c |>\nI tested it on Julia\
    \ 0.6.2 and it works. I guess you used a previous version of Julia.\n<|/ c |>\n\
    <| a dscore=2 |>\nI wrote a package for this:\nhttps://github.com/JuliaCollections/Sets.jl\n\
    <code>\njulia> using Sets", "    \n    common = Set()\n    \n    for el1 in l1\n\
    \        for el2 in l2\n            if el1 == el2\n                common = Set([el1])\n\
    \            else\n                common = Set([el1]) \u222A common\n       \
    \     end\n        end\n    end\n    \n    return common\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    common = Set()\n    for x in l1\n        push!(common,\
    \ x)\n    end\n    for x in l2\n        push!(common, x)\n    end\n    \n    return\
    \ collect(common)\nend", "    \n    common = Set()\n    for el in l1 \u222A l2\n\
    \        common = common \u222A Set([el])\n    end\n    return common\nend", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    common =\
    \ Set()\n    \n    for el1 in l1\n        for el2 in l2\n            if el1 ==\
    \ el2\n                common = Set([el1])\n            else\n               \
    \ common = Set([el1]) \u222A common\n            end\n        end\n    end\n \
    \   \n    return common\nend", "    \n    common = Set()\n    \n    for i in l1\n\
    \        common.add(i)\n    end\n    \n    for i in l2\n        common.add(i)\n\
    \    end\n    \n    return common\nend", "    \n    common = Set()\n    for x\
    \ in l1\n        push!(common, x)\n    end\n    for x in l2\n        push!(common,\
    \ x)\n    end\n    common\nend", "    \n    common = Set()\n    \n    for x in\
    \ l1\n        push!(common, x)\n    end\n    \n    for x in l2\n        push!(common,\
    \ x)\n    end\n    \n    common\nend", "    \n    common = Set()\n    common =\
    \ Set([i for i in l1 if i in l2])\n    common = Set([i for i in l2 if i in l1])\n\
    \    common = Set([i for i in l1 if i in l2])\n    common = Set([i for i in l2\
    \ if i in l1])\n    common = Set([i for i in l1 if i in l2])\n    common = Set([i\
    \ for i in l2 if i in l1])\n    common = Set([i for i in l1 if i in l2])\n   \
    \ common = Set([i for i in l2 if i in l1])\n    common = Set([i for i in l1 if\
    \ i in l2])\n    common = Set([i for i in l2 if i in l1])\n    common = Set([i\
    \ for i in l1 if i in l2])\n    common = Set([i for i in l2 if i in l1])\n   \
    \ common = Set([i for i in l1 if i in l2])\n    common = Set([i for i in l2 if\
    \ i in l1])\n    common = Set([i for i in l1 if i in l2])\n    common = Set([i\
    \ for i in l2 if i in l1])\n    common = Set([i for i in l1 if i in l2])\n   \
    \ common = Set([i for i in l2 if i in l1])\n    common = Set([i for i in l1 if\
    \ i in l2])\n    common = Set([i for i in l2 if i in l1])\n    common = Set([i\
    \ for i in l1 if i in l2])\n    common = Set([i for i in l2 if i in l1])\n   \
    \ common = Set([i for i in l1 if i in l2])\n    common = Set([i for i in l2 if\
    \ i in l1])\n    common = Set([i for i in l1 if i in l2])\n    common = Set([i\
    \ for i in l2 if i in l1])\n    common = Set([i for i in l1 if i in l2])\n   \
    \ common = Set([i for i in l2 if i in l1])\n    common = Set([i for i in l1 if\
    \ i in l2])\n    common = Set([i for i in l2 if i in l1])\n    common = Set([i\
    \ for i in l1 if i in l2])\n    common = Set([i for i in l2 if i in l1])\n   \
    \ common = Set([i for i in l1 if i in l2])\n    common = Set([i for i in l2 if\
    \ i in l1])\n    common = Set([i for i in l1 if i in l2])\n    common = Set([i\
    \ for i in l2 if i in l1])\n    common = Set([i for i in l1 if i in l2])\n   \
    \ common = Set([i for i in l2 if i in l1])\n    common = Set([i for i in l1 if\
    \ i in l2])\n    common = Set([i for i in l2 if i in l1])\n    common = Set",
  "    \n    common = Set()\n    for x in l1\n        push!(common, x)\n    end\n\
    \    for x in l2\n        push!(common, x)\n    end\n    common\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    common = Set()\n    for x in l1\n     \
    \   push!(common, x)\n    end\n    for x in l2\n        push!(common, x)\n   \
    \ end\n    common\nend\n</cell>\n<text>\nThe function above returns a sorted unique\
    \ common elements for two lists.", "    \n    common = Set()\n    \n    for x\
    \ in l1\n        push!(common, x)\n    end\n    \n    for x in l2\n        push!(common,\
    \ x)\n    end\n    \n    return collect(common)\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    common = Set()\n    \n    for x in l1\n        push!(common, x)\n   \
    \ end\n    \n    for x in l2\n        push!(common, x)\n    end\n    \n    common\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n    for x\
    \ in l1\n        if x in common\n            push!(common, x)\n        else\n\
    \            push!(common, x)\n        end\n    end\n    for x in l2\n       \
    \ if x in common\n            push!(common, x)\n        else\n            push!(common,\
    \ x)\n        end\n    end\n    common\nend", "    \n    common = Set()\n    for\
    \ x in l1\n        push!(common, x)\n    end\n    for x in l2\n        push!(common,\
    \ x)\n    end\n    \n    return sort(common)\nend", "    \n    common = Set()\n\
    \    \n    for x in l1 do \n        if x in l2 \n            common = common.add(x)\n\
    \        end\n    end\n    \n    return common\nend", "    \n    common = Set()\n\
    \    \n    for x in l1\n        push!(common, x)\n    end\n    \n    for x in\
    \ l2\n        push!(common, x)\n    end\n    \n    return common\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    common = Set()\n    \n    for a in l1\n\
    \        for b in l2\n            if a == b\n                common = Set([a])\n\
    \                break\n        end\n    end\n    \n    return common\nend", " \
    \   \n    common = Set()\n    \n    for x in l1\n        push!(common, x)\n  \
    \  end\n    \n    for x in l2\n        push!(common, x)\n    end\n    \n    return\
    \ sort(common)\nend\n</cell>\n<code language=julia-1.5>", "    \n    common =\
    \ Set()\n    \n    for x in l1\n        push!(common, x)\n    end\n    \n    for\
    \ x in l2\n        push!(common, x)\n    end\n    \n    return collect(common)\n\
    end", "    \n    common = Set()\n    \n    for x in l1\n        push!(common,\
    \ x)\n    end\n    \n    for x in l2\n        push!(common, x)\n    end\n    \n\
    \    common\nend\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n\
    \    \n    for i in l1\n        push!(common, i)\n    end\n    \n    for i in\
    \ l2\n        push!(common, i)\n    end\n    \n    return collect(common)\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of times\
    \ a value appears in two lists.", "    \n    common = Set()\n    \n    for a in\
    \ l1\n        for b in l2\n            if a == b\n                common.add(a)\n\
    \            end\n        end\n    end\n    \n    return common\nend", "    \n\
    \    common = Set()\n    for x in l1\n        push!(common, x)\n    end\n    for\
    \ x in l2\n        push!(common, x)\n    end\n    \n    return collect(common)\n\
    end", "    \n    common = Set()\n    \n    for x in l1\n        push!(common,\
    \ x)\n    end\n    \n    for x in l2\n        push!(common, x)\n    end\n    \n\
    \    common\nend\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n\
    \    \n    for el in l1 do \n        if !contains(common, el) then \n        \
    \    common = Set([el])\n        else \n            common = Set([el] + common)\n\
    \        end\n    end\n    \n    for el in l2 do \n        if !contains(common,\
    \ el) then \n            common = Set([el])\n        else \n            common\
    \ = Set([el] + common)\n        end\n    end\n    \n    return common\nend\n</code>\n\
    <|/ a tags=julia,set |>\n<| c |>\nI like this solution, but I wonder if there\
    \ is a way to avoid the O(n^2) complexity of the `contains` calls.\n<|/ c |>\n\
    <| c |>\nI added a solution that avoids O(n^2) complexity\n<|/ c |>\n<| a tags=julia,set\
    \ |>\nThe solution by is great, but I wanted to add an alternative that uses only\
    \ a single loop and is also faster than the solution by (at least on my machine):\n\
    <code>", "    \n    common = Set()\n    \n    for x in l1\n        push!(common,\
    \ x)\n    end\n    \n    for x in l2\n        push!(common, x)\n    end\n    \n\
    \    return collect(common)\nend\n</cell>\n<code language=julia-1.5>\n@time common([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n</cell>\n<code language=julia-1.5>\n\
    @time common([5, 3, 2, 8], [3, 2])\n</cell>\n<code language=julia-1.5>\n@time\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n</cell>\n<code\
    \ language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the number of common elements in two vectors.",
  "    \n    common = Set()\n    for x in l1\n        push!(common, x)\n    end\n\
    \    for x in l2\n        push!(common, x)\n    end\n    \n    return collect(common)\n\
    end", "    \n    common = Set()\n    \n    for el in l1\n        common = Set([el])\
    \ & common\n    end\n    \n    for el in l2\n        common = Set([el]) & common\n\
    \    end\n    \n    return common\nend", "    \n    common = Set()\n    \n   \
    \ for x in l1 do \n        common = Set([x] ++ common)\n    end\n    \n    for\
    \ x in l2 do \n        common = Set([x] ++ common)\n    end\n    \n    return\
    \ common\nend", "    \n    common = Set()\n    \n    for a in l1\n        for\
    \ b in l2\n            if a == b\n                common.add(a)\n            end\n\
    \        end\n    end\n    \n    return common\nend", "    \n    common = Set()\n\
    \    \n    for i in l1\n        common.add(i)\n    end\n    \n    for i in l2\n\
    \        common.add(i)\n    end\n    \n    return common\nend", "    \n    common\
    \ = Set()\n    \n    for x in l1\n        push!(common, x)\n    end\n    \n  \
    \  for x in l2\n        push!(common, x)\n    end\n    \n    return common\nend",
  "    \n    common = Set()\n    \n    for x in l1\n        push!(common, x)\n   \
    \ end\n    \n    for x in l2\n        push!(common, x)\n    end\n    \n    return\
    \ collect(common)\nend", "    \n    common = Set()\n    for x in l1\n        common\
    \ = Set([x] ++ common)\n    end\n    for x in l2\n        common = Set([x] ++\
    \ common)\n    end\n    return common\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    common = Set()\n    \n    for elt in l1 \n        common = Set([elt]\
    \ + common)\n    end\n    \n    for elt in l2 \n        common = Set([elt] + common)\n\
    \    end\n    \n    return common\nend\n</cell>\n<code language=julia-1.3>", " \
    \   \n    common = Set()\n    for x in l1\n        push!(common, x)\n    end\n\
    \    for x in l2\n        push!(common, x)\n    end\n    \n    return sort(common)\n\
    end", "    \n    common = Set()\n    \n    for x in l1\n        push!(common,\
    \ x)\n    end\n    \n    for x in l2\n        push!(common, x)\n    end\n    \n\
    \    return collect(common)\nend\n</cell>\n<code language=julia-1.5>", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
