name: HumanEval_125_split_words
language: julia
results:
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6cxhex_a.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp6cxhex_a.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp6cxhex_a.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    if length(words) ==\
    \ 0 \n        return 0 \n    else \n        return length(words) \n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nsplit_words(\"Hello world!\")\n</cell>\n<code\
    \ language=julia-1.5>\nsplit_words(\"Hello,world!\")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"abcdef\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of words in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnbara252.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnbara252.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if length(txt) == 0 \n        return [] \n    else \n        words\
    \ = split(txt, ' ') \n        words_without_commas = filter(x -> x != ',', words)\
    \ \n        words_without_commas_without_spaces = filter(x -> x != ' ', words_without_commas)\
    \ \n        words_without_commas_without_spaces_without_commas = filter(x -> x\
    \ != ',', words_without_commas_without_spaces) \n        words_without_commas_without_spaces_without_commas_without_spaces\
    \ = filter(x -> x != ' ', words_without_commas_without_spaces_without_commas)\
    \ \n        words_without_commas_without_spaces_without_commas_without_spaces_without_commas\
    \ = filter(x -> x != ',', words_without_commas_without_spaces_without_commas_without_spaces)\
    \ \n        words_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces\
    \ = filter(x -> x != ' ', words_without_commas_without_spaces_without_commas_without_spaces_without_commas)\
    \ \n        words_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas\
    \ = filter(x -> x != ',', words_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces)\
    \ \n        words_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces\
    \ = filter(x -> x != ' ', words_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas)\
    \ \n        words_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas\
    \ = filter(x -> x != ',', words_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas)\
    \ \n        words_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas\
    \ = filter(x -> x != ' ', words_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces)\
    \ \n        words_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas\
    \ = filter(x -> x != ',', words_without_commas_without_spaces_without_commas_without_space\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptfzv3901.jl:26\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptfzv3901.jl:26\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    if isempty(txt)\n        return txt\n    else\n        words\
    \ = split(txt, \" \")\n        \n        words_split = Array{String}(undef, 0)\n\
    \        \n        for word in words\n            words_split = vcat(words_split,\
    \ split(word))\n        end\n        \n        words_split = words_split[findall(words_split\
    \ .!= \"\")] \n        \n        words_split = words_split[findall(words_split\
    \ .!= \" \")]\n        \n        words_split = words_split[findall(words_split\
    \ .!= \",\")]\n        \n        words_split = words_split[findall(words_split\
    \ .!= \" ,\")]\n        \n        words_split = words_split[findall(words_split\
    \ .!= \" ,.\")]\n        \n        words_split = words_split[findall(words_split\
    \ .!= \" ,..\")]\n        \n        words_split = words_split[findall(words_split\
    \ .!= \" ,...\")]\n        \n        words_split = words_split[findall(words_split\
    \ .!= \" ,....\")]\n        \n        words_split = words_split[findall(words_split\
    \ .!= \" ,.....\")]\n        \n        words_split = words_split[findall(words_split\
    \ .!= \" ,......\")]\n        \n        words_split = words_split[findall(words_split\
    \ .!= \" ,.......\")]\n        \n        words_split = words_split[findall(words_split\
    \ .!= \" ,........\")]\n        \n        words_split = words_split[findall(words_split\
    \ .!= \" ,.........\")]\n        \n        words_split = words_split[findall(words_split\
    \ .!= \" ,..........\")]\n        \n        words_split = words_split[findall(words_split\
    \ .!= \" ,...........\")]\n        \n        words_split = words_split[findall(words_split\
    \ .!= \" ,............\")]\n        \n        words_split = words_split[findall(words_split\
    \ .!= \" ,.............\")]\n        \n        words_split = words_split[findall(words_split\
    \ .!= \" ,..............\")]\n        \n        words_split = words_split[findall(words_split\
    \ .!= \" ,...............\")]\n        \n        words_split = words_split[findall(words_split\
    \ .!= \" ,...............\")]\n        \n        words_split = words_split[findall(words_split\
    \ .!= \" ,..............\")]\n        \n        words_split = words_split[findall(words_split\
    \ .!= \" ,..............\")]\n        \n        words_split = words_split[findall(words_split\
    \ .!= \" ,..............\")]\n        \n        words_split = words_split[findall(words_split\
    \ .!= \" ,..............\")]\n        \n        words_split = words_split[findall(words_split\
    \ .\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \".\" not allowed in \"words_split\
    \ .\" at /tmp/tmpxtp7jbtv.jl:71\nStacktrace:\n [1] top-level scope at /tmp/tmpxtp7jbtv.jl:71\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpxtp7jbtv.jl:71\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \" \"]\n    words = [w for w in words if w != \"-\"]\n    words\
    \ = [w for w in words if w != \"_\"]\n    words = [w for w in words if w != \"\
    ?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for w in words\
    \ if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w\
    \ for w in words if w != \"-\"]\n    words = [w for w in words if w != \"_\"]\n\
    \    words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"-\"]\n  \
    \  words = [w for w in words if w != \"_\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"-\"]\n    words = [w for w in words if\
    \ w != \"_\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"-\"]\n    words = [w for w in words if w != \"_\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"-\"]\n    words = [w for\
    \ w in words if w != \"_\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjped778z.jl:56\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjped778z.jl:56\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    if length(words) ==\
    \ 0\n        return words\n    elseif length(words) == 1\n        return words\n\
    \    else\n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \nusing Test\n\n@testset begin\n\n\
    candidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"\
    world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t\
    @test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpdif1gau4.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpdif1gau4.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpdif1gau4.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    words_split = Vector{String}(undef,\
    \ 0)\n    \n    for word in words\n        words_split = words_split ++ split(word,\
    \ \",\")\n    end\n    \n    words_split = words_split ++ [length(words)]\n  \
    \  \n    words_split = words_split .- words_split .% 2\n    \n    words_split\
    \ = words_split .- words_split .% 26\n    \n    words_split = words_split .- words_split\
    \ .% 26\n    \n    words_split = words_split .- words_split .% 26\n    \n    words_split\
    \ = words_split .- words_split .% 26\n    \n    words_split = words_split .- words_split\
    \ .% 26\n    \n    words_split = words_split .- words_split .% 26\n    \n    words_split\
    \ = words_split .- words_split .% 26\n    \n    words_split = words_split .- words_split\
    \ .% 26\n    \n    words_split = words_split .- words_split .% 26\n    \n    words_split\
    \ = words_split .- words_split .% 26\n    \n    words_split = words_split .- words_split\
    \ .% 26\n    \n    words_split = words_split .- words_split .% 26\n    \n    words_split\
    \ = words_split .- words_split .% 26\n    \n    words_split = words_split .- words_split\
    \ .% 26\n    \n    words_split = words_split .- words_split .% 26\n    \n    words_split\
    \ = words_split .- words_split .% 26\n    \n    words_split = words_split .- words_split\
    \ .% 26\n    \n    words_split = words_split .- words_split .% 26\n    \n    words_split\
    \ = words_split .- words_split .% 26\n    \n    words_split = words_split .- words_split\
    \ .% 26\n    \n    words_split = words_split .- words_split .% 26\n    \n    words_split\
    \ = words_split .- words_split .% 26\n    \n    words_split = words_split .- words_split\
    \ .% 26\n    \n    words_split = words_split .- words_split .% 26\n    \n    words_split\
    \ = words_split .- words_split .% 26\n    \n    words_split = words_split .- words_split\
    \ .% 26\n    \n    words_split = words_split .- words_split .% 26\n    \n    words_split\
    \ = words_split .- words_split .% 26\n    \n    words_split = words_split .- words_split\
    \ .% 26\n    \n    words_split = words_split .\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \".\" not allowed in \"words_split\
    \ .\" at /tmp/tmp9tmu0x0r.jl:82\nStacktrace:\n [1] top-level scope at /tmp/tmp9tmu0x0r.jl:82\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp9tmu0x0r.jl:82\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return txt\n    \n\
    \    words = split(txt, \" \")\n    \n    words_split = []\n    for word in words\n\
    \        words_split.push(word)\n    end\n    \n    words_split = words_split[words_split\
    \ .!= \"\"]\n    \n    words_split = words_split[words_split .!= \",\"]\n    \n\
    \    words_split = words_split[words_split .!= \".\"]\n    \n    words_split =\
    \ words_split[words_split .!= \",.\"]\n    \n    words_split = words_split[words_split\
    \ .!= \",,\"]\n    \n    words_split = words_split[words_split .!= \",,,\"]\n\
    \    \n    words_split = words_split[words_split .!= \",,,,\"]\n    \n    words_split\
    \ = words_split[words_split .!= \",,,,,\"]\n    \n    words_split = words_split[words_split\
    \ .!= \",,,,,,\"]\n    \n    words_split = words_split[words_split .!= \",,,,,,,\"\
    ]\n    \n    words_split = words_split[words_split .!= \",,,,,,,,\"]\n    \n \
    \   words_split = words_split[words_split .!= \",,,,,,,,,\"]\n    \n    words_split\
    \ = words_split[words_split .!= \",,,,,,,,,,\"]\n    \n    words_split = words_split[words_split\
    \ .!= \",,,,,,,,,,,\"]\n    \n    words_split = words_split[words_split .!= \"\
    ,,,,,,,,,,,,\"]\n    \n    words_split = words_split[words_split .!= \",,,,,,,,,,,,,\"\
    ]\n    \n    words_split = words_split[words_split .!= \",,,,,,,,,,,,,,\"]\n \
    \   \n    words_split = words_split[words_split .!= \",,,,,,,,,,,,,,,\"]\n   \
    \ \n    words_split = words_split[words_split .!= \",,,,,,,,,,,,,,,,\"]\n    \n\
    \    words_split = words_split[words_split .!= \",,,,,,,,,,,,,,,,,\"]\n    \n\
    \    words_split = words_split[words_split .!= \",,,,,,,,,,,,,,,,,,\"]\n    \n\
    \    words_split = words_split[words_split .!= \",,,,,,,,,,,,,,,,,,,\"]\n    \n\
    \    words_split = words_split[words_split .!= \",,,,,,,,,,,,,,,,,,,,\"]\n   \
    \ \n    words_split = words_split[words_split .!= \",,,,,,,,,,,,,,,,,,,\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq186i0r0.jl:74\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpq186i0r0.jl:74\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfuqemi7t.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpfuqemi7t.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpfuqemi7t.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1ik65nqf.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp1ik65nqf.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp1ik65nqf.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe1wanhp3.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpe1wanhp3.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpe1wanhp3.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    \n    if length(words) == 0\n  \
    \      return words\n    \n    if length(words) == 1 \n        return words\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpghtbe45y.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpghtbe45y.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    words = [w for w in words if w != \"\"\
    ]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \" \"]\n    words = [w for w in words if w != \"\\n\"]\n    words =\
    \ [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\
    \\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in\
    \ words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n   \
    \ words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if\
    \ w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w\
    \ for w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\\
    n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in\
    \ words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n   \
    \ words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words if\
    \ w != \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w\
    \ for w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\\
    t\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w for w in\
    \ words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n   \
    \ words = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if\
    \ w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w\
    \ for w in words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\\
    r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in\
    \ words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n   \
    \ words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if\
    \ w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w\
    \ for w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\\
    n\"]\n    words = [w for w in words if w != \"\\r\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp80aoolmi.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp80aoolmi.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp80aoolmi.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    if isempty(txt)\n        return txt\n    else\n        \n\
    \        words = split(txt, \" \")\n        \n        words_split = Vector{String}(undef,\
    \ 0)\n        \n        for word in words\n            words_split = words_split\
    \ ++ split(word, \",\")\n        end\n        \n        words_split = words_split\
    \ ++ [split(lowercase(txt), \"\")]\n        \n        words_split = words_split\
    \ .- [\"!\"]\n        \n        words_split = words_split .- [\"?\"]\n       \
    \ \n        words_split = words_split .- [\".\"]\n        \n        words_split\
    \ = words_split .- [\"-\"]\n        \n        words_split = words_split .- [\"\
    _\"]\n        \n        words_split = words_split .- [\":\"]\n        \n     \
    \   words_split = words_split .- [\";\"]\n        \n        words_split = words_split\
    \ .- [\"/\"]\n        \n        words_split = words_split .- [\"\\\\\"]\n    \
    \    \n        words_split = words_split .- [\"[\"]\n        \n        words_split\
    \ = words_split .- [\"]\"]\n        \n        words_split = words_split .- [\"\
    {\"]\n        \n        words_split = words_split .- [\"}\"]\n        \n     \
    \   words_split = words_split .- [\"(\"]\n        \n        words_split = words_split\
    \ .- [\")\"]\n        \n        words_split = words_split .- [\"[\"]\n       \
    \ \n        words_split = words_split .- [\"]\"]\n        \n        words_split\
    \ = words_split .- [\"{\"]\n        \n        words_split = words_split .- [\"\
    }\"]\n        \n        words_split = words_split .- [\":\"]\n        \n     \
    \   words_split = words_split .- [\";\"]\n        \n        words_split = words_split\
    \ .- [\"/\"]\n        \n        words_split = words_split .- [\"\\\\\"]\n    \
    \    \n        words_split = words_split .- [\"[\"]\n        \n        words_split\
    \ = words_split .- [\"]\"]\n        \n        words_split = words_split .- [\"\
    {\"]\n        \n        words_split = words_split .- [\"}\"]\n        \n     \
    \   words_split = words_split .- [\"(\"]\n        \n        words_split = words_split\
    \ .- [\")\"]\n        \n        words_split = words_split .- [\"[\"]\n       \
    \ \n        words_split = words_split .- [\"]\"]\n        \n        words_split\
    \ = words_split .- [\"{\"]\n        \n        words_split = words_split .- [\"\
    }\"]\n        \n        words_split = words_split .- [\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb8kwc2yc.jl:98\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpb8kwc2yc.jl:98\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_split = Vector{String}(undef,\
    \ 0)\n    for word in words\n        if !isempty(word)\n            words_split\
    \ = words_split ++ [word]\n        end\n    end\n    words_split = words_split\
    \ ++ [split(txt, \",\")]\n    words_split = words_split ++ [split(txt, \" \")]\n\
    \    words_split = words_split ++ [split(txt, \";\")]\n    words_split = words_split\
    \ ++ [split(txt, \":\")]\n    words_split = words_split ++ [split(txt, \",;:\"\
    )]\n    words_split = words_split ++ [split(txt, \",;\")]\n    words_split = words_split\
    \ ++ [split(txt, \":;\")]\n    words_split = words_split ++ [split(txt, \":;\"\
    )]\n    words_split = words_split ++ [split(txt, \":\")]\n    words_split = words_split\
    \ ++ [split(txt, \":;\")]\n    words_split = words_split ++ [split(txt, \":;\"\
    )]\n    words_split = words_split ++ [split(txt, \":;\")]\n    words_split = words_split\
    \ ++ [split(txt, \":;\")]\n    words_split = words_split ++ [split(txt, \":;\"\
    )]\n    words_split = words_split ++ [split(txt, \":;\")]\n    words_split = words_split\
    \ ++ [split(txt, \":;\")]\n    words_split = words_split ++ [split(txt, \":;\"\
    )]\n    words_split = words_split ++ [split(txt, \":;\")]\n    words_split = words_split\
    \ ++ [split(txt, \":;\")]\n    words_split = words_split ++ [split(txt, \":;\"\
    )]\n    words_split = words_split ++ [split(txt, \":;\")]\n    words_split = words_split\
    \ ++ [split(txt, \":;\")]\n    words_split = words_split ++ [split(txt, \":;\"\
    )]\n    words_split = words_split ++ [split(txt, \":;\")]\n    words_split = words_split\
    \ ++ [split(txt, \":;\")]\n    words_split = words_split ++ [split(txt, \":;\"\
    )]\n    words_split = words_split ++ [split(txt, \":;\")]\n    words_split = words_split\
    \ ++ [split(txt, \":;\")]\n    words_split = words_split ++ [split(txt, \":;\"\
    )]\n    words_split = words_split ++ [split(txt, \":;\")]\n    words_split = words_split\
    \ ++ [split(txt, \":;\")]\n    words_split = words_split ++ [split(txt, \":;\"\
    )]\n    words_split = words_split ++ [split(txt, \":;\")]\n    words_split = words_split\
    \ ++ [split(txt, \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t\
    @test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbo_j30ip.jl:54\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbo_j30ip.jl:54\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if isempty(txt)\n        return txt\n   \
    \ elseif isequal(txt, \"\")\n        return txt\n    elseif isequal(txt, \"\\\
    n\")\n        return txt\n    elseif isequal(txt, \" \")\n        return txt\n\
    \    elseif isequal(txt, \"\\t\")\n        return txt\n    elseif isequal(txt,\
    \ \"\\r\")\n        return txt\n    elseif isequal(txt, \"\\n\")\n        return\
    \ txt\n    elseif isequal(txt, \"\\r\\n\")\n        return txt\n    elseif isequal(txt,\
    \ \"\\t\")\n        return txt\n    elseif isequal(txt, \"\\n\")\n        return\
    \ txt\n    elseif isequal(txt, \"\\r\\n\")\n        return txt\n    elseif isequal(txt,\
    \ \"\\r\")\n        return txt\n    elseif isequal(txt, \"\\t\")\n        return\
    \ txt\n    elseif isequal(txt, \"\\n\")\n        return txt\n    elseif isequal(txt,\
    \ \"\\r\\n\")\n        return txt\n    elseif isequal(txt, \"\\r\")\n        return\
    \ txt\n    elseif isequal(txt, \"\\t\")\n        return txt\n    elseif isequal(txt,\
    \ \"\\n\")\n        return txt\n    elseif isequal(txt, \"\\r\\n\")\n        return\
    \ txt\n    elseif isequal(txt, \"\\r\")\n        return txt\n    elseif isequal(txt,\
    \ \"\\t\")\n        return txt\n    elseif isequal(txt, \"\\n\")\n        return\
    \ txt\n    elseif isequal(txt, \"\\r\\n\")\n        return txt\n    elseif isequal(txt,\
    \ \"\\r\")\n        return txt\n    elseif isequal(txt, \"\\t\")\n        return\
    \ txt\n    elseif isequal(txt, \"\\n\")\n        return txt\n    elseif isequal(txt,\
    \ \"\\r\\n\")\n        return txt\n    elseif isequal(txt, \"\\r\")\n        return\
    \ txt\n    elseif isequal(txt, \"\\t\")\n        return txt\n    elseif isequal(txt,\
    \ \"\\n\")\n        return txt\n    elseif isequal(txt, \"\\r\\n\")\n        return\
    \ txt\n    elseif isequal(txt, \"\\r\")\n        return txt\n    elseif isequal(txt,\
    \ \"\\t\")\n        return txt\n    elseif isequal(txt, \"\\n\")\n        return\
    \ txt\n    elseif isequal(txt, \"\\r\\n\")\n        return txt\n    elseif isequal(txt,\
    \ \"\\r\")\n        return txt\n    elseif isequal(txt, \"\\t\")\n        return\
    \ txt\n    elseif isequal(txt, \"\\n\")\n        return txt\n    elseif isequal(txt,\
    \ \"\\r\\n\")\n        return txt\n    elseif isequal(txt, \"\\r\")\n        return\
    \ txt\n    elseif isequal(txt, \"\\t\")\n        return txt\n    elseif isequal(txt,\
    \ \"\\n\")\n        return txt\n    elseif isequal(txt, \"\\r\\n\")\n        return\
    \ txt\n    elseif \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing condition in \"elseif\" at /tmp/tmpuhq6sefz.jl:98\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpuhq6sefz.jl:99\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpuhq6sefz.jl:99\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_split = split(txt, \",\")\n\
    \    words_split2 = split(txt, \",\")\n    words_split3 = split(txt, \",\")\n\
    \    words_split4 = split(txt, \",\")\n    words_split5 = split(txt, \",\")\n\
    \    words_split6 = split(txt, \",\")\n    words_split7 = split(txt, \",\")\n\
    \    words_split8 = split(txt, \",\")\n    words_split9 = split(txt, \",\")\n\
    \    words_split10 = split(txt, \",\")\n    words_split11 = split(txt, \",\")\n\
    \    words_split12 = split(txt, \",\")\n    words_split13 = split(txt, \",\")\n\
    \    words_split14 = split(txt, \",\")\n    words_split15 = split(txt, \",\")\n\
    \    words_split16 = split(txt, \",\")\n    words_split17 = split(txt, \",\")\n\
    \    words_split18 = split(txt, \",\")\n    words_split19 = split(txt, \",\")\n\
    \    words_split20 = split(txt, \",\")\n    words_split21 = split(txt, \",\")\n\
    \    words_split22 = split(txt, \",\")\n    words_split23 = split(txt, \",\")\n\
    \    words_split24 = split(txt, \",\")\n    words_split25 = split(txt, \",\")\n\
    \    words_split26 = split(txt, \",\")\n    words_split27 = split(txt, \",\")\n\
    \    words_split28 = split(txt, \",\")\n    words_split29 = split(txt, \",\")\n\
    \    words_split30 = split(txt, \",\")\n    words_split31 = split(txt, \",\")\n\
    \    words_split32 = split(txt, \",\")\n    words_split33 = split(txt, \",\")\n\
    \    words_split34 = split(txt, \",\")\n    words_split35 = split(txt, \",\")\n\
    \    words_split36 = split(txt, \",\")\n    words_split37 = split(txt, \",\")\n\
    \    words_split38 = split(txt, \",\")\n    words_split39 = split(txt, \",\")\n\
    \    words_split40 = split(txt, \",\")\n    words_split41 = split(txt, \",\")\n\
    \    words_split42 = split(txt, \",\")\n    words_split43 = split(txt, \",\")\n\
    \    words_split44 = split(txt, \",\")\n    words_split45 = split(txt, \",\")\n\
    \    words_split46 = split(txt, \",\")\n    words_split47 = split(txt, \",\")\n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppbhfkijw.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmppbhfkijw.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmppbhfkijw.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    txt = txt.trim()\n    if txt == \"\"\n        return txt\n\
    \    elseif txt == \"\\n\"\n        return txt\n    elseif txt == \"\\t\"\n  \
    \      return txt\n    elseif txt == \"\\r\"\n        return txt\n    elseif txt\
    \ == \"\\t\"\n        return txt\n    elseif txt == \"\\n\"\n        return txt\n\
    \    elseif txt == \"\\r\"\n        return txt\n    elseif txt == \"\\n\"\n  \
    \      return txt\n    elseif txt == \"\\t\"\n        return txt\n    elseif txt\
    \ == \"\\r\"\n        return txt\n    elseif txt == \"\\n\"\n        return txt\n\
    \    elseif txt == \"\\t\"\n        return txt\n    elseif txt == \"\\r\"\n  \
    \      return txt\n    elseif txt == \"\\n\"\n        return txt\n    elseif txt\
    \ == \"\\t\"\n        return txt\n    elseif txt == \"\\r\"\n        return txt\n\
    \    elseif txt == \"\\n\"\n        return txt\n    elseif txt == \"\\t\"\n  \
    \      return txt\n    elseif txt == \"\\r\"\n        return txt\n    elseif txt\
    \ == \"\\n\"\n        return txt\n    elseif txt == \"\\t\"\n        return txt\n\
    \    elseif txt == \"\\r\"\n        return txt\n    elseif txt == \"\\n\"\n  \
    \      return txt\n    elseif txt == \"\\t\"\n        return txt\n    elseif txt\
    \ == \"\\r\"\n        return txt\n    elseif txt == \"\\n\"\n        return txt\n\
    \    elseif txt == \"\\t\"\n        return txt\n    elseif txt == \"\\r\"\n  \
    \      return txt\n    elseif txt == \"\\n\"\n        return txt\n    elseif txt\
    \ == \"\\t\"\n        return txt\n    elseif txt == \"\\r\"\n        return txt\n\
    \    elseif txt == \"\\n\"\n        return txt\n    elseif txt == \"\\t\"\n  \
    \      return txt\n    elseif txt == \"\\r\"\n        return txt\n    elseif txt\
    \ == \"\\n\"\n        return txt\n    elseif txt == \"\\t\"\n        return txt\n\
    \    elseif txt == \"\\r\"\n        return txt\n    elseif txt == \"\\n\"\n  \
    \      return txt\n    elseif txt == \"\\t\"\n        return txt\n    elseif txt\
    \ == \"\\r\"\n        return txt\n    elseif txt == \"\\n\"\n        return txt\n\
    \    elseif txt == \"\\t\"\n        return txt\n    elseif txt == \"\\r\"\n  \
    \      return txt\n    elseif txt == \"\\n\"\n        return txt\n    elseif txt\
    \ == \"\\t\"\n        return txt\n    elseif txt == \"\\r\"\n        return txt\n\
    \    elseif txt == \"\\n\"\n        return txt\n    elseif txt == \"\\t\"\n  \
    \      return txt\n    elseif txt == \"\\r\"\n        return txt\n    elseif txt\
    \ == \"\\n\"\n        return txt\n    elseif txt == \"\\t\"\n        return txt\n\
    \    elseif txt == \"\\r\"\n        return txt\n    else\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp__dr8bok.jl:115\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp__dr8bok.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp__dr8bok.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    if length(words) ==\
    \ 0 \n        return 0 \n    else \n        \n        words = [w for w in words\
    \ if w != \"\"]\n        \n        if length(words) == 0 \n            return\
    \ 0 \n        else \n            \n            words = [w for w in words if w\
    \ != \",\"]\n            \n            if length(words) == 0 \n              \
    \  return 0 \n            else \n                \n                words = [w\
    \ for w in words if w != \"a\" and w != \"b\" and w != \"c\" and w != \"d\" and\
    \ w != \"e\" and w != \"f\" and w != \"g\" and w != \"h\" and w != \"i\" and w\
    \ != \"j\" and w != \"k\" and w != \"l\" and w != \"m\" and w != \"n\" and w !=\
    \ \"o\" and w != \"p\" and w != \"q\" and w != \"r\" and w != \"s\" and w != \"\
    t\" and w != \"u\" and w != \"v\" and w != \"w\" and w != \"x\" and w != \"y\"\
    \ and w != \"z\"]\n                \n                if length(words) == 0 \n\
    \                    return 0 \n                else \n                    \n\
    \                    words = [w for w in words if w != \"\"]\n               \
    \     \n                    if length(words) == 0 \n                        return\
    \ 0 \n                    else \n                        \n                  \
    \      words = [w for w in words if w != \",\"]\n                        \n  \
    \                      if length(words) == 0 \n                            return\
    \ 0 \n                        else \n                            \n          \
    \                  words = [w for w in words if w != \"a\" and w != \"b\" and\
    \ w != \"c\" and w != \"d\" and w != \"e\" and w != \"f\" and w != \"g\" and w\
    \ != \"h\" and w != \"i\" and w != \"j\" and w != \"k\" and w != \"l\" and w !=\
    \ \"m\" and w != \"n\" and w != \"o\" and w != \"p\" and w != \"q\" and w != \"\
    r\" and w != \"s\" and w != \"t\" and w != \"u\" and w != \"v\" and w != \"w\"\
    \ and w != \"x\" and w != \"y\" and w != \"z\"]\n                            \n\
    \                            if length(words) == 0 \n                        \
    \        return 0 \n                            else \n                      \
    \          \n                                words = [w for w in words if w !=\
    \ \"\"]\n                                \n                                if\
    \ length(words) == 0 \n                                    return 0 \n       \
    \                         else \n                                    \n      \
    \                              words = [w for w in words if w != \",\"]\n    \
    \                                \n                                    if length(words)\
    \ == 0 \n                                        return 0 \n                 \
    \                   else \n                                        \n        \
    \                                words = [w for w in words if w != \"a\" and w\
    \ != \"b\" and w != \"c\" and w != \"d\" and w != \"e\" and w != \"f\" and w !=\
    \ \"g\" and w != \"h\" and w != \"i\" and w != \"j\" and w != \"k\" and w != \"\
    \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp5ybopsdd.jl:30\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp5ybopsdd.jl:30\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\n\"\n        return txt\n    else\n        words = split(txt,\
    \ \" \")\n        words = words[2:end]\n        words = words[2:end]\n       \
    \ words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvoif8s40.jl:86\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvoif8s40.jl:86\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    if length(words) ==\
    \ 0 \n        return words\n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi5ld3us5.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpi5ld3us5.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return txt\n    words\
    \ = split(txt, \" \")\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    -\"]\n    words = [w for w in words if w != \"_\"]\n    words = [w for w in words\
    \ if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w\
    \ for w in words if w != \"-\"]\n    words = [w for w in words if w != \"?\"]\n\
    \    words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"-\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"-\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"-\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"-\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"-\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"-\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"-\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"-\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"-\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"-\"]\n    words = [w for w in words if \nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpzde8rrse.jl:55\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpzde8rrse.jl:55\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt)\n    \n    if length(words) == 0 \n  \
    \      return 0 \n    \n    words = [w for w in words if w != \"\"]\n    \n  \
    \  if length(words) == 1 \n        return length(words) \n    \n    words = [w\
    \ for w in words if w != \",\"]\n    \n    if length(words) == 1 \n        return\
    \ length(words) \n    \n    words = [w for w in words if w != \"-\"]\n    \n \
    \   if length(words) == 1 \n        return length(words) \n    \n    words = [w\
    \ for w in words if w != \"_\"]\n    \n    if length(words) == 1 \n        return\
    \ length(words) \n    \n    words = [w for w in words if w != \"!\"]\n    \n \
    \   if length(words) == 1 \n        return length(words) \n    \n    words = [w\
    \ for w in words if w != \"?\"]\n    \n    if length(words) == 1 \n        return\
    \ length(words) \n    \n    words = [w for w in words if w != \"!\"]\n    \n \
    \   if length(words) == 1 \n        return length(words) \n    \n    words = [w\
    \ for w in words if w != \"?\"]\n    \n    if length(words) == 1 \n        return\
    \ length(words) \n    \n    words = [w for w in words if w != \"-\"]\n    \n \
    \   if length(words) == 1 \n        return length(words) \n    \n    words = [w\
    \ for w in words if w != \"_\"]\n    \n    if length(words) == 1 \n        return\
    \ length(words) \n    \n    words = [w for w in words if w != \"?\"]\n    \n \
    \   if length(words) == 1 \n        return length(words) \n    \n    words = [w\
    \ for w in words if w != \"!\"]\n    \n    if length(words) == 1 \n        return\
    \ length(words) \n    \n    words = [w for w in words if w != \"?\"]\n    \n \
    \   if length(words) == 1 \n        return length(words) \n    \n    words = [w\
    \ for w in words if w != \"-\"]\n    \n    if length(words) == 1 \n        return\
    \ length(words) \n    \n    words = [w for w in words if w != \"_\"]\n    \n \
    \   if length(words) == 1 \n        return length(words) \n    \n    words = [w\
    \ for w in words if w != \"?\"]\n    \n    if length(words) == 1 \n        return\
    \ length(words) \n    \n    words = [w for w in words if w != \"!\"]\n    \n \
    \   if length(words) == 1 \n        return length(words) \n    \n    words = [w\
    \ for w in words if w != \"?\"]\n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpievgmgto.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpievgmgto.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if isempty(txt)\n        return txt\n   \
    \ else\n        words = split(txt, \" \")\n        words = words[words != \"\"\
    ]\n        words = words[words != \",\"]\n        words = words[words != \".\"\
    ]\n        words = words[words != \"?\"]\n        words = words[words != \"!\"\
    ]\n        words = words[words != \"-\"]\n        words = words[words != \"(\"\
    ]\n        words = words[words != \")\"]\n        words = words[words != \"[\"\
    ]\n        words = words[words != \"]\"]\n        words = words[words != \"[\"\
    ]\n        words = words[words != \"]\"]\n        words = words[words != \"[\"\
    ]\n        words = words[words != \"]\"]\n        words = words[words != \"]\"\
    ]\n        words = words[words != \"]\"]\n        words = words[words != \"]\"\
    ]\n        words = words[words != \"]\"]\n        words = words[words != \"]\"\
    ]\n        words = words[words != \"]\"]\n        words = words[words != \"]\"\
    ]\n        words = words[words != \"]\"]\n        words = words[words != \"]\"\
    ]\n        words = words[words != \"]\"]\n        words = words[words != \"]\"\
    ]\n        words = words[words != \"]\"]\n        words = words[words != \"]\"\
    ]\n        words = words[words != \"]\"]\n        words = words[words != \"]\"\
    ]\n        words = words[words != \"]\"]\n        words = words[words != \"]\"\
    ]\n        words = words[words != \"]\"]\n        words = words[words != \"]\"\
    ]\n        words = words[words != \"]\"]\n        words = words[words != \"]\"\
    ]\n        words = words[words != \"]\"]\n        words = words[words != \"]\"\
    ]\n        words = words[words != \"]\"]\n        words = words[words != \"]\"\
    ]\n        words = words[words != \"]\"]\n        words = words[words != \"]\"\
    ]\n        words = words[words != \"]\"]\n        words = words[words != \"]\"\
    ]\n        words = words[words != \"]\"]\n        words = words[words != \"]\"\
    ]\n        words = words[words != \"]\"]\n        words = words[words != \"]\"\
    ]\n        words = words[words != \"]\"]\n        words = words[words != \"]\"\
    ]\n        words = words[words != \"]\"]\n        words = words[words != \"]\"\
    ]\n        words = words[words != \"]\"]\n        words = words[words != \"]\"\
    ]\n\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp2sldewsw.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp2sldewsw.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp2sldewsw.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return txt\n    \n\
    \    if txt.includes(\",\")\n        words = txt.split(\",\")\n    else\n    \
    \    words = txt.split(\" \")\n    end\n    \n    words = [w for w in words if\
    \ w != \"\"]\n    \n    words = [w for w in words if w != \",\"]\n    \n    words\
    \ = [w for w in words if w != \" \"]\n    \n    words = [w for w in words if w\
    \ != \"\\n\"]\n    \n    words = [w for w in words if w != \"\\t\"]\n    \n  \
    \  words = [w for w in words if w != \"\\r\"]\n    \n    words = [w for w in words\
    \ if w != \"\\t\"]\n    \n    words = [w for w in words if w != \"\\r\"]\n   \
    \ \n    words = [w for w in words if w != \"\\n\"]\n    \n    words = [w for w\
    \ in words if w != \"\\t\"]\n    \n    words = [w for w in words if w != \"\\\
    r\"]\n    \n    words = [w for w in words if w != \"\\n\"]\n    \n    words =\
    \ [w for w in words if w != \"\\t\"]\n    \n    words = [w for w in words if w\
    \ != \"\\r\"]\n    \n    words = [w for w in words if w != \"\\n\"]\n    \n  \
    \  words = [w for w in words if w != \"\\t\"]\n    \n    words = [w for w in words\
    \ if w != \"\\r\"]\n    \n    words = [w for w in words if w != \"\\n\"]\n   \
    \ \n    words = [w for w in words if w != \"\\t\"]\n    \n    words = [w for w\
    \ in words if w != \"\\r\"]\n    \n    words = [w for w in words if w != \"\\\
    n\"]\n    \n    words = [w for w in words if w != \"\\t\"]\n    \n    words =\
    \ [w for w in words if w != \"\\r\"]\n    \n    words = [w for w in words if w\
    \ != \"\\n\"]\n    \n    words = [w for w in words if w != \"\\t\"]\n    \n  \
    \  words = [w for w in words if w != \"\\r\"]\n    \n    words = [w for w in words\
    \ if w != \"\\n\"]\n    \n    words = [w for w in words if w != \"\\t\"]\n   \
    \ \n    words = [w for w in words if w != \"\\r\"]\n    \n    words = [w for w\
    \ in words if w != \"\\n\"]\n    \n    words = [w for w in words if w != \"\\\
    t\"]\n    \n    words = [\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmps7w79755.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmps7w79755.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return txt\n    \n\
    \    words = split(txt, \" \")\n    \n    words_splitted = []\n    for word in\
    \ words\n        words_splitted = words_splitted ++ split(word, \",\")\n    end\n\
    \    \n    words_splitted = [word for word in words_splitted if word != \"\"]\n\
    \    \n    words_splitted = [word for word in words_splitted if !islower(word)]\n\
    \    \n    words_splitted = [word for word in words_splitted if !isupper(word)]\n\
    \    \n    words_splitted = [word for word in words_splitted if !isdigit(word)]\n\
    \    \n    words_splitted = [word for word in words_splitted if !isspace(word)]\n\
    \    \n    words_splitted = [word for word in words_splitted if !isalnum(word)]\n\
    \    \n    words_splitted = [word for word in words_splitted if !isascii(word)]\n\
    \    \n    words_splitted = [word for word in words_splitted if !isblank(word)]\n\
    \    \n    words_splitted = [word for word in words_splitted if !isspace(word)]\n\
    \    \n    words_splitted = [word for word in words_splitted if !isascii(word)]\n\
    \    \n    words_splitted = [word for word in words_splitted if !isblank(word)]\n\
    \    \n    words_splitted = [word for word in words_splitted if !isspace(word)]\n\
    \    \n    words_splitted = [word for word in words_splitted if !isascii(word)]\n\
    \    \n    words_splitted = [word for word in words_splitted if !isblank(word)]\n\
    \    \n    words_splitted = [word for word in words_splitted if !isspace(word)]\n\
    \    \n    words_splitted = [word for word in words_splitted if !isascii(word)]\n\
    \    \n    words_splitted = [word for word in words_splitted if !isblank(word)]\n\
    \    \n    words_splitted = [word for word in words_splitted if !isspace(word)]\n\
    \    \n    words_splitted = [word for word in words_splitted if !isascii(word)]\n\
    \    \n    words_splitted = [word for word in words_splitted if !isblank(word)]\n\
    \    \n    words_splitted = [word for word in words_splitted if !isspace(word)]\n\
    \    \n    words_splitted = [word for word in words_splitted if !isascii(word)]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmps6obsn49.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmps6obsn49.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    if isempty(txt)\n        return txt\n    else\n        words\
    \ = split(txt, \" \")\n        \n        words_splitted = []\n        for word\
    \ in words\n            words_splitted = append(words_splitted, split(word, \"\
    ,\"))\n        end\n        \n        words_splitted = [word for word in words_splitted\
    \ if !isempty(word)]\n        \n        words_splitted = [word for word in words_splitted\
    \ if !islower(word)]\n        \n        words_splitted = [word for word in words_splitted\
    \ if !isupper(word)]\n        \n        words_splitted = [word for word in words_splitted\
    \ if !isdigit(word)]\n        \n        words_splitted = [word for word in words_splitted\
    \ if !isspace(word)]\n        \n        words_splitted = [word for word in words_splitted\
    \ if !issymbol(word)]\n        \n        words_splitted = [word for word in words_splitted\
    \ if !isascii(word)]\n        \n        words_splitted = [word for word in words_splitted\
    \ if !isascii(word)]\n        \n        words_splitted = [word for word in words_splitted\
    \ if !isascii(word)]\n        \n        words_splitted = [word for word in words_splitted\
    \ if !isascii(word)]\n        \n        words_splitted = [word for word in words_splitted\
    \ if !isascii(word)]\n        \n        words_splitted = [word for word in words_splitted\
    \ if !isascii(word)]\n        \n        words_splitted = [word for word in words_splitted\
    \ if !isascii(word)]\n        \n        words_splitted = [word for word in words_splitted\
    \ if !isascii(word)]\n        \n        words_splitted = [word for word in words_splitted\
    \ if !isascii(word)]\n        \n        words_splitted = [word for word in words_splitted\
    \ if !isascii(word)]\n        \n        words_splitted = [word for word in words_splitted\
    \ if !isascii(word)]\n        \n        words_splitted = [word for word in words_splitted\
    \ if !isascii(word)]\n        \n        words_splitted = [word for word in words_splitted\
    \ if !isascii(word)]\n        \n        words_splitted = [word for word in words_splitted\
    \ if !isascii(word)]\n        \n        words_splitted = [word for word in words_splitted\
    \ if !isascii(word)]\n        \n        words_splitted = [word for word in words_splitted\
    \ if !isascii(word)]\n        \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpjgkue3jw.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpjgkue3jw.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpjgkue3jw.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return txt\n    if\
    \ txt.includes(\",\")\n        words = txt.split(\",\")\n    else\n        words\
    \ = txt.split(\" \")\n    end\n    words = [w for w in words if w != \"\"]\n \
    \   words = [w for w in words if w !~ \"^[a-z]+$\"]\n    words = [w for w in words\
    \ if w !~ \"^[a-z]+$\"]\n    words = [w for w in words if w !~ \"^[a-z]+$\"]\n\
    \    words = [w for w in words if w !~ \"^[a-z]+$\"]\n    words = [w for w in\
    \ words if w !~ \"^[a-z]+$\"]\n    words = [w for w in words if w !~ \"^[a-z]+$\"\
    ]\n    words = [w for w in words if w !~ \"^[a-z]+$\"]\n    words = [w for w in\
    \ words if w !~ \"^[a-z]+$\"]\n    words = [w for w in words if w !~ \"^[a-z]+$\"\
    ]\n    words = [w for w in words if w !~ \"^[a-z]+$\"]\n    words = [w for w in\
    \ words if w !~ \"^[a-z]+$\"]\n    words = [w for w in words if w !~ \"^[a-z]+$\"\
    ]\n    words = [w for w in words if w !~ \"^[a-z]+$\"]\n    words = [w for w in\
    \ words if w !~ \"^[a-z]+$\"]\n    words = [w for w in words if w !~ \"^[a-z]+$\"\
    ]\n    words = [w for w in words if w !~ \"^[a-z]+$\"]\n    words = [w for w in\
    \ words if w !~ \"^[a-z]+$\"]\n    words = [w for w in words if w !~ \"^[a-z]+$\"\
    ]\n    words = [w for w in words if w !~ \"^[a-z]+$\"]\n    words = [w for w in\
    \ words if w !~ \"^[a-z]+$\"]\n    words = [w for w in words if w !~ \"^[a-z]+$\"\
    ]\n    words = [w for w in words if w !~ \"^[a-z]+$\"]\n    words = [w for w in\
    \ words if w !~ \"^[a-z]+$\"]\n    words = [w for w in words if w !~ \"^[a-z]+$\"\
    ]\n    words = [w for w in words if w !~ \"^[a-z]+$\"]\n    words = [w for w in\
    \ words if w \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmppzeah8g8.jl:20\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmppzeah8g8.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    if length(words) ==\
    \ 0\n        return words\n    else\n        \n        words_split = split(txt,\
    \ \",\")\n        \n        if length(words_split) == 0\n            return words\n\
    \        else\n            \n            words_split = split(txt, \" \")\n   \
    \         \n            if length(words_split) == 0\n                return words\n\
    \            else\n                \n                words_split = split(txt,\
    \ \",\")\n                \n                if length(words_split) == 0\n    \
    \                return words\n                else\n                    \n  \
    \                  words_split = split(txt, \" \")\n                    \n   \
    \                 if length(words_split) == 0\n                        return\
    \ words\n                    else\n                        \n                \
    \        words_split = split(txt, \",\")\n                        \n         \
    \               if length(words_split) == 0\n                            return\
    \ words\n                        else\n                            \n        \
    \                    words_split = split(txt, \" \")\n                       \
    \     \n                            if length(words_split) == 0\n            \
    \                    return words\n                            else\n        \
    \                        \n                                words_split = split(txt,\
    \ \",\")\n                                \n                                if\
    \ length(words_split) == 0\n                                    return words\n\
    \                                else\n                                    \n\
    \                                    words_split = split(txt, \" \")\n       \
    \                             \n                                    if length(words_split)\
    \ == 0\n                                        return words\n               \
    \                     else\n                                        \n       \
    \                                 words_split = split(txt, \",\")\n          \
    \                              \n                                        if length(words_split)\
    \ == 0\n                                            return words\n           \
    \                             else\n                                         \
    \   \n                                            words_split = split(txt, \"\
    \ \")\n                                            \n                        \
    \                    if length(words_split) == 0\n                           \
    \                     return words\n                                         \
    \   else\n                                                \n                 \
    \                               words_split = split(txt, \",\")\n            \
    \                                    \n                                      \
    \          if length(words_split) == 0\n                                     \
    \               return words\n                                               \
    \ else\n                                                    \n               \
    \                                     words_split = split(txt, \" \")\n      \
    \                                              \n                            \
    \                        if length(words_split) == 0\n                       \
    \                                 return words\n                             \
    \                       else\n                                               \
    \         \n                                                        words_split\
    \ = split(txt, \",\")\n                                                      \
    \  \n                                                        if length(words_split)\
    \ == 0\n                                                            return words\n\
    \                                                        else\n              \
    \                                              \n                            \
    \                                words_split = split(txt, \" \")\n           \
    \                                                 \n                         \
    \                                   if length(words_split) == 0\n            \
    \                                                    return words\n          \
    \                                                  else\n                    \
    \                                            \n                              \
    \                                  words_split = split(txt, \",\")\n         \
    \                                                       \n                   \
    \                                             if length(words_split) == 0\n  \
    \                                                                  return words\n\
    \                                                                else\n      \
    \                                                              \n            \
    \                                                        words_split = split(txt,\
    \ \" \")\n                                                                   \
    \ \n                                                                    if length(words_split)\
    \ == 0\n                                                                     \
    \   return words\n                                                           \
    \         else\n                                                             \
    \           \n                                                               \
    \         words_split = split(txt, \",\")\n                                  \
    \                                      \n                                    \
    \                                    if length(words_split) == 0\n           \
    \                                                                 return words\n\
    \                                                                        else\n\
    \                                                                            \n\
    \                                                                            words_split\
    \ = split(txt, \" \")\n                                                      \
    \                      \n                                                    \
    \                        if length(words_split) == 0\n                       \
    \                                                         return words\n     \
    \                                                                       else\n\
    \                                                                            \
    \    \n                                                                      \
    \          words_split = split(txt, \nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwumnjobp.jl:129\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwumnjobp.jl:129\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    words = [w for w in\
    \ words if w != \"\"]\n    \n    words = [w for w in words if w != \",\"]\n  \
    \  \n    words = [w for w in words if w != \"\"]\n    \n    words = [w for w in\
    \ words if w != \",\"]\n    \n    words = [w for w in words if w != \"\"]\n  \
    \  \n    words = [w for w in words if w != \",\"]\n    \n    words = [w for w\
    \ in words if w != \"\"]\n    \n    words = [w for w in words if w != \",\"]\n\
    \    \n    words = [w for w in words if w != \"\"]\n    \n    words = [w for w\
    \ in words if w != \",\"]\n    \n    words = [w for w in words if w != \"\"]\n\
    \    \n    words = [w for w in words if w != \",\"]\n    \n    words = [w for\
    \ w in words if w != \"\"]\n    \n    words = [w for w in words if w != \",\"\
    ]\n    \n    words = [w for w in words if w != \"\"]\n    \n    words = [w for\
    \ w in words if w != \",\"]\n    \n    words = [w for w in words if w != \"\"\
    ]\n    \n    words = [w for w in words if w != \",\"]\n    \n    words = [w for\
    \ w in words if w != \"\"]\n    \n    words = [w for w in words if w != \",\"\
    ]\n    \n    words = [w for w in words if w != \"\"]\n    \n    words = [w for\
    \ w in words if w != \",\"]\n    \n    words = [w for w in words if w != \"\"\
    ]\n    \n    words = [w for w in words if w != \",\"]\n    \n    words = [w for\
    \ w in words if w != \"\"]\n    \n    words = [w for w in words if w != \",\"\
    ]\n    \n    words = [w for w in words if w != \"\"]\n    \n    words = [w for\
    \ w in words if w != \",\"]\n    \n    words = [w for w in words if w != \"\"\
    ]\n    \n    words = [w for w in words if w != \",\"]\n    \n    words = [w for\
    \ w in words if w != \"\"]\n    \n    words = [w for w in words if w != \",\"\
    ]\n    \n    words = [w for w in words if w != \"\"]\n    \n    words = [w for\
    \ w in \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpnnlk29gz.jl:83\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpnnlk29gz.jl:83\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpwl8tidzt.jl:51\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpwl8tidzt.jl:51\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return txt\n    \n\
    \    words = split(txt, \" \")\n    \n    words = [w for w in words if w != \"\
    \"]\n    \n    words = [w for w in words if w != \",\"]\n    \n    words = [w\
    \ for w in words if w != \"\\n\"]\n    \n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    \n    words = [w for w in words if w != \"\\t\"]\n    \n    words\
    \ = [w for w in words if w != \"-\"]\n    \n    words = [w for w in words if w\
    \ != \"!\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words\
    \ = [w for w in words if w != \"-\"]\n    \n    words = [w for w in words if w\
    \ != \"-\"]\n    \n    words = [w for w in words if w != \"-\"]\n    \n    words\
    \ = [w for w in words if w != \"-\"]\n    \n    words = [w for w in words if w\
    \ != \"-\"]\n    \n    words = [w for w in words if w != \"-\"]\n    \n    words\
    \ = [w for w in words if w != \"-\"]\n    \n    words = [w for w in words if w\
    \ != \"-\"]\n    \n    words = [w for w in words if w != \"-\"]\n    \n    words\
    \ = [w for w in words if w != \"-\"]\n    \n    words = [w for w in words if w\
    \ != \"-\"]\n    \n    words = [w for w in words if w != \"-\"]\n    \n    words\
    \ = [w for w in words if w != \"-\"]\n    \n    words = [w for w in words if w\
    \ != \"-\"]\n    \n    words = [w for w in words if w != \"-\"]\n    \n    words\
    \ = [w for w in words if w != \"-\"]\n    \n    words = [w for w in words if w\
    \ != \"-\"]\n    \n    words = [w for w in words if w != \"-\"]\n    \n    words\
    \ = [w for w in words if w != \"-\"]\n    \n    words = [w for w in words if w\
    \ != \"-\"]\n    \n    words = [w for w in words if w != \"-\"]\n    \n    words\
    \ = [w for w in words if w != \"-\"]\n    \n    words = [w for w in words if w\
    \ != \"-\"]\n    \n    words = [w for w in words if w != \"-\"]\n    \n    words\
    \ = [w for \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr8_b_7bp.jl:83\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpr8_b_7bp.jl:83\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    words_split = Vector{String}(undef,\
    \ 0)\n    \n    for word in words\n        words_split = words_split ++ split(word,\
    \ \",\")\n    end\n    \n    words_split = words_split ++ [length(words)]\n  \
    \  \n    words_split = words_split .- words_split .% 2\n    \n    words_split\
    \ = words_split .- words_split .% 2 .+ 1\n    \n    words_split = words_split\
    \ .- words_split .% 2 .+ 1\n    \n    words_split = words_split .- words_split\
    \ .% 2 .+ 1\n    \n    words_split = words_split .- words_split .% 2 .+ 1\n  \
    \  \n    words_split = words_split .- words_split .% 2 .+ 1\n    \n    words_split\
    \ = words_split .- words_split .% 2 .+ 1\n    \n    words_split = words_split\
    \ .- words_split .% 2 .+ 1\n    \n    words_split = words_split .- words_split\
    \ .% 2 .+ 1\n    \n    words_split = words_split .- words_split .% 2 .+ 1\n  \
    \  \n    words_split = words_split .- words_split .% 2 .+ 1\n    \n    words_split\
    \ = words_split .- words_split .% 2 .+ 1\n    \n    words_split = words_split\
    \ .- words_split .% 2 .+ 1\n    \n    words_split = words_split .- words_split\
    \ .% 2 .+ 1\n    \n    words_split = words_split .- words_split .% 2 .+ 1\n  \
    \  \n    words_split = words_split .- words_split .% 2 .+ 1\n    \n    words_split\
    \ = words_split .- words_split .% 2 .+ 1\n    \n    words_split = words_split\
    \ .- words_split .% 2 .+ 1\n    \n    words_split = words_split .- words_split\
    \ .% 2 .+ 1\n    \n    words_split = words_split .- words_split .% 2 .+ 1\n  \
    \  \n    words_split = words_split .- words_split .% 2 .+ 1\n    \n    words_split\
    \ = words_split .- words_split .% 2 .+ 1\n    \n    words_split = words_split\
    \ .- words_split .% 2 .+ 1\n    \n    words_split = words_split .- words_split\
    \ .% 2 .+ 1\n    \n    words_split = words_split .- words_split .% 2 .+ 1\n  \
    \  \n    words_split = words_split .- words_split .% 2 .+ 1\n    \n    words_split\
    \ = words_split .- words_split .% 2 .+ 1\n    \nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsds3j11o.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpsds3j11o.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpsds3j11o.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp_lceov7c.jl:51\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp_lceov7c.jl:51\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    txt = txt.trim()\n    \n    if txt == \"\"\n        return\
    \ txt\n    \n    words = split(txt, \" \")\n    \n    if length(words) == 0\n\
    \        return txt\n    \n    words_split = split(txt, \",\")\n    \n    if length(words_split)\
    \ == 0\n        return txt\n    \n    words_split = split(txt, \",\")\n    \n\
    \    words_split = split(txt, \",\")\n    \n    words_split = split(txt, \",\"\
    )\n    \n    words_split = split(txt, \",\")\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    words_split = split(txt, \",\")\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    words_split = split(txt, \",\")\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    words_split = split(txt, \",\")\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    words_split = split(txt, \",\")\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    words_split = split(txt, \",\")\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    words_split = split(txt, \",\")\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    words_split = split(txt, \",\")\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    words_split = split(txt, \",\")\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    words_split = split(txt, \",\")\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    words_split = split(txt, \",\")\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    words_split = split(txt, \",\")\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    words_split = split(txt, \",\")\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    words_split = split(txt, \",\")\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    words_split = split(txt, \",\")\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    words_split = split(txt, \",\")\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    words_split = split(txt, \",\")\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    words_split = split(txt, \",\")\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    words_split = split(txt, \",\")\n    \n    words_split = split(txt,\
    \ \",\")\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1qiylh7r.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1qiylh7r.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    if length(words) ==\
    \ 0\n        return words\n    end\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkddd4sk1.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpkddd4sk1.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpkddd4sk1.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    words_splitted = []\n\
    \    \n    for w in words\n        if w != \"\"\n            words_splitted =\
    \ words_splitted ++ split(w, \",\")\n        end\n    end\n    \n    words_splitted\
    \ = words_splitted ++ split(split(txt, \",\")[1], \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(split(txt, \",\")[2], \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(split(txt, \",\")[3], \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(split(txt, \",\")[4], \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(split(txt, \",\")[5], \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(split(txt, \",\")[6], \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(split(txt, \",\")[7], \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(split(txt, \",\")[8], \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(split(txt, \",\")[9], \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(split(txt, \",\")[10], \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(split(txt, \",\")[11], \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(split(txt, \",\")[12], \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(split(txt, \",\")[13], \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(split(txt, \",\")[14], \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(split(txt, \",\")[15], \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(split(txt, \",\")[16], \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(split(txt, \",\")[17], \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(split(txt, \",\")[18], \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(split(txt, \",\")[19], \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(split(txt, \",\")[20], \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(split(txt, \",\")[21], \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(split(txt, \",\")[22], \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(split(txt, \",\")[23], \" \")\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4jecd3ho.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp4jecd3ho.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp4jecd3ho.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    if isempty(txt)\n        return txt\n    else\n        words\
    \ = split(txt, \" \")\n        words_split = split(txt, \",\")\n        words_split2\
    \ = split(txt, \",\")\n        words_split3 = split(txt, \",\")\n        words_split4\
    \ = split(txt, \",\")\n        words_split5 = split(txt, \",\")\n        words_split6\
    \ = split(txt, \",\")\n        words_split7 = split(txt, \",\")\n        words_split8\
    \ = split(txt, \",\")\n        words_split9 = split(txt, \",\")\n        words_split10\
    \ = split(txt, \",\")\n        words_split11 = split(txt, \",\")\n        words_split12\
    \ = split(txt, \",\")\n        words_split13 = split(txt, \",\")\n        words_split14\
    \ = split(txt, \",\")\n        words_split15 = split(txt, \",\")\n        words_split16\
    \ = split(txt, \",\")\n        words_split17 = split(txt, \",\")\n        words_split18\
    \ = split(txt, \",\")\n        words_split19 = split(txt, \",\")\n        words_split20\
    \ = split(txt, \",\")\n        words_split21 = split(txt, \",\")\n        words_split22\
    \ = split(txt, \",\")\n        words_split23 = split(txt, \",\")\n        words_split24\
    \ = split(txt, \",\")\n        words_split25 = split(txt, \",\")\n        words_split26\
    \ = split(txt, \",\")\n        words_split27 = split(txt, \",\")\n        words_split28\
    \ = split(txt, \",\")\n        words_split29 = split(txt, \",\")\n        words_split30\
    \ = split(txt, \",\")\n        words_split31 = split(txt, \",\")\n        words_split32\
    \ = split(txt, \",\")\n        words_split33 = split(txt, \",\")\n        words_split34\
    \ = split(txt, \",\")\n        words_split35 = split(txt, \",\")\n        words_split36\
    \ = split(txt, \",\")\n        words_split37 = split(txt, \",\")\n        words_split38\
    \ = split(txt, \",\")\n        words_split39 = split(txt, \",\")\n        words_split40\
    \ = split(txt, \",\")\n        words_split41 = split(txt, \",\")\n        words_split42\
    \ = split(txt, \",\")\n        words_split43 = split(txt, \",\")\n        words_split44\
    \ = split(txt, \",\")\n        words_split45 = split(txt, \",\")\n        words_split46\
    \ = split(txt, \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t\
    @test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8qr8pnwz.jl:64\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8qr8pnwz.jl:64\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    if isempty(txt)\n        return txt\n    else\n        words\
    \ = split(txt, \" \")\n        \n        words_split = Vector{String}(undef, 0)\n\
    \        \n        for word in words\n            words_split = vcat(words_split,\
    \ split(word))\n        end\n        \n        words_split = words_split[findall(x\
    \ -> !isascii(x), words_split)]\n        \n        words_split = words_split[findall(x\
    \ -> !isascii(x), words_split)]\n        \n        words_split = words_split[findall(x\
    \ -> !isascii(x), words_split)]\n        \n        words_split = words_split[findall(x\
    \ -> !isascii(x), words_split)]\n        \n        words_split = words_split[findall(x\
    \ -> !isascii(x), words_split)]\n        \n        words_split = words_split[findall(x\
    \ -> !isascii(x), words_split)]\n        \n        words_split = words_split[findall(x\
    \ -> !isascii(x), words_split)]\n        \n        words_split = words_split[findall(x\
    \ -> !isascii(x), words_split)]\n        \n        words_split = words_split[findall(x\
    \ -> !isascii(x), words_split)]\n        \n        words_split = words_split[findall(x\
    \ -> !isascii(x), words_split)]\n        \n        words_split = words_split[findall(x\
    \ -> !isascii(x), words_split)]\n        \n        words_split = words_split[findall(x\
    \ -> !isascii(x), words_split)]\n        \n        words_split = words_split[findall(x\
    \ -> !isascii(x), words_split)]\n        \n        words_split = words_split[findall(x\
    \ -> !isascii(x), words_split)]\n        \n        words_split = words_split[findall(x\
    \ -> !isascii(x), words_split)]\n        \n        words_split = words_split[findall(x\
    \ -> !isascii(x), words_split)]\n        \n        words_split = words_split[findall(x\
    \ -> !isascii(x), words_split)]\n        \n        words_split = words_split[findall(x\
    \ -> !isascii(x), words_split)]\n        \n        words_split = words_split[findall(x\
    \ -> !isascii(x), words_split)]\n        \n        words_split = words_split[findall(x\
    \ -> !isascii(x), words_split)]\n        \n        words_split = words_split[findall(x\
    \ -> !isascii(x), words_split)]\n        \n        words_split = words_split[findall(x\
    \ -> !isascii(x), words_split)]\n        \n        words_split = words_split[findall(x\
    \ -> !isascii(x), words_split)]\n        \n        words_split = words_split[findall(x\
    \ -> !isascii(x), words_split)]\n        \n\nusing Test\n\n@testset begin\n\n\
    candidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"\
    world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t\
    @test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp5gm0_1rc.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp5gm0_1rc.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp5gm0_1rc.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdolvf64p.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpdolvf64p.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpdolvf64p.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    if length(words) ==\
    \ 0 \n        return words\n    \n    words_split = split(txt, \",\")\n    \n\
    \    if length(words_split) == 0 \n        return words\n    \n    words_split\
    \ = split(txt, \",\")\n    \n    if length(words_split) == 0 \n        return\
    \ words\n    \n    words_split = split(txt, \",\")\n    \n    if length(words_split)\
    \ == 0 \n        return words\n    \n    words_split = split(txt, \",\")\n   \
    \ \n    if length(words_split) == 0 \n        return words\n    \n    words_split\
    \ = split(txt, \",\")\n    \n    if length(words_split) == 0 \n        return\
    \ words\n    \n    words_split = split(txt, \",\")\n    \n    if length(words_split)\
    \ == 0 \n        return words\n    \n    words_split = split(txt, \",\")\n   \
    \ \n    if length(words_split) == 0 \n        return words\n    \n    words_split\
    \ = split(txt, \",\")\n    \n    if length(words_split) == 0 \n        return\
    \ words\n    \n    words_split = split(txt, \",\")\n    \n    if length(words_split)\
    \ == 0 \n        return words\n    \n    words_split = split(txt, \",\")\n   \
    \ \n    if length(words_split) == 0 \n        return words\n    \n    words_split\
    \ = split(txt, \",\")\n    \n    if length(words_split) == 0 \n        return\
    \ words\n    \n    words_split = split(txt, \",\")\n    \n    if length(words_split)\
    \ == 0 \n        return words\n    \n    words_split = split(txt, \",\")\n   \
    \ \n    if length(words_split) == 0 \n        return words\n    \n    words_split\
    \ = split(txt, \",\")\n    \n    if length(words_split) == 0 \n        return\
    \ words\n    \n    words_split = split(txt, \",\")\n    \n    if length(words_split)\
    \ == 0 \n        return words\n    \n    words_split = split(txt, \",\")\n   \
    \ \n    if length(words_split) == 0 \n        return words\n    \n    words_split\
    \ = split(txt, \",\")\n    \n    if length(words_split) == 0 \n        return\
    \ words\n    \n    words_split = split(txt, \",\")\n    \n    if length(words_split)\
    \ == 0 \n        return words\n    \n    words_split = split(txt, \",\")\n   \
    \ \n    if length(words_split) == 0 \n        return words\n    \n    words_split\
    \ = split(txt, \",\")\n    \n    if length(words_split) == 0 \n        return\
    \ words\n    \n    words_split = split(txt, \",\")\n    \n    if length(words_split)\
    \ == 0 \n        return words\n    \n    words_split = split(txt, \",\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp91lurlb1.jl:128\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp91lurlb1.jl:128\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    if isempty(txt)\n        return txt\n    else\n        words\
    \ = split(txt, \" \")\n        words_without_commas = filter(x -> x != \",\",\
    \ words)\n        words_without_commas = filter(x -> x != \"\", words_without_commas)\n\
    \        words_without_commas = map(x -> lowercase(x), words_without_commas)\n\
    \        words_without_commas = sort(words_without_commas)\n        words_without_commas\
    \ = words_without_commas[findall(x -> x % 2 == 1, words_without_commas)]\n   \
    \     words_without_commas = words_without_commas[findall(x -> x % 2 == 0, words_without_commas)]\n\
    \        words_without_commas = words_without_commas[findall(x -> x % 2 == 1,\
    \ words_without_commas)]\n        words_without_commas = words_without_commas[findall(x\
    \ -> x % 2 == 0, words_without_commas)]\n        return words_without_commas\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello world!\"\
    )\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello,world!\")\n</cell>\n\
    <code language=julia-1.5>\nsplit_words(\"abcdef\")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"abcdefg\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdefgh\"\
    )\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdefghij\")\n</cell>\n\
    <code language=julia-1.5>\nsplit_words(\"abcdefghijk\")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"abcdefghijkl\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"\
    abcdefghijklm\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdefghijklmn\"\
    )\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdefghijklmn\")\n</cell>\n\
    <code language=julia-1.5>\nsplit_words(\"abcdefghijklmn\")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"abcdefghijklmn\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"\
    abcdefghijklmn\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdefghijklmn\"\
    )\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdefghijklmn\")\n</cell>\n\
    <code language=julia-1.5>\nsplit_words(\"abcdefghijklmn\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6qqnpk1o.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6qqnpk1o.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    txt = txt.trim()\n    if txt == \"\"\n        return txt\n\
    \    \n    words = split(txt, \" \")\n    \n    words_without_commas = filter(x->!contains(x,\
    \ \",\"), words)\n    \n    words_without_commas = filter(x->!contains(x, \"!\"\
    ), words_without_commas)\n    \n    words_without_commas = filter(x->!contains(x,\
    \ \"?\"), words_without_commas)\n    \n    words_without_commas = filter(x->!contains(x,\
    \ \".\"), words_without_commas)\n    \n    words_without_commas = filter(x->!contains(x,\
    \ \"-\"), words_without_commas)\n    \n    words_without_commas = filter(x->!contains(x,\
    \ \"(\"), words_without_commas)\n    \n    words_without_commas = filter(x->!contains(x,\
    \ \")\"), words_without_commas)\n    \n    words_without_commas = filter(x->!contains(x,\
    \ \"[\"), words_without_commas)\n    \n    words_without_commas = filter(x->!contains(x,\
    \ \"]\"), words_without_commas)\n    \n    words_without_commas = filter(x->!contains(x,\
    \ \"{\"), words_without_commas)\n    \n    words_without_commas = filter(x->!contains(x,\
    \ \"|\"), words_without_commas)\n    \n    words_without_commas = filter(x->!contains(x,\
    \ \"\\\\\"), words_without_commas)\n    \n    words_without_commas = filter(x->!contains(x,\
    \ \"@\"), words_without_commas)\n    \n    words_without_commas = filter(x->!contains(x,\
    \ \"#\"), words_without_commas)\n    \n    words_without_commas = filter(x->!contains(x,\
    \ \"$\"), words_without_commas)\n    \n    words_without_commas = filter(x->!contains(x,\
    \ \"%\"), words_without_commas)\n    \n    words_without_commas = filter(x->!contains(x,\
    \ \"^\"), words_without_commas)\n    \n    words_without_commas = filter(x->!contains(x,\
    \ \"&\"), words_without_commas)\n    \n    words_without_commas = filter(x->!contains(x,\
    \ \"*\"), words_without_commas)\n    \n    words_without_commas = filter(x->!contains(x,\
    \ \"(\"), words_without_commas)\n    \n    words_without_commas = filter(x->!contains(x,\
    \ \")\"), words_without_commas)\n    \n    words_without_commas = filter(x->!contains(\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo7rfdpeg.jl:46\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpo7rfdpeg.jl:46\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if isempty(txt)\n        return txt\n    elseif isequal(txt, \"\
    \")\n        return txt\n    elseif isequal(txt, \"\\n\")\n        return txt\n\
    \    elseif isequal(txt, \"\\r\")\n        return txt\n    elseif isequal(txt,\
    \ \"\\t\")\n        return txt\n    elseif isequal(txt, \" \")\n        return\
    \ txt\n    elseif isequal(txt, \",\")\n        return txt\n    else\n        words\
    \ = split(txt, \" \")\n        words_split = split(txt, \",\")\n        words_split2\
    \ = split(txt, \"\\n\")\n        words_split3 = split(txt, \"\\r\")\n        words_split4\
    \ = split(txt, \"\\t\")\n        words_split5 = split(txt, \" \")\n        words_split6\
    \ = split(txt, \",\")\n        words_split7 = split(txt, \"\\n\")\n        words_split8\
    \ = split(txt, \"\\r\")\n        words_split9 = split(txt, \"\\t\")\n        words_split10\
    \ = split(txt, \" \")\n        words_split11 = split(txt, \",\")\n        words_split12\
    \ = split(txt, \"\\n\")\n        words_split13 = split(txt, \"\\r\")\n       \
    \ words_split14 = split(txt, \"\\t\")\n        words_split15 = split(txt, \" \"\
    )\n        words_split16 = split(txt, \",\")\n        words_split17 = split(txt,\
    \ \"\\n\")\n        words_split18 = split(txt, \"\\r\")\n        words_split19\
    \ = split(txt, \"\\t\")\n        words_split20 = split(txt, \" \")\n        words_split21\
    \ = split(txt, \",\")\n        words_split22 = split(txt, \"\\n\")\n        words_split23\
    \ = split(txt, \"\\r\")\n        words_split24 = split(txt, \"\\t\")\n       \
    \ words_split25 = split(txt, \" \")\n        words_split26 = split(txt, \",\"\
    )\n        words_split27 = split(txt, \"\\n\")\n        words_split28 = split(txt,\
    \ \"\\r\")\n        words_split29 = split(txt, \"\\t\")\n        words_split30\
    \ = split(txt, \" \")\n        words_split31 = split(txt, \",\")\n        words_split32\
    \ = split(txt, \"\\n\")\n        words_split33 = split(txt, \"\\r\")\n       \
    \ words_split34 = split(txt, \"\\t\")\n        words_split35 = split(txt, \" \"\
    )\n        words_split36 = split(txt, \",\")\n        words_split37 = split(txt,\
    \ \"\\n\")\n        words_split38 = split(txt, \"\\r\")\n        words_split39\
    \ = split(txt, \"\\t\")\n        words_split40 = split(txt, \" \")\n        words_split41\
    \ = split(txt, \",\")\n        \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp3isun1gi.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp3isun1gi.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp3isun1gi.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    if length(words) ==\
    \ 0\n        return words\n    else\n        \n        words_split = split(txt,\
    \ \",\")\n        \n        if length(words_split) == 0\n            return words\n\
    \        else\n            \n            words_split = split(txt, \",\")\n   \
    \         \n            if length(words_split) == 0\n                return words\n\
    \            else\n                \n                words_split = split(txt,\
    \ \",\")\n                \n                if length(words_split) == 0\n    \
    \                return words\n                else\n                    \n  \
    \                  words_split = split(txt, \",\")\n                    \n   \
    \                 if length(words_split) == 0\n                        return\
    \ words\n                    else\n                        \n                \
    \        words_split = split(txt, \",\")\n                        \n         \
    \               if length(words_split) == 0\n                            return\
    \ words\n                        else\n                            \n        \
    \                    words_split = split(txt, \",\")\n                       \
    \     \n                            if length(words_split) == 0\n            \
    \                    return words\n                            else\n        \
    \                        \n                                words_split = split(txt,\
    \ \",\")\n                                \n                                if\
    \ length(words_split) == 0\n                                    return words\n\
    \                                else\n                                    \n\
    \                                    words_split = split(txt, \",\")\n       \
    \                             \n                                    if length(words_split)\
    \ == 0\n                                        return words\n               \
    \                     else\n                                        \n       \
    \                                 words_split = split(txt, \",\")\n          \
    \                              \n                                        if length(words_split)\
    \ == 0\n                                            return words\n           \
    \                             else\n                                         \
    \   \n                                            words_split = split(txt, \"\
    ,\")\n                                            \n                         \
    \                   if length(words_split) == 0\n                            \
    \                    return words\n                                          \
    \  else\n                                                \n                  \
    \                              words_split = split(txt, \",\")\n             \
    \                                   \n                                       \
    \         if length(words_split) == 0\n                                      \
    \              return words\n                                                else\n\
    \                                                    \n                      \
    \                              words_split = split(txt, \",\")\n             \
    \                                       \n                                   \
    \                 if length(words_split) == 0\n                              \
    \                          return words\n                                    \
    \                else\n                                                      \
    \  \n                                                        words_split = split(txt,\
    \ \",\")\n                                                        \n         \
    \                                               if length(words_split) == 0\n\
    \                                                            return words\n  \
    \                                                      else\n                \
    \                                            \n                              \
    \                              words_split = split(txt, \",\")\n             \
    \                                               \n                           \
    \                                 if length(words_split) == 0\n              \
    \                                                  return words\n            \
    \                                                else\n                      \
    \                                          \n                                \
    \                                words_split = split(txt, \",\")\n           \
    \                                                     \n                     \
    \                                           if length(words_split) == 0\n    \
    \                                                                return words\n\
    \                                                                else\n      \
    \                                                              \n            \
    \                                                        words_split = split(txt,\
    \ \",\")\n                                                                   \
    \ \n                                                                    if length(words_split)\
    \ == 0\n                                                                     \
    \   return words\n                                                           \
    \         else\n                                                             \
    \           \n                                                               \
    \         words_split = split(txt, \",\")\n                                  \
    \                                      \n                                    \
    \                                    if length(words_split) == 0\n           \
    \                                                                 return words\n\
    \                                                                        else\n\
    \                                                                            \n\
    \                                                                            words_split\
    \ = split(txt, \",\")\n                                                      \
    \                      \n                                                    \
    \                        if length(words_split) == 0\n                       \
    \                                                         return words\n     \
    \                                                                       else\n\
    \                                                                \nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp1caq1_8e.jl:122\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp1caq1_8e.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp1caq1_8e.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    if length(words) ==\
    \ 0\n        return words\n    \n    if length(words) == 1\n        return words\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"\
    world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t\
    @test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6cobaoys.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6cobaoys.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    if length(words) ==\
    \ 0\n        return length(words)\n    end\n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9kc9vkql.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp9kc9vkql.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp9kc9vkql.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpz7k7pk7l.jl:51\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpz7k7pk7l.jl:51\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_without_commas = filter(x\
    \ -> x != \",\", words)\n    words_without_commas_without_spaces = filter(x ->\
    \ x != \" \", words_without_commas)\n    words_without_commas_without_spaces_without_comma\
    \ = filter(x -> x != \",\", words_without_commas_without_spaces)\n    words_without_commas_without_spaces_without_comma_without_space\
    \ = filter(x -> x != \" \", words_without_commas_without_spaces_without_comma)\n\
    \    words_without_commas_without_spaces_without_comma_without_space_without_comma\
    \ = filter(x -> x != \",\", words_without_commas_without_spaces_without_comma_without_space)\n\
    \    words_without_commas_without_spaces_without_comma_without_space_without_comma_without_space\
    \ = filter(x -> x != \" \", words_without_commas_without_spaces_without_comma_without_space_without_comma)\n\
    \    words_without_commas_without_spaces_without_comma_without_space_without_comma_without_space_without_comma\
    \ = filter(x -> x != \",\", words_without_commas_without_spaces_without_comma_without_space_without_comma_without_space)\n\
    \    words_without_commas_without_spaces_without_comma_without_space_without_comma_without_space_without_comma_without_space\
    \ = filter(x -> x != \" \", words_without_commas_without_spaces_without_comma_without_space_without_comma_without_space_without_comma)\n\
    \    words_without_commas_without_spaces_without_comma_without_space_without_comma_without_space_without_comma_without_space_without_comma\
    \ = filter(x -> x != \",\", words_without_commas_without_spaces_without_comma_without_space_without_comma_without_space_without_comma_without_space_without_comma)\n\
    \    words_without_commas_without_spaces_without_comma_without_space_without_comma_without_space_without_comma_without_space_without_comma_without_space\
    \ = filter(x -> x != \" \", words_without_commas_without_spaces_without_comma_without_space_without_comma_without_space_without_comma_without_space_without_comma_without_space)\n\
    \    words_without_commas_without_spaces_without_comma_without_space_without_comma_without_space_without_comma_without_space_without_comma_without_space_without_comma\
    \ = filter(x -> x != \",\", words_without_commas_without_spaces_without_comma_without_space_without_comma_without_space_without_comma_without_space_without_comma_without_space_without_comma)\n\
    \    words_without_commas_without_spaces_without_comma_without_space_without_comma_without_space_without_comma_without_space_without_comma_without_space_without_comma_without_space\
    \ = filter(x -> x != \" \", words_without_commas_\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3g3ajg5n.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3g3ajg5n.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_split = Vector{String}(undef,\
    \ 0)\n    for word in words\n        if !contains(words_split, word)\n       \
    \     words_split += word\n        end\n    end\n    return words_split\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkuusa_cx.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  UndefVarError:\
    \ contains not defined\n  Stacktrace:\n   [1] split_words(::String) at /tmp/tmpkuusa_cx.jl:14\n\
    \   [2] top-level scope at /tmp/tmpkuusa_cx.jl:25\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpkuusa_cx.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpkuusa_cx.jl:26\n  Test threw exception\n  Expression: candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"]\n  UndefVarError: contains not defined\n\
    \  Stacktrace:\n   [1] split_words(::String) at /tmp/tmpkuusa_cx.jl:14\n   [2]\
    \ top-level scope at /tmp/tmpkuusa_cx.jl:26\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpkuusa_cx.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpkuusa_cx.jl:27\n  Test threw exception\n  Expression: candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"]\n  UndefVarError: contains not defined\n\
    \  Stacktrace:\n   [1] split_words(::String) at /tmp/tmpkuusa_cx.jl:14\n   [2]\
    \ top-level scope at /tmp/tmpkuusa_cx.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpkuusa_cx.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpkuusa_cx.jl:28\n  Test threw exception\n  Expression: candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"]\n  UndefVarError: contains\
    \ not defined\n  Stacktrace:\n   [1] split_words(::String) at /tmp/tmpkuusa_cx.jl:14\n\
    \   [2] top-level scope at /tmp/tmpkuusa_cx.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpkuusa_cx.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpkuusa_cx.jl:29\n  Test threw exception\n  Expression: candidate(\"\
    abcdef\") == 3\n  UndefVarError: contains not defined\n  Stacktrace:\n   [1] split_words(::String)\
    \ at /tmp/tmpkuusa_cx.jl:14\n   [2] top-level scope at /tmp/tmpkuusa_cx.jl:29\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpkuusa_cx.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpkuusa_cx.jl:30\n  Test threw exception\n  Expression: candidate(\"\
    aaabb\") == 2\n  UndefVarError: contains not defined\n  Stacktrace:\n   [1] split_words(::String)\
    \ at /tmp/tmpkuusa_cx.jl:14\n   [2] top-level scope at /tmp/tmpkuusa_cx.jl:30\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpkuusa_cx.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpkuusa_cx.jl:31\n  Test threw exception\n  Expression: candidate(\"\
    aaaBb\") == 1\n  UndefVarError: contains not defined\n  Stacktrace:\n   [1] split_words(::String)\
    \ at /tmp/tmpkuusa_cx.jl:14\n   [2] top-level scope at /tmp/tmpkuusa_cx.jl:31\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpkuusa_cx.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpkuusa_cx.jl:32\n  Test threw exception\n  Expression: candidate(\"\
    \") == 0\n  UndefVarError: contains not defined\n  Stacktrace:\n   [1] split_words(::String)\
    \ at /tmp/tmpkuusa_cx.jl:14\n   [2] top-level scope at /tmp/tmpkuusa_cx.jl:32\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpkuusa_cx.jl:24\n  \nTest Summary: | Error \
    \ Total\ntest set      |     8      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkuusa_cx.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if isempty(txt)\n        return Vector{String}()\n    elseif length(txt)\
    \ == 1 \n        return txt\n    elseif length(txt) == 2 \n        return txt\n\
    \    elseif length(txt) == 3 \n        return txt\n    elseif length(txt) == 4\
    \ \n        return txt\n    elseif length(txt) == 5 \n        return txt\n   \
    \ elseif length(txt) == 6 \n        return txt\n    elseif length(txt) == 7 \n\
    \        return txt\n    elseif length(txt) == 8 \n        return txt\n    elseif\
    \ length(txt) == 9 \n        return txt\n    elseif length(txt) == 10 \n     \
    \   return txt\n    elseif length(txt) == 11 \n        return txt\n    elseif\
    \ length(txt) == 12 \n        return txt\n    elseif length(txt) == 13 \n    \
    \    return txt\n    elseif length(txt) == 14 \n        return txt\n    elseif\
    \ length(txt) == 15 \n        return txt\n    elseif length(txt) == 16 \n    \
    \    return txt\n    elseif length(txt) == 17 \n        return txt\n    elseif\
    \ length(txt) == 18 \n        return txt\n    elseif length(txt) == 19 \n    \
    \    return txt\n    elseif length(txt) == 20 \n        return txt\n    elseif\
    \ length(txt) == 21 \n        return txt\n    elseif length(txt) == 22 \n    \
    \    return txt\n    elseif length(txt) == 23 \n        return txt\n    elseif\
    \ length(txt) == 24 \n        return txt\n    elseif length(txt) == 25 \n    \
    \    return txt\n    elseif length(txt) == 26 \n        return txt\n    elseif\
    \ length(txt) == 27 \n        return txt\n    elseif length(txt) == 28 \n    \
    \    return txt\n    elseif length(txt) == 29 \n        return txt\n    elseif\
    \ length(txt) == 30 \n        return txt\n    elseif length(txt) == 31 \n    \
    \    return txt\n    elseif length(txt) == 32 \n        return txt\n    elseif\
    \ length(txt) == 33 \n        return txt\n    elseif length(txt) == 34 \n    \
    \    return txt\n    elseif length(txt) == 35 \n        return txt\n    elseif\
    \ length(txt) == 36 \n        return txt\n    elseif length(txt) == 37 \n    \
    \    return txt\n    elseif length(txt) == 38 \n        return txt\n    elseif\
    \ length(txt) == 39 \n        return txt\n    elseif length(txt) == 40 \n    \
    \    return txt\n    elseif length(txt) == 41 \n        return txt\n    elseif\
    \ length(txt) == 42 \n        return txt\n    elseif length(txt) == 43 \n    \
    \    return txt\n    elseif length(txt) == 44 \n        return txt\n    elseif\
    \ length(txt) == 45 \n        return txt\n    elseif length(txt) == 46 \n    \
    \    return txt\n    elseif length(txt) == 47 \n        return txt\n    elseif\
    \ length(txt) == 48 \n        return txt\n    elseif length(txt) == 49 \n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqqn5epj0.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqqn5epj0.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt)\n    \n    words_split = []\n    \n  \
    \  for word in words\n        \n        if isempty(word)\n            words_split.push(\"\
    ,\")\n        elseif isempty(word[1])\n            words_split.push(word)\n  \
    \      else\n            words_split.push(word[1])\n        end\n    end\n   \
    \ \n    return words_split\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpb1z5ad8o.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  type\
    \ Array has no field push\n  Stacktrace:\n   [1] getproperty(::Array{Any,1}, ::Symbol)\
    \ at ./Base.jl:33\n   [2] split_words(::String) at /tmp/tmpb1z5ad8o.jl:23\n  \
    \ [3] top-level scope at /tmp/tmpb1z5ad8o.jl:34\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpb1z5ad8o.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpb1z5ad8o.jl:35\n  Test threw exception\n  Expression: candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"]\n  type Array has no field push\n \
    \ Stacktrace:\n   [1] getproperty(::Array{Any,1}, ::Symbol) at ./Base.jl:33\n\
    \   [2] split_words(::String) at /tmp/tmpb1z5ad8o.jl:23\n   [3] top-level scope\
    \ at /tmp/tmpb1z5ad8o.jl:35\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpb1z5ad8o.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpb1z5ad8o.jl:36\n  Test threw exception\n  Expression: candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"]\n  type Array has no field push\n\
    \  Stacktrace:\n   [1] getproperty(::Array{Any,1}, ::Symbol) at ./Base.jl:33\n\
    \   [2] split_words(::String) at /tmp/tmpb1z5ad8o.jl:23\n   [3] top-level scope\
    \ at /tmp/tmpb1z5ad8o.jl:36\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpb1z5ad8o.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpb1z5ad8o.jl:37\n  Test threw exception\n  Expression: candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"]\n  type Array has no\
    \ field push\n  Stacktrace:\n   [1] getproperty(::Array{Any,1}, ::Symbol) at ./Base.jl:33\n\
    \   [2] split_words(::String) at /tmp/tmpb1z5ad8o.jl:23\n   [3] top-level scope\
    \ at /tmp/tmpb1z5ad8o.jl:37\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpb1z5ad8o.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpb1z5ad8o.jl:38\n  Test threw exception\n  Expression: candidate(\"\
    abcdef\") == 3\n  type Array has no field push\n  Stacktrace:\n   [1] getproperty(::Array{Any,1},\
    \ ::Symbol) at ./Base.jl:33\n   [2] split_words(::String) at /tmp/tmpb1z5ad8o.jl:23\n\
    \   [3] top-level scope at /tmp/tmpb1z5ad8o.jl:38\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpb1z5ad8o.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpb1z5ad8o.jl:39\n  Test threw exception\n  Expression: candidate(\"\
    aaabb\") == 2\n  type Array has no field push\n  Stacktrace:\n   [1] getproperty(::Array{Any,1},\
    \ ::Symbol) at ./Base.jl:33\n   [2] split_words(::String) at /tmp/tmpb1z5ad8o.jl:23\n\
    \   [3] top-level scope at /tmp/tmpb1z5ad8o.jl:39\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpb1z5ad8o.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpb1z5ad8o.jl:40\n  Test threw exception\n  Expression: candidate(\"\
    aaaBb\") == 1\n  type Array has no field push\n  Stacktrace:\n   [1] getproperty(::Array{Any,1},\
    \ ::Symbol) at ./Base.jl:33\n   [2] split_words(::String) at /tmp/tmpb1z5ad8o.jl:23\n\
    \   [3] top-level scope at /tmp/tmpb1z5ad8o.jl:40\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpb1z5ad8o.jl:33\n  \ntest set: Error During\
    \ Test at /tmp/tmpb1z5ad8o.jl:41\n  Test threw exception\n  Expression: candidate(\"\
    \") == 0\n  MethodError: Cannot `convert` an object of type \n    Array{Any,1}\
    \ to an object of type \n    Union{Int64, Array{String,1}}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:171\n  Stacktrace:\n\
    \   [1] split_words(::String) at /tmp/tmpb1z5ad8o.jl:27\n   [2] top-level scope\
    \ at /tmp/tmpb1z5ad8o.jl:41\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpb1z5ad8o.jl:33\n  \nTest Summary: | Error \
    \ Total\ntest set      |     8      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb1z5ad8o.jl:31\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return Vector{String}()\n\
    \    else\n        words = split(txt, \" \")\n        words = [w for w in words\
    \ if w != \"\"]\n        words = [w for w in words if w != \",\"]\n        words\
    \ = [w for w in words if w != \".\"]\n        words = [w for w in words if w !=\
    \ \"?\"]\n        words = [w for w in words if w != \"!\"]\n        words = [w\
    \ for w in words if w != \"-\"]\n        words = [w for w in words if w != \"\
    _\"]\n        words = [w for w in words if w != \"&\"]\n        words = [w for\
    \ w in words if w != \"#\"]\n        words = [w for w in words if w != \"$\"]\n\
    \        words = [w for w in words if w != \"%\"]\n        words = [w for w in\
    \ words if w != \"^\"]\n        words = [w for w in words if w != \"&\"]\n   \
    \     words = [w for w in words if w != \"*\"]\n        words = [w for w in words\
    \ if w != \"(\"]\n        words = [w for w in words if w != \")\"]\n        words\
    \ = [w for w in words if w != \"[\"]\n        words = [w for w in words if w !=\
    \ \"]\"]\n        words = [w for w in words if w != \"{\"]\n        words = [w\
    \ for w in words if w != \"}\"]\n        words = [w for w in words if w != \"\
    |\"]\n        words = [w for w in words if w != \"\\\\\"]\n        words = [w\
    \ for w in words if w != \"^\"]\n        words = [w for w in words if w != \"\
    ~\"]\n        words = [w for w in words if w != \"`\"]\n        words = [w for\
    \ w in words if w != \"\xB4\"]\n        words = [w for w in words if w != \"\xA8\
    \"]\n        words = [w for w in words if w != \"\xBB\"]\n        words = [w for\
    \ w in words if w != \"\xAB\"]\n        words = [w for w in words if w != \"\xBB\
    \"]\n        words = [w for w in words if w != \"\xAB\"]\n        words = [w for\
    \ w in words if w != \"\xBB\"]\n        words = [w for w in words if w != \"\xAB\
    \"]\n        words = [w for w in words if w != \"\xBB\"]\n        words = [w for\
    \ w in words if w != \"\xAB\"]\n        words = [w for w in words if w != \"\xBB\
    \"]\n        words = [w \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpofp6_6xi.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpofp6_6xi.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    txt = txt.trim()\n    if txt == \"\"\n        return txt\n\
    \    \n    words = split(txt, \" \")\n    \n    words_splitted = [split(word,\
    \ \",\") for word in words]\n    \n    words_splitted = [word for words_splitted\
    \ in words_splitted for word in words_splitted if word != \"\"]\n    \n    words_splitted\
    \ = [word for word in words_splitted if islower(word)]\n    \n    words_splitted\
    \ = [word for word in words_splitted if isupper(word)]\n    \n    words_splitted\
    \ = [word for word in words_splitted if isdigit(word)]\n    \n    words_splitted\
    \ = [word for word in words_splitted if isalpha(word)]\n    \n    words_splitted\
    \ = [word for word in words_splitted if isalnum(word)]\n    \n    words_splitted\
    \ = [word for word in words_splitted if isspace(word)]\n    \n    words_splitted\
    \ = [word for word in words_splitted if isupper(word)]\n    \n    words_splitted\
    \ = [word for word in words_splitted if islower(word)]\n    \n    words_splitted\
    \ = [word for word in words_splitted if isdigit(word)]\n    \n    words_splitted\
    \ = [word for word in words_splitted if isalpha(word)]\n    \n    words_splitted\
    \ = [word for word in words_splitted if isalnum(word)]\n    \n    words_splitted\
    \ = [word for word in words_splitted if isspace(word)]\n    \n    words_splitted\
    \ = [word for word in words_splitted if isupper(word)]\n    \n    words_splitted\
    \ = [word for word in words_splitted if islower(word)]\n    \n    words_splitted\
    \ = [word for word in words_splitted if isdigit(word)]\n    \n    words_splitted\
    \ = [word for word in words_splitted if isalpha(word)]\n    \n    words_splitted\
    \ = [word for word in words_splitted if isalnum(word)]\n    \n    words_splitted\
    \ = [word for word in words_splitted if isspace(word)]\n    \n    words_splitted\
    \ = [word for word in words_splitted if isupper(word)]\n    \n    words_splitted\
    \ = [word for word in words_splitted if islower(word)]\n    \n    words_splitted\
    \ = [word for word in words_splitted if isdigit(word)]\n    \n    words_splitted\
    \ = [word for word in words_splitted if isalpha(word)]\n    \n    words_split\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpua_zddhi.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpua_zddhi.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt)\n    \n    words_splitted = []\n    \n\
    \    for word in words\n        \n        if isempty(word)\n            words_splitted\
    \ = words_splitted \n        else\n            words_splitted = words_splitted\
    \ ++ split(word)\n        end\n    end\n    \n    return words_splitted\nend\n\
    </cell>\n<code language=julia-1.5>\nsplit_words(\"Hello world!\")\n</cell>\n<code\
    \ language=julia-1.5>\nsplit_words(\"Hello,world!\")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"abcdef\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns a vector of strings with all words separated by commas.\
    \ \nExamples\nsplit_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"]\nsplit_words(\"\
    Hello,world!\") \u279E [\"Hello\", \"world!\"]\nsplit_words(\"abcdef\") == 3 \n\
    Hint: use split() function from Strings package\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxhp_sprq.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxhp_sprq.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if isempty(txt)\n        return Vector{String}()\n\
    \    else\n        words = split(txt, \" \")\n        words = words[2:end]\n \
    \       words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpuribd5ve.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpuribd5ve.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    \n    if length(words) == 0\n  \
    \      return words\n    end\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0gdykz49.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp0gdykz49.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp0gdykz49.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\n\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\t\"\n        return Vector{String}()\n    elseif txt == \"\\r\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\t\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\n\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\r\"\n        return Vector{String}()\n    elseif txt == \"\\t\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\n\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\r\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\t\"\n        return Vector{String}()\n    elseif txt == \"\\n\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\r\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\t\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\n\"\n        return Vector{String}()\n    elseif txt == \"\\r\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\t\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\n\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\r\"\n        return Vector{String}()\n    elseif txt == \"\\t\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\n\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\r\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\t\"\n        return Vector{String}()\n    elseif txt == \"\\n\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\r\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\t\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\n\"\n        return Vector{String}()\n    elseif txt == \"\\r\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\t\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\n\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\r\"\n        return Vector{String}()\n    elseif txt == \"\\t\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\n\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\r\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\t\"\n        return Vector{String}()\n    elseif txt == \"\\n\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\r\"\n        return Vector{String}()\n\
    \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_snxaxex.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_snxaxex.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if isempty(txt)\n        return txt\n    else\n        words =\
    \ split(txt, \" \")\n        words_without_commas = filter(x -> !contains(x, \"\
    ,\"), words)\n        words_without_commas_with_odd_order = filter(x -> contains(x,\
    \ \",\"), words_without_commas)\n        words_without_commas_with_odd_order =\
    \ sort(words_without_commas_with_odd_order)\n        words_without_commas_with_odd_order\
    \ = words_without_commas_with_odd_order[end-1:end]\n        words_without_commas_with_odd_order\
    \ = words_without_commas_with_odd_order[end-1:end]\n        words_without_commas_with_odd_order\
    \ = words_without_commas_with_odd_order[end-1:end]\n        words_without_commas_with_odd_order\
    \ = words_without_commas_with_odd_order[end-1:end]\n        words_without_commas_with_odd_order\
    \ = words_without_commas_with_odd_order[end-1:end]\n        words_without_commas_with_odd_order\
    \ = words_without_commas_with_odd_order[end-1:end]\n        words_without_commas_with_odd_order\
    \ = words_without_commas_with_odd_order[end-1:end]\n        words_without_commas_with_odd_order\
    \ = words_without_commas_with_odd_order[end-1:end]\n        words_without_commas_with_odd_order\
    \ = words_without_commas_with_odd_order[end-1:end]\n        words_without_commas_with_odd_order\
    \ = words_without_commas_with_odd_order[end-1:end]\n        words_without_commas_with_odd_order\
    \ = words_without_commas_with_odd_order[end-1:end]\n        words_without_commas_with_odd_order\
    \ = words_without_commas_with_odd_order[end-1:end]\n        words_without_commas_with_odd_order\
    \ = words_without_commas_with_odd_order[end-1:end]\n        words_without_commas_with_odd_order\
    \ = words_without_commas_with_odd_order[end-1:end]\n        words_without_commas_with_odd_order\
    \ = words_without_commas_with_odd_order[end-1:end]\n        words_without_commas_with_odd_order\
    \ = words_without_commas_with_odd_order[end-1:end]\n        words_without_commas_with_odd_order\
    \ = words_without_commas_with_odd_order[end-1:end]\n        words_without_commas_with_odd_order\
    \ = words_without_commas_with_odd_order[end-1:end]\n        words_without_commas_with_odd_order\
    \ = words_without_commas_with_odd_order[end-1:end]\n        words_without_commas_with_odd_order\
    \ = words_without_commas_with_odd_order\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmphkrkm591.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmphkrkm591.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmphkrkm591.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if isempty(txt)\n        return txt\n    else\n        words =\
    \ split(txt, \" \")\n        words_without_commas = filter(x -> !contains(x, \"\
    ,\"), words)\n        words_without_commas = filter(x -> !contains(x, \".\"),\
    \ words_without_commas)\n        words_without_commas = filter(x -> !contains(x,\
    \ \"!\"), words_without_commas)\n        words_without_commas = filter(x -> !contains(x,\
    \ \"?\"), words_without_commas)\n        words_without_commas = filter(x -> !contains(x,\
    \ \"-\"), words_without_commas)\n        words_without_commas = filter(x -> !contains(x,\
    \ \"(\"), words_without_commas)\n        words_without_commas = filter(x -> !contains(x,\
    \ \")\"), words_without_commas)\n        words_without_commas = filter(x -> !contains(x,\
    \ \"[\"), words_without_commas)\n        words_without_commas = filter(x -> !contains(x,\
    \ \"]\"), words_without_commas)\n        words_without_commas = filter(x -> !contains(x,\
    \ \"{\"), words_without_commas)\n        words_without_commas = filter(x -> !contains(x,\
    \ \"}\"), words_without_commas)\n        words_without_commas = filter(x -> !contains(x,\
    \ \"|\"), words_without_commas)\n        words_without_commas = filter(x -> !contains(x,\
    \ \"\\\\\"), words_without_commas)\n        words_without_commas = filter(x ->\
    \ !contains(x, \"^\"), words_without_commas)\n        words_without_commas = filter(x\
    \ -> !contains(x, \"$\"), words_without_commas)\n        words_without_commas\
    \ = filter(x -> !contains(x, \"*\"), words_without_commas)\n        words_without_commas\
    \ = filter(x -> !contains(x, \"?\"), words_without_commas)\n        words_without_commas\
    \ = filter(x -> !contains(x, \"=\"), words_without_commas)\n        words_without_commas\
    \ = filter(x -> !contains(x, \"-\"), words_without_commas)\n        words_without_commas\
    \ = filter(x -> !contains(x, \"~\"), words_without_commas)\n        words_without_commas\
    \ = filter(x -> !contains(x, \"`\"), words_without_commas)\n        words_without_commas\
    \ = filter(x -> !contains(x, \"!\"), words_without_commas)\n        words_without_commas\
    \ = filter(x -> !contains(x, \"@\"), words_without_commas)\n        words_without_commas\
    \ = filter(x -> !contains(x, \"#\"), words_without_comm\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpw85fi0xr.jl:29\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpw85fi0xr.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    if length(words) ==\
    \ 0\n        return words\n    \n    if length(words) == 1 \n        return words\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt83pe4tz.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpt83pe4tz.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if isempty(txt)\n        return txt\n    else\n        words =\
    \ split(txt, \" \")\n        words = words[words != \"\"]\n        words = words[words\
    \ != \",\"]\n        words = words[words != \".\"]\n        words = words[words\
    \ != \"!\"]\n        words = words[words != \"?\"]\n        words = words[words\
    \ != \"!\"]\n        words = words[words != \"?\"]\n        words = words[words\
    \ != \"!\"]\n        words = words[words != \"?\"]\n        words = words[words\
    \ != \"!\"]\n        words = words[words != \"?\"]\n        words = words[words\
    \ != \"!\"]\n        words = words[words != \"?\"]\n        words = words[words\
    \ != \"!\"]\n        words = words[words != \"?\"]\n        words = words[words\
    \ != \"!\"]\n        words = words[words != \"?\"]\n        words = words[words\
    \ != \"!\"]\n        words = words[words != \"?\"]\n        words = words[words\
    \ != \"!\"]\n        words = words[words != \"?\"]\n        words = words[words\
    \ != \"!\"]\n        words = words[words != \"?\"]\n        words = words[words\
    \ != \"!\"]\n        words = words[words != \"?\"]\n        words = words[words\
    \ != \"!\"]\n        words = words[words != \"?\"]\n        words = words[words\
    \ != \"!\"]\n        words = words[words != \"?\"]\n        words = words[words\
    \ != \"!\"]\n        words = words[words != \"?\"]\n        words = words[words\
    \ != \"!\"]\n        words = words[words != \"?\"]\n        words = words[words\
    \ != \"!\"]\n        words = words[words != \"?\"]\n        words = words[words\
    \ != \"!\"]\n        words = words[words != \"?\"]\n        words = words[words\
    \ != \"!\"]\n        words = words[words != \"?\"]\n        words = words[words\
    \ != \"!\"]\n        words = words[words != \"?\"]\n        words = words[words\
    \ != \"!\"]\n        words = words[words != \"?\"]\n        words = words[words\
    \ != \"!\"]\n        words = words[words != \"?\"]\n        words = words[words\
    \ != \"!\"]\n        words = words[words != \"?\"]\n        words = words[words\
    \ != \"!\"]\n        words = words[words != \"?\"]\n        words = words[word\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphukq5frf.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphukq5frf.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    if isempty(words)\n\
    \        return words\n    else\n        \n        words = [w for w in words if\
    \ w != \"\"]\n        \n        if isempty(words)\n            return words\n\
    \        else\n            \n            words_split = split(words, \",\")\n \
    \           \n            if isempty(words_split)\n                return words\n\
    \            else\n                \n                words_split = [w for w in\
    \ words_split if w != \"\"]\n                \n                if isempty(words_split)\n\
    \                    return words\n                else\n                    \n\
    \                    words_split = [w for w in words_split if w != \"\"]\n   \
    \                 \n                    if isempty(words_split)\n            \
    \            return words\n                    else\n                        \n\
    \                        words_split = [w for w in words_split if w != \"\"]\n\
    \                        \n                        if isempty(words_split)\n \
    \                           return words\n                        else\n     \
    \                       \n                            words_split = [w for w in\
    \ words_split if w != \"\"]\n                            \n                  \
    \          if isempty(words_split)\n                                return words\n\
    \                            else\n                                \n        \
    \                        words_split = [w for w in words_split if w != \"\"]\n\
    \                                \n                                if isempty(words_split)\n\
    \                                    return words\n                          \
    \      else\n                                    \n                          \
    \          words_split = [w for w in words_split if w != \"\"]\n             \
    \                       \n                                    if isempty(words_split)\n\
    \                                        return words\n                      \
    \              else\n                                        \n              \
    \                          words_split = [w for w in words_split if w != \"\"\
    ]\n                                        \n                                \
    \        if isempty(words_split)\n                                           \
    \ return words\n                                        else\n               \
    \                             \n                                            words_split\
    \ = [w for w in words_split if w != \"\"]\n                                  \
    \          \n                                            if isempty(words_split)\n\
    \                                                return words\n              \
    \                              else\n                                        \
    \        \n                                                words_split = [w for\
    \ w in words_split if w != \"\"]\n                                           \
    \     \n                                                if isempty(words_split)\n\
    \                                                    return words\n          \
    \                                      else\n                                \
    \                    \n                                                    words_split\
    \ = [w for w in words_split if w != \"\"]\n                                  \
    \                  \n                                                    if isempty(words_split)\n\
    \                                                        return words\n      \
    \                                              else\n                        \
    \                                \n                                          \
    \              words_split = [w for w in words_split if w != \"\"]\n         \
    \                                               \n                           \
    \                             return words_split\n                           \
    \                     end\n                                            end\n \
    \                                       end\n                                \
    \    end\n                                end\n                            end\n\
    \                        end\n                    end\n                end\n \
    \           end\n        end\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of characters in the string\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppapkmkqs.jl:106\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppapkmkqs.jl:106\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    \n    if length(words) == 0 \n \
    \       return 0 \n    else \n        return length(words) \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplvy8ppdi.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplvy8ppdi.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpv87sl6bz.jl:51\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpv87sl6bz.jl:51\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    if isempty(words)\n\
    \        return words\n    end\n    \n    words_split = split(words, \",\")\n\
    \    \n    if isempty(words_split)\n        return words\n    end\n    \n    words_split\
    \ = words_split[findall(words_split)]\n    \n    if isempty(words_split)\n   \
    \     return words\n    end\n    \n    words_split = words_split[findall(words_split)]\n\
    \    \n    if isempty(words_split)\n        return words\n    end\n    \n    words_split\
    \ = words_split[findall(words_split)]\n    \n    if isempty(words_split)\n   \
    \     return words\n    end\n    \n    words_split = words_split[findall(words_split)]\n\
    \    \n    if isempty(words_split)\n        return words\n    end\n    \n    words_split\
    \ = words_split[findall(words_split)]\n    \n    if isempty(words_split)\n   \
    \     return words\n    end\n    \n    words_split = words_split[findall(words_split)]\n\
    \    \n    if isempty(words_split)\n        return words\n    end\n    \n    words_split\
    \ = words_split[findall(words_split)]\n    \n    if isempty(words_split)\n   \
    \     return words\n    end\n    \n    words_split = words_split[findall(words_split)]\n\
    \    \n    if isempty(words_split)\n        return words\n    end\n    \n    words_split\
    \ = words_split[findall(words_split)]\n    \n    if isempty(words_split)\n   \
    \     return words\n    end\n    \n    words_split = words_split[findall(words_split)]\n\
    \    \n    if isempty(words_split)\n        return words\n    end\n    \n    words_split\
    \ = words_split[findall(words_split)]\n    \n    if isempty(words_split)\n   \
    \     return words\n    end\n    \n    words_split = words_split[findall(words_split)]\n\
    \    \n    if isempty(words_split)\n        return words\n    end\n    \n    words_split\
    \ = words_split[findall(words_split)]\n    \n    if isempty(words_split)\n   \
    \     return words\n    end\n    \n    words_split = words_split[findall(words_split)]\n\
    \    \n    if isempty(words_split)\n        return words\n    end\n    \n    words_split\
    \ = words_split[findall(words_split)]\n    \n    if isempty(words_split)\n   \
    \     return words\n    end\n    \n    words_split = words_split[findall(words_split)]\n\
    \    \n    if isempty(words_split)\n        return words\n    end\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprp4jekl5.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmprp4jekl5.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmprp4jekl5.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_split = Vector{String}(undef,\
    \ 0)\n    words_split = [word for word in words if word != \"\"]\n    words_split\
    \ = sort(words_split)\n    words_split = words_split[words_split .!= \"\"]\n \
    \   words_split = words_split[words_split .!= \" \"]\n    words_split = words_split[words_split\
    \ .!= \",\"]\n    words_split = words_split[words_split .!= \".\"]\n    words_split\
    \ = words_split[words_split .!= \"]\"]\n    words_split = words_split[words_split\
    \ .!= \"]\"]\n    words_split = words_split[words_split .!= \"]\"]\n    words_split\
    \ = words_split[words_split .!= \"]\"]\n    words_split = words_split[words_split\
    \ .!= \"]\"]\n    words_split = words_split[words_split .!= \"]\"]\n    words_split\
    \ = words_split[words_split .!= \"]\"]\n    words_split = words_split[words_split\
    \ .!= \"]\"]\n    words_split = words_split[words_split .!= \"]\"]\n    words_split\
    \ = words_split[words_split .!= \"]\"]\n    words_split = words_split[words_split\
    \ .!= \"]\"]\n    words_split = words_split[words_split .!= \"]\"]\n    words_split\
    \ = words_split[words_split .!= \"]\"]\n    words_split = words_split[words_split\
    \ .!= \"]\"]\n    words_split = words_split[words_split .!= \"]\"]\n    words_split\
    \ = words_split[words_split .!= \"]\"]\n    words_split = words_split[words_split\
    \ .!= \"]\"]\n    words_split = words_split[words_split .!= \"]\"]\n    words_split\
    \ = words_split[words_split .!= \"]\"]\n    words_split = words_split[words_split\
    \ .!= \"]\"]\n    words_split = words_split[words_split .!= \"]\"]\n    words_split\
    \ = words_split[words_split .!= \"]\"]\n    words_split = words_split[words_split\
    \ .!= \"]\"]\n    words_split = words_split[words_split .!= \"]\"]\n    words_split\
    \ = words_split[words_split .!= \"]\"]\n    words_split = words_split[words_split\
    \ .!= \"]\"]\n    words_split = words_split[words_split .!= \"]\"]\n    words_split\
    \ = words_split[words_split .!= \"]\"]\n    words_split = words_split[words_split\
    \ .!= \"]\"]\n    words_split = words_split[words_split .!= \"]\"]\n    words_split\
    \ = words_split[words_split .!= \"]\"]\n    words_split = words_split[words_split\
    \ .!= \"]\"]\n    words_split = words_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4xj2n9jq.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp4xj2n9jq.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp4xj2n9jq.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    if isempty(words)\n\
    \        return words\n    end\n    \n    words_split = split(words, \",\")\n\
    \    \n    if isempty(words_split)\n        return words\n    end\n    \n    words_split2\
    \ = split(words_split[1], \" \")\n    \n    if isempty(words_split2)\n       \
    \ return words\n    end\n    \n    words_split3 = split(words_split2[1], \",\"\
    )\n    \n    if isempty(words_split3)\n        return words\n    end\n    \n \
    \   words_split4 = split(words_split3[1], \" \")\n    \n    if isempty(words_split4)\n\
    \        return words\n    end\n    \n    words_split5 = split(words_split4[1],\
    \ \",\")\n    \n    if isempty(words_split5)\n        return words\n    end\n\
    \    \n    words_split6 = split(words_split5[1], \" \")\n    \n    if isempty(words_split6)\n\
    \        return words\n    end\n    \n    words_split7 = split(words_split6[1],\
    \ \",\")\n    \n    if isempty(words_split7)\n        return words\n    end\n\
    \    \n    words_split8 = split(words_split7[1], \" \")\n    \n    if isempty(words_split8)\n\
    \        return words\n    end\n    \n    words_split9 = split(words_split8[1],\
    \ \",\")\n    \n    if isempty(words_split9)\n        return words\n    end\n\
    \    \n    words_split10 = split(words_split9[1], \" \")\n    \n    if isempty(words_split10)\n\
    \        return words\n    end\n    \n    words_split11 = split(words_split10[1],\
    \ \",\")\n    \n    if isempty(words_split11)\n        return words\n    end\n\
    \    \n    words_split12 = split(words_split11[1], \" \")\n    \n    if isempty(words_split12)\n\
    \        return words\n    end\n    \n    words_split13 = split(words_split12[1],\
    \ \",\")\n    \n    if isempty(words_split13)\n        return words\n    end\n\
    \    \n    words_split14 = split(words_split13[1], \" \")\n    \n    if isempty(words_split14)\n\
    \        return words\n    end\n    \n    words_split15 = split(words_split14[1],\
    \ \",\")\n    \n    if isempty(words_split15)\n        return words\n    end\n\
    \    \n    words_split16 = split(words_split15[1], \" \")\n    \n    if isempty(words_split16)\n\
    \        return words\n    end\n    \n    words_split17 = split(words_split16[1],\
    \ \",\")\n    \n    if \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing condition in \"if\" at /tmp/tmp4gy6rzm9.jl:116\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp4gy6rzm9.jl:117\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp4gy6rzm9.jl:117\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    txt = txt.trim()\n    \n    if txt == \"\"\n        return\
    \ txt\n    \n    words = split(txt, \" \")\n    \n    words_split = Vector{String}()\n\
    \    \n    for word in words\n        words_split = words_split ++ split(word,\
    \ \",\")\n    end\n    \n    words_split = words_split ++ split(txt, \" \")\n\
    \    \n    words_split = words_split ++ split(txt, \",\")\n    \n    words_split\
    \ = words_split ++ split(txt, \" \")\n    \n    words_split = words_split ++ split(txt,\
    \ \",\")\n    \n    words_split = words_split ++ split(txt, \" \")\n    \n   \
    \ words_split = words_split ++ split(txt, \",\")\n    \n    words_split = words_split\
    \ ++ split(txt, \" \")\n    \n    words_split = words_split ++ split(txt, \",\"\
    )\n    \n    words_split = words_split ++ split(txt, \" \")\n    \n    words_split\
    \ = words_split ++ split(txt, \",\")\n    \n    words_split = words_split ++ split(txt,\
    \ \" \")\n    \n    words_split = words_split ++ split(txt, \",\")\n    \n   \
    \ words_split = words_split ++ split(txt, \" \")\n    \n    words_split = words_split\
    \ ++ split(txt, \",\")\n    \n    words_split = words_split ++ split(txt, \" \"\
    )\n    \n    words_split = words_split ++ split(txt, \",\")\n    \n    words_split\
    \ = words_split ++ split(txt, \" \")\n    \n    words_split = words_split ++ split(txt,\
    \ \",\")\n    \n    words_split = words_split ++ split(txt, \" \")\n    \n   \
    \ words_split = words_split ++ split(txt, \",\")\n    \n    words_split = words_split\
    \ ++ split(txt, \" \")\n    \n    words_split = words_split ++ split(txt, \",\"\
    )\n    \n    words_split = words_split ++ split(txt, \" \")\n    \n    words_split\
    \ = words_split ++ split(txt, \",\")\n    \n    words_split = words_split ++ split(txt,\
    \ \" \")\n    \n    words_split = words_split ++ split(txt, \",\")\n    \n   \
    \ words_split = words_split ++ split(txt, \" \")\n    \n    words_split = words_split\
    \ ++ split(txt, \",\")\n    \n    words_split = words_split ++ split(txt, \" \"\
    )\n    \n    words_split = words_split ++ split(txt, \",\")\n    \n    words_split\
    \ = words_split ++ split(txt, \" \")\n    \n    words_split = words_split ++ split(txt,\
    \ \",\")\n    \n    words_split = words_split ++ split(txt, \" \")\n    \n   \
    \ words_split = words_split ++ \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl3noqg6f.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpl3noqg6f.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    txt = txt.split(\" \") \n    txt = txt.filter(x\
    \ -> x != \"\")\n    txt = txt.map(x -> lowercase(x))\n    txt = txt.filter(x\
    \ -> x != \"\")\n    txt = txt.map(x -> lowercase(x))\n    txt = txt.filter(x\
    \ -> x != \"\")\n    txt = txt.map(x -> lowercase(x))\n    txt = txt.filter(x\
    \ -> x != \"\")\n    txt = txt.map(x -> lowercase(x))\n    txt = txt.filter(x\
    \ -> x != \"\")\n    txt = txt.map(x -> lowercase(x))\n    txt = txt.filter(x\
    \ -> x != \"\")\n    txt = txt.map(x -> lowercase(x))\n    txt = txt.filter(x\
    \ -> x != \"\")\n    txt = txt.map(x -> lowercase(x))\n    txt = txt.filter(x\
    \ -> x != \"\")\n    txt = txt.map(x -> lowercase(x))\n    txt = txt.filter(x\
    \ -> x != \"\")\n    txt = txt.map(x -> lowercase(x))\n    txt = txt.filter(x\
    \ -> x != \"\")\n    txt = txt.map(x -> lowercase(x))\n    txt = txt.filter(x\
    \ -> x != \"\")\n    txt = txt.map(x -> lowercase(x))\n    txt = txt.filter(x\
    \ -> x != \"\")\n    txt = txt.map(x -> lowercase(x))\n    txt = txt.filter(x\
    \ -> x != \"\")\n    txt = txt.map(x -> lowercase(x))\n    txt = txt.filter(x\
    \ -> x != \"\")\n    txt = txt.map(x -> lowercase(x))\n    txt = txt.filter(x\
    \ -> x != \"\")\n    txt = txt.map(x -> lowercase(x))\n    txt = txt.filter(x\
    \ -> x != \"\")\n    txt = txt.map(x -> lowercase(x))\n    txt = txt.filter(x\
    \ -> x != \"\")\n    txt = txt.map(x -> lowercase(x))\n    txt = txt.filter(x\
    \ -> x != \"\")\n    txt = txt.map(x -> lowercase(x))\n    txt = txt.filter(x\
    \ -> x != \"\")\n    txt = txt.map(x -> lowercase(x))\n    txt = txt.filter(x\
    \ -> x != \"\")\n    txt = txt.map(x -> lowercase(x))\n    txt = txt.filter(x\
    \ -> x != \"\")\n    txt = txt.map(x -> lowercase(x))\n    txt = txt.filter(x\
    \ -> x != \"\")\n\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t\
    @test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfzplngwp.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpfzplngwp.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpfzplngwp.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpj5y_r9uv.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpj5y_r9uv.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpj5y_r9uv.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if isempty(txt)\n        return txt\n    else\n        words =\
    \ split(txt, \" \")\n        words = [w for w in words if w != \"\"]\n       \
    \ words = [w for w in words if w != \",\"]\n        words = [w for w in words\
    \ if w != \" \"]\n        words = [w for w in words if w != \"\\n\"]\n       \
    \ words = [w for w in words if w != \"\\t\"]\n        words = [w for w in words\
    \ if w != \"\\r\"]\n        words = [w for w in words if w != \"\\t\"]\n     \
    \   words = [w for w in words if w != \"\\r\"]\n        words = [w for w in words\
    \ if w != \"\\t\"]\n        words = [w for w in words if w != \"\\r\"]\n     \
    \   words = [w for w in words if w != \"\\t\"]\n        words = [w for w in words\
    \ if w != \"\\r\"]\n        words = [w for w in words if w != \"\\t\"]\n     \
    \   words = [w for w in words if w != \"\\r\"]\n        words = [w for w in words\
    \ if w != \"\\t\"]\n        words = [w for w in words if w != \"\\r\"]\n     \
    \   words = [w for w in words if w != \"\\t\"]\n        words = [w for w in words\
    \ if w != \"\\r\"]\n        words = [w for w in words if w != \"\\t\"]\n     \
    \   words = [w for w in words if w != \"\\r\"]\n        words = [w for w in words\
    \ if w != \"\\t\"]\n        words = [w for w in words if w != \"\\r\"]\n     \
    \   words = [w for w in words if w != \"\\t\"]\n        words = [w for w in words\
    \ if w != \"\\r\"]\n        words = [w for w in words if w != \"\\t\"]\n     \
    \   words = [w for w in words if w != \"\\r\"]\n        words = [w for w in words\
    \ if w != \"\\t\"]\n        words = [w for w in words if w != \"\\r\"]\n     \
    \   words = [w for w in words if w != \"\\t\"]\n        words = [w for w in words\
    \ if w != \"\\r\"]\n        words = [w for w in words if w != \"\\t\"]\n     \
    \   words = [w for w in words if w != \"\\r\"]\n        words = [w for w in words\
    \ if w != \"\\t\"]\n        words = [w for w in words if w != \"\\r\"]\n     \
    \   words = [w for w in words if w != \"\\t\"]\n        words = [w for w in words\
    \ if w != \"\\r\"]\n        words = [w for w in words if w != \"\\t\"]\n     \
    \   words = [w for w in words if w != \"\\r\nusing Test\n\n@testset begin\n\n\
    candidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"\
    world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t\
    @test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpupf0kut2.jl:58\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpupf0kut2.jl:58\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpblqayylh.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpblqayylh.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpblqayylh.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    txt = txt.trim()\n    if txt == \"\"\n        return txt\n\
    \    \n    words = split(txt, \" \")\n    \n    words_split = Vector{String}(undef,\
    \ 0)\n    \n    for word in words\n        words_split = words_split ++ split(word,\
    \ \",\")\n    end\n    \n    words_split = words_split ++ split(split(txt, \"\
    .\"), \",\")\n    \n    words_split = words_split ++ split(split(txt, \"!\"),\
    \ \",\")\n    \n    words_split = words_split ++ split(split(txt, \"?\"), \",\"\
    )\n    \n    words_split = words_split ++ split(split(txt, \";\"), \",\")\n  \
    \  \n    words_split = words_split ++ split(split(txt, \":\"), \",\")\n    \n\
    \    words_split = words_split ++ split(split(txt, \",\"), \",\")\n    \n    words_split\
    \ = words_split ++ split(split(txt, \"-\"), \",\")\n    \n    words_split = words_split\
    \ ++ split(split(txt, \"/\"), \",\")\n    \n    words_split = words_split ++ split(split(txt,\
    \ \"\\\\\"), \",\")\n    \n    words_split = words_split ++ split(split(txt, \"\
    '\"), \",\")\n    \n    words_split = words_split ++ split(split(txt, \"\\\"\"\
    ), \",\")\n    \n    words_split = words_split ++ split(split(txt, \"[\"), \"\
    ,\")\n    \n    words_split = words_split ++ split(split(txt, \"]\"), \",\")\n\
    \    \n    words_split = words_split ++ split(split(txt, \"(\"), \",\")\n    \n\
    \    words_split = words_split ++ split(split(txt, \")\"), \",\")\n    \n    words_split\
    \ = words_split ++ split(split(txt, \"{\"), \",\")\n    \n    words_split = words_split\
    \ ++ split(split(txt, \"}\"), \",\")\n    \n    words_split = words_split ++ split(split(txt,\
    \ \"[\"), \",\")\n    \n    words_split = words_split ++ split(split(txt, \"]\"\
    ), \",\")\n    \n    words_split = words_split ++ split(split(txt, \"(\"), \"\
    ,\")\n    \n    words_split = words_split ++ split(split(txt, \")\"), \",\")\n\
    \    \n    words_split = words_split ++ split(split(txt, \"{\"), \",\")\n    \n\
    \    words_split = words_split ++ split(split(txt, \"}\"), \",\")\n    \n    words_split\
    \ = words_split ++ split(split(txt, \"[\"), \",\")\n    \n    words_split = words_split\
    \ ++ split(split(txt, \"]\"), \",\")\n    \n    words_split = words_split ++ split(split(txt,\
    \ \"(\"), \",\")\n    \n    words_split = words_split ++ split(split(txt\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfhmcuy1j.jl:77\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfhmcuy1j.jl:77\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    \n    words_splitted = []\n    \n\
    \    for word in words\n        words_splitted = words_splitted ++ split(word,\
    \ \",\")\n    end\n    \n    words_splitted = words_splitted ++ split(split(txt,\
    \ \",\")[1], \" \")\n    \n    words_splitted = words_splitted ++ split(split(txt,\
    \ \",\")[2], \" \")\n    \n    words_splitted = words_splitted ++ split(split(txt,\
    \ \",\")[3], \" \")\n    \n    words_splitted = words_splitted ++ split(split(txt,\
    \ \",\")[4], \" \")\n    \n    words_splitted = words_splitted ++ split(split(txt,\
    \ \",\")[5], \" \")\n    \n    words_splitted = words_splitted ++ split(split(txt,\
    \ \",\")[6], \" \")\n    \n    words_splitted = words_splitted ++ split(split(txt,\
    \ \",\")[7], \" \")\n    \n    words_splitted = words_splitted ++ split(split(txt,\
    \ \",\")[8], \" \")\n    \n    words_splitted = words_splitted ++ split(split(txt,\
    \ \",\")[9], \" \")\n    \n    words_splitted = words_splitted ++ split(split(txt,\
    \ \",\")[10], \" \")\n    \n    words_splitted = words_splitted ++ split(split(txt,\
    \ \",\")[11], \" \")\n    \n    words_splitted = words_splitted ++ split(split(txt,\
    \ \",\")[12], \" \")\n    \n    words_splitted = words_splitted ++ split(split(txt,\
    \ \",\")[13], \" \")\n    \n    words_splitted = words_splitted ++ split(split(txt,\
    \ \",\")[14], \" \")\n    \n    words_splitted = words_splitted ++ split(split(txt,\
    \ \",\")[15], \" \")\n    \n    words_splitted = words_splitted ++ split(split(txt,\
    \ \",\")[16], \" \")\n    \n    words_splitted = words_splitted ++ split(split(txt,\
    \ \",\")[17], \" \")\n    \n    words_splitted = words_splitted ++ split(split(txt,\
    \ \",\")[18], \" \")\n    \n    words_splitted = words_splitted ++ split(split(txt,\
    \ \",\")[19], \" \")\n    \n    words_splitted = words_splitted ++ split(split(txt,\
    \ \",\")[20], \" \")\n    \n    words_splitted = words_splitted ++ split(split(txt,\
    \ \",\")[21], \" \")\n    \n    words_splitted = words_splitted ++ split(split(txt,\
    \ \",\")[22], \" \")\n    \n    words_splitted = words_splitted ++ split(split(txt,\
    \ \",\")[23], \" \")\n    \n    words_splitted = words_split\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgp095jeb.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpgp095jeb.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpgp095jeb.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt)\n    \n    words_splitted = []\n    \n\
    \    for w in words\n        \n        if w == \"\"\n            words_splitted\
    \ = words_splitted ++ [\"\"]\n        elseif w == \"\\n\"\n            words_splitted\
    \ = words_splitted ++ [\"\"]\n        elseif w == \",\"\n            words_splitted\
    \ = words_splitted ++ [\"\"]\n        else\n            words_splitted = words_splitted\
    \ ++ split(w)\n        end\n    end\n    \n    return words_splitted\nend\n</cell>\n\
    <code language=julia-1.5>\nsplit_words(\"Hello world!\")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"Hello,world!\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"\
    abcdef\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello world!\")\n\
    </cell>\n<code language=julia-1.5>\nsplit_words(\"Hello,world!\")\n</cell>\n<code\
    \ language=julia-1.5>\nsplit_words(\"abcdef\")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"Hello world!\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"\
    Hello,world!\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdef\")\n\
    </cell>\n<code language=julia-1.5>\nsplit_words(\"Hello world!\")\n</cell>\n<code\
    \ language=julia-1.5>\nsplit_words(\"Hello,world!\")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"abcdef\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello\
    \ world!\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello,world!\"\
    )\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdef\")\n</cell>\n<code\
    \ language=julia-1.5>\nsplit_words(\"Hello world!\")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"Hello,world!\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"\
    abcdef\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello world!\")\n\
    </cell>\n<code language=julia-1.5>\nsplit_words(\"Hello,world!\")\n</cell>\n<code\
    \ language=julia-1.5>\nsplit_words(\"abcdef\")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"Hello world!\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"\
    Hello,world!\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdef\")\n\
    </\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptjduopnp.jl:31\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptjduopnp.jl:31\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0hnte6nt.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp0hnte6nt.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp0hnte6nt.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if isempty(txt)\n        return txt\n    else\n        words =\
    \ split(txt, \" \")\n        words = [w for w in words if w != \"\"]\n       \
    \ words = [w for w in words if w != \",\"]\n        words = [w for w in words\
    \ if w != \"abcdef\"]\n        words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz\"\
    ]\n        words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ]\n        words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\"\
    ]\n        words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ]\n        words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    ]\n        words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefgh\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_w437rvo.jl:29\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_w437rvo.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_split = split(txt, \",\")\n\
    \    if length(words_split) == length(words)\n        return words\n    else\n\
    \        return words_split\n    end\nend\n</code>\n<|/ a |>\n<| a tags=julia,string\
    \ |>\nI came up with this solution:\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"\
    world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t\
    @test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpic0kbi18.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpic0kbi18.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    \n    if length(words) == 0 \n \
    \       return 0 \n    else \n        \n        words = [w for w in words if w\
    \ != \"\"]\n        \n        if length(words) == 0 \n            return 0 \n\
    \        else \n            \n            words = [w for w in words if w != \"\
    ,\"]\n            \n            if length(words) == 0 \n                return\
    \ 0 \n            else \n                \n                words = [w for w in\
    \ words if w != \"a\" and w != \"b\" and w != \"c\" and w != \"d\" and w != \"\
    e\" and w != \"f\" and w != \"g\" and w != \"h\" and w != \"i\" and w != \"j\"\
    \ and w != \"k\" and w != \"l\" and w != \"m\" and w != \"n\" and w != \"o\" and\
    \ w != \"p\" and w != \"q\" and w != \"r\" and w != \"s\" and w != \"t\" and w\
    \ != \"u\" and w != \"v\" and w != \"w\" and w != \"x\" and w != \"y\" and w !=\
    \ \"z\"]\n                \n                if length(words) == 0 \n         \
    \           return 0 \n                else \n                    \n         \
    \           words = [w for w in words if w != \"A\" and w != \"B\" and w != \"\
    C\" and w != \"D\" and w != \"E\" and w != \"F\" and w != \"G\" and w != \"H\"\
    \ and w != \"I\" and w != \"J\" and w != \"K\" and w != \"L\" and w != \"M\" and\
    \ w != \"N\" and w != \"O\" and w != \"P\" and w != \"Q\" and w != \"R\" and w\
    \ != \"S\" and w != \"T\" and w != \"U\" and w != \"V\" and w != \"W\" and w !=\
    \ \"X\" and w != \"Y\" and w != \"Z\"]\n                    \n               \
    \     if length(words) == 0 \n                        return 0 \n            \
    \        else \n                        \n                        words = [w for\
    \ w in words if w != \"0\" and w != \"1\" and w != \"2\" and w != \"3\" and w\
    \ != \"4\" and w != \"5\" and w != \"6\" and w != \"7\" and w != \"8\" and w !=\
    \ \"9\"]\n                        \n                        if length(words) ==\
    \ 0 \n                            return 0 \n                        else \n \
    \                           \n                            words = [w for w in\
    \ words if w != \"a\" and w != \"b\" and w != \"c\" and w != \"d\" and w != \"\
    e\" and w != \"f\" and w != \"g\" and w != \"h\" and w != \"i\" and w != \"j\"\
    \ and w != \"k\" and w != \"l\" and w != \"m\" and w != \"n\" and w != \"o\" and\
    \ w != \"p\" and w != \"q\" and w != \"r\" and w != \"s\" and w != \"t\" and w\
    \ != \"u\" and w != \"v\" and w != \"w\" and w != \"x\" and w != \"y\" and w !=\
    \ \"z\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp471qlcws.jl:29\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp471qlcws.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    txt = txt.strip(\",\")\n    txt = txt.strip(\"\
    \\n\")\n    txt = txt.strip(\"\\r\")\n    txt = txt.strip(\"\\t\")\n    txt =\
    \ txt.strip(\"\\t\")\n    txt = txt.strip(\"\\t\")\n    txt = txt.strip(\"\\t\"\
    )\n    txt = txt.strip(\"\\t\")\n    txt = txt.strip(\"\\t\")\n    txt = txt.strip(\"\
    \\t\")\n    txt = txt.strip(\"\\t\")\n    txt = txt.strip(\"\\t\")\n    txt =\
    \ txt.strip(\"\\t\")\n    txt = txt.strip(\"\\t\")\n    txt = txt.strip(\"\\t\"\
    )\n    txt = txt.strip(\"\\t\")\n    txt = txt.strip(\"\\t\")\n    txt = txt.strip(\"\
    \\t\")\n    txt = txt.strip(\"\\t\")\n    txt = txt.strip(\"\\t\")\n    txt =\
    \ txt.strip(\"\\t\")\n    txt = txt.strip(\"\\t\")\n    txt = txt.strip(\"\\t\"\
    )\n    txt = txt.strip(\"\\t\")\n    txt = txt.strip(\"\\t\")\n    txt = txt.strip(\"\
    \\t\")\n    txt = txt.strip(\"\\t\")\n    txt = txt.strip(\"\\t\")\n    txt =\
    \ txt.strip(\"\\t\")\n    txt = txt.strip(\"\\t\")\n    txt = txt.strip(\"\\t\"\
    )\n    txt = txt.strip(\"\\t\")\n    txt = txt.strip(\"\\t\")\n    txt = txt.strip(\"\
    \\t\")\n    txt = txt.strip(\"\\t\")\n    txt = txt.strip(\"\\t\")\n    txt =\
    \ txt.strip(\"\\t\")\n    txt = txt.strip(\"\\t\")\n    txt = txt.strip(\"\\t\"\
    )\n    txt = txt.strip(\"\\t\")\n    txt = txt.strip(\"\\t\")\n    txt = txt.strip(\"\
    \\t\")\n    txt = txt.strip(\"\\t\")\n    txt = txt.strip(\"\\t\")\n    txt =\
    \ txt.strip(\"\\t\")\n    txt = txt.strip(\"\\t\")\n    txt = txt.strip(\"\\t\"\
    )\n    txt = txt.strip(\"\\t\")\n    txt = txt.strip(\"\\t\")\n    txt = txt.strip(\"\
    \\t\")\n    txt = txt.\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"Test\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmphnh4nja6.jl:63\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmphnh4nja6.jl:63\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    if length(words) ==\
    \ 0 \n        return 0 \n    else \n        \n        \n        \n        \n \
    \       \n        \n        \n        \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \nusing Test\n\n@testset begin\n\ncandidate =\
    \ split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp_w3_ao_j.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp_w3_ao_j.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp_w3_ao_j.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    words_split = []\n \
    \   \n    for word in words\n        \n        if !isnothing(word)\n         \
    \   \n            words_split = words_split ++ split(word,\",\")\n           \
    \ \n        end\n    end\n    \n    words_split = words_split ++ split(split(txt,\"\
    ,\")[1],\" \")\n    \n    words_split = words_split ++ split(split(txt,\",\")[2],\"\
    \ \")\n    \n    words_split = words_split ++ split(split(txt,\",\")[3],\" \"\
    )\n    \n    words_split = words_split ++ split(split(txt,\",\")[4],\" \")\n \
    \   \n    words_split = words_split ++ split(split(txt,\",\")[5],\" \")\n    \n\
    \    words_split = words_split ++ split(split(txt,\",\")[6],\" \")\n    \n   \
    \ words_split = words_split ++ split(split(txt,\",\")[7],\" \")\n    \n    words_split\
    \ = words_split ++ split(split(txt,\",\")[8],\" \")\n    \n    words_split = words_split\
    \ ++ split(split(txt,\",\")[9],\" \")\n    \n    words_split = words_split ++\
    \ split(split(txt,\",\")[10],\" \")\n    \n    words_split = words_split ++ split(split(txt,\"\
    ,\")[11],\" \")\n    \n    words_split = words_split ++ split(split(txt,\",\"\
    )[12],\" \")\n    \n    words_split = words_split ++ split(split(txt,\",\")[13],\"\
    \ \")\n    \n    words_split = words_split ++ split(split(txt,\",\")[14],\" \"\
    )\n    \n    words_split = words_split ++ split(split(txt,\",\")[15],\" \")\n\
    \    \n    words_split = words_split ++ split(split(txt,\",\")[16],\" \")\n  \
    \  \n    words_split = words_split ++ split(split(txt,\",\")[17],\" \")\n    \n\
    \    words_split = words_split ++ split(split(txt,\",\")[18],\" \")\n    \n  \
    \  words_split = words_split ++ split(split(txt,\",\")[19],\" \")\n    \n    words_split\
    \ = words_split ++ split(split(txt,\",\")[20],\" \")\n    \n    words_split =\
    \ words_split ++ split(split(txt,\",\")[21],\" \")\n    \n    words_split = words_split\
    \ ++ split(split(txt,\",\")[22],\" \")\n    \n    words_split = words_split ++\
    \ split(split(txt,\",\")[23],\" \")\n    \n    words_split = words_split ++ split(split(txt,\"\
    ,\")[24],\" \")\n    \n    words_split = words_split ++ split(split(txt,\",\"\
    )[25],\" \")\n    \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpygrjksbh.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpygrjksbh.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpygrjksbh.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return Vector{String}()\n\
    \    else\n        words = split(txt, \" \")\n        words = [w for w in words\
    \ if w != \"\"]\n        words = [w for w in words if w != \",\"]\n        words\
    \ = [w for w in words if w != \" \"]\n        words = [w for w in words if w !=\
    \ \"\\n\"]\n        words = [w for w in words if w != \"\\t\"]\n        words\
    \ = [w for w in words if w != \"\\r\"]\n        words = [w for w in words if w\
    \ != \"\\t\"]\n        words = [w for w in words if w != \"\\r\"]\n        words\
    \ = [w for w in words if w != \"\\t\"]\n        words = [w for w in words if w\
    \ != \"\\r\"]\n        words = [w for w in words if w != \"\\t\"]\n        words\
    \ = [w for w in words if w != \"\\r\"]\n        words = [w for w in words if w\
    \ != \"\\t\"]\n        words = [w for w in words if w != \"\\r\"]\n        words\
    \ = [w for w in words if w != \"\\t\"]\n        words = [w for w in words if w\
    \ != \"\\r\"]\n        words = [w for w in words if w != \"\\t\"]\n        words\
    \ = [w for w in words if w != \"\\r\"]\n        words = [w for w in words if w\
    \ != \"\\t\"]\n        words = [w for w in words if w != \"\\r\"]\n        words\
    \ = [w for w in words if w != \"\\t\"]\n        words = [w for w in words if w\
    \ != \"\\r\"]\n        words = [w for w in words if w != \"\\t\"]\n        words\
    \ = [w for w in words if w != \"\\r\"]\n        words = [w for w in words if w\
    \ != \"\\t\"]\n        words = [w for w in words if w != \"\\r\"]\n        words\
    \ = [w for w in words if w != \"\\t\"]\n        words = [w for w in words if w\
    \ != \"\\r\"]\n        words = [w for w in words if w != \"\\t\"]\n        words\
    \ = [w for w in words if w != \"\\r\"]\n        words = [w for w in words if w\
    \ != \"\\t\"]\n        words = [w for w in words if w != \"\\r\"]\n        words\
    \ = [w for w in words if w != \"\\t\"]\n        words = [w for w in words if w\
    \ != \"\\r\"]\n        words = [w for w in words if w != \"\\t\"]\n        words\
    \ = [w for w in words if w != \"\\r\"]\n        words = [w for w in words if w\
    \ != \"\\t\"]\n        word\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpxbft_eul.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpxbft_eul.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpxbft_eul.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    words_split = Vector{String}(undef,\
    \ 0)\n    \n    for word in words\n        words_split = words_split ++ [word]\n\
    \    end\n    \n    words_split = words_split ++ [word]\n    \n    words_split\
    \ = words_split ++ [word]\n    \n    words_split = words_split ++ [word]\n   \
    \ \n    words_split = words_split ++ [word]\n    \n    words_split = words_split\
    \ ++ [word]\n    \n    words_split = words_split ++ [word]\n    \n    words_split\
    \ = words_split ++ [word]\n    \n    words_split = words_split ++ [word]\n   \
    \ \n    words_split = words_split ++ [word]\n    \n    words_split = words_split\
    \ ++ [word]\n    \n    words_split = words_split ++ [word]\n    \n    words_split\
    \ = words_split ++ [word]\n    \n    words_split = words_split ++ [word]\n   \
    \ \n    words_split = words_split ++ [word]\n    \n    words_split = words_split\
    \ ++ [word]\n    \n    words_split = words_split ++ [word]\n    \n    words_split\
    \ = words_split ++ [word]\n    \n    words_split = words_split ++ [word]\n   \
    \ \n    words_split = words_split ++ [word]\n    \n    words_split = words_split\
    \ ++ [word]\n    \n    words_split = words_split ++ [word]\n    \n    words_split\
    \ = words_split ++ [word]\n    \n    words_split = words_split ++ [word]\n   \
    \ \n    words_split = words_split ++ [word]\n    \n    words_split = words_split\
    \ ++ [word]\n    \n    words_split = words_split ++ [word]\n    \n    words_split\
    \ = words_split ++ [word]\n    \n    words_split = words_split ++ [word]\n   \
    \ \n    words_split = words_split ++ [word]\n    \n    words_split = words_split\
    \ ++ [word]\n    \n    words_split = words_split ++ [word]\n    \n    words_split\
    \ = words_split ++ [word]\n    \n    words_split = words_split ++ [word]\n   \
    \ \n    words_split = words_split ++ [word]\n    \n    words_split = words_split\
    \ ++ [word]\n    \n    words_split = words_split ++ [word]\n    \n    words_split\
    \ = words_split ++ [word]\n    \n    words_split = words_split ++ [word]\n   \
    \ \n    words_split = words_split ++ [word]\n    \n    words_\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpru0bw0ye.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpru0bw0ye.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpru0bw0ye.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    words_split = split(words)\n    words_split\
    \ = [w for w in words_split if w != \"\"]\n    words_split = [w for w in words_split\
    \ if w != \",\"]\n    words_split = [w for w in words_split if w != \" \"]\n \
    \   words_split = [w for w in words_split if w != \"\\t\"]\n    words_split =\
    \ [w for w in words_split if w != \"\\n\"]\n    words_split = [w for w in words_split\
    \ if w != \"\\r\"]\n    words_split = [w for w in words_split if w != \"\\t\"\
    ]\n    words_split = [w for w in words_split if w != \"\\r\"]\n    words_split\
    \ = [w for w in words_split if w != \"\\n\"]\n    words_split = [w for w in words_split\
    \ if w != \"\\t\"]\n    words_split = [w for w in words_split if w != \"\\r\"\
    ]\n    words_split = [w for w in words_split if w != \"\\n\"]\n    words_split\
    \ = [w for w in words_split if w != \"\\t\"]\n    words_split = [w for w in words_split\
    \ if w != \"\\r\"]\n    words_split = [w for w in words_split if w != \"\\n\"\
    ]\n    words_split = [w for w in words_split if w != \"\\t\"]\n    words_split\
    \ = [w for w in words_split if w != \"\\r\"]\n    words_split = [w for w in words_split\
    \ if w != \"\\n\"]\n    words_split = [w for w in words_split if w != \"\\t\"\
    ]\n    words_split = [w for w in words_split if w != \"\\r\"]\n    words_split\
    \ = [w for w in words_split if w != \"\\n\"]\n    words_split = [w for w in words_split\
    \ if w != \"\\t\"]\n    words_split = [w for w in words_split if w != \"\\r\"\
    ]\n    words_split = [w for w in words_split if w != \"\\n\"]\n    words_split\
    \ = [w for w in words_split if w != \"\\t\"]\n    words_split = [w for w in words_split\
    \ if w != \"\\r\"]\n    words_split = [w for w in words_split if w != \"\\n\"\
    ]\n    words_split = [w for w in words_split if w != \"\\t\"]\n    words_split\
    \ = [w for w in words_split if w != \"\\r\"]\n    words_split = [w for w in words_split\
    \ if w != \"\\n\"]\n    words_split = [w for w in words_split if w != \"\\t\"\
    ]\n    words_split = [w for w in words_split if w != \"\\r\"]\n    words_split\
    \ = [w for w in words_split if w != \"\\n\"]\n    words_split = [w \nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpiz2opzwh.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpiz2opzwh.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return Vector{String}()\n\
    \    elseif txt.chars.filter(x -> x != ' ').length == 0\n        return txt.split(\"\
    \ \") \n    elseif txt.chars.filter(x -> x != ',').length == 0\n        return\
    \ txt.split(\",\")\n    else\n        return txt.chars.filter(x -> x != ' ').length\n\
    \    end\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9upu9l29.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9upu9l29.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    txt = txt.trim()\n    \n    if txt == \"\"\n        return\
    \ txt\n    else\n        \n        words = split(txt, \" \")\n        \n     \
    \   words_splitted = []\n        \n        for word in words\n            \n \
    \           if word == \"\"\n                continue\n            \n        \
    \    words_splitted = words_splitted ++ split(word, \",\")\n            \n   \
    \     end\n        \n        words_splitted = words_splitted ++ split(txt, \"\
    ,\")\n        \n        words_splitted = words_splitted ++ split(txt, \" \")\n\
    \        \n        words_splitted = words_splitted ++ split(txt, \" \")\n    \
    \    \n        words_splitted = words_splitted ++ split(txt, \" \")\n        \n\
    \        words_splitted = words_splitted ++ split(txt, \" \")\n        \n    \
    \    words_splitted = words_splitted ++ split(txt, \" \")\n        \n        words_splitted\
    \ = words_splitted ++ split(txt, \" \")\n        \n        words_splitted = words_splitted\
    \ ++ split(txt, \" \")\n        \n        words_splitted = words_splitted ++ split(txt,\
    \ \" \")\n        \n        words_splitted = words_splitted ++ split(txt, \" \"\
    )\n        \n        words_splitted = words_splitted ++ split(txt, \" \")\n  \
    \      \n        words_splitted = words_splitted ++ split(txt, \" \")\n      \
    \  \n        words_splitted = words_splitted ++ split(txt, \" \")\n        \n\
    \        words_splitted = words_splitted ++ split(txt, \" \")\n        \n    \
    \    words_splitted = words_splitted ++ split(txt, \" \")\n        \n        words_splitted\
    \ = words_splitted ++ split(txt, \" \")\n        \n        words_splitted = words_splitted\
    \ ++ split(txt, \" \")\n        \n        words_splitted = words_splitted ++ split(txt,\
    \ \" \")\n        \n        words_splitted = words_splitted ++ split(txt, \" \"\
    )\n        \n        words_splitted = words_splitted ++ split(txt, \" \")\n  \
    \      \n        words_splitted = words_splitted ++ split(txt, \" \")\n      \
    \  \n        words_splitted = words_splitted ++ split(txt, \" \")\n        \n\
    \        words_splitted = words_splitted ++ split(txt, \" \")\n        \n    \
    \    words_splitted = words_splitted ++ split(txt, \" \")\n        \n        words_splitted\
    \ = words_splitted ++ split(txt, \" \")\n        \n        words_splitted = words_splitted\
    \ ++ split(txt, \" \")\n        \n        words_splitted = words_splitted ++ split(txt,\
    \ \" \")\n        \n        words_splitted = words_splitted ++ split(txt, \" \"\
    )\n        \n        words_splitted = words_splitted ++ split(txt, \" \")\n  \
    \      \n        \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t\
    @test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpjia8p13z.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpjia8p13z.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpjia8p13z.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    if length(words) ==\
    \ 0\n        return txt\n    else\n        \n        words = [w for w in words\
    \ if w != \"\"]\n        \n        if length(words) == 0\n            return txt\n\
    \        else\n            \n            words = [w for w in words if w != \"\
    ,\"]\n            \n            if length(words) == 0\n                return\
    \ length(words)\n            else\n                \n                words = [w\
    \ for w in words if w != \",\"]\n                \n                if length(words)\
    \ == 0\n                    return length(words)\n                else\n     \
    \               \n                    words = [w for w in words if w != \",\"\
    ]\n                    \n                    if length(words) == 0\n         \
    \               return length(words)\n                    else\n             \
    \           \n                        words = [w for w in words if w != \",\"\
    ]\n                        \n                        if length(words) == 0\n \
    \                           return length(words)\n                        else\n\
    \                            \n                            words = [w for w in\
    \ words if w != \",\"]\n                            \n                       \
    \     if length(words) == 0\n                                return length(words)\n\
    \                            else\n                                \n        \
    \                        words = [w for w in words if w != \",\"]\n          \
    \                      \n                                if length(words) == 0\n\
    \                                    return length(words)\n                  \
    \              else\n                                    \n                  \
    \                  words = [w for w in words if w != \",\"]\n                \
    \                    \n                                    if length(words) ==\
    \ 0\n                                        return length(words)\n          \
    \                          else\n                                        \n  \
    \                                      words = [w for w in words if w != \",\"\
    ]\n                                        \n                                \
    \        if length(words) == 0\n                                            return\
    \ length(words)\n                                        else\n              \
    \                              \n                                            words\
    \ = [w for w in words if w != \",\"]\n                                       \
    \     \n                                            if length(words) == 0\n  \
    \                                              return length(words)\n        \
    \                                    else\n                                  \
    \              \n                                                words = [w for\
    \ w in words if w != \",\"]\n                                                \n\
    \                                                if length(words) == 0\n     \
    \                                               return length(words)\n       \
    \                                         else\n                             \
    \                       \n                                                   \
    \ words = [w for w in words if w != \",\"]\n                                 \
    \                   \n                                                    if length(words)\
    \ == 0\n                                                        return length(words)\n\
    \                                                    else\n                  \
    \                                      \n                                    \
    \                    words = [w for w in words if w != \",\"]\n              \
    \                                          \n                                \
    \                        if length(words) == 0\n                             \
    \                               return length(words)\n                       \
    \                                 else\n                                     \
    \                       \n                                                   \
    \         words = [w for w in words if w != \",\"]\n                         \
    \                                   \n                                       \
    \                     if length(words) == 0\n                                \
    \                                return length(words)\n                      \
    \                                      else\n                                \
    \                                \n                                          \
    \                      words = [w for w in words if w != \",\"]\n            \
    \                                                    \n                      \
    \                                          if length(words) == 0\n           \
    \                                                         return length(words)\n\
    \                                                                else\n      \
    \                                                              \n            \
    \                                                        words = [w for w in words\
    \ if w != \",\"]\n                                                           \
    \         \n                                                                 \
    \   if \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing condition in \"if\" at /tmp/tmpk6xcb16a.jl:110\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpk6xcb16a.jl:111\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpk6xcb16a.jl:111\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    if length(words) ==\
    \ 0\n        return words\n    end\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpx2hh8f64.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpx2hh8f64.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpx2hh8f64.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if isempty(txt)\n        return Vector{String}()\n\
    \    end\n    \n    words = split(txt, \" \")\n    \n    if length(words) == 0\n\
    \        return Vector{String}()\n    end\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpw9wevd_w.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpw9wevd_w.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpw9wevd_w.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    txt = txt.trim()\n    \n    if txt == \"\"\n        return\
    \ txt\n    \n    words = split(txt, \" \")\n    \n    words_split = Vector{String}()\n\
    \    \n    for word in words\n        words_split += split(word, \",\")\n    end\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty(x), words_split)]\n\
    \    \n    words_split = words_split[findall(x -> !isempty\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdnmq_dfa.jl:70\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdnmq_dfa.jl:70\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if isempty(txt)\n        return Vector{String}()\n    end\n   \
    \ \n    words = split(txt, \" \")\n    \n    if length(words) == 0\n        return\
    \ Vector{String}()\n    end\n    \n    words_split = Vector{String}()\n    \n\
    \    for word in words\n        if isempty(word)\n            continue\n     \
    \   end\n        \n        words_split = push!(words_split, word)\n    end\n \
    \   \n    return words_split\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n\
    \    count_letters(txt::String)\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpid_12umy.jl:33\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpid_12umy.jl:33\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return txt\n    words\
    \ = split(txt, \" \")\n    words_split = split(txt, \",\")\n    if length(words)\
    \ == length(words_split)\n        return words\n    else\n        return words_split\n\
    \    end\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8i5krfi3.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8i5krfi3.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    if length(words) ==\
    \ 0\n        return txt\n    else\n        \n        words_split = split(txt,\
    \ \",\")\n        \n        if length(words_split) == 0\n            return txt\n\
    \        else\n            \n            words_split = split(words_split[1], \"\
    ,\")\n            \n            if length(words_split) == 0\n                return\
    \ words_split[1]\n            else\n                \n                words_split\
    \ = split(words_split[1], \",\")\n                \n                if length(words_split)\
    \ == 0\n                    return words_split[1]\n                else\n    \
    \                \n                    words_split = split(words_split[1], \"\
    ,\")\n                    \n                    if length(words_split) == 0\n\
    \                        return words_split[1]\n                    else\n   \
    \                     \n                        words_split = split(words_split[1],\
    \ \",\")\n                        \n                        if length(words_split)\
    \ == 0\n                            return words_split[1]\n                  \
    \      else\n                            \n                            words_split\
    \ = split(words_split[1], \",\")\n                            \n             \
    \               if length(words_split) == 0\n                                return\
    \ words_split[1]\n                            else\n                         \
    \       \n                                words_split = split(words_split[1],\
    \ \",\")\n                                \n                                if\
    \ length(words_split) == 0\n                                    return words_split[1]\n\
    \                                else\n                                    \n\
    \                                    words_split = split(words_split[1], \",\"\
    )\n                                    \n                                    if\
    \ length(words_split) == 0\n                                        return words_split[1]\n\
    \                                    else\n                                  \
    \      \n                                        words_split = split(words_split[1],\
    \ \",\")\n                                        \n                         \
    \               if length(words_split) == 0\n                                \
    \            return words_split[1]\n                                        else\n\
    \                                            \n                              \
    \              words_split = split(words_split[1], \",\")\n                  \
    \                          \n                                            if length(words_split)\
    \ == 0\n                                                return words_split[1]\n\
    \                                            else\n                          \
    \                      \n                                                words_split\
    \ = split(words_split[1], \",\")\n                                           \
    \     \n                                                if length(words_split)\
    \ == 0\n                                                    return words_split[1]\n\
    \                                                else\n                      \
    \                              \n                                            \
    \        words_split = split(words_split[1], \",\")\n                        \
    \                            \n                                              \
    \      if length(words_split) == 0\n                                         \
    \               return words_split[1]\n                                      \
    \              else\n                                                        \n\
    \                                                        words_split = split(words_split[1],\
    \ \",\")\n                                                        \n         \
    \                                               return words_split[1]\n      \
    \                          end\n                            end\n            \
    \            end\n                    end\n                end\n            end\n\
    \        end\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns the number of words in the string. \nExamples\ncount_words(\"\
    Hello world!\") \u279E 7\ncount_words(\"Hello,world!\") \u279E 5\ncount_words(\"\
    abcdef\") == 3 \nHint: Use split() to split a string into an array of words.\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0s0rnioi.jl:102\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0s0rnioi.jl:102\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if isempty(txt)\n        return txt\n    else\n        words =\
    \ split(txt, \" \")\n        words_split = split(words, \",\")\n        words_split\
    \ = words_split[findall(@isaval, words_split, String)]\n        words_split =\
    \ words_split[findall(@isaval, words_split, Int64)]\n        words_split = words_split[findall(@isaval,\
    \ words_split, Char)]\n        return words_split\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    count_letters(txt::String)\n    Count the number\
    \ of lower-case letters in the given text\n    Examples\n    count_letters(\"\
    Hello world!\") \u279E 6\n    count_letters(\"Hello,world!\") \u279E 3\n    count_letters(\"\
    abcdef\") == 3 \n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: LoadError: LoadError: UndefVarError: @isaval not defined\n\
    Stacktrace:\n [1] top-level scope\n [2] #macroexpand#38 at ./expr.jl:108 [inlined]\n\
    \ [3] macroexpand at ./expr.jl:107 [inlined]\n [4] docm(::LineNumberNode, ::Module,\
    \ ::Any, ::Any, ::Bool) at ./docs/Docs.jl:523 (repeats 2 times)\n [5] @doc(::LineNumberNode,\
    \ ::Module, ::String, ::Vararg{Any,N} where N) at ./boot.jl:463\n [6] include(::Module,\
    \ ::String) at ./Base.jl:377\n [7] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [8] _start() at ./client.jl:484\nin expression starting at /tmp/tmpsz11emvy.jl:16\n\
    in expression starting at /tmp/tmpsz11emvy.jl:1\nin expression starting at /tmp/tmpsz11emvy.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_split = Vector{String}(undef,\
    \ 0)\n    words_split = [word for word in words if word != \"\"]\n    words_split\
    \ = sort(words_split)\n    words_split = words_split[findall(words_split .!= \"\
    \")]\n    words_split = words_split[findall(words_split .!= \" \")]\n    words_split\
    \ = words_split[findall(words_split .!= \",\")]\n    words_split = words_split[findall(words_split\
    \ .!= \" ,\")]\n    words_split = words_split[findall(words_split .!= \" ,.\"\
    )]\n    words_split = words_split[findall(words_split .!= \" ,..\")]\n    words_split\
    \ = words_split[findall(words_split .!= \" ,...\")]\n    words_split = words_split[findall(words_split\
    \ .!= \" ,....\")]\n    words_split = words_split[findall(words_split .!= \" ,.....\"\
    )]\n    words_split = words_split[findall(words_split .!= \" ,......\")]\n   \
    \ words_split = words_split[findall(words_split .!= \" ,.......\")]\n    words_split\
    \ = words_split[findall(words_split .!= \" ,........\")]\n    words_split = words_split[findall(words_split\
    \ .!= \" ,.........\")]\n    words_split = words_split[findall(words_split .!=\
    \ \" ,........\")]\n    words_split = words_split[findall(words_split .!= \" ,.........\"\
    )]\n    words_split = words_split[findall(words_split .!= \" ,.........\")]\n\
    \    words_split = words_split[findall(words_split .!= \" ,.........\")]\n   \
    \ words_split = words_split[findall(words_split .!= \" ,.........\")]\n    words_split\
    \ = words_split[findall(words_split .!= \" ,.........\")]\n    words_split = words_split[findall(words_split\
    \ .!= \" ,.........\")]\n    words_split = words_split[findall(words_split .!=\
    \ \" ,.........\")]\n    words_split = words_split[findall(words_split .!= \"\
    \ ,.........\")]\n    words_split = words_split[findall(words_split .!= \" ,.........\"\
    )]\n    words_split = words_split[findall(words_split .!= \" ,.........\")]\n\
    \    words_split = words_split[findall(words_split .!= \" ,.........\")]\n   \
    \ words_split = words_split[findall(words_split .!= \" ,.........\")]\n    words_split\
    \ = words_split[findall(words_split .!= \" ,.........\")]\n    words_split = words_split[findall(words_split\
    \ .!= \" ,.........\")]\n    words_split = words_split[findall(words_split .!=\
    \ \" ,\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxjlbv4m6.jl:49\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxjlbv4m6.jl:49\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return Vector{String}()\n\
    \    else\n        words = split(txt, \" \")\n        words = [w for w in words\
    \ if w != \"\"]\n        words = [w for w in words if w != \",\"]\n        words\
    \ = [w for w in words if w != \".\"]\n        words = [w for w in words if w !=\
    \ \"?\"]\n        words = [w for w in words if w != \"!\"]\n        words = [w\
    \ for w in words if w != \"-\"]\n        words = [w for w in words if w != \"\
    _\"]\n        words = [w for w in words if w != \"(\"]\n        words = [w for\
    \ w in words if w != \")\"]\n        words = [w for w in words if w != \"[\"]\n\
    \        words = [w for w in words if w != \"]\"]\n        words = [w for w in\
    \ words if w != \"{\"]\n        words = [w for w in words if w != \"}\"]\n   \
    \     words = [w for w in words if w != \"|\"]\n        words = [w for w in words\
    \ if w != \"\\\\\"]\n        words = [w for w in words if w != \"^\"]\n      \
    \  words = [w for w in words if w != \"~\"]\n        words = [w for w in words\
    \ if w != \"`\"]\n        words = [w for w in words if w != \"!\"]\n        words\
    \ = [w for w in words if w != \"@\"]\n        words = [w for w in words if w !=\
    \ \"#\"]\n        words = [w for w in words if w != \"$\"]\n        words = [w\
    \ for w in words if w != \"%\"]\n        words = [w for w in words if w != \"\
    ^\"]\n        words = [w for w in words if w != \"&\"]\n        words = [w for\
    \ w in words if w != \"*\"]\n        words = [w for w in words if w != \"(\"]\n\
    \        words = [w for w in words if w != \")\"]\n        words = [w for w in\
    \ words if w != \"[\"]\n        words = [w for w in words if w != \"]\"]\n   \
    \     words = [w for w in words if w != \"{\"]\n        words = [w for w in words\
    \ if w != \"}\"]\n        words = [w for w in words if w != \"|\"]\n        words\
    \ = [w for w in words if w != \"\\\\\"]\n        words = [w for w in words if\
    \ w != \"^\"]\n        words = [w for w in words if w != \"~\"]\n        words\
    \ = [w for w in words if w != \"`\"]\n        word\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptpab45_3.jl:37\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptpab45_3.jl:37\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    word_counts = Dict()\n\
    \    for word in words\n        word_counts[word] = get(word_counts, word, 0)\
    \ + 1\n    end\n    \n    sorted_word_counts = sort(collect(values(word_counts)),\
    \ by=x->x)\n    \n    word_counts = Dict()\n    for word in sorted_word_counts\n\
    \        word_counts[word] = get(word_counts, word, 0) + 1\n    end\n    \n  \
    \  sorted_word_counts = sort(collect(values(word_counts)), by=x->x)\n    \n  \
    \  word_counts = Dict()\n    for word in sorted_word_counts\n        word_counts[word]\
    \ = get(word_counts, word, 0) + 1\n    end\n    \n    sorted_word_counts = sort(collect(values(word_counts)),\
    \ by=x->x)\n    \n    word_counts = Dict()\n    for word in sorted_word_counts\n\
    \        word_counts[word] = get(word_counts, word, 0) + 1\n    end\n    \n  \
    \  sorted_word_counts = sort(collect(values(word_counts)), by=x->x)\n    \n  \
    \  word_counts = Dict()\n    for word in sorted_word_counts\n        word_counts[word]\
    \ = get(word_counts, word, 0) + 1\n    end\n    \n    sorted_word_counts = sort(collect(values(word_counts)),\
    \ by=x->x)\n    \n    word_counts = Dict()\n    for word in sorted_word_counts\n\
    \        word_counts[word] = get(word_counts, word, 0) + 1\n    end\n    \n  \
    \  sorted_word_counts = sort(collect(values(word_counts)), by=x->x)\n    \n  \
    \  word_counts = Dict()\n    for word in sorted_word_counts\n        word_counts[word]\
    \ = get(word_counts, word, 0) + 1\n    end\n    \n    sorted_word_counts = sort(collect(values(word_counts)),\
    \ by=x->x)\n    \n    word_counts = Dict()\n    for word in sorted_word_counts\n\
    \        word_counts[word] = get(word_counts, word, 0) + 1\n    end\n    \n  \
    \  sorted_word_counts = sort(collect(values(word_counts)), by=x->x)\n    \n  \
    \  word_counts = Dict()\n    for word in sorted_word_counts\n        word_counts[word]\
    \ = get(word_counts, word, 0) + 1\n    end\n    \n    sorted_word_counts = sort(collect(values(word_counts)),\
    \ by=x->x)\n    \n    word_counts = Dict()\n    for word in sorted_word_counts\n\
    \        word_counts[word] = get(word_counts, word, 0) + 1\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpypdr9uyf.jl:78\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpypdr9uyf.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpypdr9uyf.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    if isempty(txt)\n        return txt\n    else\n        words\
    \ = split(txt, \" \")\n        \n        words_splitted = []\n        for word\
    \ in words\n            words_splitted += split(word, \",\")\n        end\n  \
    \      \n        words_splitted = [word for word in words_splitted if !isempty(word)]\n\
    \        \n        words_splitted = [word for word in words_splitted if !islower(word)]\n\
    \        \n        words_splitted = [word for word in words_splitted if !isupper(word)]\n\
    \        \n        words_splitted = [word for word in words_splitted if !isdigit(word)]\n\
    \        \n        words_splitted = [word for word in words_splitted if !isspace(word)]\n\
    \        \n        words_splitted = [word for word in words_splitted if !issymbol(word)]\n\
    \        \n        words_splitted = [word for word in words_splitted if !isascii(word)]\n\
    \        \n        words_splitted = [word for word in words_splitted if !isascii(word)]\n\
    \        \n        words_splitted = [word for word in words_splitted if !isascii(word)]\n\
    \        \n        words_splitted = [word for word in words_splitted if !isascii(word)]\n\
    \        \n        words_splitted = [word for word in words_splitted if !isascii(word)]\n\
    \        \n        words_splitted = [word for word in words_splitted if !isascii(word)]\n\
    \        \n        words_splitted = [word for word in words_splitted if !isascii(word)]\n\
    \        \n        words_splitted = [word for word in words_splitted if !isascii(word)]\n\
    \        \n        words_splitted = [word for word in words_splitted if !isascii(word)]\n\
    \        \n        words_splitted = [word for word in words_splitted if !isascii(word)]\n\
    \        \n        words_splitted = [word for word in words_splitted if !isascii(word)]\n\
    \        \n        words_splitted = [word for word in words_splitted if !isascii(word)]\n\
    \        \n        words_splitted = [word for word in words_splitted if !isascii(word)]\n\
    \        \n        words_splitted = [word for word in words_splitted if !isascii(word)]\n\
    \        \n        words_splitted = [word for word in words_splitted if !isascii(word)]\n\
    \        \n        words_splitted = [word for word in words_splitted if !isascii(word)]\n\
    \        \n        words_\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpbsc4zoz1.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpbsc4zoz1.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpbsc4zoz1.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return txt\n    \n\
    \    words = split(txt, \" \")\n    \n    words_splitted = []\n    for word in\
    \ words\n        words_splitted = words_splitted ++ split(word, \",\")\n    end\n\
    \    \n    words_splitted = words_splitted ++ split(txt, \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(txt, \",\")\n    \n    words_splitted = words_splitted\
    \ ++ split(txt, \" \")\n    \n    words_splitted = words_splitted ++ split(txt,\
    \ \",\")\n    \n    words_splitted = words_splitted ++ split(txt, \" \")\n   \
    \ \n    words_splitted = words_splitted ++ split(txt, \",\")\n    \n    words_splitted\
    \ = words_splitted ++ split(txt, \" \")\n    \n    words_splitted = words_splitted\
    \ ++ split(txt, \",\")\n    \n    words_splitted = words_splitted ++ split(txt,\
    \ \" \")\n    \n    words_splitted = words_splitted ++ split(txt, \",\")\n   \
    \ \n    words_splitted = words_splitted ++ split(txt, \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(txt, \",\")\n    \n    words_splitted = words_splitted\
    \ ++ split(txt, \" \")\n    \n    words_splitted = words_splitted ++ split(txt,\
    \ \",\")\n    \n    words_splitted = words_splitted ++ split(txt, \" \")\n   \
    \ \n    words_splitted = words_splitted ++ split(txt, \",\")\n    \n    words_splitted\
    \ = words_splitted ++ split(txt, \" \")\n    \n    words_splitted = words_splitted\
    \ ++ split(txt, \",\")\n    \n    words_splitted = words_splitted ++ split(txt,\
    \ \" \")\n    \n    words_splitted = words_splitted ++ split(txt, \",\")\n   \
    \ \n    words_splitted = words_splitted ++ split(txt, \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(txt, \",\")\n    \n    words_splitted = words_splitted\
    \ ++ split(txt, \" \")\n    \n    words_splitted = words_splitted ++ split(txt,\
    \ \",\")\n    \n    words_splitted = words_splitted ++ split(txt, \" \")\n   \
    \ \n    words_splitted = words_splitted ++ split(txt, \",\")\n    \n    words_splitted\
    \ = words_splitted ++ split(txt, \" \")\n    \n    words_splitted = words_splitted\
    \ ++ split(txt, \",\")\n    \n    words_splitted = words_splitted ++ split(txt,\
    \ \" \")\n    \n    words_splitted = words_splitted ++ split(\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_15zsfhn.jl:83\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_15zsfhn.jl:83\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt)\n    \n    if length(words) == 0\n   \
    \     return words\n    end\n    \n    if all(isspace(word) for word in words)\n\
    \        words = split(txt, \",\")\n    end\n    \n    if length(words) == 0\n\
    \        return words\n    end\n    \n    if all(islower(word) for word in words)\n\
    \        words = split(txt, \" \")\n    end\n    \n    if length(words) == 0\n\
    \        return words\n    end\n    \n    if all(isupper(word) for word in words)\n\
    \        words = split(txt, \" \")\n    end\n    \n    if length(words) == 0\n\
    \        return words\n    end\n    \n    if all(isdigit(word) for word in words)\n\
    \        words = split(txt, \" \")\n    end\n    \n    if length(words) == 0\n\
    \        return words\n    end\n    \n    if all(isalnum(word) for word in words)\n\
    \        words = split(txt, \" \")\n    end\n    \n    if length(words) == 0\n\
    \        return words\n    end\n    \n    if all(isascii(word) for word in words)\n\
    \        words = split(txt, \" \")\n    end\n    \n    if length(words) == 0\n\
    \        return words\n    end\n    \n    if all(isunicode(word) for word in words)\n\
    \        words = split(txt, \" \")\n    end\n    \n    if length(words) == 0\n\
    \        return words\n    end\n    \n    if all(isunicode(word) for word in words)\n\
    \        words = split(txt, \" \")\n    end\n    \n    if length(words) == 0\n\
    \        return words\n    end\n    \n    if all(isunicode(word) for word in words)\n\
    \        words = split(txt, \" \")\n    end\n    \n    if length(words) == 0\n\
    \        return words\n    end\n    \n    if all(isunicode(word) for word in words)\n\
    \        words = split(txt, \" \")\n    end\n    \n    if length(words) == 0\n\
    \        return words\n    end\n    \n    if all(isunicode(word) for word in words)\n\
    \        words = split(txt, \" \")\n    end\n    \n    if length(words) == 0\n\
    \        return words\n    end\n    \n    if all(isunicode(word) for word in words)\n\
    \        words = split(txt, \" \")\n    end\n    \n    if length(words) == 0\n\
    \        return words\n    end\n    \n    if all(isunicode(word) for word in words)\n\
    \        words = split(txt, \" \")\n    end\n    \n    if length(words) == 0\n\
    \        return words\n    end\n    \n    if all(isunicode(word) for word in words)\n\
    \        words = split(txt, \" \")\n    end\n    \n    if length(words) == 0\n\
    \        return words\n    end\n    \n    if all(isunicode(word) for word in words)\n\
    \        words = split(txt, \" \")\n    end\n    \n\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpss44k28s.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpss44k28s.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpss44k28s.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_split = Vector{String}(undef,\
    \ 0)\n    for word in words\n        words_split = words_split ++ [word]\n   \
    \ end\n    return words_split\nend\n</cell>\n<code language=julia-1.5>\nsplit_words(\"\
    Hello world!\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello,world!\"\
    )\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdef\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns a vector of strings\
    \ where each string is a word in the string separated by spaces.\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_7y2bv8y.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_7y2bv8y.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn7v7v89y.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpn7v7v89y.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpn7v7v89y.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    \n    if txt == \"\"\n        return txt\n\
    \    else\n        \n        words = split(txt, \" \")\n        \n        words_split\
    \ = split(txt, \",\")\n        \n        words_split2 = split(txt, \",\")\n  \
    \      \n        words_split3 = split(txt, \",\")\n        \n        words_split4\
    \ = split(txt, \",\")\n        \n        words_split5 = split(txt, \",\")\n  \
    \      \n        words_split6 = split(txt, \",\")\n        \n        words_split7\
    \ = split(txt, \",\")\n        \n        words_split8 = split(txt, \",\")\n  \
    \      \n        words_split9 = split(txt, \",\")\n        \n        words_split10\
    \ = split(txt, \",\")\n        \n        words_split11 = split(txt, \",\")\n \
    \       \n        words_split12 = split(txt, \",\")\n        \n        words_split13\
    \ = split(txt, \",\")\n        \n        words_split14 = split(txt, \",\")\n \
    \       \n        words_split15 = split(txt, \",\")\n        \n        words_split16\
    \ = split(txt, \",\")\n        \n        words_split17 = split(txt, \",\")\n \
    \       \n        words_split18 = split(txt, \",\")\n        \n        words_split19\
    \ = split(txt, \",\")\n        \n        words_split20 = split(txt, \",\")\n \
    \       \n        words_split21 = split(txt, \",\")\n        \n        words_split22\
    \ = split(txt, \",\")\n        \n        words_split23 = split(txt, \",\")\n \
    \       \n        words_split24 = split(txt, \",\")\n        \n        words_split25\
    \ = split(txt, \",\")\n        \n        words_split26 = split(txt, \",\")\n \
    \       \n        words_split27 = split(txt, \",\")\n        \n        words_split28\
    \ = split(txt, \",\")\n        \n        words_split29 = split(txt, \",\")\n \
    \       \n        words_split30 = split(txt, \",\")\n        \n        words_split31\
    \ = split(txt, \",\")\n        \n        words_split32 = split(txt, \",\")\n \
    \       \n        words_split33 = split(txt, \",\")\n        \n        words_split34\
    \ = split(txt, \",\")\n        \n        words_split35 = split(txt, \",\")\n \
    \       \n        words_split36 = split(txt, \",\")\n        \n        words_split37\
    \ = split(txt, \",\")\n        \n        words_split38 = split(txt, \",\")\n \
    \       \n\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpfr0xm1an.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpfr0xm1an.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpfr0xm1an.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt)\n    \n    words_splitted = []\n    \n\
    \    for word in words\n        \n        if isempty(word)\n            words_splitted\
    \ = words_splitted \n        else\n            words_splitted = words_splitted\
    \ ++ split(word)\n        end\n    end\n    \n    words_splitted = words_splitted\
    \ |> Vector{String}\n    \n    words_splitted = words_splitted |> sort() |> unique()\
    \ |> length\n    \n    if words_splitted == 1\n        \n        return words_splitted\n\
    \        \n    else\n        \n        return words_splitted |> collect\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello world!\")\n</cell>\n\
    <code language=julia-1.5>\nsplit_words(\"Hello,world!\")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"abcdef\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdef\"\
    )\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdef\")\n</cell>\n<code\
    \ language=julia-1.5>\nsplit_words(\"abcdef\")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"abcdef\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdef\"\
    )\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdef\")\n</cell>\n<code\
    \ language=julia-1.5>\nsplit_words(\"abcdef\")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"abcdef\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdef\"\
    )\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdef\")\n</cell>\n<code\
    \ language=julia-1.5>\nsplit_words(\"abcdef\")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"abcdef\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdef\"\
    )\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdef\")\n</cell>\n<code\
    \ language=julia-1.5>\nsplit_words(\"abcdef\")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"abcdef\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdef\"\
    )\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdef\")\n</cell>\n<code\
    \ language=julia-1.5>\nsplit_words(\"abcdef\")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"abcdef\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdef\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2l_l_m9y.jl:38\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2l_l_m9y.jl:38\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    if length(words) ==\
    \ 0\n        return words\n    end\n    \n    words_split = split(words, \",\"\
    )\n    \n    if length(words_split) == 0\n        return words\n    end\n    \n\
    \    words_split = split(words_split, \"-\")\n    \n    if length(words_split)\
    \ == 0\n        return words\n    end\n    \n    words_split = split(words_split,\
    \ \"/\")\n    \n    if length(words_split) == 0\n        return words\n    end\n\
    \    \n    words_split = split(words_split, \"\\\\\")\n    \n    if length(words_split)\
    \ == 0\n        return words\n    end\n    \n    words_split = split(words_split,\
    \ \":\")\n    \n    if length(words_split) == 0\n        return words\n    end\n\
    \    \n    words_split = split(words_split, \";\")\n    \n    if length(words_split)\
    \ == 0\n        return words\n    end\n    \n    words_split = split(words_split,\
    \ \"!\")\n    \n    if length(words_split) == 0\n        return words\n    end\n\
    \    \n    words_split = split(words_split, \"?\")\n    \n    if length(words_split)\
    \ == 0\n        return words\n    end\n    \n    words_split = split(words_split,\
    \ \"\\\"\")\n    \n    if length(words_split) == 0\n        return words\n   \
    \ end\n    \n    words_split = split(words_split, \"'\")\n    \n    if length(words_split)\
    \ == 0\n        return words\n    end\n    \n    words_split = split(words_split,\
    \ \"#\")\n    \n    if length(words_split) == 0\n        return words\n    end\n\
    \    \n    words_split = split(words_split, \"$\")\n    \n    if length(words_split)\
    \ == 0\n        return words\n    end\n    \n    words_split = split(words_split,\
    \ \"%\")\n    \n    if length(words_split) == 0\n        return words\n    end\n\
    \    \n    words_split = split(words_split, \"^\")\n    \n    if length(words_split)\
    \ == 0\n        return words\n    end\n    \n    words_split = split(words_split,\
    \ \"&\")\n    \n    if length(words_split) == 0\n        return words\n    end\n\
    \    \n    words_split = split(words_split, \"*\")\n    \n    if length(words_split)\
    \ == 0\n        return words\n    end\n    \n    words_split = split(words_split,\
    \ \"(\")\n    \n    if length(words_split) == 0\n        return words\n    end\n\
    \    \n    words_split = split(words_split, \")\")\n    \n    if length(words_split)\
    \ == 0\n        return words\n    end\n    \n    words_split = split(words_split,\
    \ \"-\")\n    \n    if length(words_split) == 0\n        return words\n    end\n\
    \    \n    words_split = split(words_split, \"+\")\n    \n    if length(words_split)\
    \ == 0\n        return words\n    end\n    \n    words_split = \nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplbv28b38.jl:84\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplbv28b38.jl:84\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_without_whitespace = filter(x\
    \ -> !isspace(x), words)\n    words_without_commas = filter(x -> !iscomma(x),\
    \ words_without_whitespace)\n    words_without_commas = filter(x -> !islower(x),\
    \ words_without_commas)\n    words_without_commas = filter(x -> !isupper(x), words_without_commas)\n\
    \    words_without_commas = filter(x -> !isdigit(x), words_without_commas)\n \
    \   words_without_commas = filter(x -> !isalnum(x), words_without_commas)\n  \
    \  words_without_commas = filter(x -> !isascii(x), words_without_commas)\n   \
    \ words_without_commas = filter(x -> !isblank(x), words_without_commas)\n    words_without_commas\
    \ = filter(x -> !isspace(x), words_without_commas)\n    words_without_commas =\
    \ filter(x -> !isblank(x), words_without_commas)\n    words_without_commas = filter(x\
    \ -> !isspace(x), words_without_commas)\n    words_without_commas = filter(x ->\
    \ !isblank(x), words_without_commas)\n    words_without_commas = filter(x -> !isspace(x),\
    \ words_without_commas)\n    words_without_commas = filter(x -> !isspace(x), words_without_commas)\n\
    \    words_without_commas = filter(x -> !isspace(x), words_without_commas)\n \
    \   words_without_commas = filter(x -> !isspace(x), words_without_commas)\n  \
    \  words_without_commas = filter(x -> !isspace(x), words_without_commas)\n   \
    \ words_without_commas = filter(x -> !isspace(x), words_without_commas)\n    words_without_commas\
    \ = filter(x -> !isspace(x), words_without_commas)\n    words_without_commas =\
    \ filter(x -> !isspace(x), words_without_commas)\n    words_without_commas = filter(x\
    \ -> !isspace(x), words_without_commas)\n    words_without_commas = filter(x ->\
    \ !isspace(x), words_without_commas)\n    words_without_commas = filter(x -> !isspace(x),\
    \ words_without_commas)\n    words_without_commas = filter(x -> !isspace(x), words_without_commas)\n\
    \    words_without_commas = filter(x -> !isspace(x), words_without_commas)\n \
    \   words_without_commas = filter(x -> !isspace(x), words_without_commas)\n  \
    \  words_without_commas = filter(x -> !isspace(x), words_without_comm\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpv2knjc42.jl:39\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpv2knjc42.jl:39\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    if length(words) ==\
    \ 0\n        return length(txt)\n    end\n    \n    words_no_spaces = filter(x\
    \ -> !isspace(x), words)\n    \n    if length(words_no_spaces) == 0\n        return\
    \ length(txt)\n    end\n    \n    words_no_commas = filter(x -> !iscomma(x), words_no_spaces)\n\
    \    \n    if length(words_no_commas) == 0\n        return length(txt)\n    end\n\
    \    \n    words_no_commas_odd = filter(x -> isodd(x), words_no_commas)\n    \n\
    \    if length(words_no_commas_odd) == 0\n        return length(txt)\n    end\n\
    \    \n    words_no_commas_odd_count = count(words_no_commas_odd)\n    \n    if\
    \ words_no_commas_odd_count % 2 == 1\n        return length(txt)\n    end\n  \
    \  \n    words_no_commas_odd_count_with_odd_order = words_no_commas_odd_count\
    \ - 1\n    \n    return words_no_commas_odd_count_with_odd_order\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns a string\
    \ with all the characters in lower case and spaces replaced by underscores.\n\
    Examples\n    to_underscore(\"Hello world!\") \u279E \"hello_world!\"\n    to_underscore(\"\
    Hello,world!\") \u279E \"hello_world!\"\n    to_underscore(\"abcdef\") == 3 \n\
    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb6v4jwwh.jl:46\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpb6v4jwwh.jl:46\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    if length(words) ==\
    \ 0 \n        return 0 \n    else \n        return length(words) \n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpubkl84mg.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpubkl84mg.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    if length(words) ==\
    \ 0 \n        return words\n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9swp2kph.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9swp2kph.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp73c9q3va.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp73c9q3va.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp73c9q3va.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpho86i41l.jl:51\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpho86i41l.jl:51\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_split = split(txt, \",\")\n\
    \    if length(words_split) == length(words)\n        return words_split\n   \
    \ else\n        return words\n    end\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,string\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppref7qtn.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppref7qtn.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \" \"]\n    words = [w for w in words if w != \"\\n\"]\n    words\
    \ = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for\
    \ w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n\
    \    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words\
    \ if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n    words\
    \ = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w for\
    \ w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n\
    \    words = [w for w in words if w != \"\\n\"]\n    words = [w for w in words\
    \ if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words\
    \ = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if w !=\
    \ \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w for\
    \ w in words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\t\"]\n\
    \    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words\
    \ if w != \"\\n\"]\n    words = [w for w in words if w != \"\\t\"]\n    words\
    \ = [w for w in words if w != \"\\r\"]\n    words = [w for w in words if w !=\
    \ \"\\n\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for\
    \ w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n\
    \    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words\
    \ if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n    words\
    \ = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfmha0zpf.jl:56\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfmha0zpf.jl:56\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if length(txt) == 0 \n        return [] \n    else \n        words\
    \ = split(txt, \" \") \n        words_without_commas = filter(x->!iscomma(x),\
    \ words) \n        words_without_commas = filter(x->!islower(x), words_without_commas)\
    \ \n        words_without_commas = filter(x->!isupper(x), words_without_commas)\
    \ \n        words_without_commas = filter(x->!isdigit(x), words_without_commas)\
    \ \n        words_without_commas = filter(x->!isspace(x), words_without_commas)\
    \ \n        words_without_commas = filter(x->!issymbol(x), words_without_commas)\
    \ \n        words_without_commas = filter(x->!isascii(x), words_without_commas)\
    \ \n        words_without_commas = filter(x->!isalnum(x), words_without_commas)\
    \ \n        words_without_commas = filter(x->!isasciilower(x), words_without_commas)\
    \ \n        words_without_commas = filter(x->!isasciiupper(x), words_without_commas)\
    \ \n        words_without_commas = filter(x->!isasciidigit(x), words_without_commas)\
    \ \n        words_without_commas = filter(x->!isasciispace(x), words_without_commas)\
    \ \n        words_without_commas = filter(x->!isasciisymbol(x), words_without_commas)\
    \ \n        words_without_commas = filter(x->!isasciiascii(x), words_without_commas)\
    \ \n        words_without_commas = filter(x->!isasciialnum(x), words_without_commas)\
    \ \n        words_without_commas = filter(x->!isasciiasciilower(x), words_without_commas)\
    \ \n        words_without_commas = filter(x->!isasciiasciiupper(x), words_without_commas)\
    \ \n        words_without_commas = filter(x->!isasciiasciidigit(x), words_without_commas)\
    \ \n        words_without_commas = filter(x->!isasciiasciispace(x), words_without_commas)\
    \ \n        words_without_commas = filter(x->!isasciiasciisymbol(x), words_without_commas)\
    \ \n        words_without_commas = filter(x->!isasciiasciiascii(x), words_without_commas)\
    \ \n        words_without_commas = filter(x->!isasciiasciialnum(x), words_without_commas)\
    \ \n        words_without_commas = filter(x->!isasciiasciiasciilower(x), words_without_commas)\
    \ \n        words_without_commas = filter(x->!isasciiasciiasciiupper(x), words_without_commas)\
    \ \n        words_without_commas = filter(x->\nusing Test\n\n@testset begin\n\n\
    candidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"\
    world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t\
    @test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_mphqurb.jl:42\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_mphqurb.jl:42\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    txt = txt.trim()\n    \n    if txt == \"\"\n        return\
    \ txt\n    \n    words = split(txt, \" \")\n    \n    words_splitted = Vector{String}(undef,\
    \ 0)\n    \n    for word in words\n        words_splitted = words_splitted ++\
    \ [word]\n    end\n    \n    words_splitted = words_splitted ++ [txt]\n    \n\
    \    words_splitted = words_splitted |> Vector{String}(undef, 0)\n    \n    words_splitted\
    \ = words_splitted |> Vector{String}(undef, 0)\n    \n    words_splitted = words_splitted\
    \ |> Vector{String}(undef, 0)\n    \n    words_splitted = words_splitted |> Vector{String}(undef,\
    \ 0)\n    \n    words_splitted = words_splitted |> Vector{String}(undef, 0)\n\
    \    \n    words_splitted = words_splitted |> Vector{String}(undef, 0)\n    \n\
    \    words_splitted = words_splitted |> Vector{String}(undef, 0)\n    \n    words_splitted\
    \ = words_splitted |> Vector{String}(undef, 0)\n    \n    words_splitted = words_splitted\
    \ |> Vector{String}(undef, 0)\n    \n    words_splitted = words_splitted |> Vector{String}(undef,\
    \ 0)\n    \n    words_splitted = words_splitted |> Vector{String}(undef, 0)\n\
    \    \n    words_splitted = words_splitted |> Vector{String}(undef, 0)\n    \n\
    \    words_splitted = words_splitted |> Vector{String}(undef, 0)\n    \n    words_splitted\
    \ = words_splitted |> Vector{String}(undef, 0)\n    \n    words_splitted = words_splitted\
    \ |> Vector{String}(undef, 0)\n    \n    words_splitted = words_splitted |> Vector{String}(undef,\
    \ 0)\n    \n    words_splitted = words_splitted |> Vector{String}(undef, 0)\n\
    \    \n    words_splitted = words_splitted |> Vector{String}(undef, 0)\n    \n\
    \    words_splitted = words_splitted |> Vector{String}(undef, 0)\n    \n    words_splitted\
    \ = words_splitted |> Vector{String}(undef, 0)\n    \n    words_splitted = words_splitted\
    \ |> Vector{String}(undef, 0)\n    \n    words_splitted = words_splitted |> Vector{String}(undef,\
    \ 0)\n    \n    words_splitted = words_splitted |> Vector{String}(undef\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7mepxhro.jl:72\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7mepxhro.jl:72\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    txt = txt.trim()\n    \n    if txt == \"\"\n        return\
    \ txt\n    \n    words = split(txt, \" \")\n    \n    words_splitted = Vector{String}(undef,\
    \ 0)\n    \n    for word in words\n        if word != \"\"\n            words_splitted\
    \ = words_splitted ++ [word]\n        end\n    end\n    \n    words_splitted =\
    \ words_splitted ++ [\"\"]\n    \n    words_splitted = words_splitted .- [\"\"\
    ]\n    \n    words_splitted = words_splitted .- [\"\"]\n    \n    words_splitted\
    \ = words_splitted .- [\"\"]\n    \n    words_splitted = words_splitted .- [\"\
    \"]\n    \n    words_splitted = words_splitted .- [\"\"]\n    \n    words_splitted\
    \ = words_splitted .- [\"\"]\n    \n    words_splitted = words_splitted .- [\"\
    \"]\n    \n    words_splitted = words_splitted .- [\"\"]\n    \n    words_splitted\
    \ = words_splitted .- [\"\"]\n    \n    words_splitted = words_splitted .- [\"\
    \"]\n    \n    words_splitted = words_splitted .- [\"\"]\n    \n    words_splitted\
    \ = words_splitted .- [\"\"]\n    \n    words_splitted = words_splitted .- [\"\
    \"]\n    \n    words_splitted = words_splitted .- [\"\"]\n    \n    words_splitted\
    \ = words_splitted .- [\"\"]\n    \n    words_splitted = words_splitted .- [\"\
    \"]\n    \n    words_splitted = words_splitted .- [\"\"]\n    \n    words_splitted\
    \ = words_splitted .- [\"\"]\n    \n    words_splitted = words_splitted .- [\"\
    \"]\n    \n    words_splitted = words_splitted .- [\"\"]\n    \n    words_splitted\
    \ = words_splitted .- [\"\"]\n    \n    words_splitted = words_splitted .- [\"\
    \"]\n    \n    words_splitted = words_splitted .- [\"\"]\n    \n    words_splitted\
    \ = words_splitted .- [\"\"]\n    \n    words_splitted = words_splitted .- [\"\
    \"]\n    \n    words_splitted = words_splitted .- [\"\"]\n    \n    words_splitted\
    \ = words_splitted .- [\"\"]\n    \n    words_splitted = words_splitted .- [\"\
    \"]\n    \n    words_splitted = words_split\nusing Test\n\n@testset begin\n\n\
    candidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"\
    world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t\
    @test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmph1yds978.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmph1yds978.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8ks3uymx.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp8ks3uymx.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp8ks3uymx.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt)\n    \n    words_split = []\n    \n  \
    \  for word in words\n        \n        if !contains(word, \" \")\n          \
    \  \n            words_split = [word]\n            \n        else\n          \
    \  \n            words_split = split(word)\n            \n        end\n      \
    \  \n    end\n    \n    return words_split\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmper8giuw0.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmper8giuw0.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2yrw0d03.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp2yrw0d03.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp2yrw0d03.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    \n    words_split = Vector{String}(undef,\
    \ 0)\n    \n    for word in words\n        words_split = words_split ++ split(word,\
    \ \",\")\n    end\n    \n    words_split = words_split ++ [word]\n    \n    words_split\
    \ = words_split ++ [word for word in words_split if !islower(word)]\n    \n  \
    \  words_split = words_split ++ [word for word in words_split if islower(word)]\n\
    \    \n    words_split = words_split ++ [word for word in words_split if islower(word)]\n\
    \    \n    words_split = words_split ++ [word for word in words_split if islower(word)]\n\
    \    \n    words_split = words_split ++ [word for word in words_split if islower(word)]\n\
    \    \n    words_split = words_split ++ [word for word in words_split if islower(word)]\n\
    \    \n    words_split = words_split ++ [word for word in words_split if islower(word)]\n\
    \    \n    words_split = words_split ++ [word for word in words_split if islower(word)]\n\
    \    \n    words_split = words_split ++ [word for word in words_split if islower(word)]\n\
    \    \n    words_split = words_split ++ [word for word in words_split if islower(word)]\n\
    \    \n    words_split = words_split ++ [word for word in words_split if islower(word)]\n\
    \    \n    words_split = words_split ++ [word for word in words_split if islower(word)]\n\
    \    \n    words_split = words_split ++ [word for word in words_split if islower(word)]\n\
    \    \n    words_split = words_split ++ [word for word in words_split if islower(word)]\n\
    \    \n    words_split = words_split ++ [word for word in words_split if islower(word)]\n\
    \    \n    words_split = words_split ++ [word for word in words_split if islower(word)]\n\
    \    \n    words_split = words_split ++ [word for word in words_split if islower(word)]\n\
    \    \n    words_split = words_split ++ [word for word in words_split if islower(word)]\n\
    \    \n    words_split = words_split ++ [word for word in words_split if islower(word)]\n\
    \    \n    words_split = words_split ++ [word for word in words_split if islower(word)]\n\
    \    \n    words_split = words_split ++ [word for word in words_split if islower(word)]\n\
    \    \n    words_split = words_split ++ [word for word in words_split if islower(word)]\n\
    \    \n    words_split = words_split ++ [word for word in words_split if islower(word)]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpydlx55qp.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpydlx55qp.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpydlx55qp.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    words_without_commas\
    \ = filter(x -> x != \",\", words)\n    \n    words_without_commas = sort(words_without_commas)\n\
    \    \n    words_without_commas = words_without_commas[words_without_commas[end-1]\
    \ \u2260 \",\"]\n    \n    words_without_commas = words_without_commas[words_without_commas[end-1]\
    \ \u2260 \",\"]\n    \n    words_without_commas = words_without_commas[words_without_commas[end-1]\
    \ \u2260 \",\"]\n    \n    words_without_commas = words_without_commas[words_without_commas[end-1]\
    \ \u2260 \",\"]\n    \n    words_without_commas = words_without_commas[words_without_commas[end-1]\
    \ \u2260 \",\"]\n    \n    words_without_commas = words_without_commas[words_without_commas[end-1]\
    \ \u2260 \",\"]\n    \n    words_without_commas = words_without_commas[words_without_commas[end-1]\
    \ \u2260 \",\"]\n    \n    words_without_commas = words_without_commas[words_without_commas[end-1]\
    \ \u2260 \",\"]\n    \n    words_without_commas = words_without_commas[words_without_commas[end-1]\
    \ \u2260 \",\"]\n    \n    words_without_commas = words_without_commas[words_without_commas[end-1]\
    \ \u2260 \",\"]\n    \n    words_without_commas = words_without_commas[words_without_commas[end-1]\
    \ \u2260 \",\"]\n    \n    words_without_commas = words_without_commas[words_without_commas[end-1]\
    \ \u2260 \",\"]\n    \n    words_without_commas = words_without_commas[words_without_commas[end-1]\
    \ \u2260 \",\"]\n    \n    words_without_commas = words_without_commas[words_without_commas[end-1]\
    \ \u2260 \",\"]\n    \n    words_without_commas = words_without_commas[words_without_commas[end-1]\
    \ \u2260 \",\"]\n    \n    words_without_commas = words_without_commas[words_without_commas[end-1]\
    \ \u2260 \",\"]\n    \n    words_without_commas = words_without_commas[words_without_commas[end-1]\
    \ \uFFFD\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm4j20gpq.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpm4j20gpq.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    \n    if isempty(txt)\n        return txt\n\
    \    elseif isempty(txt.trim())\n        return txt\n    else\n        \n    \
    \    words = split(txt, \" \")\n        \n        words = [w for w in words if\
    \ w != \"\"]\n        \n        words = [w for w in words if w != \",\"]\n   \
    \     \n        words = [w for w in words if w != \"-\"]\n        \n        words\
    \ = [w for w in words if w != \"_\"]\n        \n        words = [w for w in words\
    \ if w != \"!\"]\n        \n        words = [w for w in words if w != \"?\"]\n\
    \        \n        words = [w for w in words if w != \"-\"]\n        \n      \
    \  words = [w for w in words if w != \"?\"]\n        \n        words = [w for\
    \ w in words if w != \"!\"]\n        \n        words = [w for w in words if w\
    \ != \"-\"]\n        \n        words = [w for w in words if w != \"?\"]\n    \
    \    \n        words = [w for w in words if w != \"!\"]\n        \n        words\
    \ = [w for w in words if w != \"-\"]\n        \n        words = [w for w in words\
    \ if w != \"?\"]\n        \n        words = [w for w in words if w != \"!\"]\n\
    \        \n        words = [w for w in words if w != \"-\"]\n        \n      \
    \  words = [w for w in words if w != \"?\"]\n        \n        words = [w for\
    \ w in words if w != \"!\"]\n        \n        words = [w for w in words if w\
    \ != \"-\"]\n        \n        words = [w for w in words if w != \"?\"]\n    \
    \    \n        words = [w for w in words if w != \"!\"]\n        \n        words\
    \ = [w for w in words if w != \"-\"]\n        \n        words = [w for w in words\
    \ if w != \"?\"]\n        \n        words = [w for w in words if w != \"!\"]\n\
    \        \n        words = [w for w in words if w != \"-\"]\n        \n      \
    \  words = [w for w in words if w != \"?\"]\n        \n        words = [w for\
    \ w in words if w != \"!\"]\n        \n        words = [w for w in words if w\
    \ != \"-\"]\n        \n        words = [w for w in words if w != \"?\"]\n    \
    \    \n        words = [w for w in words if w != \"!\"]\n        \n        words\
    \ = [w for w in words if w != \"-\"]\n        \nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpkz3l2bh4.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpkz3l2bh4.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpkz3l2bh4.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if isempty(txt)\n        return Vector{String}()\n\
    \    end\n    words = split(txt, \" \")\n    words_split = Vector{String}()\n\
    \    for word in words\n        if isempty(word)\n            continue\n     \
    \   end\n        words_split = words_split ++ split(word, \",\")\n    end\n  \
    \  words_split = words_split ++ split(words, \" \")\n    words_split = words_split\
    \ ++ split(words, \",\")\n    words_split = words_split ++ split(words, \"-\"\
    )\n    words_split = words_split ++ split(words, \"_\")\n    words_split = words_split\
    \ ++ split(words, \"-\")\n    words_split = words_split ++ split(words, \"_\"\
    )\n    words_split = words_split ++ split(words, \"-\")\n    words_split = words_split\
    \ ++ split(words, \"_\")\n    words_split = words_split ++ split(words, \"-\"\
    )\n    words_split = words_split ++ split(words, \"_\")\n    words_split = words_split\
    \ ++ split(words, \"-\")\n    words_split = words_split ++ split(words, \"_\"\
    )\n    words_split = words_split ++ split(words, \"-\")\n    words_split = words_split\
    \ ++ split(words, \"_\")\n    words_split = words_split ++ split(words, \"-\"\
    )\n    words_split = words_split ++ split(words, \"_\")\n    words_split = words_split\
    \ ++ split(words, \"-\")\n    words_split = words_split ++ split(words, \"_\"\
    )\n    words_split = words_split ++ split(words, \"-\")\n    words_split = words_split\
    \ ++ split(words, \"_\")\n    words_split = words_split ++ split(words, \"-\"\
    )\n    words_split = words_split ++ split(words, \"_\")\n    words_split = words_split\
    \ ++ split(words, \"-\")\n    words_split = words_split ++ split(words, \"_\"\
    )\n    words_split = words_split ++ split(words, \"-\")\n    words_split = words_split\
    \ ++ split(words, \"_\")\n    words_split = words_split ++ split(words, \"-\"\
    )\n    words_split = words_split ++ split(words, \"_\")\n    words_split = words_split\
    \ ++ split(words, \"-\")\n    words_split = words_split ++ split(words, \"_\"\
    )\n    words_split = words_split ++ split(words, \"-\")\n    words_split = words_split\
    \ ++ split(words, \"_\")\n    words_split = words_split ++ split(words, \"-\"\
    )\n    words_split = words_split ++ split(words, \"_\")\n    words_split = words_split\
    \ ++ split(words, \"-\")\n    words_split = words_split ++ split(words, \"_\"\
    )\n    words_split = words_split ++ split(words, \"-\")\n    words_split = words_split\
    \ ++ split(words, \"_\")\n    words_split = words_split ++ split(words, \"-\"\
    )\n    words_split = words_split ++ split(words, \"_\")\n    words_split = words_\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9_la6t33.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp9_la6t33.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp9_la6t33.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    txt = txt.trim()\n    \n    if txt == \"\"\n        return\
    \ txt\n    \n    words = split(txt, \" \")\n    \n    words_without_commas = filter(x\
    \ -> x != \",\", words)\n    \n    words_without_commas = sort(words_without_commas)\n\
    \    \n    words_without_commas = words_without_commas[words_without_commas[end]\
    \ .< words_without_commas[end-1]]\n    \n    words_without_commas = words_without_commas[words_without_commas[end]\
    \ .< words_without_commas[end-1]]\n    \n    words_without_commas = words_without_commas[words_without_commas[end]\
    \ .< words_without_commas[end-1]]\n    \n    words_without_commas = words_without_commas[words_without_commas[end]\
    \ .< words_without_commas[end-1]]\n    \n    words_without_commas = words_without_commas[words_without_commas[end]\
    \ .< words_without_commas[end-1]]\n    \n    words_without_commas = words_without_commas[words_without_commas[end]\
    \ .< words_without_commas[end-1]]\n    \n    words_without_commas = words_without_commas[words_without_commas[end]\
    \ .< words_without_commas[end-1]]\n    \n    words_without_commas = words_without_commas[words_without_commas[end]\
    \ .< words_without_commas[end-1]]\n    \n    words_without_commas = words_without_commas[words_without_commas[end]\
    \ .< words_without_commas[end-1]]\n    \n    words_without_commas = words_without_commas[words_without_commas[end]\
    \ .< words_without_commas[end-1]]\n    \n    words_without_commas = words_without_commas[words_without_commas[end]\
    \ .< words_without_commas[end-1]]\n    \n    words_without_commas = words_without_commas[words_without_commas[end]\
    \ .< words_without_commas[end-1]]\n    \n    words_without_commas = words_without_commas[words_without_commas[end]\
    \ .< words_without_commas[end-1]]\n    \n    words_without_commas = words_without_commas[words_without_commas[end]\
    \ .< words_without_commas[end-1]]\n    \n    words_without_commas = words_without_commas[words_without_commas\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmanv5w7n.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmanv5w7n.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    txt = txt.trim()\n    \n    if txt == \"\"\n        return\
    \ txt\n    \n    words = split(txt, \" \")\n    \n    words_split = Vector{String}()\n\
    \    \n    for word in words\n        words_split += split(word, \",\")\n    end\n\
    \    \n    words_split = words_split[findall(x -> x != \"\", words_split)]\n \
    \   \n    words_split = words_split[findall(x -> x != \"\", words_split)]\n  \
    \  \n    words_split = words_split[findall(x -> x != \"\", words_split)]\n   \
    \ \n    words_split = words_split[findall(x -> x != \"\", words_split)]\n    \n\
    \    words_split = words_split[findall(x -> x != \"\", words_split)]\n    \n \
    \   words_split = words_split[findall(x -> x != \"\", words_split)]\n    \n  \
    \  words_split = words_split[findall(x -> x != \"\", words_split)]\n    \n   \
    \ words_split = words_split[findall(x -> x != \"\", words_split)]\n    \n    words_split\
    \ = words_split[findall(x -> x != \"\", words_split)]\n    \n    words_split =\
    \ words_split[findall(x -> x != \"\", words_split)]\n    \n    words_split = words_split[findall(x\
    \ -> x != \"\", words_split)]\n    \n    words_split = words_split[findall(x ->\
    \ x != \"\", words_split)]\n    \n    words_split = words_split[findall(x -> x\
    \ != \"\", words_split)]\n    \n    words_split = words_split[findall(x -> x !=\
    \ \"\", words_split)]\n    \n    words_split = words_split[findall(x -> x != \"\
    \", words_split)]\n    \n    words_split = words_split[findall(x -> x != \"\"\
    , words_split)]\n    \n    words_split = words_split[findall(x -> x != \"\", words_split)]\n\
    \    \n    words_split = words_split[findall(x -> x != \"\", words_split)]\n \
    \   \n    words_split = words_split[findall(x -> x != \"\", words_split)]\n  \
    \  \n    words_split = words_split[findall(x -> x != \"\", words_split)]\n   \
    \ \n    words_split = words_split[findall(x -> x != \"\", words_split)]\n    \n\
    \    words_split = words_split[findall(x -> x != \"\", words_split)]\n    \n \
    \   words_split = words_split[findall(x -> x != \"\", words_split)]\n    \n  \
    \  words_split = words_split[findall(x -> x != \"\", words_split)]\n    \n   \
    \ words_split = words_split[findall(x -> x != \"\", words_split)]\n    \n    words_split\
    \ = \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphqevz0z0.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphqevz0z0.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if length(txt) == 0 \n        return [] \n    else \n        words\
    \ = split(txt, ' ') \n        words = [w for w in words if w != \"\"] \n     \
    \   words = [w for w in words if w != \",\"]\n        words = [w for w in words\
    \ if w != \" \"]\n        words = [w for w in words if w != \"\\n\"]\n       \
    \ words = [w for w in words if w != \"\\t\"]\n        words = [w for w in words\
    \ if w != \"\\r\"]\n        words = [w for w in words if w != \"\\t\"]\n     \
    \   words = [w for w in words if w != \"\\r\"]\n        words = [w for w in words\
    \ if w != \"\\n\"]\n        words = [w for w in words if w != \"\\t\"]\n     \
    \   words = [w for w in words if w != \"\\r\"]\n        words = [w for w in words\
    \ if w != \"\\n\"]\n        words = [w for w in words if w != \"\\t\"]\n     \
    \   words = [w for w in words if w != \"\\r\"]\n        words = [w for w in words\
    \ if w != \"\\n\"]\n        words = [w for w in words if w != \"\\t\"]\n     \
    \   words = [w for w in words if w != \"\\r\"]\n        words = [w for w in words\
    \ if w != \"\\n\"]\n        words = [w for w in words if w != \"\\t\"]\n     \
    \   words = [w for w in words if w != \"\\r\"]\n        words = [w for w in words\
    \ if w != \"\\n\"]\n        words = [w for w in words if w != \"\\t\"]\n     \
    \   words = [w for w in words if w != \"\\r\"]\n        words = [w for w in words\
    \ if w != \"\\n\"]\n        words = [w for w in words if w != \"\\t\"]\n     \
    \   words = [w for w in words if w != \"\\r\"]\n        words = [w for w in words\
    \ if w != \"\\n\"]\n        words = [w for w in words if w != \"\\t\"]\n     \
    \   words = [w for w in words if w != \"\\r\"]\n        words = [w for w in words\
    \ if w != \"\\n\"]\n        words = [w for w in words if w != \"\\t\"]\n     \
    \   words = [w for w in words if w != \"\\r\"]\n        words = [w for w in words\
    \ if w != \"\\n\"]\n        words = [w for w in words if w != \"\\t\"]\n     \
    \   words = [w for w in words if w != \"\\r\"]\n        words = [w for w in words\
    \ if w != \"\\n\"]\n        words = [w for w in words if w != \"\\t\"]\n     \
    \   words = [w for w in words if w != \"\\r\nusing Test\n\n@testset begin\n\n\
    candidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"\
    world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t\
    @test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2mnfiify.jl:58\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2mnfiify.jl:58\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    if length(words) ==\
    \ 0\n        return words\n    \n    if length(words) == 1 \n        return words\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt4isn119.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpt4isn119.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if length(txt) == 0 \n        return [] \n    else \n        words\
    \ = split(txt, \" \") \n        words_without_commas = filter(x->!contains(x,\
    \ \",\"), words) \n        words_without_commas = filter(x->!contains(x, \"!\"\
    ), words_without_commas) \n        words_without_commas = filter(x->!contains(x,\
    \ \"?\"), words_without_commas) \n        words_without_commas = filter(x->!contains(x,\
    \ \".\"), words_without_commas) \n        words_without_commas = filter(x->!contains(x,\
    \ \"-\"), words_without_commas) \n        words_without_commas = filter(x->!contains(x,\
    \ \"(\"), words_without_commas) \n        words_without_commas = filter(x->!contains(x,\
    \ \")\"), words_without_commas) \n        words_without_commas = filter(x->!contains(x,\
    \ \"[\"), words_without_commas) \n        words_without_commas = filter(x->!contains(x,\
    \ \"]\"), words_without_commas) \n        words_without_commas = filter(x->!contains(x,\
    \ \"{\"), words_without_commas) \n        words_without_commas = filter(x->!contains(x,\
    \ \"|\"), words_without_commas) \n        words_without_commas = filter(x->!contains(x,\
    \ \"\\\\\"), words_without_commas) \n        words_without_commas = filter(x->!contains(x,\
    \ \"@\"), words_without_commas) \n        words_without_commas = filter(x->!contains(x,\
    \ \"#\"), words_without_commas) \n        words_without_commas = filter(x->!contains(x,\
    \ \"$\"), words_without_commas) \n        words_without_commas = filter(x->!contains(x,\
    \ \"%\"), words_without_commas) \n        words_without_commas = filter(x->!contains(x,\
    \ \"^\"), words_without_commas) \n        words_without_commas = filter(x->!contains(x,\
    \ \"&\"), words_without_commas) \n        words_without_commas = filter(x->!contains(x,\
    \ \"*\"), words_without_commas) \n        words_without_commas = filter(x->!contains(x,\
    \ \"(\"), words_without_commas) \n        words_without_commas = filter(x->!contains(x,\
    \ \")\"), words_without_commas) \n        words_without_commas = filter(x->!contains(x,\
    \ \"[\"), words_without_commas) \n        words_without_commas = filter(x->!contains(x,\
    \ \"]\"), words_without_commas) \n        words_without_commas = filter(x->!contains(x,\
    \ \"{\"), words_without_commas\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppw7ov4br.jl:29\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppw7ov4br.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    \n    if isempty(words)\n\
    \        return words\n    end\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t\
    @test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_0czk5w3.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp_0czk5w3.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp_0czk5w3.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_split = split(txt, \",\")\n\
    \    if length(words) == length(words_split)\n        return words\n    else\n\
    \        return words_split\n    end\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjhsfcvwl.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjhsfcvwl.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    txt = txt.trim()\n    \n    if txt == \"\"\n        return\
    \ txt\n    \n    words = split(txt, \" \")\n    \n    if length(words) == 0\n\
    \        return txt\n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpw83rcs6e.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpw83rcs6e.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    words_split = Vector{String}(undef,\
    \ 0)\n    \n    for word in words\n        words_split = words_split ++ [word]\n\
    \    end\n    \n    words_split = words_split ++ [word]\n    \n    words_split\
    \ = words_split ++ [word]\n    \n    words_split = words_split ++ [word]\n   \
    \ \n    words_split = words_split ++ [word]\n    \n    words_split = words_split\
    \ ++ [word]\n    \n    words_split = words_split ++ [word]\n    \n    words_split\
    \ = words_split ++ [word]\n    \n    words_split = words_split ++ [word]\n   \
    \ \n    words_split = words_split ++ [word]\n    \n    words_split = words_split\
    \ ++ [word]\n    \n    words_split = words_split ++ [word]\n    \n    words_split\
    \ = words_split ++ [word]\n    \n    words_split = words_split ++ [word]\n   \
    \ \n    words_split = words_split ++ [word]\n    \n    words_split = words_split\
    \ ++ [word]\n    \n    words_split = words_split ++ [word]\n    \n    words_split\
    \ = words_split ++ [word]\n    \n    words_split = words_split ++ [word]\n   \
    \ \n    words_split = words_split ++ [word]\n    \n    words_split = words_split\
    \ ++ [word]\n    \n    words_split = words_split ++ [word]\n    \n    words_split\
    \ = words_split ++ [word]\n    \n    words_split = words_split ++ [word]\n   \
    \ \n    words_split = words_split ++ [word]\n    \n    words_split = words_split\
    \ ++ [word]\n    \n    words_split = words_split ++ [word]\n    \n    words_split\
    \ = words_split ++ [word]\n    \n    words_split = words_split ++ [word]\n   \
    \ \n    words_split = words_split ++ [word]\n    \n    words_split = words_split\
    \ ++ [word]\n    \n    words_split = words_split ++ [word]\n    \n    words_split\
    \ = words_split ++ [word]\n    \n    words_split = words_split ++ [word]\n   \
    \ \n    words_split = words_split ++ [word]\n    \n    words_split = words_split\
    \ ++ [word]\n    \n    words_split = words_split ++ [word]\n    \n    words_split\
    \ = words_split ++ [word]\n    \n    words_split = words_split ++ [word]\n   \
    \ \n    words_split = words_split ++ [word]\n    \n    words_\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoh3n15mk.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpoh3n15mk.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpoh3n15mk.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    txt = txt.trim()\n    if txt == \"\"\n        return Vector{String}()\n\
    \    end\n    \n    words = split(txt, \" \")\n    \n    if length(words) == 0\n\
    \        return words\n    end\n    \n    words_split = Vector{String}()\n   \
    \ \n    for word in words\n        words_split = push!(words_split, word)\n  \
    \  end\n    \n    return words_split\nend\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"Hello world!\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"\
    Hello,world!\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdef\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ a vector of strings of length 4 with each string containing the letters of the\
    \ string in alphabetical order.\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_1utqac1.jl:31\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_1utqac1.jl:31\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    word_counts = Dict()\n\
    \    for word in words\n        word_counts[word] = get(word_counts, word, 0)\
    \ + 1\n    end\n    \n    word_counts = sort(word_counts)\n    \n    word_counts\
    \ = Dict([(k, v) for (k, v) in word_counts[2:end] if (k != words[1])])\n    \n\
    \    word_counts = sort(word_counts)\n    \n    word_counts = Dict([(k, v) for\
    \ (k, v) in word_counts[2:end] if (k != words[1])])\n    \n    word_counts = sort(word_counts)\n\
    \    \n    word_counts = Dict([(k, v) for (k, v) in word_counts[2:end] if (k !=\
    \ words[1])])\n    \n    word_counts = sort(word_counts)\n    \n    word_counts\
    \ = Dict([(k, v) for (k, v) in word_counts[2:end] if (k != words[1])])\n    \n\
    \    word_counts = sort(word_counts)\n    \n    word_counts = Dict([(k, v) for\
    \ (k, v) in word_counts[2:end] if (k != words[1])])\n    \n    word_counts = sort(word_counts)\n\
    \    \n    word_counts = Dict([(k, v) for (k, v) in word_counts[2:end] if (k !=\
    \ words[1])])\n    \n    word_counts = sort(word_counts)\n    \n    word_counts\
    \ = Dict([(k, v) for (k, v) in word_counts[2:end] if (k != words[1])])\n    \n\
    \    word_counts = sort(word_counts)\n    \n    word_counts = Dict([(k, v) for\
    \ (k, v) in word_counts[2:end] if (k != words[1])])\n    \n    word_counts = sort(word_counts)\n\
    \    \n    word_counts = Dict([(k, v) for (k, v) in word_counts[2:end] if (k !=\
    \ words[1])])\n    \n    word_counts = sort(word_counts)\n    \n    word_counts\
    \ = Dict([(k, v) for (k, v) in word_counts[2:end] if (k != words[1])])\n    \n\
    \    word_counts = sort(word_counts)\n    \n    word_counts = Dict([(k, v) for\
    \ (k, v) in word_counts[2:end] if (k != words[1])])\n    \n    word_counts = sort(word_counts)\n\
    \    \n    word_counts = Dict([(k, v) for (k, v) in word_counts[2:end] if (k !=\
    \ words[1])])\n    \n    word_counts = sort(word_counts)\n    \n    word_counts\
    \ = Dict\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp82dy3djt.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp82dy3djt.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp82dy3djt.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    \n    if length(words)\
    \ == 0 \n        return 0 \n    end\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_s9nlnvr.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp_s9nlnvr.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp_s9nlnvr.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return txt\n    else\n\
    \        words = split(txt, \" \")\n        words = [w for w in words if w !=\
    \ \"\"]\n        return words\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"\
    world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t\
    @test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcqz005bf.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  type\
    \ String has no field trim\n  Stacktrace:\n   [1] getproperty(::String, ::Symbol)\
    \ at ./Base.jl:33\n   [2] split_words(::String) at /tmp/tmpcqz005bf.jl:11\n  \
    \ [3] top-level scope at /tmp/tmpcqz005bf.jl:25\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpcqz005bf.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpcqz005bf.jl:26\n  Test threw exception\n  Expression: candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"]\n  type String has no field trim\n\
    \  Stacktrace:\n   [1] getproperty(::String, ::Symbol) at ./Base.jl:33\n   [2]\
    \ split_words(::String) at /tmp/tmpcqz005bf.jl:11\n   [3] top-level scope at /tmp/tmpcqz005bf.jl:26\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpcqz005bf.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpcqz005bf.jl:27\n  Test threw exception\n  Expression: candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"]\n  type String has no field trim\n\
    \  Stacktrace:\n   [1] getproperty(::String, ::Symbol) at ./Base.jl:33\n   [2]\
    \ split_words(::String) at /tmp/tmpcqz005bf.jl:11\n   [3] top-level scope at /tmp/tmpcqz005bf.jl:27\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpcqz005bf.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpcqz005bf.jl:28\n  Test threw exception\n  Expression: candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"]\n  type String has no\
    \ field trim\n  Stacktrace:\n   [1] getproperty(::String, ::Symbol) at ./Base.jl:33\n\
    \   [2] split_words(::String) at /tmp/tmpcqz005bf.jl:11\n   [3] top-level scope\
    \ at /tmp/tmpcqz005bf.jl:28\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpcqz005bf.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpcqz005bf.jl:29\n  Test threw exception\n  Expression: candidate(\"\
    abcdef\") == 3\n  type String has no field trim\n  Stacktrace:\n   [1] getproperty(::String,\
    \ ::Symbol) at ./Base.jl:33\n   [2] split_words(::String) at /tmp/tmpcqz005bf.jl:11\n\
    \   [3] top-level scope at /tmp/tmpcqz005bf.jl:29\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpcqz005bf.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpcqz005bf.jl:30\n  Test threw exception\n  Expression: candidate(\"\
    aaabb\") == 2\n  type String has no field trim\n  Stacktrace:\n   [1] getproperty(::String,\
    \ ::Symbol) at ./Base.jl:33\n   [2] split_words(::String) at /tmp/tmpcqz005bf.jl:11\n\
    \   [3] top-level scope at /tmp/tmpcqz005bf.jl:30\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpcqz005bf.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpcqz005bf.jl:31\n  Test threw exception\n  Expression: candidate(\"\
    aaaBb\") == 1\n  type String has no field trim\n  Stacktrace:\n   [1] getproperty(::String,\
    \ ::Symbol) at ./Base.jl:33\n   [2] split_words(::String) at /tmp/tmpcqz005bf.jl:11\n\
    \   [3] top-level scope at /tmp/tmpcqz005bf.jl:31\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpcqz005bf.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpcqz005bf.jl:32\n  Test threw exception\n  Expression: candidate(\"\
    \") == 0\n  type String has no field trim\n  Stacktrace:\n   [1] getproperty(::String,\
    \ ::Symbol) at ./Base.jl:33\n   [2] split_words(::String) at /tmp/tmpcqz005bf.jl:11\n\
    \   [3] top-level scope at /tmp/tmpcqz005bf.jl:32\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpcqz005bf.jl:24\n  \nTest Summary: | Error \
    \ Total\ntest set      |     8      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcqz005bf.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    if length(words) ==\
    \ 0 \n        return 0 \n    else \n        return length(words) \n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl40m0f8l.jl:25\n  Expression: candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"]\n   Evaluated: 2 == [\"Hello\", \"\
    world!\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpl40m0f8l.jl:25\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl40m0f8l.jl:24\ntest set: Test Failed at /tmp/tmpl40m0f8l.jl:26\n\
    \  Expression: candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n   Evaluated:\
    \ 1 == [\"Hello\", \"world!\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpl40m0f8l.jl:26\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl40m0f8l.jl:24\ntest set: Test Failed at /tmp/tmpl40m0f8l.jl:27\n\
    \  Expression: candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n   Evaluated:\
    \ 2 == [\"Hello\", \"world,!\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpl40m0f8l.jl:27\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl40m0f8l.jl:24\ntest set: Test Failed at /tmp/tmpl40m0f8l.jl:28\n\
    \  Expression: candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"\
    !\"]\n   Evaluated: 2 == [\"Hello,Hello,world\", \"!\"]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpl40m0f8l.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl40m0f8l.jl:24\ntest set: Test Failed at /tmp/tmpl40m0f8l.jl:29\n\
    \  Expression: candidate(\"abcdef\") == 3\n   Evaluated: 1 == 3\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl40m0f8l.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl40m0f8l.jl:24\ntest set: Test Failed at /tmp/tmpl40m0f8l.jl:30\n\
    \  Expression: candidate(\"aaabb\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl40m0f8l.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl40m0f8l.jl:24\ntest set: Test Failed at /tmp/tmpl40m0f8l.jl:32\n\
    \  Expression: candidate(\"\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpl40m0f8l.jl:32\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl40m0f8l.jl:24\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     7      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl40m0f8l.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfb86voh9.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpfb86voh9.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpfb86voh9.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    txt = txt.trim()\n    \n    if txt == \"\"\n        return\
    \ Vector{String}()\n    end\n    \n    words = split(txt, \" \")\n    \n    \n\
    \    if length(words) == 0\n        return Vector{String}()\n    end\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"\
    world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t\
    @test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpf6yey8qp.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpf6yey8qp.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpf6yey8qp.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoemmtqkh.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpoemmtqkh.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpoemmtqkh.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt)\n    \n    word_counts = Dict()\n    for\
    \ word in words\n        word_counts[word] = get(word_counts, word, 0) + 1\n \
    \   end\n    \n    word_counts = sort(word_counts, by=x->x[1], rev=true)\n   \
    \ \n    word_counts = filter(x -> x[1] % 2 != 0, word_counts)\n    \n    word_counts\
    \ = map(x -> x[1], word_counts)\n    \n    word_counts = filter(x -> x != 0, word_counts)\n\
    \    \n    word_counts = map(x -> x[1], word_counts)\n    \n    word_counts =\
    \ filter(x -> x != 0, word_counts)\n    \n    word_counts = map(x -> x[1], word_counts)\n\
    \    \n    word_counts = filter(x -> x != 0, word_counts)\n    \n    word_counts\
    \ = map(x -> x[1], word_counts)\n    \n    word_counts = filter(x -> x != 0, word_counts)\n\
    \    \n    word_counts = map(x -> x[1], word_counts)\n    \n    word_counts =\
    \ filter(x -> x != 0, word_counts)\n    \n    word_counts = map(x -> x[1], word_counts)\n\
    \    \n    word_counts = filter(x -> x != 0, word_counts)\n    \n    word_counts\
    \ = map(x -> x[1], word_counts)\n    \n    word_counts = filter(x -> x != 0, word_counts)\n\
    \    \n    word_counts = map(x -> x[1], word_counts)\n    \n    word_counts =\
    \ filter(x -> x != 0, word_counts)\n    \n    word_counts = map(x -> x[1], word_counts)\n\
    \    \n    word_counts = filter(x -> x != 0, word_counts)\n    \n    word_counts\
    \ = map(x -> x[1], word_counts)\n    \n    word_counts = filter(x -> x != 0, word_counts)\n\
    \    \n    word_counts = map(x -> x[1], word_counts)\n    \n    word_counts =\
    \ filter(x -> x != 0, word_counts)\n    \n    word_counts = map(x -> x[1], word_counts)\n\
    \    \n    word_counts = filter(x -> x != 0, word_counts)\n    \n    word_counts\
    \ = map(x -> x[1], word_counts)\n    \n    word_counts = filter(x -> x != 0, word_counts)\n\
    \    \n    word_counts = map(x -> x[1], word_counts)\n    \n    word_counts =\
    \ filter(x -> x != 0, word_counts)\n    \n    \nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpubssbpn7.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpubssbpn7.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpubssbpn7.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt)\n    \n    words = [w for w in words if\
    \ w != \"\"]\n    \n    words = [w for w in words if w != \",\"]\n    \n    words\
    \ = [w for w in words if w != \"-\"]\n    \n    words = [w for w in words if w\
    \ != \"_\"]\n    \n    words = [w for w in words if w != \"!\"]\n    \n    words\
    \ = [w for w in words if w != \"?\"]\n    \n    words = [w for w in words if w\
    \ != \"-\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words\
    \ = [w for w in words if w != \"!\"]\n    \n    words = [w for w in words if w\
    \ != \"-\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words\
    \ = [w for w in words if w != \"!\"]\n    \n    words = [w for w in words if w\
    \ != \"-\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words\
    \ = [w for w in words if w != \"!\"]\n    \n    words = [w for w in words if w\
    \ != \"-\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words\
    \ = [w for w in words if w != \"!\"]\n    \n    words = [w for w in words if w\
    \ != \"-\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words\
    \ = [w for w in words if w != \"!\"]\n    \n    words = [w for w in words if w\
    \ != \"-\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words\
    \ = [w for w in words if w != \"!\"]\n    \n    words = [w for w in words if w\
    \ != \"-\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words\
    \ = [w for w in words if w != \"!\"]\n    \n    words = [w for w in words if w\
    \ != \"-\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words\
    \ = [w for w in words if w != \"!\"]\n    \n    words = [w for w in words if w\
    \ != \"-\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words\
    \ = [w for w in words if w != \"!\"]\n    \n    words = [w for w in word\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpst1o_ko5.jl:81\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpst1o_ko5.jl:81\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return Vector{String}()\n\
    \    else\n        words = split(txt, \" \")\n        words = words[2:end]\n \
    \       words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpuf8vodg7.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpuf8vodg7.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpuf8vodg7.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    txt = txt.trim()\n    \n    if txt == \"\"\n        return\
    \ txt\n    \n    words = split(txt, \" \")\n    \n    words_split = Vector{String}(undef,\
    \ 0)\n    \n    for word in words\n        words_split = words_split ++ split(word,\"\
    ,\")\n    end\n    \n    words_split = words_split ++ split(txt,\",\")\n    \n\
    \    words_split = words_split ++ split(txt,\" \")\n    \n    words_split = words_split\
    \ ++ split(txt,\".\")\n    \n    words_split = words_split ++ split(txt,\",\"\
    )\n    \n    words_split = words_split ++ split(txt,\";\")\n    \n    words_split\
    \ = words_split ++ split(txt,\":\")\n    \n    words_split = words_split ++ split(txt,\"\
    ,\")\n    \n    words_split = words_split ++ split(txt,\",\")\n    \n    words_split\
    \ = words_split ++ split(txt,\".\")\n    \n    words_split = words_split ++ split(txt,\"\
    ,\")\n    \n    words_split = words_split ++ split(txt,\",\")\n    \n    words_split\
    \ = words_split ++ split(txt,\",\")\n    \n    words_split = words_split ++ split(txt,\"\
    ,\")\n    \n    words_split = words_split ++ split(txt,\",\")\n    \n    words_split\
    \ = words_split ++ split(txt,\",\")\n    \n    words_split = words_split ++ split(txt,\"\
    ,\")\n    \n    words_split = words_split ++ split(txt,\",\")\n    \n    words_split\
    \ = words_split ++ split(txt,\",\")\n    \n    words_split = words_split ++ split(txt,\"\
    ,\")\n    \n    words_split = words_split ++ split(txt,\",\")\n    \n    words_split\
    \ = words_split ++ split(txt,\",\")\n    \n    words_split = words_split ++ split(txt,\"\
    ,\")\n    \n    words_split = words_split ++ split(txt,\",\")\n    \n    words_split\
    \ = words_split ++ split(txt,\",\")\n    \n    words_split = words_split ++ split(txt,\"\
    ,\")\n    \n    words_split = words_split ++ split(txt,\",\")\n    \n    words_split\
    \ = words_split ++ split(txt,\",\")\n    \n    words_split = words_split ++ split(txt,\"\
    ,\")\n    \n    words_split = words_split ++ split(txt,\",\")\n    \n    words_split\
    \ = words_split ++ split(txt,\",\")\n    \n    words_split = words_split ++ split(txt,\"\
    ,\")\n    \n    words_split = words_split ++ split(txt,\",\")\n    \n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcb4gn7yh.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcb4gn7yh.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    if length(words) ==\
    \ 0\n        return txt\n    end\n    \n    if length(words) == 1 \n        return\
    \ words\n    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplv4neezz.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmplv4neezz.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmplv4neezz.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return Vector{String}()\n\
    \    else\n        words = split(txt, \" \")\n        words = [w for w in words\
    \ if w != \"\"]\n        words = [w for w in words if w != \",\"]\n        words\
    \ = [w for w in words if w != \"abcdef\"]\n        return words\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpw_pjhvlg.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  type\
    \ String has no field trim\n  Stacktrace:\n   [1] getproperty(::String, ::Symbol)\
    \ at ./Base.jl:33\n   [2] split_words(::String) at /tmp/tmpw_pjhvlg.jl:11\n  \
    \ [3] top-level scope at /tmp/tmpw_pjhvlg.jl:27\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpw_pjhvlg.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmpw_pjhvlg.jl:28\n  Test threw exception\n  Expression: candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"]\n  type String has no field trim\n\
    \  Stacktrace:\n   [1] getproperty(::String, ::Symbol) at ./Base.jl:33\n   [2]\
    \ split_words(::String) at /tmp/tmpw_pjhvlg.jl:11\n   [3] top-level scope at /tmp/tmpw_pjhvlg.jl:28\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpw_pjhvlg.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmpw_pjhvlg.jl:29\n  Test threw exception\n  Expression: candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"]\n  type String has no field trim\n\
    \  Stacktrace:\n   [1] getproperty(::String, ::Symbol) at ./Base.jl:33\n   [2]\
    \ split_words(::String) at /tmp/tmpw_pjhvlg.jl:11\n   [3] top-level scope at /tmp/tmpw_pjhvlg.jl:29\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpw_pjhvlg.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmpw_pjhvlg.jl:30\n  Test threw exception\n  Expression: candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"]\n  type String has no\
    \ field trim\n  Stacktrace:\n   [1] getproperty(::String, ::Symbol) at ./Base.jl:33\n\
    \   [2] split_words(::String) at /tmp/tmpw_pjhvlg.jl:11\n   [3] top-level scope\
    \ at /tmp/tmpw_pjhvlg.jl:30\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpw_pjhvlg.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmpw_pjhvlg.jl:31\n  Test threw exception\n  Expression: candidate(\"\
    abcdef\") == 3\n  type String has no field trim\n  Stacktrace:\n   [1] getproperty(::String,\
    \ ::Symbol) at ./Base.jl:33\n   [2] split_words(::String) at /tmp/tmpw_pjhvlg.jl:11\n\
    \   [3] top-level scope at /tmp/tmpw_pjhvlg.jl:31\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpw_pjhvlg.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmpw_pjhvlg.jl:32\n  Test threw exception\n  Expression: candidate(\"\
    aaabb\") == 2\n  type String has no field trim\n  Stacktrace:\n   [1] getproperty(::String,\
    \ ::Symbol) at ./Base.jl:33\n   [2] split_words(::String) at /tmp/tmpw_pjhvlg.jl:11\n\
    \   [3] top-level scope at /tmp/tmpw_pjhvlg.jl:32\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpw_pjhvlg.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmpw_pjhvlg.jl:33\n  Test threw exception\n  Expression: candidate(\"\
    aaaBb\") == 1\n  type String has no field trim\n  Stacktrace:\n   [1] getproperty(::String,\
    \ ::Symbol) at ./Base.jl:33\n   [2] split_words(::String) at /tmp/tmpw_pjhvlg.jl:11\n\
    \   [3] top-level scope at /tmp/tmpw_pjhvlg.jl:33\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpw_pjhvlg.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmpw_pjhvlg.jl:34\n  Test threw exception\n  Expression: candidate(\"\
    \") == 0\n  type String has no field trim\n  Stacktrace:\n   [1] getproperty(::String,\
    \ ::Symbol) at ./Base.jl:33\n   [2] split_words(::String) at /tmp/tmpw_pjhvlg.jl:11\n\
    \   [3] top-level scope at /tmp/tmpw_pjhvlg.jl:34\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpw_pjhvlg.jl:26\n  \nTest Summary: | Error \
    \ Total\ntest set      |     8      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw_pjhvlg.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgz4f65zf.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpgz4f65zf.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpgz4f65zf.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    if length(words) ==\
    \ 0 \n        return 0 \n    \n    words_split = split(words, \",\")\n    \n \
    \   if length(words_split) == 0 \n        return length(words) \n    \n    words_split\
    \ = split(words_split, \" \")\n    \n    if length(words_split) == 0 \n      \
    \  return length(words) \n    \n    words_split = split(words_split, \",\")\n\
    \    \n    if length(words_split) == 0 \n        return length(words) \n    \n\
    \    words_split = split(words_split, \" \")\n    \n    if length(words_split)\
    \ == 0 \n        return length(words) \n    \n    words_split = split(words_split,\
    \ \",\")\n    \n    if length(words_split) == 0 \n        return length(words)\
    \ \n    \n    words_split = split(words_split, \" \")\n    \n    if length(words_split)\
    \ == 0 \n        return length(words) \n    \n    words_split = split(words_split,\
    \ \",\")\n    \n    if length(words_split) == 0 \n        return length(words)\
    \ \n    \n    words_split = split(words_split, \" \")\n    \n    if length(words_split)\
    \ == 0 \n        return length(words) \n    \n    words_split = split(words_split,\
    \ \",\")\n    \n    if length(words_split) == 0 \n        return length(words)\
    \ \n    \n    words_split = split(words_split, \" \")\n    \n    if length(words_split)\
    \ == 0 \n        return length(words) \n    \n    words_split = split(words_split,\
    \ \",\")\n    \n    if length(words_split) == 0 \n        return length(words)\
    \ \n    \n    words_split = split(words_split, \" \")\n    \n    if length(words_split)\
    \ == 0 \n        return length(words) \n    \n    words_split = split(words_split,\
    \ \",\")\n    \n    if length(words_split) == 0 \n        return length(words)\
    \ \n    \n    words_split = split(words_split, \" \")\n    \n    if length(words_split)\
    \ == 0 \n        return length(words) \n    \n    words_split = split(words_split,\
    \ \",\")\n    \n    if length(words_split) == 0 \n        return length(words)\
    \ \n    \n    words_split = split(words_split, \" \")\n    \n    if length(words_split)\
    \ == 0 \n        return length(words) \n    \n    words_split = split(words_split,\
    \ \",\")\n    \n    if length(words_split) == 0 \n        return length(words)\
    \ \n    \n    words_split = split(words_split, \" \")\n    \n    if length(words_split)\
    \ == 0 \n        return length(words) \n    \n    words_split = split(words_split,\
    \ \",\")\n    \n    if length(words_split) == 0 \n        return length(words)\
    \ \n    \n    words_split = split(words_split, \" \")\n    \n    if length(words_split)\
    \ == 0 \n        return length(words) \n    \n    \nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp98apylhz.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp98apylhz.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    word_counts = Dict()\n\
    \    for w in words\n        word_counts[w] = get(word_counts, w, 0) + 1\n   \
    \ end\n    \n    word_counts = collect(values(word_counts))\n    \n    word_counts\
    \ = sort(word_counts)\n    \n    word_counts = word_counts[2:end]\n    \n    word_counts\
    \ = word_counts[word_counts[end] .> word_counts[end-1]]\n    \n    word_counts\
    \ = word_counts[word_counts[end] .> word_counts[end-1]]\n    \n    word_counts\
    \ = word_counts[word_counts[end] .> word_counts[end-1]]\n    \n    word_counts\
    \ = word_counts[word_counts[end] .> word_counts[end-1]]\n    \n    word_counts\
    \ = word_counts[word_counts[end] .> word_counts[end-1]]\n    \n    word_counts\
    \ = word_counts[word_counts[end] .> word_counts[end-1]]\n    \n    word_counts\
    \ = word_counts[word_counts[end] .> word_counts[end-1]]\n    \n    word_counts\
    \ = word_counts[word_counts[end] .> word_counts[end-1]]\n    \n    word_counts\
    \ = word_counts[word_counts[end] .> word_counts[end-1]]\n    \n    word_counts\
    \ = word_counts[word_counts[end] .> word_counts[end-1]]\n    \n    word_counts\
    \ = word_counts[word_counts[end] .> word_counts[end-1]]\n    \n    word_counts\
    \ = word_counts[word_counts[end] .> word_counts[end-1]]\n    \n    word_counts\
    \ = word_counts[word_counts[end] .> word_counts[end-1]]\n    \n    word_counts\
    \ = word_counts[word_counts[end] .> word_counts[end-1]]\n    \n    word_counts\
    \ = word_counts[word_counts[end] .> word_counts[end-1]]\n    \n    word_counts\
    \ = word_counts[word_counts[end] .> word_counts[end-1]]\n    \n    word_counts\
    \ = word_counts[word_counts[end] .> word_counts[end-1]]\n    \n    word_counts\
    \ = word_counts[word_counts[end] .> word_counts[end-1]]\n    \n    word_counts\
    \ = word_counts[word_counts[end] .> word_counts[end-1]]\n    \nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5cue6cfv.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp5cue6cfv.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp5cue6cfv.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return txt\n    \n\
    \    words = split(txt, \" \")\n    \n    words_splitted = []\n    \n    for word\
    \ in words\n        words_splitted = words_splitted ++ split(word, \",\")\n  \
    \  end\n    \n    words_splitted = words_splitted ++ split(words[1], \",\")\n\
    \    \n    words_splitted = words_splitted ++ split(words[2], \",\")\n    \n \
    \   words_splitted = words_splitted ++ split(words[3], \",\")\n    \n    words_splitted\
    \ = words_splitted ++ split(words[4], \",\")\n    \n    words_splitted = words_splitted\
    \ ++ split(words[5], \",\")\n    \n    words_splitted = words_splitted ++ split(words[6],\
    \ \",\")\n    \n    words_splitted = words_splitted ++ split(words[7], \",\")\n\
    \    \n    words_splitted = words_splitted ++ split(words[8], \",\")\n    \n \
    \   words_splitted = words_splitted ++ split(words[9], \",\")\n    \n    words_splitted\
    \ = words_splitted ++ split(words[10], \",\")\n    \n    words_splitted = words_splitted\
    \ ++ split(words[11], \",\")\n    \n    words_splitted = words_splitted ++ split(words[12],\
    \ \",\")\n    \n    words_splitted = words_splitted ++ split(words[13], \",\"\
    )\n    \n    words_splitted = words_splitted ++ split(words[14], \",\")\n    \n\
    \    words_splitted = words_splitted ++ split(words[15], \",\")\n    \n    words_splitted\
    \ = words_splitted ++ split(words[16], \",\")\n    \n    words_splitted = words_splitted\
    \ ++ split(words[17], \",\")\n    \n    words_splitted = words_splitted ++ split(words[18],\
    \ \",\")\n    \n    words_splitted = words_splitted ++ split(words[19], \",\"\
    )\n    \n    words_splitted = words_splitted ++ split(words[20], \",\")\n    \n\
    \    words_splitted = words_splitted ++ split(words[21], \",\")\n    \n    words_splitted\
    \ = words_splitted ++ split(words[22], \",\")\n    \n    words_splitted = words_splitted\
    \ ++ split(words[23], \",\")\n    \n    words_splitted = words_splitted ++ split(words[24],\
    \ \",\")\n    \n    words_splitted = words_splitted ++ split(words[25], \",\"\
    )\n    \n    words_splitted = words_splitted ++ split(words[26], \nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl069k8f7.jl:76\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpl069k8f7.jl:76\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt)\n    \n    if length(words) == 0\n   \
    \     return words\n    \n    words_split = split(txt, \" \")\n    \n    if length(words_split)\
    \ == 0\n        return words\n    \n    words_split = split(txt, \",\")\n    \n\
    \    if length(words_split) == 0\n        return words\n    \n    words_split\
    \ = split(txt, \"-\")\n    \n    if length(words_split) == 0\n        return words\n\
    \    \n    words_split = split(txt, \";\")\n    \n    if length(words_split) ==\
    \ 0\n        return words\n    \n    words_split = split(txt, \"/\")\n    \n \
    \   if length(words_split) == 0\n        return words\n    \n    words_split =\
    \ split(txt, \"\\\\\")\n    \n    if length(words_split) == 0\n        return\
    \ words\n    \n    words_split = split(txt, \"'\")\n    \n    if length(words_split)\
    \ == 0\n        return words\n    \n    words_split = split(txt, \"\\\"\")\n \
    \   \n    if length(words_split) == 0\n        return words\n    \n    words_split\
    \ = split(txt, \"?\")\n    \n    if length(words_split) == 0\n        return words\n\
    \    \n    words_split = split(txt, \"!\")\n    \n    if length(words_split) ==\
    \ 0\n        return words\n    \n    words_split = split(txt, \"#\")\n    \n \
    \   if length(words_split) == 0\n        return words\n    \n    words_split =\
    \ split(txt, \"$\")\n    \n    if length(words_split) == 0\n        return words\n\
    \    \n    words_split = split(txt, \"%\")\n    \n    if length(words_split) ==\
    \ 0\n        return words\n    \n    words_split = split(txt, \"^\")\n    \n \
    \   if length(words_split) == 0\n        return words\n    \n    words_split =\
    \ split(txt, \"&\")\n    \n    if length(words_split) == 0\n        return words\n\
    \    \n    words_split = split(txt, \"*\")\n    \n    if length(words_split) ==\
    \ 0\n        return words\n    \n    words_split = split(txt, \"(\")\n    \n \
    \   if length(words_split) == 0\n        return words\n    \n    words_split =\
    \ split(txt, \")\")\n    \n    if length(words_split) == 0\n        return words\n\
    \    \n    words_split = split(txt, \"-\")\n    \n    if length(words_split) ==\
    \ 0\n        return words\n    \n    words_split = split(txt, \"+\")\n    \n \
    \   if length(words_split) == 0\n        return words\n    \n    words_split =\
    \ split(txt, \"=\")\n    \n    if length(words_split) == 0\n        return words\n\
    \    \n    words_split = split(txt, \"<\")\n    \n    if length(words_split) ==\
    \ 0\n        return words\n    \n    words_split = split(txt, \">\")\n    \n \
    \   if length(words_split) == 0\n        return words\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx4y696gt.jl:72\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpx4y696gt.jl:72\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    if length(words) ==\
    \ 0 \n        return 0 \n    else \n        \n        words_split = split(txt,\
    \ \",\")\n        \n        if length(words_split) == 0 \n            return length(words)\
    \ \n        else \n            \n            words_split2 = split(words_split[1],\
    \ \" \")\n            \n            if length(words_split2) == 0 \n          \
    \      return length(words) + length(words_split) \n            else \n      \
    \          return length(words) + length(words_split) + length(words_split2) \n\
    \        end\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqyvbxnkq.jl:33\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqyvbxnkq.jl:33\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if isempty(txt)\n        return txt\n    else\n        words =\
    \ split(txt, \" \")\n        words = [w for w in words if w != \"\"]\n       \
    \ words = [w for w in words if w != \",\"]\n        words = [w for w in words\
    \ if w != \".\"]\n        words = [w for w in words if w != \"?\"]\n        words\
    \ = [w for w in words if w != \"!\"]\n        words = [w for w in words if w !=\
    \ \"-\"]\n        words = [w for w in words if w != \"_\"]\n        words = [w\
    \ for w in words if w != \"(\"]\n        words = [w for w in words if w != \"\
    )\"]\n        words = [w for w in words if w != \"[\"]\n        words = [w for\
    \ w in words if w != \"]\"]\n        words = [w for w in words if w != \"{\"]\n\
    \        words = [w for w in words if w != \"}\"]\n        words = [w for w in\
    \ words if w != \"|\"]\n        words = [w for w in words if w != \"#\"]\n   \
    \     words = [w for w in words if w != \"$\"]\n        words = [w for w in words\
    \ if w != \"%\"]\n        words = [w for w in words if w != \"^\"]\n        words\
    \ = [w for w in words if w != \"&\"]\n        words = [w for w in words if w !=\
    \ \"*\"]\n        words = [w for w in words if w != \"(\"]\n        words = [w\
    \ for w in words if w != \")\"]\n        words = [w for w in words if w != \"\
    [\"]\n        words = [w for w in words if w != \"]\"]\n        words = [w for\
    \ w in words if w != \"{\"]\n        words = [w for w in words if w != \"}\"]\n\
    \        words = [w for w in words if w != \"|\"]\n        words = [w for w in\
    \ words if w != \"#\"]\n        words = [w for w in words if w != \"$\"]\n   \
    \     words = [w for w in words if w != \"%\"]\n        words = [w for w in words\
    \ if w != \"^\"]\n        words = [w for w in words if w != \"&\"]\n        words\
    \ = [w for w in words if w != \"*\"]\n        words = [w for w in words if w !=\
    \ \"(\"]\n        words = [w for w in words if w != \")\"]\n        words = [w\
    \ for w in words if w != \"[\"]\n        words = [w for w in words if w != \"\
    ]\"]\n        words = [w for w in words if w != \"{\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8dr_zyv6.jl:30\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8dr_zyv6.jl:30\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    if isempty(txt)\n        return [] \n    end\n    \n    words\
    \ = split(txt, \" \")\n    \n    words_splitted = []\n    \n    for word in words\n\
    \        if isempty(word)\n            continue\n        end\n        \n     \
    \   words_splitted = words_splitted ++ split(word, \",\")\n    end\n    \n   \
    \ words_splitted = words_splitted ++ split(txt, \" \")\n    \n    words_splitted\
    \ = words_splitted .- \"a\"\n    \n    words_splitted = words_splitted .- \"b\"\
    \n    \n    words_splitted = words_splitted .- \"c\"\n    \n    words_splitted\
    \ = words_splitted .- \"d\"\n    \n    words_splitted = words_splitted .- \"e\"\
    \n    \n    words_splitted = words_splitted .- \"f\"\n    \n    words_splitted\
    \ = words_splitted .- \"g\"\n    \n    words_splitted = words_splitted .- \"h\"\
    \n    \n    words_splitted = words_splitted .- \"i\"\n    \n    words_splitted\
    \ = words_splitted .- \"j\"\n    \n    words_splitted = words_splitted .- \"k\"\
    \n    \n    words_splitted = words_splitted .- \"l\"\n    \n    words_splitted\
    \ = words_splitted .- \"m\"\n    \n    words_splitted = words_splitted .- \"n\"\
    \n    \n    words_splitted = words_splitted .- \"o\"\n    \n    words_splitted\
    \ = words_splitted .- \"p\"\n    \n    words_splitted = words_splitted .- \"q\"\
    \n    \n    words_splitted = words_splitted .- \"r\"\n    \n    words_splitted\
    \ = words_splitted .- \"s\"\n    \n    words_splitted = words_splitted .- \"t\"\
    \n    \n    words_splitted = words_splitted .- \"u\"\n    \n    words_splitted\
    \ = words_splitted .- \"v\"\n    \n    words_splitted = words_splitted .- \"w\"\
    \n    \n    words_splitted = words_splitted .- \"x\"\n    \n    words_splitted\
    \ = words_splitted .- \"y\"\n    \n    words_splitted = words_splitted .- \"z\"\
    \n    \n    words_splitted = words_splitted .- \"A\"\n    \n    words_splitted\
    \ = words_splitted .- \"B\"\n    \n    words_splitted = words_splitted .- \"C\"\
    \n    \n    words_splitted = words_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp10397mlw.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp10397mlw.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp10397mlw.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp568wy9kb.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp568wy9kb.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp568wy9kb.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi4xb0ynt.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpi4xb0ynt.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpi4xb0ynt.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt)\n    \n    words_split = Vector{String}(undef,\
    \ 0)\n    \n    for word in words\n        \n        if !isspace(word)\n     \
    \       words_split = words_split ++ [word]\n        else\n            words_split\
    \ = words_split ++ [word]\n        end\n    end\n    \n    return words_split\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphn1go23b.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching isspace(::SubString{String})\n  Closest candidates are:\n\
    \    isspace(!Matched::AbstractChar) at strings/unicode.jl:466\n  Stacktrace:\n\
    \   [1] split_words(::String) at /tmp/tmphn1go23b.jl:18\n   [2] top-level scope\
    \ at /tmp/tmphn1go23b.jl:32\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmphn1go23b.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmphn1go23b.jl:33\n  Test threw exception\n  Expression: candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method matching\
    \ isspace(::SubString{String})\n  Closest candidates are:\n    isspace(!Matched::AbstractChar)\
    \ at strings/unicode.jl:466\n  Stacktrace:\n   [1] split_words(::String) at /tmp/tmphn1go23b.jl:18\n\
    \   [2] top-level scope at /tmp/tmphn1go23b.jl:33\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmphn1go23b.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmphn1go23b.jl:34\n  Test threw exception\n  Expression: candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: no method matching\
    \ isspace(::SubString{String})\n  Closest candidates are:\n    isspace(!Matched::AbstractChar)\
    \ at strings/unicode.jl:466\n  Stacktrace:\n   [1] split_words(::String) at /tmp/tmphn1go23b.jl:18\n\
    \   [2] top-level scope at /tmp/tmphn1go23b.jl:34\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmphn1go23b.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmphn1go23b.jl:35\n  Test threw exception\n  Expression: candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"]\n  MethodError: no method\
    \ matching isspace(::SubString{String})\n  Closest candidates are:\n    isspace(!Matched::AbstractChar)\
    \ at strings/unicode.jl:466\n  Stacktrace:\n   [1] split_words(::String) at /tmp/tmphn1go23b.jl:18\n\
    \   [2] top-level scope at /tmp/tmphn1go23b.jl:35\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmphn1go23b.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmphn1go23b.jl:36\n  Test threw exception\n  Expression: candidate(\"\
    abcdef\") == 3\n  MethodError: no method matching isspace(::SubString{String})\n\
    \  Closest candidates are:\n    isspace(!Matched::AbstractChar) at strings/unicode.jl:466\n\
    \  Stacktrace:\n   [1] split_words(::String) at /tmp/tmphn1go23b.jl:18\n   [2]\
    \ top-level scope at /tmp/tmphn1go23b.jl:36\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmphn1go23b.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmphn1go23b.jl:37\n  Test threw exception\n  Expression: candidate(\"\
    aaabb\") == 2\n  MethodError: no method matching isspace(::SubString{String})\n\
    \  Closest candidates are:\n    isspace(!Matched::AbstractChar) at strings/unicode.jl:466\n\
    \  Stacktrace:\n   [1] split_words(::String) at /tmp/tmphn1go23b.jl:18\n   [2]\
    \ top-level scope at /tmp/tmphn1go23b.jl:37\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmphn1go23b.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmphn1go23b.jl:38\n  Test threw exception\n  Expression: candidate(\"\
    aaaBb\") == 1\n  MethodError: no method matching isspace(::SubString{String})\n\
    \  Closest candidates are:\n    isspace(!Matched::AbstractChar) at strings/unicode.jl:466\n\
    \  Stacktrace:\n   [1] split_words(::String) at /tmp/tmphn1go23b.jl:18\n   [2]\
    \ top-level scope at /tmp/tmphn1go23b.jl:38\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmphn1go23b.jl:31\n  \ntest set: Test Failed at\
    \ /tmp/tmphn1go23b.jl:39\n  Expression: candidate(\"\") == 0\n   Evaluated: String[]\
    \ == 0\nStacktrace:\n [1] top-level scope at /tmp/tmphn1go23b.jl:39\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphn1go23b.jl:31\nTest Summary: | Fail  Error \
    \ Total\ntest set      |    1      7      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphn1go23b.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_split = split(txt, \",\")\n\
    \    words_split2 = split(txt, \",\")\n    if length(words) == length(words_split)\
    \ || length(words) == length(words_split2) || length(words) == length(words_split)\
    \ || length(words) == length(words_split2)\n        return words\n    else\n \
    \       return length(words)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkv05_72i.jl:25\n  Expression: candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"]\n   Evaluated: 2 == [\"Hello\", \"\
    world!\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpkv05_72i.jl:25\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkv05_72i.jl:24\ntest set: Test Failed at /tmp/tmpkv05_72i.jl:26\n\
    \  Expression: candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n   Evaluated:\
    \ 1 == [\"Hello\", \"world!\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpkv05_72i.jl:26\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkv05_72i.jl:24\ntest set: Error During Test at\
    \ /tmp/tmpkv05_72i.jl:27\n  Test threw exception\n  Expression: candidate(\"Hello\
    \ world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot `convert` an object\
    \ of type \n    Array{SubString{String},1} to an object of type \n    Union{Int64,\
    \ Array{String,1}}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T at essentials.jl:171\n  Stacktrace:\n   [1] split_words(::String) at\
    \ /tmp/tmpkv05_72i.jl:15\n   [2] top-level scope at /tmp/tmpkv05_72i.jl:27\n \
    \  [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpkv05_72i.jl:24\n  \ntest set: Test Failed at\
    \ /tmp/tmpkv05_72i.jl:28\n  Expression: candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"]\n   Evaluated: 2 == [\"Hello,Hello,world\", \"\
    !\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpkv05_72i.jl:28\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkv05_72i.jl:24\ntest set: Error During Test at\
    \ /tmp/tmpkv05_72i.jl:29\n  Test threw exception\n  Expression: candidate(\"abcdef\"\
    ) == 3\n  MethodError: Cannot `convert` an object of type \n    Array{SubString{String},1}\
    \ to an object of type \n    Union{Int64, Array{String,1}}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:171\n  Stacktrace:\n\
    \   [1] split_words(::String) at /tmp/tmpkv05_72i.jl:15\n   [2] top-level scope\
    \ at /tmp/tmpkv05_72i.jl:29\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpkv05_72i.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpkv05_72i.jl:30\n  Test threw exception\n  Expression: candidate(\"\
    aaabb\") == 2\n  MethodError: Cannot `convert` an object of type \n    Array{SubString{String},1}\
    \ to an object of type \n    Union{Int64, Array{String,1}}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:171\n  Stacktrace:\n\
    \   [1] split_words(::String) at /tmp/tmpkv05_72i.jl:15\n   [2] top-level scope\
    \ at /tmp/tmpkv05_72i.jl:30\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpkv05_72i.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpkv05_72i.jl:31\n  Test threw exception\n  Expression: candidate(\"\
    aaaBb\") == 1\n  MethodError: Cannot `convert` an object of type \n    Array{SubString{String},1}\
    \ to an object of type \n    Union{Int64, Array{String,1}}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:171\n  Stacktrace:\n\
    \   [1] split_words(::String) at /tmp/tmpkv05_72i.jl:15\n   [2] top-level scope\
    \ at /tmp/tmpkv05_72i.jl:31\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpkv05_72i.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpkv05_72i.jl:32\n  Test threw exception\n  Expression: candidate(\"\
    \") == 0\n  MethodError: Cannot `convert` an object of type \n    Array{SubString{String},1}\
    \ to an object of type \n    Union{Int64, Array{String,1}}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::T) where T at essentials.jl:171\n  Stacktrace:\n\
    \   [1] split_words(::String) at /tmp/tmpkv05_72i.jl:15\n   [2] top-level scope\
    \ at /tmp/tmpkv05_72i.jl:32\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpkv05_72i.jl:24\n  \nTest Summary: | Fail  Error\
    \  Total\ntest set      |    3      5      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkv05_72i.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbk3ot5qh.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpbk3ot5qh.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpbk3ot5qh.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return txt\n    else\n\
    \        words = split(txt, \" \")\n        words = words[2:end]\n        words\
    \ = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[2:end]\n\
    \        words = words[2:end]\n        words = words[2:end]\n        words = words[\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgrfqlzou.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgrfqlzou.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_split = split(txt, \",\")\n\
    \    if length(words_split) == 0 \n        return words\n    else\n        return\
    \ words_split\n    end\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,string\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4ecb7khw.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4ecb7khw.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return txt\n    \n\
    \    words = split(txt, \" \")\n    \n    words_splitted = []\n    for word in\
    \ words\n        if word != \"\"\n            words_splitted = words_splitted\
    \ ++ split(word, \",\")\n        end\n    end\n    \n    words_splitted = words_splitted\
    \ ++ split(txt, \",\")\n    \n    words_splitted = words_splitted ++ split(txt,\
    \ \" \")\n    \n    words_splitted = words_splitted ++ split(txt, \" \")\n   \
    \ \n    words_splitted = words_splitted ++ split(txt, \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(txt, \" \")\n    \n    words_splitted = words_splitted\
    \ ++ split(txt, \" \")\n    \n    words_splitted = words_splitted ++ split(txt,\
    \ \" \")\n    \n    words_splitted = words_splitted ++ split(txt, \" \")\n   \
    \ \n    words_splitted = words_splitted ++ split(txt, \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(txt, \" \")\n    \n    words_splitted = words_splitted\
    \ ++ split(txt, \" \")\n    \n    words_splitted = words_splitted ++ split(txt,\
    \ \" \")\n    \n    words_splitted = words_splitted ++ split(txt, \" \")\n   \
    \ \n    words_splitted = words_splitted ++ split(txt, \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(txt, \" \")\n    \n    words_splitted = words_splitted\
    \ ++ split(txt, \" \")\n    \n    words_splitted = words_splitted ++ split(txt,\
    \ \" \")\n    \n    words_splitted = words_splitted ++ split(txt, \" \")\n   \
    \ \n    words_splitted = words_splitted ++ split(txt, \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(txt, \" \")\n    \n    words_splitted = words_splitted\
    \ ++ split(txt, \" \")\n    \n    words_splitted = words_splitted ++ split(txt,\
    \ \" \")\n    \n    words_splitted = words_splitted ++ split(txt, \" \")\n   \
    \ \n    words_splitted = words_splitted ++ split(txt, \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(txt, \" \")\n    \n    words_splitted = words_splitted\
    \ ++ split(txt, \" \")\n    \n    words_splitted = words_splitted ++ split(txt,\
    \ \" \")\n    \n    words_splitted = words_splitted ++ split(txt, \" \")\n   \
    \ \n    words_splitted = words_splitted ++ split(txt, \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(txt, \" \")\n    \n\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm0yh0axd.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpm0yh0axd.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    if length(words) ==\
    \ 0\n        return words\n    end\n    \n    words_split = split(txt, \",\")\n\
    \    \n    if length(words_split) == 0\n        return words\n    end\n    \n\
    \    words_split = split(words_split[1], \",\")\n    \n    if length(words_split)\
    \ == 0\n        return words\n    end\n    \n    words_split = split(words_split[1],\
    \ \",\")\n    \n    if length(words_split) == 0\n        return words\n    end\n\
    \    \n    words_split = split(words_split[1], \",\")\n    \n    if length(words_split)\
    \ == 0\n        return words\n    end\n    \n    words_split = split(words_split[1],\
    \ \",\")\n    \n    if length(words_split) == 0\n        return words\n    end\n\
    \    \n    words_split = split(words_split[1], \",\")\n    \n    if length(words_split)\
    \ == 0\n        return words\n    end\n    \n    words_split = split(words_split[1],\
    \ \",\")\n    \n    if length(words_split) == 0\n        return words\n    end\n\
    \    \n    words_split = split(words_split[1], \",\")\n    \n    if length(words_split)\
    \ == 0\n        return words\n    end\n    \n    words_split = split(words_split[1],\
    \ \",\")\n    \n    if length(words_split) == 0\n        return words\n    end\n\
    \    \n    words_split = split(words_split[1], \",\")\n    \n    if length(words_split)\
    \ == 0\n        return words\n    end\n    \n    words_split = split(words_split[1],\
    \ \",\")\n    \n    if length(words_split) == 0\n        return words\n    end\n\
    \    \n    words_split = split(words_split[1], \",\")\n    \n    if length(words_split)\
    \ == 0\n        return words\n    end\n    \n    words_split = split(words_split[1],\
    \ \",\")\n    \n    if length(words_split) == 0\n        return words\n    end\n\
    \    \n    words_split = split(words_split[1], \",\")\n    \n    if length(words_split)\
    \ == 0\n        return words\n    end\n    \n    words_split = split(words_split[1],\
    \ \",\")\n    \n    if length(words_split) == 0\n        return words\n    end\n\
    \    \n    words_split = split(words_split[1], \",\")\n    \n    if length(words_split)\
    \ == 0\n        return words\n    end\n    \n    words_split = split(words_split[1],\
    \ \",\")\n    \n    if length(words_split) == 0\n        return words\n    end\n\
    \    \n    words_split = split(words_split[1], \",\")\n    \n    if length(words_split)\
    \ == 0\n        return words\n    end\n    \n    words_split = split(words_split[1],\
    \ \",\")\n    \n    if length(words_split) == 0\n        return words\n    end\n\
    \    \n    words_split = split(words_split[1], \",\")\n    \n    if length(\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp53ewliqe.jl:137\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp53ewliqe.jl:137\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpxq4mhn9i.jl:51\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpxq4mhn9i.jl:51\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    words = split(txt, \" \")\n    \n    if length(words)\
    \ == 0 \n        return txt\n    elseif length(words) == 1 \n        return words\n\
    \    else\n        \n        words_split = split(txt, \",\")\n        \n     \
    \   if length(words_split) == 0 \n            return txt\n        elseif length(words_split)\
    \ == 1 \n            return words_split\n        else\n            \n        \
    \    words_split = split(txt, \",\")\n            \n            if length(words_split)\
    \ == 0 \n                return txt\n            elseif length(words_split) ==\
    \ 1 \n                return words_split\n            else\n                \n\
    \                words_split = split(txt, \",\")\n                \n         \
    \       if length(words_split) == 0 \n                    return txt\n       \
    \         elseif length(words_split) == 1 \n                    return words_split\n\
    \                else\n                    \n                    words_split =\
    \ split(txt, \",\")\n                    \n                    if length(words_split)\
    \ == 0 \n                        return txt\n                    elseif length(words_split)\
    \ == 1 \n                        return words_split\n                    else\n\
    \                        \n                        words_split = split(txt, \"\
    ,\")\n                        \n                        if length(words_split)\
    \ == 0 \n                            return txt\n                        elseif\
    \ length(words_split) == 1 \n                            return words_split\n\
    \                        else\n                            \n                \
    \            words_split = split(txt, \",\")\n                            \n \
    \                           if length(words_split) == 0 \n                   \
    \             return txt\n                            elseif length(words_split)\
    \ == 1 \n                                return words_split\n                \
    \            else\n                                \n                        \
    \        words_split = split(txt, \",\")\n                                \n \
    \                               if length(words_split) == 0 \n               \
    \                     return txt\n                                elseif length(words_split)\
    \ == 1 \n                                    return words_split\n            \
    \                    else\n                                    \n            \
    \                        words_split = split(txt, \",\")\n                   \
    \                 \n                                    if length(words_split)\
    \ == 0 \n                                        return txt\n                \
    \                    elseif length(words_split) == 1 \n                      \
    \                  return words_split\n                                    else\n\
    \                                        \n                                  \
    \      words_split = split(txt, \",\")\n                                     \
    \   \n                                        if length(words_split) == 0 \n \
    \                                           return txt\n                     \
    \                   elseif length(words_split) == 1 \n                       \
    \                     return words_split\n                                   \
    \     else\n                                            \n                   \
    \                         words_split = split(txt, \",\")\n                  \
    \                          \n                                            if length(words_split)\
    \ == 0 \n                                                return txt\n        \
    \                                    elseif length(words_split) == 1 \n      \
    \                                          return words_split\n              \
    \                              else\n                                        \
    \        \n                                                words_split = split(txt,\
    \ \",\")\n                                                \n                 \
    \                               if length(words_split) == 0 \n               \
    \                                     return txt\n                           \
    \                     elseif length(words_split) == 1 \n                     \
    \                               return words_split\n                         \
    \                       else\n                                               \
    \     \n                                                    words_split = split(txt,\
    \ \",\")\n                                                    \n             \
    \                                       if length(words_split) == 0 \n       \
    \                                                 return txt\n               \
    \                                     elseif length(words_split\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2tb0svwq.jl:113\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2tb0svwq.jl:113\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    txt = txt.trim()\n    \n    if txt == \"\"\n        return\
    \ txt\n    \n    words = split(txt, \" \")\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    words_split2 = split(txt, \" \")\n    \n    words_split3 =\
    \ split(txt, \",\")\n    \n    words_split4 = split(txt, \" \")\n    \n    words_split5\
    \ = split(txt, \",\")\n    \n    words_split6 = split(txt, \" \")\n    \n    words_split7\
    \ = split(txt, \",\")\n    \n    words_split8 = split(txt, \" \")\n    \n    words_split9\
    \ = split(txt, \",\")\n    \n    words_split10 = split(txt, \" \")\n    \n   \
    \ words_split11 = split(txt, \",\")\n    \n    words_split12 = split(txt, \" \"\
    )\n    \n    words_split13 = split(txt, \",\")\n    \n    words_split14 = split(txt,\
    \ \" \")\n    \n    words_split15 = split(txt, \",\")\n    \n    words_split16\
    \ = split(txt, \" \")\n    \n    words_split17 = split(txt, \",\")\n    \n   \
    \ words_split18 = split(txt, \" \")\n    \n    words_split19 = split(txt, \",\"\
    )\n    \n    words_split20 = split(txt, \" \")\n    \n    words_split21 = split(txt,\
    \ \",\")\n    \n    words_split22 = split(txt, \" \")\n    \n    words_split23\
    \ = split(txt, \",\")\n    \n    words_split24 = split(txt, \" \")\n    \n   \
    \ words_split25 = split(txt, \",\")\n    \n    words_split26 = split(txt, \" \"\
    )\n    \n    words_split27 = split(txt, \",\")\n    \n    words_split28 = split(txt,\
    \ \" \")\n    \n    words_split29 = split(txt, \",\")\n    \n    words_split30\
    \ = split(txt, \" \")\n    \n    words_split31 = split(txt, \",\")\n    \n   \
    \ words_split32 = split(txt, \" \")\n    \n    words_split33 = split(txt, \",\"\
    )\n    \n    words_split34 = split(txt, \" \")\n    \n    words_split35 = split(txt,\
    \ \",\")\n    \n    words_split36 = split(txt, \" \")\n    \n    words_split37\
    \ = split(txt, \",\")\n    \n    words_split38 = split(txt, \" \")\n    \n   \
    \ words_split39 = split(txt, \",\")\n    \n    words_split40 = split(\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfc6zvq_n.jl:100\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfc6zvq_n.jl:100\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return txt\n    else\n\
    \        words = split(txt, \" \")\n        words_split = split(txt, \",\")\n\
    \        words_split = split(words_split, \" \")\n        words_split = split(words_split,\
    \ \",\")\n        words_split = split(words_split, \" \")\n        words_split\
    \ = split(words_split, \",\")\n        words_split = split(words_split, \" \"\
    )\n        words_split = split(words_split, \",\")\n        words_split = split(words_split,\
    \ \" \")\n        words_split = split(words_split, \",\")\n        words_split\
    \ = split(words_split, \" \")\n        words_split = split(words_split, \",\"\
    )\n        words_split = split(words_split, \" \")\n        words_split = split(words_split,\
    \ \",\")\n        words_split = split(words_split, \" \")\n        words_split\
    \ = split(words_split, \",\")\n        words_split = split(words_split, \" \"\
    )\n        words_split = split(words_split, \",\")\n        words_split = split(words_split,\
    \ \" \")\n        words_split = split(words_split, \",\")\n        words_split\
    \ = split(words_split, \" \")\n        words_split = split(words_split, \",\"\
    )\n        words_split = split(words_split, \" \")\n        words_split = split(words_split,\
    \ \",\")\n        words_split = split(words_split, \" \")\n        words_split\
    \ = split(words_split, \",\")\n        words_split = split(words_split, \" \"\
    )\n        words_split = split(words_split, \",\")\n        words_split = split(words_split,\
    \ \" \")\n        words_split = split(words_split, \",\")\n        words_split\
    \ = split(words_split, \" \")\n        words_split = split(words_split, \",\"\
    )\n        words_split = split(words_split, \" \")\n        words_split = split(words_split,\
    \ \",\")\n        words_split = split(words_split, \" \")\n        words_split\
    \ = split(words_split, \",\")\n        words_split = split(words_split, \" \"\
    )\n        words_split = split(words_split, \",\")\n        words_split = split(words_split,\
    \ \" \")\n        words_split = split(words_split, \",\")\n        words_split\
    \ = split(words_split, \" \")\n        words_split = split(words_split, \",\"\
    )\n        words_split = split(words_split, \" \")\n        words_split = split(words_split,\
    \ \",\")\n        words_split = split(words_split, \" \")\n        words_split\
    \ = split(words_split, \",\")\n        words_split = split(words_split, \" \"\
    )\n        words_split = split(words_split, \",\")\n        words_split = split(words_split,\
    \ \" \")\n        words_split = split(words_split, \",\")\n        words_split\
    \ = split(words_split, \" \")\n        words_split = split(words_split, \",\"\
    )\n        words_split = split(words_split, \" \")\n        words_split = split(words_split,\
    \ \",\")\n        words_split = split(words_split, \" \")\n        words_split\
    \ = split(words_split, \",\")\n        words_split = split(words_split, \" \"\
    )\n        words_split = split(words_split, \",\")\n        words_\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp0ddftyf_.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp0ddftyf_.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp0ddftyf_.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    txt = txt.trim()\n    \n    if txt == \"\"\n        return\
    \ txt\n    \n    words = split(txt, \" \")\n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t\
    @test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4n1zgwgw.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4n1zgwgw.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    txt = txt.trim()\n    \n    if txt == \"\"\n        return\
    \ txt\n    \n    words = split(txt, \" \")\n    \n    words_splitted = [split(word,\
    \ \",\") for word in words]\n    \n    words_splitted = [word for sublist in words_splitted\
    \ for word in sublist]\n    \n    words_splitted = [word for word in words_splitted\
    \ if word != \"\"]\n    \n    words_splitted = [word for word in words_splitted\
    \ if !islower(word)]\n    \n    words_splitted = [word for word in words_splitted\
    \ if !isupper(word)]\n    \n    words_splitted = [word for word in words_splitted\
    \ if !isdigit(word)]\n    \n    words_splitted = [word for word in words_splitted\
    \ if !isspace(word)]\n    \n    words_splitted = [word for word in words_splitted\
    \ if !issymbol(word)]\n    \n    words_splitted = [word for word in words_splitted\
    \ if !isascii(word)]\n    \n    words_splitted = [word for word in words_splitted\
    \ if !iscontrol(word)]\n    \n    words_splitted = [word for word in words_splitted\
    \ if !isascii(word)]\n    \n    words_splitted = [word for word in words_splitted\
    \ if !isascii(word)]\n    \n    words_splitted = [word for word in words_splitted\
    \ if !isascii(word)]\n    \n    words_splitted = [word for word in words_splitted\
    \ if !isascii(word)]\n    \n    words_splitted = [word for word in words_splitted\
    \ if !isascii(word)]\n    \n    words_splitted = [word for word in words_splitted\
    \ if !isascii(word)]\n    \n    words_splitted = [word for word in words_splitted\
    \ if !isascii(word)]\n    \n    words_splitted = [word for word in words_splitted\
    \ if !isascii(word)]\n    \n    words_splitted = [word for word in words_splitted\
    \ if !isascii(word)]\n    \n    words_splitted = [word for word in words_splitted\
    \ if !isascii(word)]\n    \n    words_splitted = [word for word in words_splitted\
    \ if !isascii(word)]\n    \n    words_splitted = [word for word in words_splitted\
    \ if !isascii(word)]\n    \n    words_splitted = [word for word in words_splitted\
    \ if !isascii(word)]\n    \n    words_splitted = [word for word in \nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp5_zuykq3.jl:68\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp5_zuykq3.jl:68\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3bsuluep.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp3bsuluep.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp3bsuluep.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpz99vf1as.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpz99vf1as.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpz99vf1as.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp8_4xclof.jl:51\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp8_4xclof.jl:51\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_split = split(txt, \",\")\n\
    \    if length(words) == length(words_split)\n        return words\n    else\n\
    \        return words_split\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"Hello world!\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"\
    Hello,world!\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdef\")\n\
    </cell>\n<code language=julia-1.5>\nsplit_words(\"Hello world!\")\n</cell>\n<code\
    \ language=julia-1.5>\nsplit_words(\"Hello,world!\")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"abcdef\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello\
    \ world!\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello,world!\"\
    )\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdef\")\n</cell>\n<code\
    \ language=julia-1.5>\nsplit_words(\"Hello world!\")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"Hello,world!\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"\
    abcdef\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello world!\")\n\
    </cell>\n<code language=julia-1.5>\nsplit_words(\"Hello,world!\")\n</cell>\n<code\
    \ language=julia-1.5>\nsplit_words(\"abcdef\")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"Hello world!\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"\
    Hello,world!\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdef\")\n\
    </cell>\n<code language=julia-1.5>\nsplit_words(\"Hello world!\")\n</cell>\n<code\
    \ language=julia-1.5>\nsplit_words(\"Hello,world!\")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"abcdef\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello\
    \ world!\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello,world!\"\
    )\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdef\")\n</cell>\n<code\
    \ language=julia-1.5>\nsplit_words(\"Hello world!\")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"Hello,world!\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"\
    abcdef\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello world\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp07e5i_2x.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp07e5i_2x.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    words = split(txt, \" \")\n    words_split\
    \ = split(txt, \",\")\n    if length(words) == length(words_split)\n        return\
    \ words\n    else\n        return words_split\n    end\nend\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpptefei8g.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpptefei8g.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_split = Vector{String}(undef,\
    \ 0)\n    for word in words\n        words_split = words_split ++ [word]\n   \
    \ end\n    return words_split\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpln33l5x3.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  UndefVarError:\
    \ ++ not defined\n  Stacktrace:\n   [1] split_words(::String) at /tmp/tmpln33l5x3.jl:14\n\
    \   [2] top-level scope at /tmp/tmpln33l5x3.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpln33l5x3.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpln33l5x3.jl:24\n  Test threw exception\n  Expression: candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"]\n  UndefVarError: ++ not defined\n\
    \  Stacktrace:\n   [1] split_words(::String) at /tmp/tmpln33l5x3.jl:14\n   [2]\
    \ top-level scope at /tmp/tmpln33l5x3.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpln33l5x3.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpln33l5x3.jl:25\n  Test threw exception\n  Expression: candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"]\n  UndefVarError: ++ not defined\n\
    \  Stacktrace:\n   [1] split_words(::String) at /tmp/tmpln33l5x3.jl:14\n   [2]\
    \ top-level scope at /tmp/tmpln33l5x3.jl:25\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpln33l5x3.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpln33l5x3.jl:26\n  Test threw exception\n  Expression: candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"]\n  UndefVarError: ++\
    \ not defined\n  Stacktrace:\n   [1] split_words(::String) at /tmp/tmpln33l5x3.jl:14\n\
    \   [2] top-level scope at /tmp/tmpln33l5x3.jl:26\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpln33l5x3.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpln33l5x3.jl:27\n  Test threw exception\n  Expression: candidate(\"\
    abcdef\") == 3\n  UndefVarError: ++ not defined\n  Stacktrace:\n   [1] split_words(::String)\
    \ at /tmp/tmpln33l5x3.jl:14\n   [2] top-level scope at /tmp/tmpln33l5x3.jl:27\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpln33l5x3.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpln33l5x3.jl:28\n  Test threw exception\n  Expression: candidate(\"\
    aaabb\") == 2\n  UndefVarError: ++ not defined\n  Stacktrace:\n   [1] split_words(::String)\
    \ at /tmp/tmpln33l5x3.jl:14\n   [2] top-level scope at /tmp/tmpln33l5x3.jl:28\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpln33l5x3.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpln33l5x3.jl:29\n  Test threw exception\n  Expression: candidate(\"\
    aaaBb\") == 1\n  UndefVarError: ++ not defined\n  Stacktrace:\n   [1] split_words(::String)\
    \ at /tmp/tmpln33l5x3.jl:14\n   [2] top-level scope at /tmp/tmpln33l5x3.jl:29\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpln33l5x3.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpln33l5x3.jl:30\n  Test threw exception\n  Expression: candidate(\"\
    \") == 0\n  UndefVarError: ++ not defined\n  Stacktrace:\n   [1] split_words(::String)\
    \ at /tmp/tmpln33l5x3.jl:14\n   [2] top-level scope at /tmp/tmpln33l5x3.jl:30\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpln33l5x3.jl:22\n  \nTest Summary: | Error \
    \ Total\ntest set      |     8      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpln33l5x3.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpa927uzgb.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpa927uzgb.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpa927uzgb.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    txt = txt.trim()\n    if txt == \"\"\n        return txt\n\
    \    else\n        words = split(txt, \" \")\n        words_without_commas = words[words\
    \ != \",\"]\n        words_without_commas = words_without_commas[words_without_commas\
    \ !=\"\"]\n        words_without_commas = words_without_commas[words_without_commas\
    \ !=\"\"]\n        words_without_commas = words_without_commas[words_without_commas\
    \ !=\"\"]\n        words_without_commas = words_without_commas[words_without_commas\
    \ !=\"\"]\n        words_without_commas = words_without_commas[words_without_commas\
    \ !=\"\"]\n        words_without_commas = words_without_commas[words_without_commas\
    \ !=\"\"]\n        words_without_commas = words_without_commas[words_without_commas\
    \ !=\"\"]\n        words_without_commas = words_without_commas[words_without_commas\
    \ !=\"\"]\n        words_without_commas = words_without_commas[words_without_commas\
    \ !=\"\"]\n        words_without_commas = words_without_commas[words_without_commas\
    \ !=\"\"]\n        words_without_commas = words_without_commas[words_without_commas\
    \ !=\"\"]\n        words_without_commas = words_without_commas[words_without_commas\
    \ !=\"\"]\n        words_without_commas = words_without_commas[words_without_commas\
    \ !=\"\"]\n        words_without_commas = words_without_commas[words_without_commas\
    \ !=\"\"]\n        words_without_commas = words_without_commas[words_without_commas\
    \ !=\"\"]\n        words_without_commas = words_without_commas[words_without_commas\
    \ !=\"\"]\n        words_without_commas = words_without_commas[words_without_commas\
    \ !=\"\"]\n        words_without_commas = words_without_commas[words_without_commas\
    \ !=\"\"]\n        words_without_commas = words_without_commas[words_without_commas\
    \ !=\"\"]\n        words_without_commas = words_without_commas[words_without_commas\
    \ !=\"\"]\n        words_without_commas = words_without_commas[words_without_commas\
    \ !=\"\"]\n        words_without_commas = words_without_commas[words_without_commas\
    \ !=\"\"]\n        words_without_commas = words_without_commas[words_without_commas\
    \ !=\"\"]\n        words_without_commas = words_without_commas[words_without_commas\
    \ !=\"\"]\n        words_without_commas = words_without_commas[words_without_commas\
    \ !\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmt5obmaa.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmt5obmaa.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppe49afz5.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmppe49afz5.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmppe49afz5.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    txt = txt.trim()\n    \n    if txt == \"\"\n        return\
    \ Vector{String}()\n    end\n    \n    words = split(txt, \" \")\n    \n    words_no_whitespace\
    \ = words\n    \n    words_no_whitespace = filter(x->!isempty(x), words_no_whitespace)\n\
    \    \n    words_no_whitespace = filter(x->!isascii(x), words_no_whitespace)\n\
    \    \n    words_no_whitespace = filter(x->!islowercase(x), words_no_whitespace)\n\
    \    \n    words_no_whitespace = filter(x->!isuppercase(x), words_no_whitespace)\n\
    \    \n    words_no_whitespace = filter(x->!isdigit(x), words_no_whitespace)\n\
    \    \n    words_no_whitespace = filter(x->!isspace(x), words_no_whitespace)\n\
    \    \n    words_no_whitespace = filter(x->!issymbol(x), words_no_whitespace)\n\
    \    \n    words_no_whitespace = filter(x->!isascii(x) && x!=' ', words_no_whitespace)\n\
    \    \n    words_no_whitespace = filter(x->!isascii(x) && x!=',', words_no_whitespace)\n\
    \    \n    words_no_whitespace = filter(x->!isascii(x) && x!='\\n', words_no_whitespace)\n\
    \    \n    words_no_whitespace = filter(x->!isascii(x) && x!='\\r', words_no_whitespace)\n\
    \    \n    words_no_whitespace = filter(x->!isascii(x) && x!='\\t', words_no_whitespace)\n\
    \    \n    words_no_whitespace = filter(x->!isascii(x) && x!='=', words_no_whitespace)\n\
    \    \n    words_no_whitespace = filter(x->!isascii(x) && x!='-', words_no_whitespace)\n\
    \    \n    words_no_whitespace = filter(x->!isascii(x) && x!='/', words_no_whitespace)\n\
    \    \n    words_no_whitespace = filter(x->!isascii(x) && x!='*', words_no_whitespace)\n\
    \    \n    words_no_whitespace = filter(x->!isascii(x) && x!='&', words_no_whitespace)\n\
    \    \n    words_no_whitespace = filter(x->!isascii(x) && x!='|', words_no_whitespace)\n\
    \    \n    words_no_whitespace = filter(x->!isascii(x) && x!='>', words_no_whitespace)\n\
    \    \n    words_no_whitespace = filter(x->!isascii(x) && x!='<', words_no_whitespace)\n\
    \    \n    words_no_whitespace = filter(x->!isascii(x) && x\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppclivace.jl:63\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppclivace.jl:63\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    \n    if length(words) == 0 \n \
    \       return words\n    \n    words = split(txt, \",\")\n    \n    if length(words)\
    \ == 0 \n        return words\n    \n    words = split(txt, \"-\")\n    \n   \
    \ if length(words) == 0 \n        return words\n    \n    words = split(txt, \"\
    ;\")\n    \n    if length(words) == 0 \n        return words\n    \n    words\
    \ = split(txt, \":\")\n    \n    if length(words) == 0 \n        return words\n\
    \    \n    words = split(txt, \"/\")\n    \n    if length(words) == 0 \n     \
    \   return words\n    \n    words = split(txt, \"\\\\\")\n    \n    if length(words)\
    \ == 0 \n        return words\n    \n    words = split(txt, \"'\")\n    \n   \
    \ if length(words) == 0 \n        return words\n    \n    words = split(txt, \"\
    \\\"\")\n    \n    if length(words) == 0 \n        return words\n    \n    words\
    \ = split(txt, \"?\")\n    \n    if length(words) == 0 \n        return words\n\
    \    \n    words = split(txt, \"!\")\n    \n    if length(words) == 0 \n     \
    \   return words\n    \n    words = split(txt, \"#\")\n    \n    if length(words)\
    \ == 0 \n        return words\n    \n    words = split(txt, \"$\")\n    \n   \
    \ if length(words) == 0 \n        return words\n    \n    words = split(txt, \"\
    %\")\n    \n    if length(words) == 0 \n        return words\n    \n    words\
    \ = split(txt, \"^\")\n    \n    if length(words) == 0 \n        return words\n\
    \    \n    words = split(txt, \"&\")\n    \n    if length(words) == 0 \n     \
    \   return words\n    \n    words = split(txt, \"*\")\n    \n    if length(words)\
    \ == 0 \n        return words\n    \n    words = split(txt, \"(\")\n    \n   \
    \ if length(words) == 0 \n        return words\n    \n    words = split(txt, \"\
    )\")\n    \n    if length(words) == 0 \n        return words\n    \n    words\
    \ = split(txt, \"+\")\n    \n    if length(words) == 0 \n        return words\n\
    \    \n    words = split(txt, \"-\")\n    \n    if length(words) == 0 \n     \
    \   return words\n    \n    words = split(txt, \"=\")\n    \n    if length(words)\
    \ == 0 \n        return words\n    \n    words = split(txt, \"<\")\n    \n   \
    \ if length(words) == 0 \n        return words\n    \n    words = split(txt, \"\
    >\")\n    \n    if length(words) == 0 \n        return words\n    \n    words\
    \ = split(txt, \"[\")\n    \n    if length(words) == 0 \n        return words\n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptp_8vo79.jl:71\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptp_8vo79.jl:71\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    txt = txt.trim()\n    \n    if txt == \"\"\n        return\
    \ txt\n    \n    words = split(txt, \" \")\n    \n    words_split = split(txt,\
    \ \",\")\n    \n    words_split2 = split(txt, \",\")\n    \n    words_split3 =\
    \ split(txt, \",\")\n    \n    words_split4 = split(txt, \",\")\n    \n    words_split5\
    \ = split(txt, \",\")\n    \n    words_split6 = split(txt, \",\")\n    \n    words_split7\
    \ = split(txt, \",\")\n    \n    words_split8 = split(txt, \",\")\n    \n    words_split9\
    \ = split(txt, \",\")\n    \n    words_split10 = split(txt, \",\")\n    \n   \
    \ words_split11 = split(txt, \",\")\n    \n    words_split12 = split(txt, \",\"\
    )\n    \n    words_split13 = split(txt, \",\")\n    \n    words_split14 = split(txt,\
    \ \",\")\n    \n    words_split15 = split(txt, \",\")\n    \n    words_split16\
    \ = split(txt, \",\")\n    \n    words_split17 = split(txt, \",\")\n    \n   \
    \ words_split18 = split(txt, \",\")\n    \n    words_split19 = split(txt, \",\"\
    )\n    \n    words_split20 = split(txt, \",\")\n    \n    words_split21 = split(txt,\
    \ \",\")\n    \n    words_split22 = split(txt, \",\")\n    \n    words_split23\
    \ = split(txt, \",\")\n    \n    words_split24 = split(txt, \",\")\n    \n   \
    \ words_split25 = split(txt, \",\")\n    \n    words_split26 = split(txt, \",\"\
    )\n    \n    words_split27 = split(txt, \",\")\n    \n    words_split28 = split(txt,\
    \ \",\")\n    \n    words_split29 = split(txt, \",\")\n    \n    words_split30\
    \ = split(txt, \",\")\n    \n    words_split31 = split(txt, \",\")\n    \n   \
    \ words_split32 = split(txt, \",\")\n    \n    words_split33 = split(txt, \",\"\
    )\n    \n    words_split34 = split(txt, \",\")\n    \n    words_split35 = split(txt,\
    \ \",\")\n    \n    words_split36 = split(txt, \",\")\n    \n    words_split37\
    \ = split(txt, \",\")\n    \n    words_split38 = split(txt, \",\")\n    \n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg7ijx_9y.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpg7ijx_9y.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpldlqpqoc.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpldlqpqoc.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpldlqpqoc.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    txt = txt.trim()\n    \n    if txt == \"\"\n        return\
    \ txt\n    \n    words = split(txt, \" \")\n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t\
    @test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsawr5wg1.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsawr5wg1.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return txt\n    \n\
    \    words = split(txt, \" \")\n    \n    words = [w for w in words if w != \"\
    \"]\n    \n    words = [w for w in words if w != \",\"]\n    \n    words = [w\
    \ for w in words if w != \"-\"]\n    \n    words = [w for w in words if w != \"\
    _\"]\n    \n    words = [w for w in words if w != \"!\"]\n    \n    words = [w\
    \ for w in words if w != \"?\"]\n    \n    words = [w for w in words if w != \"\
    -\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words = [w\
    \ for w in words if w != \"!\"]\n    \n    words = [w for w in words if w != \"\
    -\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words = [w\
    \ for w in words if w != \"!\"]\n    \n    words = [w for w in words if w != \"\
    -\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words = [w\
    \ for w in words if w != \"!\"]\n    \n    words = [w for w in words if w != \"\
    -\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words = [w\
    \ for w in words if w != \"!\"]\n    \n    words = [w for w in words if w != \"\
    -\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words = [w\
    \ for w in words if w != \"!\"]\n    \n    words = [w for w in words if w != \"\
    -\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words = [w\
    \ for w in words if w != \"!\"]\n    \n    words = [w for w in words if w != \"\
    -\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words = [w\
    \ for w in words if w != \"!\"]\n    \n    words = [w for w in words if w != \"\
    -\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words = [w\
    \ for w in words if w != \"!\"]\n    \n    words = [w for w in words if w != \"\
    -\"]\n    \n    words = [w for w in words if w != \"?\"]\n    \n    words = [w\
    \ for \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphx434ohs.jl:83\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphx434ohs.jl:83\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if isempty(txt)\n        return txt\n    else\n        words =\
    \ split(txt, \" \")\n        words_split = Vector{String}(undef, 0)\n        for\
    \ word in words\n            if !isempty(word)\n                words_split =\
    \ push!(words_split, word)\n            end\n        end\n        return words_split\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\nsplit_words(\"Hello world!\"\
    )\n</cell>\n<code language=julia-1.0>\nsplit_words(\"Hello,world!\")\n</cell>\n\
    <code language=julia-1.0>\nsplit_words(\"abcdef\")\n</cell>\n<code language=julia-1.0>\n\
    split_words(\"Hello world!\")\n</cell>\n<code language=julia-1.0>\nsplit_words(\"\
    Hello,world!\")\n</cell>\n<code language=julia-1.0>\nsplit_words(\"abcdef\")\n\
    </cell>\n<text>\nExercise\nWrite a function that takes a string and returns the\
    \ number of words in the string. \nExamples\ncount_words(\"Hello world!\") \u279E\
    \ 5\ncount_words(\"Hello,world!\") \u279E 3\ncount_words(\"abcdef\") \u279E 3\n\
    Hint: Use split and length\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpe40pcqci.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpe40pcqci.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpgy3nylq1.jl:51\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpgy3nylq1.jl:51\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt)\n    \n    if length(words) == 0\n   \
    \     return words\n    \n    words_with_commas = words\n    \n    if length(words)\
    \ == 1 \n        return words\n    \n    words_with_commas = words_with_commas[words_with_commas[end]\
    \ .== \",\"]\n    \n    if length(words_with_commas) == 1 \n        return words\n\
    \    \n    words_with_commas = words_with_commas[words_with_commas[end] .== \"\
    .\"]\n    \n    if length(words_with_commas) == 1 \n        return words\n   \
    \ \n    words_with_commas = words_with_commas[words_with_commas[end] .== \"!\"\
    ]\n    \n    if length(words_with_commas) == 1 \n        return words\n    \n\
    \    words_with_commas = words_with_commas[words_with_commas[end] .== \"?\"]\n\
    \    \n    if length(words_with_commas) == 1 \n        return words\n    \n  \
    \  words_with_commas = words_with_commas[words_with_commas[end] .== \";\"]\n \
    \   \n    if length(words_with_commas) == 1 \n        return words\n    \n   \
    \ words_with_commas = words_with_commas[words_with_commas[end] .== \":\"]\n  \
    \  \n    if length(words_with_commas) == 1 \n        return words\n    \n    words_with_commas\
    \ = words_with_commas[words_with_commas[end] .== \";\"]\n    \n    if length(words_with_commas)\
    \ == 1 \n        return words\n    \n    words_with_commas = words_with_commas[words_with_commas[end]\
    \ .== \"?\"]\n    \n    if length(words_with_commas) == 1 \n        return words\n\
    \    \n    words_with_commas = words_with_commas[words_with_commas[end] .== \"\
    !\"]\n    \n    if length(words_with_commas) == 1 \n        return words\n   \
    \ \n    words_with_commas = words_with_commas[words_with_commas[end] .== \".\"\
    ]\n    \n    if length(words_with_commas) == 1 \n        return words\n    \n\
    \    words_with_commas = words_with_commas[words_with_commas[end] .== \",\"]\n\
    \    \n    if length(words_with_commas) == 1 \n        return words\n    \n  \
    \  words_with_commas = words_with_commas[words_with_commas[end] .== \":\"]\n \
    \   \n    if length(words_with_commas) == 1 \n        return words\n    \n   \
    \ word\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpldk32hic.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpldk32hic.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    if length(words) ==\
    \ 0\n        return words\n    \n    if length(words) == 1 \n        return words\n\
    \    \n    if length(words) == 2\n        return words\n    \n    if length(words)\
    \ == 3\n        return words\n    \n    if length(words) == 4\n        return\
    \ words\n    \n    if length(words) == 5\n        return words\n    \n    if length(words)\
    \ == 6\n        return words\n    \n    if length(words) == 7\n        return\
    \ words\n    \n    if length(words) == 8\n        return words\n    \n    if length(words)\
    \ == 9\n        return words\n    \n    if length(words) == 10\n        return\
    \ words\n    \n    if length(words) == 11\n        return words\n    \n    if\
    \ length(words) == 12\n        return words\n    \n    if length(words) == 13\n\
    \        return words\n    \n    if length(words) == 14\n        return words\n\
    \    \n    if length(words) == 15\n        return words\n    \n    if length(words)\
    \ == 16\n        return words\n    \n    if length(words) == 17\n        return\
    \ words\n    \n    if length(words) == 18\n        return words\n    \n    if\
    \ length(words) == 19\n        return words\n    \n    if length(words) == 20\n\
    \        return words\n    \n    if length(words) == 21\n        return words\n\
    \    \n    if length(words) == 22\n        return words\n    \n    if length(words)\
    \ == 23\n        return words\n    \n    if length(words) == 24\n        return\
    \ words\n    \n    if length(words) == 25\n        return words\n    \n    if\
    \ length(words) == 26\n        return words\n    \n    if length(words) == 27\n\
    \        return words\n    \n    if length(words) == 28\n        return words\n\
    \    \n    if length(words) == 29\n        return words\n    \n    if length(words)\
    \ == 30\n        return words\n    \n    if length(words) == 31\n        return\
    \ words\n    \n    if length(words) == 32\n        return words\n    \n    if\
    \ length(words) == 33\n        return words\n    \n    if length(words) == 34\n\
    \        return words\n    \n    if length(words) == 35\n        return words\n\
    \    \n    if length(words) == 36\n        return words\n    \n    if length(words)\
    \ == 37\n        return words\n    \n    if length(words) == 38\n        return\
    \ words\n    \n    if length(words) == 39\n        return words\n    \n    if\
    \ length(words) == 40\n        return words\n    \n    if length(words) == 41\n\
    \        return words\n    \n    if length(words) == 42\n        return words\n\
    \    \n    if length(words) == 43\n        return words\n    \n    if length(words)\
    \ == 44\n        return words\n    \n    if length(words) == 45\n\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp86ty0446.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp86ty0446.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return txt\n    \n\
    \    words = split(txt, \" \")\n    \n    words_split = Vector{String}(undef,\
    \ 0)\n    \n    for word in words\n        words_split = words_split ++ split(word,\
    \ \",\")\n    end\n    \n    words_split = words_split ++ split(words, \"a\")\n\
    \    words_split = words_split ++ split(words, \"b\")\n    words_split = words_split\
    \ ++ split(words, \"c\")\n    words_split = words_split ++ split(words, \"d\"\
    )\n    words_split = words_split ++ split(words, \"e\")\n    words_split = words_split\
    \ ++ split(words, \"f\")\n    words_split = words_split ++ split(words, \"g\"\
    )\n    words_split = words_split ++ split(words, \"h\")\n    words_split = words_split\
    \ ++ split(words, \"i\")\n    words_split = words_split ++ split(words, \"j\"\
    )\n    words_split = words_split ++ split(words, \"k\")\n    words_split = words_split\
    \ ++ split(words, \"l\")\n    words_split = words_split ++ split(words, \"m\"\
    )\n    words_split = words_split ++ split(words, \"n\")\n    words_split = words_split\
    \ ++ split(words, \"o\")\n    words_split = words_split ++ split(words, \"p\"\
    )\n    words_split = words_split ++ split(words, \"q\")\n    words_split = words_split\
    \ ++ split(words, \"r\")\n    words_split = words_split ++ split(words, \"s\"\
    )\n    words_split = words_split ++ split(words, \"t\")\n    words_split = words_split\
    \ ++ split(words, \"u\")\n    words_split = words_split ++ split(words, \"v\"\
    )\n    words_split = words_split ++ split(words, \"w\")\n    words_split = words_split\
    \ ++ split(words, \"x\")\n    words_split = words_split ++ split(words, \"y\"\
    )\n    words_split = words_split ++ split(words, \"z\")\n    \n    words_split\
    \ = words_split ++ split(words, \"A\")\n    words_split = words_split ++ split(words,\
    \ \"B\")\n    words_split = words_split ++ split(words, \"C\")\n    words_split\
    \ = words_split ++ split(words, \"D\")\n    words_split = words_split ++ split(words,\
    \ \"E\")\n    words_split = words_split ++ split(words, \"F\")\n    words_split\
    \ = words_split ++ split(words, \"G\")\n    words_split = words_split ++ split(words,\
    \ \"H\")\n    words_split = words_split ++ split(words, \"I\")\n    words_split\
    \ = words_split ++ split(words, \"J\")\n    words_split = words_split ++ split(words,\
    \ \"K\")\n    words_split = words_split ++ split(words, \"L\")\n    \nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx64qmgam.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpx64qmgam.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjf9wnbf2.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpjf9wnbf2.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpjf9wnbf2.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_no_spaces = filter(x -> !isspace(x),\
    \ words)\n    words_no_commas = filter(x -> !iscomma(x), words_no_spaces)\n  \
    \  words_no_commas_no_spaces = filter(x -> !isspace(x) && !iscomma(x), words_no_commas)\n\
    \    words_no_commas_no_spaces_no_commas = filter(x -> !isspace(x) && !iscomma(x)\
    \ && !isspace(x), words_no_commas_no_spaces)\n    words_no_commas_no_spaces_no_commas_no_spaces\
    \ = filter(x -> !isspace(x) && !iscomma(x) && !isspace(x) && !iscomma(x), words_no_commas_no_spaces_no_commas)\n\
    \    words_no_commas_no_spaces_no_commas_no_spaces_no_commas = filter(x -> !isspace(x)\
    \ && !iscomma(x) && !isspace(x) && !iscomma(x) && !isspace(x), words_no_commas_no_spaces_no_commas_no_spaces)\n\
    \    words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces = filter(x\
    \ -> !isspace(x) && !iscomma(x) && !isspace(x) && !iscomma(x) && !isspace(x) &&\
    \ !iscomma(x), words_no_commas_no_spaces_no_commas_no_spaces_no_commas)\n    words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas\
    \ = filter(x -> !isspace(x) && !iscomma(x) && !isspace(x) && !iscomma(x) && !isspace(x)\
    \ && !iscomma(x) && !isspace(x) && !iscomma(x), words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas)\n\
    \    words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces\
    \ = filter(x -> !isspace(x) && !iscomma(x) && !isspace(x) && !iscomma(x) && !isspace(x)\
    \ && !iscomma(x) && !isspace(x) && !iscomma(x) && !isspace(x) && !iscomma(x),\
    \ words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces)\n\
    \    words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas\
    \ = filter(x -> !isspace(x) && !iscomma(x) && !isspace(x) && !iscomma(x) && !isspace(x)\
    \ && !iscomma(x) && !isspace(x) && !iscomma(x) && !isspace(x) && !\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpuae6el_4.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpuae6el_4.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    words_split = Vector{String}(undef,\
    \ 0)\n    \n    for word in words\n        words_split = words_split ++ split(word,\
    \ \",\")\n    end\n    \n    words_split = words_split ++ [length(words)]\n  \
    \  \n    words_split = words_split .- words_split .% 2\n    \n    words_split\
    \ = words_split .- words_split .% 2\n    \n    words_split = words_split .- words_split\
    \ .% 2\n    \n    words_split = words_split .- words_split .% 2\n    \n    words_split\
    \ = words_split .- words_split .% 2\n    \n    words_split = words_split .- words_split\
    \ .% 2\n    \n    words_split = words_split .- words_split .% 2\n    \n    words_split\
    \ = words_split .- words_split .% 2\n    \n    words_split = words_split .- words_split\
    \ .% 2\n    \n    words_split = words_split .- words_split .% 2\n    \n    words_split\
    \ = words_split .- words_split .% 2\n    \n    words_split = words_split .- words_split\
    \ .% 2\n    \n    words_split = words_split .- words_split .% 2\n    \n    words_split\
    \ = words_split .- words_split .% 2\n    \n    words_split = words_split .- words_split\
    \ .% 2\n    \n    words_split = words_split .- words_split .% 2\n    \n    words_split\
    \ = words_split .- words_split .% 2\n    \n    words_split = words_split .- words_split\
    \ .% 2\n    \n    words_split = words_split .- words_split .% 2\n    \n    words_split\
    \ = words_split .- words_split .% 2\n    \n    words_split = words_split .- words_split\
    \ .% 2\n    \n    words_split = words_split .- words_split .% 2\n    \n    words_split\
    \ = words_split .- words_split .% 2\n    \n    words_split = words_split .- words_split\
    \ .% 2\n    \n    words_split = words_split .- words_split .% 2\n    \n    words_split\
    \ = words_split .- words_split .% 2\n    \n    words_split = words_split .- words_split\
    \ .% 2\n    \n    words_split = words_split .- words_split .% 2\n    \n    words_split\
    \ = words_split .- words_split .% 2\n    \n    words_split = words_split .- words_split\
    \ .% 2\n    \n    words_split = words_split .\nusing Test\n\n@testset begin\n\n\
    candidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"\
    world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t\
    @test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \".\" not allowed in \"words_split\
    \ .\" at /tmp/tmpzh9h8t8r.jl:82\nStacktrace:\n [1] top-level scope at /tmp/tmpzh9h8t8r.jl:82\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpzh9h8t8r.jl:82\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfpu9ksef.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpfpu9ksef.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpfpu9ksef.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt)\n    \n    if isempty(words)\n       \
    \ return words\n    end\n    \n    words_split = split(words)\n    \n    if length(words_split)\
    \ == length(words)\n        return words\n    end\n    \n    if length(words_split)\
    \ > length(words)\n        return words_split\n    end\n    \n    if length(words_split)\
    \ == length(words) + 1\n        return words_split\n    end\n    \n    if words_split[1]\
    \ == \"\"\n        return words\n    end\n    \n    if words_split[end] == \"\"\
    \n        return words\n    end\n    \n    if words_split[end] == words_split[1]\n\
    \        return words\n    end\n    \n    if words_split[end] == words_split[end\
    \ - 1]\n        return words\n    end\n    \n    if words_split[end] == words_split[end\
    \ - 2]\n        return words\n    end\n    \n    if words_split[end] == words_split[end\
    \ - 3]\n        return words\n    end\n    \n    if words_split[end] == words_split[end\
    \ - 4]\n        return words\n    end\n    \n    if words_split[end] == words_split[end\
    \ - 5]\n        return words\n    end\n    \n    if words_split[end] == words_split[end\
    \ - 6]\n        return words\n    end\n    \n    if words_split[end] == words_split[end\
    \ - 7]\n        return words\n    end\n    \n    if words_split[end] == words_split[end\
    \ - 8]\n        return words\n    end\n    \n    if words_split[end] == words_split[end\
    \ - 9]\n        return words\n    end\n    \n    if words_split[end] == words_split[end\
    \ - 10]\n        return words\n    end\n    \n    if words_split[end] == words_split[end\
    \ - 11]\n        return words\n    end\n    \n    if words_split[end] == words_split[end\
    \ - 12]\n        return words\n    end\n    \n    if words_split[end] == words_split[end\
    \ - 13]\n        return words\n    end\n    \n    if words_split[end] == words_split[end\
    \ - 14]\n        return words\n    end\n    \n    if words_split[end] == words_split[end\
    \ - 15]\n        return words\n    end\n    \n    if words_split[end] == words_split[end\
    \ - 16]\n        return words\n    end\n    \n    if words_split[end] == words_split[end\
    \ - 17]\n        return words\n    end\n    \n    if words_split[end] == words_split[end\
    \ - 18]\n        return words\n    end\n    \n    if words_split[end] == words_split[end\
    \ - 19]\n        return words\n    end\n    \n    if words_split[end] == words_split[end\
    \ - 20]\n        return words\n    end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfr4yd9j2.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpfr4yd9j2.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpfr4yd9j2.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return Vector{String}()\n\
    \    else\n        words = split(txt, \" \")\n        words = [w for w in words\
    \ if w != \"\"]\n        words = [w for w in words if w != \",\"]\n        words\
    \ = [w for w in words if w != \".\"]\n        words = [w for w in words if w !=\
    \ \"?\"]\n        words = [w for w in words if w != \"!\"]\n        words = [w\
    \ for w in words if w != \"-\"]\n        words = [w for w in words if w != \"\
    _\"]\n        words = [w for w in words if w != \"&\"]\n        words = [w for\
    \ w in words if w != \"#\"]\n        words = [w for w in words if w != \"$\"]\n\
    \        words = [w for w in words if w != \"%\"]\n        words = [w for w in\
    \ words if w != \"^\"]\n        words = [w for w in words if w != \"&\"]\n   \
    \     words = [w for w in words if w != \"*\"]\n        words = [w for w in words\
    \ if w != \"(\"]\n        words = [w for w in words if w != \")\"]\n        words\
    \ = [w for w in words if w != \"[\"]\n        words = [w for w in words if w !=\
    \ \"]\"]\n        words = [w for w in words if w != \"{\"]\n        words = [w\
    \ for w in words if w != \"}\"]\n        words = [w for w in words if w != \"\
    |\"]\n        words = [w for w in words if w != \"~\"]\n        words = [w for\
    \ w in words if w != \"`\"]\n        words = [w for w in words if w != \"~\"]\n\
    \        words = [w for w in words if w != \"`\"]\n        words = [w for w in\
    \ words if w != \"~\"]\n        words = [w for w in words if w != \"`\"]\n   \
    \     words = [w for w in words if w != \"~\"]\n        words = [w for w in words\
    \ if w != \"`\"]\n        words = [w for w in words if w != \"~\"]\n        words\
    \ = [w for w in words if w != \"`\"]\n        words = [w for w in words if w !=\
    \ \"~\"]\n        words = [w for w in words if w != \"`\"]\n        words = [w\
    \ for w in words if w != \"~\"]\n        words = [w for w in words if w != \"\
    `\"]\n        words = [w for w in words if w != \"~\"]\n        words = [w for\
    \ w in words if w != \"`\"]\n        word\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd7whd_ec.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpd7whd_ec.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_split = split(txt, \",\")\n\
    \    if length(words_split) == length(words)\n        return words_split\n   \
    \ else\n        return length(words) - length(words_split)\n    end\nend\n</code>\n\
    <|/ a tags=julia,string |>\n<| a tags=julia,string |>\n<code>\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplkre847w.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplkre847w.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return txt\n    \n\
    \    words = split(txt, \" \")\n    \n    words_splitted = Vector{String}(undef,\
    \ 0)\n    \n    for word in words\n        words_splitted = words_splitted ++\
    \ split(word, \",\")\n    end\n    \n    words_splitted = words_splitted ++ split(txt,\
    \ \" \")\n    \n    words_splitted = words_splitted ++ split(txt, \",\")\n   \
    \ \n    words_splitted = words_splitted ++ split(txt, \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(txt, \",\")\n    \n    words_splitted = words_splitted\
    \ ++ split(txt, \" \")\n    \n    words_splitted = words_splitted ++ split(txt,\
    \ \",\")\n    \n    words_splitted = words_splitted ++ split(txt, \" \")\n   \
    \ \n    words_splitted = words_splitted ++ split(txt, \",\")\n    \n    words_splitted\
    \ = words_splitted ++ split(txt, \" \")\n    \n    words_splitted = words_splitted\
    \ ++ split(txt, \",\")\n    \n    words_splitted = words_splitted ++ split(txt,\
    \ \" \")\n    \n    words_splitted = words_splitted ++ split(txt, \",\")\n   \
    \ \n    words_splitted = words_splitted ++ split(txt, \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(txt, \",\")\n    \n    words_splitted = words_splitted\
    \ ++ split(txt, \" \")\n    \n    words_splitted = words_splitted ++ split(txt,\
    \ \",\")\n    \n    words_splitted = words_splitted ++ split(txt, \" \")\n   \
    \ \n    words_splitted = words_splitted ++ split(txt, \",\")\n    \n    words_splitted\
    \ = words_splitted ++ split(txt, \" \")\n    \n    words_splitted = words_splitted\
    \ ++ split(txt, \",\")\n    \n    words_splitted = words_splitted ++ split(txt,\
    \ \" \")\n    \n    words_splitted = words_splitted ++ split(txt, \",\")\n   \
    \ \n    words_splitted = words_splitted ++ split(txt, \" \")\n    \n    words_splitted\
    \ = words_splitted ++ split(txt, \",\")\n    \n    words_splitted = words_splitted\
    \ ++ split(txt, \" \")\n    \n    words_splitted = words_splitted ++ split(txt,\
    \ \",\")\n    \n    words_splitted = words_splitted ++ split(txt, \" \")\n   \
    \ \n    words_splitted = words_splitted ++ split(txt, \",\")\n    \n    words_splitted\
    \ = words_splitted ++ split(txt, \" \")\n    \n    \nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprnp1ais4.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprnp1ais4.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    should split on commas ',' if\
    \ no commas exists you should return the number of lower-case letters with odd\
    \ order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    split_words(\"Hello world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"]\n    split_words(\"\
    abcdef\") == 3 \n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return Vector{String}()\n\
    \    \n    words = split(txt, \" \")\n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpht578dye.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpht578dye.jl:1\n"
  exit_code: 1
  status: Exception
