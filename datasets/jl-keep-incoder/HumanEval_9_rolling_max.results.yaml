name: HumanEval_9_rolling_max
language: julia
results:
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = Vector{Int64}()\n    \n    rolling_max_list =\
    \ rolling_max_list .+ numbers\n    \n    rolling_max_list = rolling_max_list[rolling_max_list.>numbers[1]]\n\
    \    \n    rolling_max_list = rolling_max_list[rolling_max_list.>numbers[2]]\n\
    \    \n    rolling_max_list = rolling_max_list[rolling_max_list.>numbers[3]]\n\
    \    \n    rolling_max_list = rolling_max_list[rolling_max_list.>numbers[4]]\n\
    \    \n    rolling_max_list = rolling_max_list[rolling_max_list.>numbers[5]]\n\
    \    \n    rolling_max_list = rolling_max_list[rolling_max_list.>numbers[6]]\n\
    \    \n    rolling_max_list = rolling_max_list[rolling_max_list.>numbers[7]]\n\
    \    \n    rolling_max_list = rolling_max_list[rolling_max_list.>numbers[8]]\n\
    \    \n    rolling_max_list = rolling_max_list[rolling_max_list.>numbers[9]]\n\
    \    \n    rolling_max_list = rolling_max_list[rolling_max_list.>numbers[10]]\n\
    \    \n    rolling_max_list = rolling_max_list[rolling_max_list.>numbers[11]]\n\
    \    \n    rolling_max_list = rolling_max_list[rolling_max_list.>numbers[12]]\n\
    \    \n    rolling_max_list = rolling_max_list[rolling_max_list.>numbers[13]]\n\
    \    \n    rolling_max_list = rolling_max_list[rolling_max_list.>numbers[14]]\n\
    \    \n    rolling_max_list = rolling_max_list[rolling_max_list.>numbers[15]]\n\
    \    \n    rolling_max_list = rolling_max_list[rolling_max_list.>numbers[16]]\n\
    \    \n    rolling_max_list = rolling_max_list[rolling_max_list.>numbers[17]]\n\
    \    \n    rolling_max_list = rolling_max_list[rolling_max_list.>numbers[18]]\n\
    \    \n    rolling_max_list = rolling_max_list[rolling_max_list.>numbers[19]]\n\
    \    \n    rolling_max_list = rolling_max_list[rolling_max_list.>numbers[20]]\n\
    \    \n    rolling_max_list = rolling_max_list[rolling_max_list.>numbers[21]]\n\
    \    \n    rolling_max_list = rolling_max_list[rolling_max_list.>numbers[22]]\n\
    \    \n    rolling_max_list = rolling_max_list[rolling_max_list.>numbers[23]]\n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpr1y3w83h.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpr1y3w83h.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpr1y3w83h.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = Vector{Int64}()\n    \n    for n in numbers\n\
    \        if rolling_max_list == Vector{Int64}()\n            rolling_max_list\
    \ << n\n        else\n            if rolling_max_list[end] == n\n            \
    \    rolling_max_list[end] = n\n            else\n                rolling_max_list\
    \ << n\n            end\n        end\n    end\n    \n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxgqj4cw2.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxgqj4cw2.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list.append(numbers[1])\n\
    \    for n in numbers[2:end]\n        if n > rolling_max_list[1]\n           \
    \ rolling_max_list.append(n)\n        end\n    end\n    return rolling_max_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgcr35gxx.jl:21\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  type Array\
    \ has no field append\n  Stacktrace:\n   [1] getproperty(::Array{Int64,1}, ::Symbol)\
    \ at ./Base.jl:33\n   [2] rolling_max(::Array{Int64,1}) at /tmp/tmpgcr35gxx.jl:8\n\
    \   [3] top-level scope at /tmp/tmpgcr35gxx.jl:21\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpgcr35gxx.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpgcr35gxx.jl:22\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n  type Array has no field append\n  Stacktrace:\n\
    \   [1] getproperty(::Array{Int64,1}, ::Symbol) at ./Base.jl:33\n   [2] rolling_max(::Array{Int64,1})\
    \ at /tmp/tmpgcr35gxx.jl:8\n   [3] top-level scope at /tmp/tmpgcr35gxx.jl:22\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpgcr35gxx.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpgcr35gxx.jl:23\n  Test threw exception\n  Expression: candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n  type Array has no field append\n  Stacktrace:\n\
    \   [1] getproperty(::Array{Int64,1}, ::Symbol) at ./Base.jl:33\n   [2] rolling_max(::Array{Int64,1})\
    \ at /tmp/tmpgcr35gxx.jl:8\n   [3] top-level scope at /tmp/tmpgcr35gxx.jl:23\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpgcr35gxx.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpgcr35gxx.jl:24\n  Test threw exception\n  Expression: candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  type Array has no field append\n  Stacktrace:\n\
    \   [1] getproperty(::Array{Int64,1}, ::Symbol) at ./Base.jl:33\n   [2] rolling_max(::Array{Int64,1})\
    \ at /tmp/tmpgcr35gxx.jl:8\n   [3] top-level scope at /tmp/tmpgcr35gxx.jl:24\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpgcr35gxx.jl:20\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgcr35gxx.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4y7ce0fu.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4y7ce0fu.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = Vector{Int64}()\n    \n    for n in numbers\n\
    \        rolling_max_list = push!(rolling_max_list, maximum(rolling_max_list,\
    \ n))\n    end\n    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqdvw1vx4.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqdvw1vx4.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpikjj1_jl.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpikjj1_jl.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}(undef, 0)\n    rolling_max_list[1] =\
    \ numbers[1]\n    for i = 2:length(numbers)\n        if numbers[i] > rolling_max_list[i-1]\n\
    \            rolling_max_list[i] = numbers[i]\n        else\n            rolling_max_list[i]\
    \ = rolling_max_list[i-1]\n        end\n    end\n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjr2vzu2o.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjr2vzu2o.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_array = zeros(length(numbers))\n    \n    for i = 1:length(numbers)\n\
    \        rolling_max_array[i] = maximum(rolling_max_array[i-1:i+1])\n    end\n\
    \    \n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4jursiyq.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4jursiyq.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list = rolling_max_list\
    \ .+ numbers\n    \n    rolling_max_list = rolling_max_list[rolling_max_list .!=\
    \ rolling_max_list]\n    \n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .!= rolling_max_list]\n    \n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .!= rolling_max_list]\n    \n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .!= rolling_max_list]\n    \n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .!= rolling_max_list]\n    \n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .!= rolling_max_list]\n    \n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .!= rolling_max_list]\n    \n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .!= rolling_max_list]\n    \n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .!= rolling_max_list]\n    \n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .!= rolling_max_list]\n    \n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .!= rolling_max_list]\n    \n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .!= rolling_max_list]\n    \n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .!= rolling_max_list]\n    \n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .!= rolling_max_list]\n    \n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .!= rolling_max_list]\n    \n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .!= rolling_max_list]\n    \n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .!= rolling_max_list]\n    \n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .!= rolling_max_list]\n    \n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .!= rolling_max_list]\n    \n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .!= rolling_max_list]\n    \n    rolling_max_list = rolling_max_list[rolling_max_list\
    \ .!= rolling_max_list]\n    \n\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphgxkwmjr.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmphgxkwmjr.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmphgxkwmjr.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[1]\n    for n in numbers[2:end]\n        if n >\
    \ rolling_max\n            rolling_max = n\n        end\n    end\n    return rolling_max\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9weme9ma.jl:20\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Array{Int64,1} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex at ./array.jl:788 [inlined]\n   [2] rolling_max(::Array{Int64,1}) at\
    \ /tmp/tmp9weme9ma.jl:7\n   [3] top-level scope at /tmp/tmp9weme9ma.jl:20\n  \
    \ [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp9weme9ma.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmp9weme9ma.jl:21\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: Cannot `convert` an object of type\
    \ Int64 to an object of type Array{Int64,1}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::AbstractArray) where T<:Array at array.jl:533\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n    convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] rolling_max(::Array{Int64,1}) at /tmp/tmp9weme9ma.jl:13\n\
    \   [2] top-level scope at /tmp/tmp9weme9ma.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9weme9ma.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmp9weme9ma.jl:22\n  Test threw exception\n  Expression: candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n  MethodError: Cannot `convert` an object of type\
    \ Int64 to an object of type Array{Int64,1}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::AbstractArray) where T<:Array at array.jl:533\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n    convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] rolling_max(::Array{Int64,1}) at /tmp/tmp9weme9ma.jl:13\n\
    \   [2] top-level scope at /tmp/tmp9weme9ma.jl:22\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9weme9ma.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmp9weme9ma.jl:23\n  Test threw exception\n  Expression: candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  MethodError: Cannot `convert` an object\
    \ of type Int64 to an object of type Array{Int64,1}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] rolling_max(::Array{Int64,1}) at /tmp/tmp9weme9ma.jl:13\n\
    \   [2] top-level scope at /tmp/tmp9weme9ma.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9weme9ma.jl:19\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9weme9ma.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    maximum = numbers[1]\n    for number in numbers[2:end]\n       \
    \ if number > maximum\n            maximum = number\n        end\n    end\n  \
    \  maximum\nend\n</cell>\n<text>\nrolling_max\nThe rolling_max function takes\
    \ in a list of integers and returns a list of rolling maximum element found until\
    \ given moment in the sequence.\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptpno40sf.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptpno40sf.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list = rolling_max_list\
    \ .+ numbers\n    rolling_max_list = rolling_max_list .+ rolling_max(numbers[2:end])\n\
    \    return rolling_max_list\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpalpqy8ys.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] Array at ./boot.jl:405 [inlined]\n   [2] Array at ./boot.jl:424\
    \ [inlined]\n   [3] rolling_max(::Array{Int64,1}) at /tmp/tmpalpqy8ys.jl:7\n \
    \  [4] rolling_max(::Array{Int64,1}) at /tmp/tmpalpqy8ys.jl:9 (repeats 43620 times)\n\
    \   [5] top-level scope at /tmp/tmpalpqy8ys.jl:17\n   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpalpqy8ys.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmpalpqy8ys.jl:18\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n  DimensionMismatch(\"arrays could not be broadcast\
    \ to a common size; got a dimension with lengths 0 and 4\")\n  Stacktrace:\n \
    \  [1] _bcs1 at ./broadcast.jl:490 [inlined]\n   [2] _bcs at ./broadcast.jl:484\
    \ [inlined]\n   [3] broadcast_shape at ./broadcast.jl:478 [inlined]\n   [4] combine_axes\
    \ at ./broadcast.jl:473 [inlined]\n   [5] instantiate at ./broadcast.jl:256 [inlined]\n\
    \   [6] materialize at ./broadcast.jl:820 [inlined]\n   [7] rolling_max(::Array{Int64,1})\
    \ at /tmp/tmpalpqy8ys.jl:8\n   [8] top-level scope at /tmp/tmpalpqy8ys.jl:18\n\
    \   [9] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [10] top-level scope at /tmp/tmpalpqy8ys.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmpalpqy8ys.jl:19\n  Test threw exception\n  Expression: candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n  DimensionMismatch(\"arrays could not be broadcast\
    \ to a common size; got a dimension with lengths 0 and 4\")\n  Stacktrace:\n \
    \  [1] _bcs1 at ./broadcast.jl:490 [inlined]\n   [2] _bcs at ./broadcast.jl:484\
    \ [inlined]\n   [3] broadcast_shape at ./broadcast.jl:478 [inlined]\n   [4] combine_axes\
    \ at ./broadcast.jl:473 [inlined]\n   [5] instantiate at ./broadcast.jl:256 [inlined]\n\
    \   [6] materialize at ./broadcast.jl:820 [inlined]\n   [7] rolling_max(::Array{Int64,1})\
    \ at /tmp/tmpalpqy8ys.jl:8\n   [8] top-level scope at /tmp/tmpalpqy8ys.jl:19\n\
    \   [9] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [10] top-level scope at /tmp/tmpalpqy8ys.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmpalpqy8ys.jl:20\n  Test threw exception\n  Expression: candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  DimensionMismatch(\"arrays could not\
    \ be broadcast to a common size; got a dimension with lengths 0 and 5\")\n  Stacktrace:\n\
    \   [1] _bcs1 at ./broadcast.jl:490 [inlined]\n   [2] _bcs at ./broadcast.jl:484\
    \ [inlined]\n   [3] broadcast_shape at ./broadcast.jl:478 [inlined]\n   [4] combine_axes\
    \ at ./broadcast.jl:473 [inlined]\n   [5] instantiate at ./broadcast.jl:256 [inlined]\n\
    \   [6] materialize at ./broadcast.jl:820 [inlined]\n   [7] rolling_max(::Array{Int64,1})\
    \ at /tmp/tmpalpqy8ys.jl:8\n   [8] top-level scope at /tmp/tmpalpqy8ys.jl:20\n\
    \   [9] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [10] top-level scope at /tmp/tmpalpqy8ys.jl:16\n  \nTest Summary: | Error\
    \  Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpalpqy8ys.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list[1] = numbers[1]\n\
    \    for i = 2:length(numbers)\n        if numbers[i] > rolling_max_list[i-1]\n\
    \            rolling_max_list[i] = numbers[i]\n        else\n            rolling_max_list[i]\
    \ = rolling_max_list[i-1]\n        end\n    end\n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfvqae390.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfvqae390.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}(undef, 0)\n    for number in numbers\n\
    \        rolling_max_list = append!(rolling_max_list, maximum(rolling_max_list,\
    \ number))\n    end\n    return rolling_max_list\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpw9dwllp0.jl:19\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: objects\
    \ of type Array{Int64,1} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] mapreduce_first(::Array{Int64,1}, ::Function,\
    \ ::Int64) at ./reduce.jl:384\n   [2] mapreduce(::Array{Int64,1}, ::Function,\
    \ ::Int64) at ./reduce.jl:411\n   [3] maximum(::Array{Int64,1}, ::Int64) at ./reduce.jl:615\n\
    \   [4] rolling_max(::Array{Int64,1}) at /tmp/tmpw9dwllp0.jl:9\n   [5] top-level\
    \ scope at /tmp/tmpw9dwllp0.jl:19\n   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpw9dwllp0.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpw9dwllp0.jl:20\n  Test threw exception\n  Expression: candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n  MethodError: objects of type Array{Int64,1} are\
    \ not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] mapreduce_first(::Array{Int64,1}, ::Function, ::Int64) at ./reduce.jl:384\n\
    \   [2] mapreduce(::Array{Int64,1}, ::Function, ::Int64) at ./reduce.jl:411\n\
    \   [3] maximum(::Array{Int64,1}, ::Int64) at ./reduce.jl:615\n   [4] rolling_max(::Array{Int64,1})\
    \ at /tmp/tmpw9dwllp0.jl:9\n   [5] top-level scope at /tmp/tmpw9dwllp0.jl:20\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpw9dwllp0.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpw9dwllp0.jl:21\n  Test threw exception\n  Expression: candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] mapreduce_first(::Array{Int64,1}, ::Function, ::Int64) at ./reduce.jl:384\n\
    \   [2] mapreduce(::Array{Int64,1}, ::Function, ::Int64) at ./reduce.jl:411\n\
    \   [3] maximum(::Array{Int64,1}, ::Int64) at ./reduce.jl:615\n   [4] rolling_max(::Array{Int64,1})\
    \ at /tmp/tmpw9dwllp0.jl:9\n   [5] top-level scope at /tmp/tmpw9dwllp0.jl:21\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpw9dwllp0.jl:17\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw9dwllp0.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = Vector{Int64}()\n    \n    for n in numbers\n\
    \        rolling_max_list = rolling_max_list + [rolling_max(rolling_max_list)]\n\
    \    end\n    \n    return rolling_max_list\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbgxoztcr.jl:22\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape at ./indices.jl:178 [inlined]\n\
    \   [2] promote_shape at ./indices.jl:169 [inlined]\n   [3] +(::Array{Int64,1},\
    \ ::Array{Array{Int64,1},1}) at ./arraymath.jl:45\n   [4] rolling_max(::Array{Int64,1})\
    \ at /tmp/tmpbgxoztcr.jl:11\n   [5] top-level scope at /tmp/tmpbgxoztcr.jl:22\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpbgxoztcr.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpbgxoztcr.jl:23\n  Test threw exception\n  Expression: candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n  DimensionMismatch(\"dimensions must match: a has\
    \ dims (Base.OneTo(0),), b has dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n\
    \   [1] promote_shape at ./indices.jl:178 [inlined]\n   [2] promote_shape at ./indices.jl:169\
    \ [inlined]\n   [3] +(::Array{Int64,1}, ::Array{Array{Int64,1},1}) at ./arraymath.jl:45\n\
    \   [4] rolling_max(::Array{Int64,1}) at /tmp/tmpbgxoztcr.jl:11\n   [5] top-level\
    \ scope at /tmp/tmpbgxoztcr.jl:23\n   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpbgxoztcr.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpbgxoztcr.jl:24\n  Test threw exception\n  Expression: candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  DimensionMismatch(\"dimensions must\
    \ match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),), mismatch at\
    \ 1\")\n  Stacktrace:\n   [1] promote_shape at ./indices.jl:178 [inlined]\n  \
    \ [2] promote_shape at ./indices.jl:169 [inlined]\n   [3] +(::Array{Int64,1},\
    \ ::Array{Array{Int64,1},1}) at ./arraymath.jl:45\n   [4] rolling_max(::Array{Int64,1})\
    \ at /tmp/tmpbgxoztcr.jl:11\n   [5] top-level scope at /tmp/tmpbgxoztcr.jl:24\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpbgxoztcr.jl:20\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbgxoztcr.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    local max_rolling_numbers = Vector{Int64}()\n    local max_rolling_numbers_index\
    \ = 0\n    local max_rolling_numbers_value = numbers[1]\n    local max_rolling_numbers_count\
    \ = 0\n    \n    for i = 2:length(numbers)\n        if numbers[i] > max_rolling_numbers_value\n\
    \            then\n                max_rolling_numbers_value = numbers[i]\n  \
    \              max_rolling_numbers_index = i\n                max_rolling_numbers_count\
    \ = max_rolling_numbers_count + 1\n            else\n                max_rolling_numbers_count\
    \ = max_rolling_numbers_count + 1\n            end\n        end\n    end\n   \
    \ \n    max_rolling_numbers[max_rolling_numbers_index] = max_rolling_numbers_value\n\
    \    max_rolling_numbers[max_rolling_numbers_index] = max_rolling_numbers_count\n\
    \    \n    return max_rolling_numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: max_rolling_numbers not defined\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmkrojb_5.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmkrojb_5.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    maximum = numbers[1]\n    \n    for n in numbers[2:end]\n      \
    \  if n > maximum\n            maximum = n\n        end\n    end\n    \n    return\
    \ maximum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ and returns the sum of the squares of the elements in the vector.\n>>> sum_square([1,\
    \ 2, 3])\n25\n>>> sum_square([-1, 2, -3])\n9\n>>> sum_square([-1, 2, -3, 4, 5])\n\
    25\n>>> sum_square([-1, 1, -2, 3, 4])\n25\n>>> sum_square([-1, 1, -2, 3, 4])\n\
    25\n>>> sum_square([-1, 1, -2, 3, 4])\n25\n>>> sum_square([-1, 1, -2, 3, 4])\n\
    25\n>>> sum_square([-1, 1, -2, 3, 4])\n25\n>>> sum_square([-1, 1, -2, 3, 4])\n\
    25\n>>> sum_square([-1, 1, -2, 3, 4])\n25\n>>> sum_square([-1, 1, -2, 3, 4])\n\
    25\n>>> sum_square([-1, 1, -2, 3, 4])\n25\n>>> sum_square([-1, 1, -2, 3, 4])\n\
    25\n>>> sum_square([-1, 1, -2, 3, 4])\n25\n>>> sum_square([-1, 1, -2, 3, 4])\n\
    25\n>>> sum_square([-1, 1, -2, 3, 4])\n25\n>>> sum_square([-1, 1, -2, 3, 4])\n\
    25\n>>> sum_square([-1, 1, -2, 3, 4])\n25\n>>> sum_square([-1, 1, -2, 3, 4])\n\
    25\n>>> sum_square([-1, 1, -2, 3, 4])\n25\n>>> sum_square([-1, 1, -2, 3, 4])\n\
    25\n>>> sum_square([-1, 1, -2, 3, 4])\n25\n>>> sum_square([-1, 1, -2, 3, 4])\n\
    25\n>>> sum_square([-1, 1, -2, 3, 4])\n25\n>>> sum_square([-1, 1, -2, 3, 4])\n\
    25\n>>> sum_square([-1, 1, -2, 3, 4])\n25\n>>> sum_square([-1, 1, -2, 3, 4])\n\
    25\n>>> sum_square([-1, 1, -2, 3, 4])\n25\n>>> sum_square([-1, 1, -2, 3, 4])\n\
    25\n>>> sum_square([-1, 1, -2, 3, 4])\n25\n>>> sum_square([-1, 1, -2, 3, 4])\n\
    25\n>>> sum_square([-1, 1, -2, 3, 4])\n25\n>>> sum_square([-1, 1, -2, 3, 4])\n\
    25\n>>> sum_square([-1, 1, -2, 3, 4])\n25\n>>> sum_square([-1, 1, -2, 3, 4])\n\
    25\n>>> sum_square([-1, 1, -2, 3, 4])\n25\n>>> sum_square([-1, 1, -2, 3, 4])\n\
    25\n>>> sum_square([-1, 1, -2, 3, 4])\n25\n\nusing Test\n\n@testset begin\n\n\
    candidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprm681gfq.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprm681gfq.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list.append(numbers[1])\n\
    \    for i in 2:length(numbers)\n        if numbers[i] > rolling_max_list[1]\n\
    \            rolling_max_list.append(numbers[i])\n        end\n    end\n    return\
    \ rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvnk636hi.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvnk636hi.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = Vector{Int64}()\n    \n    for n in numbers\n\
    \        rolling_max_list = rolling_max_list + [rolling_max(rolling_max_list +\
    \ [n])]\n    end\n    \n    return rolling_max_list\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp10u22nbm.jl:22\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape at ./indices.jl:178 [inlined]\n\
    \   [2] promote_shape at ./indices.jl:169 [inlined]\n   [3] +(::Array{Int64,1},\
    \ ::Array{Int64,1}) at ./arraymath.jl:45\n   [4] rolling_max(::Array{Int64,1})\
    \ at /tmp/tmp10u22nbm.jl:11\n   [5] top-level scope at /tmp/tmp10u22nbm.jl:22\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmp10u22nbm.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmp10u22nbm.jl:23\n  Test threw exception\n  Expression: candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n  DimensionMismatch(\"dimensions must match: a has\
    \ dims (Base.OneTo(0),), b has dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n\
    \   [1] promote_shape at ./indices.jl:178 [inlined]\n   [2] promote_shape at ./indices.jl:169\
    \ [inlined]\n   [3] +(::Array{Int64,1}, ::Array{Int64,1}) at ./arraymath.jl:45\n\
    \   [4] rolling_max(::Array{Int64,1}) at /tmp/tmp10u22nbm.jl:11\n   [5] top-level\
    \ scope at /tmp/tmp10u22nbm.jl:23\n   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmp10u22nbm.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmp10u22nbm.jl:24\n  Test threw exception\n  Expression: candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  DimensionMismatch(\"dimensions must\
    \ match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),), mismatch at\
    \ 1\")\n  Stacktrace:\n   [1] promote_shape at ./indices.jl:178 [inlined]\n  \
    \ [2] promote_shape at ./indices.jl:169 [inlined]\n   [3] +(::Array{Int64,1},\
    \ ::Array{Int64,1}) at ./arraymath.jl:45\n   [4] rolling_max(::Array{Int64,1})\
    \ at /tmp/tmp10u22nbm.jl:11\n   [5] top-level scope at /tmp/tmp10u22nbm.jl:24\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmp10u22nbm.jl:20\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp10u22nbm.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    rolling_max\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a list of integers and returns the sum of the\
    \ squares of the first n integers in the list.\n>>> sum_squares_first_n(numbers::Vector{Int64},\
    \ n::Int64)::Float64\n>>> sum_squares_first_n([1,2,3,4,5], 2)\n25.0\n>>> sum_squares_first_n([1,2,3,4,5],\
    \ 3)\n49.0\n>>> sum_squares_first_n([1,2,3,4,5], 4)\n925.0\n>>> sum_squares_first_n([1,2,3,4,5],\
    \ 5)\n1849.0\n>>> sum_squares_first_n([1,2,3,4,5], 6)\n276425.0\n>>> sum_squares_first_n([1,2,3,4,5],\
    \ 7)\n4556425.0\n>>> sum_squares_first_n([1,2,3,4,5], 8)\n7296425.0\n>>> sum_squares_first_n([1,2,3,4,5],\
    \ 9)\n10946425.0\n>>> sum_squares_first_n([1,2,3,4,5], 10)\n15946425.0\n>>> sum_squares_first_n([1,2,3,4,5],\
    \ 11)\n25946425.0\n>>> sum_squares_first_n([1,2,3,4,5], 12)\n4996425.0\n>>> sum_squares_first_n([1,2,3,4,5],\
    \ 13)\n9496425.0\n>>> sum_squares_first_n([1,2,3,4,5], 14)\n14496425.0\n>>> sum_squares_first_n([1,2,3,4,5],\
    \ 15)\n24996425.0\n>>> sum_squares_first_n([1,2,3,4,5], 16)\n49496425.0\n>>> sum_squares_first_n([1,2,3,4,5],\
    \ 17)\n92496425.0\n>>> sum_squares_first_n([1,2,3,4,5], 18)\n142496425.0\n>>>\
    \ sum_squares_first_n([1,2,3,4,5], 19)\n242496425.0\n>>> sum_squares_first_n([1,2,3,4,5],\
    \ 20)\n492496425.0\n>>> sum_squares_first_n([1,2,3,4,5], 21)\n92496425.0\n>>>\
    \ sum_squares_first_n([1,2,3,4,5], 22)\n142496425.0\n>>> sum_squares_first_n([1,2,3,4,5],\
    \ 23)\n242496425.0\n>>> sum_squares_first_n([1,2,3,4,5], 24)\n492496425.0\n>>>\
    \ sum_squares_first_n([1,2,3,4,5], 25)\n92496425.0\n>>> sum_squares_first_\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8dft81cu.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8dft81cu.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    rolling_max\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0y1r3tcv.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0y1r3tcv.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_result = Vector{Int64}(undef, 0)\n    rolling_max_result[1]\
    \ = numbers[1]\n    \n    for i = 2:length(numbers)\n        if numbers[i] > rolling_max_result[1]\n\
    \            rolling_max_result[1] = numbers[i]\n        end\n    end\n    \n\
    \    return rolling_max_result\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd_2pdrwc.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpd_2pdrwc.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    rolling_max\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a vector of integers and returns the sum of the\
    \ squares of the elements in the vector.\n>>> sum_square([1, 2, 3])\n9\n>>> sum_square([-1,\
    \ -2, -3])\n25\n>>> sum_square([0, 0])\n0\n>>> sum_square([0, 1])\n1\n>>> sum_square([0,\
    \ 2])\n4\n>>> sum_square([0, 3])\n9\n>>> sum_square([0, 4])\n16\n>>> sum_square([0,\
    \ 5])\n25\n>>> sum_square([0, 6])\n36\n>>> sum_square([0, 7])\n49\n>>> sum_square([0,\
    \ 8])\n64\n>>> sum_square([0, 9])\n81\n>>> sum_square([0, 10])\n100\n>>> sum_square([0,\
    \ 11])\n121\n>>> sum_square([0, 12])\n144\n>>> sum_square([0, 13])\n169\n>>> sum_square([0,\
    \ 14])\n196\n>>> sum_square([0, 15])\n225\n>>> sum_square([0, 16])\n248\n>>> sum_square([0,\
    \ 17])\n271\n>>> sum_square([0, 18])\n294\n>>> sum_square([0, 19])\n317\n>>> sum_square([0,\
    \ 20])\n344\n>>> sum_square([0, 21])\n369\n>>> sum_square([0, 22])\n392\n>>> sum_square([0,\
    \ 23])\n415\n>>> sum_square([0, 24])\n438\n>>> sum_square([0, 25])\n460\n>>> sum_square([0,\
    \ 26])\n484\n>>> sum_square([0, 27])\n507\n>>> sum_square([0, 28])\n530\n>>> sum_square([0,\
    \ 29])\n554\n>>> sum_square([0, 30])\n577\n>>> sum_square([0, 31])\n600\n>>> sum_square([0,\
    \ 32])\n623\n>>> sum_square([0, 33])\n646\n>>> sum_square([0, 34])\n670\n>>> sum_square([0,\
    \ 35])\n693\n>>> sum_square([0, 36])\n718\n>>> sum_square([0, 37])\n740\n>>> sum_square([0,\
    \ 38])\n763\n>>> sum_square([0, 39])\n788\n>>> sum_square([0, 40])\n811\n>>> sum_square([0,\
    \ 41])\n835\n>>> sum_square\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp11lmr36u.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp11lmr36u.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list = rolling_max_list\
    \ + numbers\n    rolling_max_list = rolling_max_list[length(rolling_max_list):end]\n\
    \    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmpp5vj7o.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmpp5vj7o.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max = numbers[end]\n    for i in numbers[2:end]\n      \
    \  rolling_max = max(rolling_max, i)\n    end\n    \n    return rolling_max\n\
    end\n</cell>\n<code language=julia-1.5>\nrolling_max([1, 2, 3, 2, 3, 4, 2])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that generates a list of rolling\
    \ minimum element found until given moment in the sequence.\n    >>> rolling_min([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 2, 2, 2, 2, 2]\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmponnsq9vs.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmponnsq9vs.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = []\n    \n    for number in numbers\n       \
    \ rolling_max_list.append(maximum(rolling_max_list, number))\n    end\n    \n\
    \    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpeksu1c1p.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpeksu1c1p.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = Vector{Int64}(undef, 0)\n    \n    for number\
    \ in numbers\n        \n        if number > rolling_max_list[1]\n            rolling_max_list[1]\
    \ = number\n        else\n            rolling_max_list[1] = rolling_max_list[1]\n\
    \        end\n        \n        push!(rolling_max_list, rolling_max_list[1])\n\
    \    end\n    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjfkjw8iu.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjfkjw8iu.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = Vector{Int64}()\n    \n    for i in numbers:\n\
    \        if i == rolling_max_list[-1]\n            rolling_max_list[i] = i\n \
    \       else\n            rolling_max_list[i] = rolling_max_list[-1]\n       \
    \ end\n    end\n    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6dfzbc2e.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6dfzbc2e.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_array = zeros(length(numbers))\n    \n    for i = 1:length(numbers)\n\
    \        rolling_max_array[i] = maximum(rolling_max_array[i-1], numbers[i])\n\
    \    end\n    \n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq2yc1b6a.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpq2yc1b6a.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    local max_rolling = 0\n    local max_rolling_number = 0\n    local\
    \ max_rolling_number_index = 0\n    local max_rolling_number_indexes = []\n  \
    \  \n    for i = 1:length(numbers)\n        if numbers[i] > max_rolling then\n\
    \            max_rolling = numbers[i]\n            max_rolling_number = numbers[i]\n\
    \            max_rolling_number_index = i\n            max_rolling_number_indexes\
    \ = []\n        elseif numbers[i] == max_rolling then\n            max_rolling_number_indexes\
    \ = [max_rolling_number_indexes, i]\n        end\n    end\n    \n    return max_rolling_number_indexes\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpeigzichl.jl:26\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpeigzichl.jl:26\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list = rolling_max_list\
    \ .+ numbers\n    rolling_max_list = rolling_max_list .+ rolling_max_list\n  \
    \  rolling_max_list = rolling_max_list .+ rolling_max_list\n    rolling_max_list\
    \ = rolling_max_list .+ rolling_max_list\n    rolling_max_list = rolling_max_list\
    \ .+ rolling_max_list\n    rolling_max_list = rolling_max_list .+ rolling_max_list\n\
    \    rolling_max_list = rolling_max_list .+ rolling_max_list\n    rolling_max_list\
    \ = rolling_max_list .+ rolling_max_list\n    rolling_max_list = rolling_max_list\
    \ .+ rolling_max_list\n    rolling_max_list = rolling_max_list .+ rolling_max_list\n\
    \    rolling_max_list = rolling_max_list .+ rolling_max_list\n    rolling_max_list\
    \ = rolling_max_list .+ rolling_max_list\n    rolling_max_list = rolling_max_list\
    \ .+ rolling_max_list\n    rolling_max_list = rolling_max_list .+ rolling_max_list\n\
    \    rolling_max_list = rolling_max_list .+ rolling_max_list\n    rolling_max_list\
    \ = rolling_max_list .+ rolling_max_list\n    rolling_max_list = rolling_max_list\
    \ .+ rolling_max_list\n    rolling_max_list = rolling_max_list .+ rolling_max_list\n\
    \    rolling_max_list = rolling_max_list .+ rolling_max_list\n    rolling_max_list\
    \ = rolling_max_list .+ rolling_max_list\n    rolling_max_list = rolling_max_list\
    \ .+ rolling_max_list\n    rolling_max_list = rolling_max_list .+ rolling_max_list\n\
    \    rolling_max_list = rolling_max_list .+ rolling_max_list\n    rolling_max_list\
    \ = rolling_max_list .+ rolling_max_list\n    rolling_max_list = rolling_max_list\
    \ .+ rolling_max_list\n    rolling_max_list = rolling_max_list .+ rolling_max_list\n\
    \    rolling_max_list = rolling_max_list .+ rolling_max_list\n    rolling_max_list\
    \ = rolling_max_list .+ rolling_max_list\n    rolling_max_list = rolling_max_list\
    \ .+ rolling_max_list\n    rolling_max_list = rolling_max_list .+ rolling_max_list\n\
    \    rolling_max_list = rolling_max_list .+ rolling_max_list\n    rolling_max_list\
    \ = rolling_\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9ub4z8yr.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp9ub4z8yr.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp9ub4z8yr.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = Vector{Int64}()\n    \n    for n in numbers\n\
    \        if n == rolling_max_list[1]\n            rolling_max_list[1] = n\n  \
    \      else\n            push!(rolling_max_list, n)\n        end\n    end\n  \
    \  \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplqbera7c.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplqbera7c.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = Vector{Int64}()\n    \n    for n in numbers\n\
    \        rolling_max_list = rolling_max_list + [rolling_max(rolling_max_list)]\n\
    \    end\n    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphify8tol.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphify8tol.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list[1] = numbers[1]\n\
    \    for i = 2:length(numbers)\n        if numbers[i] > rolling_max_list[i-1]\n\
    \            rolling_max_list[i] = numbers[i]\n        else\n            rolling_max_list[i]\
    \ = rolling_max_list[i-1]\n        end\n    end\n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyzsf148w.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyzsf148w.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[1]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpssezw33b.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpssezw33b.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n\
    \        rolling_max[length(rolling_max) + 1] = n\n    end\n    \n    return rolling_max\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector.\nusing Test\n\
    \n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4_8eh8om.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4_8eh8om.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list <- Vector{Int64}(undef, 0)\n    rolling_max_list <- rolling_max_list\
    \ ++ numbers\n    rolling_max_list <- rolling_max_list[rolling_max_list .!= rolling_max_list[1]]\n\
    \    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbayoy63c.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbayoy63c.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = Vector{Int64}()\n    \n    for n in numbers\n\
    \        rolling_max_list = push!(rolling_max_list, maximum(rolling_max_list,\
    \ n))\n    end\n    \n    return rolling_max_list\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvdfjxh6y.jl:22\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: objects\
    \ of type Array{Int64,1} are not callable\n  Use square brackets [] for indexing\
    \ an Array.\n  Stacktrace:\n   [1] mapreduce_first(::Array{Int64,1}, ::Function,\
    \ ::Int64) at ./reduce.jl:384\n   [2] mapreduce(::Array{Int64,1}, ::Function,\
    \ ::Int64) at ./reduce.jl:411\n   [3] maximum(::Array{Int64,1}, ::Int64) at ./reduce.jl:615\n\
    \   [4] rolling_max(::Array{Int64,1}) at /tmp/tmpvdfjxh6y.jl:11\n   [5] top-level\
    \ scope at /tmp/tmpvdfjxh6y.jl:22\n   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpvdfjxh6y.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpvdfjxh6y.jl:23\n  Test threw exception\n  Expression: candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n  MethodError: objects of type Array{Int64,1} are\
    \ not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] mapreduce_first(::Array{Int64,1}, ::Function, ::Int64) at ./reduce.jl:384\n\
    \   [2] mapreduce(::Array{Int64,1}, ::Function, ::Int64) at ./reduce.jl:411\n\
    \   [3] maximum(::Array{Int64,1}, ::Int64) at ./reduce.jl:615\n   [4] rolling_max(::Array{Int64,1})\
    \ at /tmp/tmpvdfjxh6y.jl:11\n   [5] top-level scope at /tmp/tmpvdfjxh6y.jl:23\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpvdfjxh6y.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpvdfjxh6y.jl:24\n  Test threw exception\n  Expression: candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  MethodError: objects of type Array{Int64,1}\
    \ are not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n\
    \   [1] mapreduce_first(::Array{Int64,1}, ::Function, ::Int64) at ./reduce.jl:384\n\
    \   [2] mapreduce(::Array{Int64,1}, ::Function, ::Int64) at ./reduce.jl:411\n\
    \   [3] maximum(::Array{Int64,1}, ::Int64) at ./reduce.jl:615\n   [4] rolling_max(::Array{Int64,1})\
    \ at /tmp/tmpvdfjxh6y.jl:11\n   [5] top-level scope at /tmp/tmpvdfjxh6y.jl:24\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpvdfjxh6y.jl:20\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvdfjxh6y.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpctolgzx_.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpctolgzx_.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphjdy3jmr.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmphjdy3jmr.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmphjdy3jmr.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = Vector{Int64}()\n    \n    for number in numbers\n\
    \        rolling_max_list = append!(rolling_max_list, maximum(rolling_max_list,\
    \ number))\n    end\n    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\n\
    rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that generates a list of rolling minimum element found until given moment in\
    \ the sequence.\n    >>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 2, 2,\
    \ 2, 2]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppd38lh40.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppd38lh40.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = Vector{Int64}(undef, 0)\n    \n    for number\
    \ in numbers\n        if number > rolling_max_list[1]\n            rolling_max_list[1]\
    \ = number\n        else\n            rolling_max_list[1] = max(rolling_max_list[1],\
    \ number)\n        end\n    end\n    \n    return rolling_max_list\nend\n</cell>\n\
    <text>\nExercise 9\nWrite a function that takes a vector of integers and a window\
    \ size and returns a vector with the rolling mean of the given vector. \nThe window\
    \ size should be at least 1.\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpefsr9xpu.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpefsr9xpu.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = Vector{Int64}()\n    \n    for n in numbers\n\
    \        rolling_max_list = rolling_max_list + [rolling_max(rolling_max_list)]\n\
    \    end\n    \n    return rolling_max_list\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3um374eq.jl:22\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape at ./indices.jl:178 [inlined]\n\
    \   [2] promote_shape at ./indices.jl:169 [inlined]\n   [3] +(::Array{Int64,1},\
    \ ::Array{Array{Int64,1},1}) at ./arraymath.jl:45\n   [4] rolling_max(::Array{Int64,1})\
    \ at /tmp/tmp3um374eq.jl:11\n   [5] top-level scope at /tmp/tmp3um374eq.jl:22\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmp3um374eq.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmp3um374eq.jl:23\n  Test threw exception\n  Expression: candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n  DimensionMismatch(\"dimensions must match: a has\
    \ dims (Base.OneTo(0),), b has dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n\
    \   [1] promote_shape at ./indices.jl:178 [inlined]\n   [2] promote_shape at ./indices.jl:169\
    \ [inlined]\n   [3] +(::Array{Int64,1}, ::Array{Array{Int64,1},1}) at ./arraymath.jl:45\n\
    \   [4] rolling_max(::Array{Int64,1}) at /tmp/tmp3um374eq.jl:11\n   [5] top-level\
    \ scope at /tmp/tmp3um374eq.jl:23\n   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmp3um374eq.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmp3um374eq.jl:24\n  Test threw exception\n  Expression: candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  DimensionMismatch(\"dimensions must\
    \ match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),), mismatch at\
    \ 1\")\n  Stacktrace:\n   [1] promote_shape at ./indices.jl:178 [inlined]\n  \
    \ [2] promote_shape at ./indices.jl:169 [inlined]\n   [3] +(::Array{Int64,1},\
    \ ::Array{Array{Int64,1},1}) at ./arraymath.jl:45\n   [4] rolling_max(::Array{Int64,1})\
    \ at /tmp/tmp3um374eq.jl:11\n   [5] top-level scope at /tmp/tmp3um374eq.jl:24\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmp3um374eq.jl:20\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3um374eq.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_array = zeros(length(numbers))\n    rolling_max_array[1] =\
    \ numbers[1]\n    for i = 2:length(numbers)\n        rolling_max_array[i] = maximum(rolling_max_array[i-1:i+1],\
    \ numbers[i])\n    end\n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfwvm9xvl.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfwvm9xvl.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list = rolling_max_list\
    \ + numbers\n    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[1]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[2]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[3]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[4]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[5]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[6]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[7]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[8]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[9]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[10]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[11]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[12]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[13]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[14]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[15]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[16]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[17]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[18]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[19]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[20]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[21]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[22]]\n\
    \    rolling_max_\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcgtqtf4q.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpcgtqtf4q.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpcgtqtf4q.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_array = zeros(length(numbers))\n    for i = 1:length(numbers)\n\
    \        rolling_max_array[i] = maximum(rolling_max_array[i-1], numbers[i])\n\
    \    end\n    return rolling_max_array\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that generates a rolling mean of a given list of integers, starting\
    \ from a given moment.\n    >>> rolling_mean([1, 2, 3, 2, 3, 4, 2])\n    [1.5,\
    \ 2.5, 3.5, 4.5, 5.5, 6.5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmpn6uckk.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmpn6uckk.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list = rolling_max_list\
    \ + numbers\n    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[1]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[2]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[3]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[4]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[5]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[6]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[7]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[8]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[9]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[10]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[11]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[12]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[13]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[14]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[15]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[16]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[17]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[18]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[19]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[20]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[21]]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list .!= rolling_max_list[22]]\n\
    \    rolling_max_\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq9mi1cye.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpq9mi1cye.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpq9mi1cye.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        if n\
    \ > rolling_max\n            rolling_max = n\n        end\n    end\n    rolling_max\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that generates a random permutation\
    \ of a given vector. \nHint: use the function randperm()\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf1ub2ih7.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpf1ub2ih7.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}(undef, 0)\n    rolling_max_list[1] =\
    \ numbers[1]\n    for i = 2:length(numbers)\n        if numbers[i] > rolling_max_list[i-1]\n\
    \            rolling_max_list[i] = numbers[i]\n        else\n            rolling_max_list[i]\
    \ = rolling_max_list[i-1]\n        end\n    end\n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpc3d_s2g9.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpc3d_s2g9.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list.append(numbers[1])\n\
    \    \n    for n in numbers[2:end]\n        if n > rolling_max_list[1]\n     \
    \       rolling_max_list.append(n)\n        end\n    end\n    \n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmocbt27t.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmocbt27t.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list.append(numbers[1])\n\
    \    for n in numbers[2:end]\n        rolling_max_list.append(max(rolling_max_list[-1],\
    \ numbers[n]))\n    end\n    rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4cs_pdjs.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4cs_pdjs.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphrn8fs8k.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphrn8fs8k.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0purb7ls.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0purb7ls.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    rolling_max\nend\n</cell>\n<text>\nThe rolling_max\
    \ function above is very similar to the built-in max function, but with some important\
    \ differences:\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4h1jo1d1.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4h1jo1d1.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    maximum = numbers[1]\n    \n    for n in numbers[2:end]\n      \
    \  if n > maximum\n            maximum = n\n        end\n    end\n    \n    return\
    \ maximum\nend\n</cell>\n<text>\nrolling_max() function\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2kw0s1mr.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2kw0s1mr.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list.append(numbers[1])\n\
    \    for n in numbers[2:end]\n        if n > rolling_max_list[1]\n           \
    \ rolling_max_list = Vector{Int64}([n, rolling_max_list[1]])\n        else\n \
    \           rolling_max_list = Vector{Int64}([rolling_max_list[1], n])\n     \
    \   end\n    end\n    return rolling_max_list\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6sszksi0.jl:23\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  type Array\
    \ has no field append\n  Stacktrace:\n   [1] getproperty(::Array{Int64,1}, ::Symbol)\
    \ at ./Base.jl:33\n   [2] rolling_max(::Array{Int64,1}) at /tmp/tmp6sszksi0.jl:8\n\
    \   [3] top-level scope at /tmp/tmp6sszksi0.jl:23\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp6sszksi0.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmp6sszksi0.jl:24\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n  type Array has no field append\n  Stacktrace:\n\
    \   [1] getproperty(::Array{Int64,1}, ::Symbol) at ./Base.jl:33\n   [2] rolling_max(::Array{Int64,1})\
    \ at /tmp/tmp6sszksi0.jl:8\n   [3] top-level scope at /tmp/tmp6sszksi0.jl:24\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp6sszksi0.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmp6sszksi0.jl:25\n  Test threw exception\n  Expression: candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n  type Array has no field append\n  Stacktrace:\n\
    \   [1] getproperty(::Array{Int64,1}, ::Symbol) at ./Base.jl:33\n   [2] rolling_max(::Array{Int64,1})\
    \ at /tmp/tmp6sszksi0.jl:8\n   [3] top-level scope at /tmp/tmp6sszksi0.jl:25\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp6sszksi0.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmp6sszksi0.jl:26\n  Test threw exception\n  Expression: candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  type Array has no field append\n  Stacktrace:\n\
    \   [1] getproperty(::Array{Int64,1}, ::Symbol) at ./Base.jl:33\n   [2] rolling_max(::Array{Int64,1})\
    \ at /tmp/tmp6sszksi0.jl:8\n   [3] top-level scope at /tmp/tmp6sszksi0.jl:26\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp6sszksi0.jl:22\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6sszksi0.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_array = zeros(length(numbers))\n    rolling_max_array[1] =\
    \ numbers[1]\n    for i = 2:length(numbers)\n        rolling_max_array[i] = max(numbers[i-1],\
    \ numbers[i])\n    end\n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpchbdxjsd.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpchbdxjsd.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list = copy(numbers)\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\nusing Test\n\n@testset begin\n\
    \ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp74yvnb_2.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp74yvnb_2.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp74yvnb_2.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n\
    \        rolling_max_list = rolling_max_list + [rolling_max(rolling_max_list)]\n\
    \    end\n    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\n\
    rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that generates a list of rolling minimum element found until given moment in\
    \ the sequence.\n>>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n[1, 2, 3, 3, 3, 4, 4]\n\
    </text>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdak9kkpf.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdak9kkpf.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}(undef, 0)\n    rolling_max_list[1] =\
    \ numbers[1]\n    for i = 2:length(numbers)\n        if numbers[i] > rolling_max_list[i-1]\n\
    \            rolling_max_list[i] = numbers[i]\n        else\n            rolling_max_list[i]\
    \ = rolling_max_list[i-1]\n        end\n    end\n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsq6fw82_.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsq6fw82_.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n      \
    \  if n > rolling_max\n            rolling_max = n\n        end\n    end\n   \
    \ \n    return rolling_max\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprmcawy9n.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprmcawy9n.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list = rolling_max_list\
    \ + numbers\n    rolling_max_list = rolling_max_list[length(rolling_max_list):end]\n\
    \    return rolling_max_list\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\
    \n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn11707jv.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpn11707jv.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = []\n    \n    for number in numbers\n       \
    \ rolling_max_list.append(number)\n    end\n    \n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsqgrn2er.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsqgrn2er.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp93_gg4qk.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp93_gg4qk.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = Vector{Int64}()\n    \n    for n in numbers\n\
    \        rolling_max_list = push!(rolling_max_list, maximum(n))\n    end\n   \
    \ \n    return rolling_max_list\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_0rwon7j.jl:23\n  Expression: candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n   Evaluated: [4, 3, 2, 1] == [4, 4, 4, 4]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_0rwon7j.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_0rwon7j.jl:20\ntest set: Test Failed at /tmp/tmp_0rwon7j.jl:24\n\
    \  Expression: candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n   Evaluated:\
    \ [3, 2, 3, 100, 3] == [3, 3, 3, 100, 100]\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp_0rwon7j.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_0rwon7j.jl:20\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     2      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_0rwon7j.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max = numbers[1]\n    for number in numbers[2:end]\n   \
    \     if number > rolling_max\n            rolling_max = number\n        end\n\
    \    end\n    \n    return rolling_max\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3fn8ewv4.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3fn8ewv4.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n\
    \        if rolling_max == Vector{Int64}(undef, 0)\n            rolling_max =\
    \ [n]\n        else\n            if n > rolling_max[1]\n                rolling_max\
    \ = rolling_max[1:end-1] + [rolling_max[1] + 1]\n            end\n        end\n\
    \    end\n    \n    return rolling_max\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkf9y2x9b.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkf9y2x9b.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzhb30uwo.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzhb30uwo.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    rolling_max\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp78sxtkhi.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp78sxtkhi.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n\
    \        rolling_max_list = rolling_max_list + [rolling_max(n)]\n    end\n   \
    \ \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdbbrcfmr.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdbbrcfmr.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    maximums = Vector{Int64}()\n    maximums.push(numbers[1])\n    for\
    \ n in numbers[2:end]\n        if maximums[end-1] < n\n            maximums[end]\
    \ = n\n        end\n    end\n    maximums\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpaxx_xs57.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpaxx_xs57.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    rolling_max\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8jdmzeq5.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8jdmzeq5.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    rolling_max\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1x9gq9ot.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1x9gq9ot.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n\
    \        push!(rolling_max, maximum(n))\n    end\n    \n    return rolling_max\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmffxhbyl.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmffxhbyl.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list[1] = numbers[1]\n\
    \    for i = 2:length(numbers)\n        rolling_max_list[i] = maximum(rolling_max_list[i-2],\
    \ numbers[i])\n    end\n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm2wjhjpd.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpm2wjhjpd.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvab3nmse.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvab3nmse.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = Vector{Int64}()\n    \n    for n in numbers\n\
    \        rolling_max_list = append!(rolling_max_list, rolling_max(n))\n    end\n\
    \    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\n\
    rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that generates all the possible combinations of k elements from a given list\
    \ of n elements.\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp15m012r_.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp15m012r_.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n\
    \        rolling_max = rolling_max .+ n\n    end\n    \n    return rolling_max\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3w4yrvjf.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3w4yrvjf.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list = rolling_max_list\
    \ .+ numbers\n    rolling_max_list = rolling_max_list .+ rolling_max_list\n  \
    \  rolling_max_list = rolling_max_list .+ rolling_max_list\n    rolling_max_list\
    \ = rolling_max_list .+ rolling_max_list\n    rolling_max_list = rolling_max_list\
    \ .+ rolling_max_list\n    rolling_max_list = rolling_max_list .+ rolling_max_list\n\
    \    rolling_max_list = rolling_max_list .+ rolling_max_list\n    rolling_max_list\
    \ = rolling_max_list .+ rolling_max_list\n    rolling_max_list = rolling_max_list\
    \ .+ rolling_max_list\n    rolling_max_list = rolling_max_list .+ rolling_max_list\n\
    \    rolling_max_list = rolling_max_list .+ rolling_max_list\n    rolling_max_list\
    \ = rolling_max_list .+ rolling_max_list\n    rolling_max_list = rolling_max_list\
    \ .+ rolling_max_list\n    rolling_max_list = rolling_max_list .+ rolling_max_list\n\
    \    rolling_max_list = rolling_max_list .+ rolling_max_list\n    rolling_max_list\
    \ = rolling_max_list .+ rolling_max_list\n    rolling_max_list = rolling_max_list\
    \ .+ rolling_max_list\n    rolling_max_list = rolling_max_list .+ rolling_max_list\n\
    \    rolling_max_list = rolling_max_list .+ rolling_max_list\n    rolling_max_list\
    \ = rolling_max_list .+ rolling_max_list\n    rolling_max_list = rolling_max_list\
    \ .+ rolling_max_list\n    rolling_max_list = rolling_max_list .+ rolling_max_list\n\
    \    rolling_max_list = rolling_max_list .+ rolling_max_list\n    rolling_max_list\
    \ = rolling_max_list .+ rolling_max_list\n    rolling_max_list = rolling_max_list\
    \ .+ rolling_max_list\n    rolling_max_list = rolling_max_list .+ rolling_max_list\n\
    \    rolling_max_list = rolling_max_list .+ rolling_max_list\n    rolling_max_list\
    \ = rolling_max_list .+ rolling_max_list\n    rolling_max_list = rolling_max_list\
    \ .+ rolling_max_list\n    rolling_max_list = rolling_max_list .+ rolling_max_list\n\
    \    rolling_max_list = rolling_max_list .+ rolling_max_list\n    rolling_max_list\
    \ = rolling_\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp06gm24i9.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp06gm24i9.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp06gm24i9.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    maximum = numbers[1]\n    for i in numbers[2:end]\n        if i\
    \ > maximum\n            maximum = i\n        end\n    end\n    return maximum\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that generates a random integer\
    \ between 1 and a given number $n$, inclusive.\nusing Test\n\n@testset begin\n\
    \ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpaehbdd5o.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpaehbdd5o.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list[1] = numbers[1]\n\
    \    for i = 2:length(numbers)\n        if numbers[i] > rolling_max_list[i-1]\n\
    \            rolling_max_list[i] = numbers[i]\n        else\n            rolling_max_list[i]\
    \ = rolling_max_list[i-1]\n        end\n    end\n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcdtpd3h2.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcdtpd3h2.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    local max_so_far = numbers[1]\n    local max_so_far_index = 1\n\
    \    local max_so_far_rolling_sum = 0\n    local max_so_far_rolling_sum_index\
    \ = 1\n    \n    for i = 2:length(numbers)\n        if numbers[i] > max_so_far\n\
    \            max_so_far = numbers[i]\n            max_so_far_index = i\n     \
    \       max_so_far_rolling_sum = max_so_far\n            max_so_far_rolling_sum_index\
    \ = i\n        else\n            max_so_far_rolling_sum = max_so_far_rolling_sum\
    \ + numbers[i]\n            max_so_far_rolling_sum_index = i\n        end\n  \
    \  end\n    \n    return numbers[max_so_far_index:max_so_far_index+1]\nend\n</cell>\n\
    <text>\nRolling sum\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpki6_kfmk.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpki6_kfmk.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_result = Vector{Int64}()\n    rolling_max_result[1] = numbers[1]\n\
    \    for i = 2:length(numbers)\n        if numbers[i] > rolling_max_result[i-1]\n\
    \            rolling_max_result[i] = numbers[i]\n        else\n            rolling_max_result[i]\
    \ = rolling_max_result[i-1]\n        end\n    end\n    return rolling_max_result\n\
    end\n</code>\n<|/ a tags=julia,arrays,performance |>\n<| a dscore=2 |>\nHere is\
    \ a solution that uses no loops and is about twice as fast as the other solutions:\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbj1gukta.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbj1gukta.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[1]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplyciq0bg.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplyciq0bg.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = Vector{Int64}(undef, 0)\n    \n    for number\
    \ in numbers\n        rolling_max_list = push!(rolling_max_list, maximum(rolling_max_list))\n\
    \    end\n    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\n\
    rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and a window size as arguments and returns a\
    \ vector of rolling mean of the given window size.\nusing Test\n\n@testset begin\n\
    \ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzzcz452h.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzzcz452h.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzx30u34n.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzx30u34n.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}(undef, 0)\n    rolling_max_list = rolling_max_list\
    \ + numbers\n    rolling_max_list = rolling_max_list[2:end]\n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn_dvmaa1.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpn_dvmaa1.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    rolling_max\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbpmu7734.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbpmu7734.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = Vector{Int64}()\n    \n    for number in numbers\n\
    \        if number > rolling_max_list[1]\n            rolling_max_list[1] = number\n\
    \        else\n            rolling_max_list[1] = rolling_max_list[1]\n       \
    \ end\n    end\n    \n    return rolling_max_list\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp150ut38t.jl:26\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  BoundsError: attempt\
    \ to access 0-element Array{Int64,1} at index [1]\n  Stacktrace:\n   [1] getindex\
    \ at ./array.jl:788 [inlined]\n   [2] rolling_max(::Array{Int64,1}) at /tmp/tmp150ut38t.jl:11\n\
    \   [3] top-level scope at /tmp/tmp150ut38t.jl:26\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp150ut38t.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp150ut38t.jl:27\n  Test threw exception\n  Expression: candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n  BoundsError: attempt to access 0-element Array{Int64,1}\
    \ at index [1]\n  Stacktrace:\n   [1] getindex at ./array.jl:788 [inlined]\n \
    \  [2] rolling_max(::Array{Int64,1}) at /tmp/tmp150ut38t.jl:11\n   [3] top-level\
    \ scope at /tmp/tmp150ut38t.jl:27\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp150ut38t.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp150ut38t.jl:28\n  Test threw exception\n  Expression: candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  BoundsError: attempt to access 0-element\
    \ Array{Int64,1} at index [1]\n  Stacktrace:\n   [1] getindex at ./array.jl:788\
    \ [inlined]\n   [2] rolling_max(::Array{Int64,1}) at /tmp/tmp150ut38t.jl:11\n\
    \   [3] top-level scope at /tmp/tmp150ut38t.jl:28\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp150ut38t.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp150ut38t.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n\
    \        rolling_max = [rolling_max[i] | rolling_max[i+1] | rolling_max[i+2] |\
    \ rolling_max[i+3] | rolling_max[i+4] | rolling_max[i+5] | rolling_max[i+6] |\
    \ rolling_max[i+7] | rolling_max[i+8] | rolling_max[i+9] | rolling_max[i+10] |\
    \ rolling_max[i+11] | rolling_max[i+12] | rolling_max[i+13] | rolling_max[i+14]\
    \ | rolling_max[i+15] | rolling_max[i+16] | rolling_max[i+17] | rolling_max[i+18]\
    \ | rolling_max[i+19] | rolling_max[i+20] | rolling_max[i+21] | rolling_max[i+22]\
    \ | rolling_max[i+23] | rolling_max[i+24] | rolling_max[i+25] | rolling_max[i+26]\
    \ | rolling_max[i+27] | rolling_max[i+28] | rolling_max[i+29] | rolling_max[i+30]\
    \ | rolling_max[i+31] | rolling_max[i+32] | rolling_max[i+33] | rolling_max[i+34]\
    \ | rolling_max[i+35] | rolling_max[i+36] | rolling_max[i+37] | rolling_max[i+38]\
    \ | rolling_max[i+39] | rolling_max[i+40] | rolling_max[i+41] | rolling_max[i+42]\
    \ | rolling_max[i+43] | rolling_max[i+44] | rolling_max[i+45] | rolling_max[i+46]\
    \ | rolling_max[i+47] | rolling_max[i+48] | rolling_max[i+49] | rolling_max[i+50]\
    \ | rolling_max[i+51] | rolling_max[i+52] | rolling_max[i+53] | rolling_max[i+54]\
    \ | rolling_max[i+55] | rolling_max[i+56] | rolling_max[i+57] | rolling_max[i+58]\
    \ | rolling_max[i+59] | rolling_max[i+60] | rolling_max[i+61] | rolling_max[i+62]\
    \ | rolling_max[i+63] | rolling_max[i+64] | rolling_max[i+65] | rolling_max[i+66]\
    \ | rolling_max[i+67] | rolling_max[i+68] | rolling_max[i+69] | rolling_\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxnc6d4v5.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxnc6d4v5.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list <- Vector{Int64}(undef, 0)\n    \n    for number\
    \ in numbers\n        rolling_max_list <- push!(rolling_max_list, maximum(rolling_max_list,\
    \ number))\n    end\n    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpaidj5yah.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpaidj5yah.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list[1] = numbers[1]\n\
    \    for i = 2:length(numbers)\n        if numbers[i] > rolling_max_list[i-1]\n\
    \            rolling_max_list[i] = numbers[i]\n        else\n            rolling_max_list[i]\
    \ = rolling_max_list[i-1]\n        end\n    end\n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgtwgwsjw.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgtwgwsjw.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list.append(numbers[1])\n\
    \    for n in numbers[2:end]\n        if n > rolling_max_list[1]\n           \
    \ rolling_max_list.append(n)\n        end\n    end\n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsq6igx7q.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsq6igx7q.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = Vector{Int64}()\n    \n    for number in numbers\n\
    \        rolling_max_list = push!(rolling_max_list, maximum(rolling_max_list,\
    \ number))\n    end\n    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<text>\nExercise\nWrite a function\
    \ that generates the rolling mean of a given list of integers, given an initial\
    \ window size.\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjc_coatl.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjc_coatl.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpuxr_zmsc.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpuxr_zmsc.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpuxr_zmsc.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3hjd9nqz.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp3hjd9nqz.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp3hjd9nqz.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_array = zeros(length(numbers))\n    rolling_max_array[1] =\
    \ numbers[1]\n    for i = 2:length(numbers)\n        rolling_max_array[i] = max(numbers[i-1],\
    \ numbers[i])\n    end\n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpypy0gh9w.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpypy0gh9w.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list[1] = numbers[1]\n\
    \    for i = 2:length(numbers)\n        rolling_max_list[i] = maximum(rolling_max_list[i-1],\
    \ numbers[i])\n    end\n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmhbgqa86.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmhbgqa86.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list.append(numbers[1])\n\
    \    for n in numbers[2:end]\n        if n > rolling_max_list[1]\n           \
    \ rolling_max_list = Vector{Int64}([rolling_max_list[1], n])\n        else\n \
    \           rolling_max_list = Vector{Int64}([n, rolling_max_list[1]])\n     \
    \   end\n    end\n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphryvo4dr.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphryvo4dr.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbdd2qqb5.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbdd2qqb5.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[1]\n    for n in numbers[2:end]\n        if n >\
    \ rolling_max\n            rolling_max = n\n        end\n    end\n    return rolling_max\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpebf5c6m8.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpebf5c6m8.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list[1] = numbers[1]\n\
    \    for i = 2:length(numbers)\n        if numbers[i] > rolling_max_list[i-1]\n\
    \            rolling_max_list[i] = numbers[i]\n        else\n            rolling_max_list[i]\
    \ = rolling_max_list[i-1]\n        end\n    end\n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmbp31gi5.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmbp31gi5.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list = rolling_max_list\
    \ + numbers\n    rolling_max_list = rolling_max_list[2:end]\n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt_9xxpjy.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpt_9xxpjy.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}(undef, 0)\n    rolling_max_list[1] =\
    \ numbers[1]\n    for i = 2:length(numbers)\n        rolling_max_list[i] = max(numbers[i-1],\
    \ rolling_max_list[i-1])\n    end\n    return rolling_max_list\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfcb2u5k6.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfcb2u5k6.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list = numbers[:]\n\
    \    rolling_max_list.sort()\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi86t24f9.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpi86t24f9.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n\
    \        rolling_max = max(rolling_max, n)\n    end\n    \n    return rolling_max\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6_g5qec6.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6_g5qec6.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = Vector{Int64}()\n    \n    for n in numbers\n\
    \        rolling_max_list = push!(rolling_max_list, maximum(n))\n    end\n   \
    \ \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.4>\nrolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n</cell>\n<text>\nExercise 2\nWrite a function that generates\
    \ a rolling average of a given list of integers, given an window size.\nThe function\
    \ should return a list of floats.\nThe function should take as input a list of\
    \ integers and an integer $k$, and return a list of floats.\nThe function should\
    \ return a list of floats.\nThe function should return a list of floats.\nThe\
    \ function should return a list of floats.\nThe function should return a list\
    \ of floats.\nThe function should return a list of floats.\nThe function should\
    \ return a list of floats.\nThe function should return a list of floats.\nThe\
    \ function should return a list of floats.\nThe function should return a list\
    \ of floats.\nThe function should return a list of floats.\nThe function should\
    \ return a list of floats.\nThe function should return a list of floats.\nThe\
    \ function should return a list of floats.\nThe function should return a list\
    \ of floats.\nThe function should return a list of floats.\nThe function should\
    \ return a list of floats.\nThe function should return a list of floats.\nThe\
    \ function should return a list of floats.\nThe function should return a list\
    \ of floats.\nThe function should return a list of floats.\nThe function should\
    \ return a list of floats.\nThe function should return a list of floats.\nThe\
    \ function should return a list of floats.\nThe function should return a list\
    \ of floats.\nThe function should return a list of floats.\nThe function should\
    \ return a list of floats.\nThe function should return a list of floats.\nThe\
    \ function should return a list of floats.\nThe function should return a list\
    \ of floats.\nThe function should return a list of floats.\nThe function should\
    \ return a list of floats.\nThe function should return a list of floats.\nThe\
    \ function should return a list of floats.\nThe function should return a list\
    \ of floats.\nThe function should return a list of floats.\nThe function should\
    \ return a list of floats.\nThe function should return a list of floats.\nThe\
    \ function should return a list of floats.\nThe function should return a list\
    \ of floats.\nThe function should return a list of floats.\nThe function should\
    \ return a list of floats.\nThe function should return a list of floats.\nThe\
    \ function should return a list of floats.\nThe function should return a list\
    \ of floats.\nThe function should return a list of floats.\nThe function should\
    \ return a list of floats.\nThe function should return a list of floats.\nThe\
    \ function should return a list of floats.\nThe function should return a list\
    \ of floats.\n\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprothpfto.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprothpfto.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[1]\n    for n in numbers[2:end]\n        if n >\
    \ rolling_max\n            rolling_max = n\n        end\n    end\n    return rolling_max\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxv3t68rs.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxv3t68rs.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list[1] = numbers[1]\n\
    \    for i = 2:length(numbers)\n        if numbers[i] > rolling_max_list[i-1]\n\
    \            rolling_max_list[i] = numbers[i]\n        else\n            rolling_max_list[i]\
    \ = rolling_max_list[i-1]\n        end\n    end\n    return rolling_max_list\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nThis can be done with one line\
    \ using Julia 1.5.0:\n<code>\njulia> using Statistics\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5_7r4t3j.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5_7r4t3j.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list = rolling_max_list\
    \ + numbers\n    rolling_max_list = rolling_max_list[2:end]\n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpie8kx8a_.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpie8kx8a_.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = Vector{Int64}()\n    \n    for number in numbers\n\
    \        \n        if number > rolling_max_list[end]\n            rolling_max_list\
    \ += number\n        end\n    end\n    \n    return rolling_max_list\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that generates a list of rolling minimum\
    \ element found until given moment in the sequence.\n>>> rolling_min([1, 2, 3,\
    \ 2, 3, 4, 2])\n[1, 2, 3, 3, 3, 4, 2]\n</text>\nusing Test\n\n@testset begin\n\
    \ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo8ayrg4u.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpo8ayrg4u.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n\
    \        push!(rolling_max_list, maximum(rolling_max_list, n))\n    end\n    \n\
    \    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2n03w4p5.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2n03w4p5.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = Vector{Int64}(undef, 0)\n    \n    for number\
    \ in numbers\n        rolling_max_list = push!(rolling_max_list, maximum(rolling_max_list,\
    \ number))\n    end\n    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\n\
    rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpys0ajqbt.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpys0ajqbt.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list = rolling_max_list\
    \ + numbers\n    rolling_max_list = rolling_max_list[length(rolling_max_list):end]\n\
    \    return rolling_max_list\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\
    \n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpssp61al6.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpssp61al6.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n\
    \        rolling_max = [max(rolling_max[i], n) for i in 1:length(rolling_max)]\n\
    \    end\n    \n    return rolling_max\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy8io0uyp.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpy8io0uyp.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list = copy(numbers)\n\
    \    for i = 1:length(numbers)\n        rolling_max_list[i] = maximum(rolling_max_list[i-1:i+1])\n\
    \    end\n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpenynm56m.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpenynm56m.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list <- Vector{Int64}(undef, 0)\n    \n    for number\
    \ in numbers\n        rolling_max_list <- append(rolling_max_list, maximum(rolling_max_list,\
    \ number))\n    end\n    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5kbhexi1.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5kbhexi1.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n\
    \        rolling_max_list = push!(rolling_max_list, maximum(rolling_max_list,\
    \ n))\n    end\n    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\n\
    rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and a window size and returns a vector of rolling\
    \ means.\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_b9vnvx9.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_b9vnvx9.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprtci5kti.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmprtci5kti.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmprtci5kti.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = Vector{Int64}()\n    \n    for number in numbers\n\
    \        rolling_max_list = append(rolling_max_list, maximum(rolling_max_list,\
    \ number))\n    end\n    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.4>\n\
    rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that generates a vector with all the prime numbers less than a given number\
    \ $n$. \nThe function should return $n$ if $n$ is not a prime number.\nusing Test\n\
    \n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpw2ya3u2k.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpw2ya3u2k.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n      \
    \  if n > rolling_max\n            rolling_max = n\n        end\n    end\n   \
    \ \n    return rolling_max\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt8998d1n.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpt8998d1n.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list = rolling_max_list\
    \ + numbers\n    rolling_max_list = rolling_max_list[2:end]\n    return rolling_max_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwg06j0id.jl:18\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(4),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape at ./indices.jl:178 [inlined]\n\
    \   [2] promote_shape at ./indices.jl:169 [inlined]\n   [3] +(::Array{Int64,1},\
    \ ::Array{Int64,1}) at ./arraymath.jl:45\n   [4] rolling_max(::Array{Int64,1})\
    \ at /tmp/tmpwg06j0id.jl:8\n   [5] top-level scope at /tmp/tmpwg06j0id.jl:18\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpwg06j0id.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmpwg06j0id.jl:19\n  Test threw exception\n  Expression: candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n  DimensionMismatch(\"dimensions must match: a has\
    \ dims (Base.OneTo(0),), b has dims (Base.OneTo(4),), mismatch at 1\")\n  Stacktrace:\n\
    \   [1] promote_shape at ./indices.jl:178 [inlined]\n   [2] promote_shape at ./indices.jl:169\
    \ [inlined]\n   [3] +(::Array{Int64,1}, ::Array{Int64,1}) at ./arraymath.jl:45\n\
    \   [4] rolling_max(::Array{Int64,1}) at /tmp/tmpwg06j0id.jl:8\n   [5] top-level\
    \ scope at /tmp/tmpwg06j0id.jl:19\n   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpwg06j0id.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmpwg06j0id.jl:20\n  Test threw exception\n  Expression: candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  DimensionMismatch(\"dimensions must\
    \ match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(5),), mismatch at\
    \ 1\")\n  Stacktrace:\n   [1] promote_shape at ./indices.jl:178 [inlined]\n  \
    \ [2] promote_shape at ./indices.jl:169 [inlined]\n   [3] +(::Array{Int64,1},\
    \ ::Array{Int64,1}) at ./arraymath.jl:45\n   [4] rolling_max(::Array{Int64,1})\
    \ at /tmp/tmpwg06j0id.jl:8\n   [5] top-level scope at /tmp/tmpwg06j0id.jl:20\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpwg06j0id.jl:16\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwg06j0id.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n\
    \        push!(rolling_max, maximum(rolling_max))\n    end\n    \n    return rolling_max\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn2j6v3qh.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpn2j6v3qh.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list = rolling_max_list\
    \ + numbers\n    rolling_max_list = rolling_max_list + rolling_max(numbers[2:end])\n\
    \    return rolling_max_list\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpxmpgniar.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] Array at ./boot.jl:405 [inlined]\n   [2] Array at ./boot.jl:414\
    \ [inlined]\n   [3] Array at ./boot.jl:422 [inlined]\n   [4] similar at ./abstractarray.jl:671\
    \ [inlined]\n   [5] similar at ./abstractarray.jl:670 [inlined]\n   [6] similar\
    \ at ./broadcast.jl:196 [inlined]\n   [7] copy at ./broadcast.jl:840 [inlined]\n\
    \   [8] materialize at ./broadcast.jl:820 [inlined]\n   [9] broadcast_preserving_zero_d\
    \ at ./broadcast.jl:809 [inlined]\n   [10] +(::Array{Int64,1}, ::Array{Int64,1})\
    \ at ./arraymath.jl:47\n   [11] rolling_max(::Array{Int64,1}) at /tmp/tmpxmpgniar.jl:8\n\
    \   [12] rolling_max(::Array{Int64,1}) at /tmp/tmpxmpgniar.jl:9 (repeats 52308\
    \ times)\n   [13] top-level scope at /tmp/tmpxmpgniar.jl:17\n   [14] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [15] top-level scope at /tmp/tmpxmpgniar.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmpxmpgniar.jl:18\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n  DimensionMismatch(\"dimensions must match: a has\
    \ dims (Base.OneTo(0),), b has dims (Base.OneTo(4),), mismatch at 1\")\n  Stacktrace:\n\
    \   [1] promote_shape at ./indices.jl:178 [inlined]\n   [2] promote_shape at ./indices.jl:169\
    \ [inlined]\n   [3] +(::Array{Int64,1}, ::Array{Int64,1}) at ./arraymath.jl:45\n\
    \   [4] rolling_max(::Array{Int64,1}) at /tmp/tmpxmpgniar.jl:8\n   [5] top-level\
    \ scope at /tmp/tmpxmpgniar.jl:18\n   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpxmpgniar.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmpxmpgniar.jl:19\n  Test threw exception\n  Expression: candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n  DimensionMismatch(\"dimensions must match: a has\
    \ dims (Base.OneTo(0),), b has dims (Base.OneTo(4),), mismatch at 1\")\n  Stacktrace:\n\
    \   [1] promote_shape at ./indices.jl:178 [inlined]\n   [2] promote_shape at ./indices.jl:169\
    \ [inlined]\n   [3] +(::Array{Int64,1}, ::Array{Int64,1}) at ./arraymath.jl:45\n\
    \   [4] rolling_max(::Array{Int64,1}) at /tmp/tmpxmpgniar.jl:8\n   [5] top-level\
    \ scope at /tmp/tmpxmpgniar.jl:19\n   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpxmpgniar.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmpxmpgniar.jl:20\n  Test threw exception\n  Expression: candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  DimensionMismatch(\"dimensions must\
    \ match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(5),), mismatch at\
    \ 1\")\n  Stacktrace:\n   [1] promote_shape at ./indices.jl:178 [inlined]\n  \
    \ [2] promote_shape at ./indices.jl:169 [inlined]\n   [3] +(::Array{Int64,1},\
    \ ::Array{Int64,1}) at ./arraymath.jl:45\n   [4] rolling_max(::Array{Int64,1})\
    \ at /tmp/tmpxmpgniar.jl:8\n   [5] top-level scope at /tmp/tmpxmpgniar.jl:20\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpxmpgniar.jl:16\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxmpgniar.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list.append(numbers[1])\n\
    \    for n in numbers[2:end]\n        if n > rolling_max_list[1]\n           \
    \ rolling_max_list.append(n)\n        end\n    end\n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmph6_bkk4f.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmph6_bkk4f.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    rolling_max\nend\n</cell>\n<text>\nThe function\
    \ rolling_max is defined above. Let's see how it works:\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpseiydlza.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpseiydlza.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_array = Array{Int64}(length(numbers), length(numbers))\n \
    \   for i = 1:length(numbers)\n        rolling_max_array[i, :] = maximum(numbers[i:i+length(numbers)])\n\
    \    end\n    return rolling_max_array\nend\n</code>\n<|/ a tags=julia,arrays,performance\
    \ |>\n<| a dscore=1 |>\nA bit late to the party, but here's a solution using broadcasting\
    \ and the built-in maximum:\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6o__xy_j.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6o__xy_j.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list <- Vector{Int64}()\n    rolling_max_list <- numbers[end]\n\
    \    for number in numbers[2:end]\n        rolling_max_list <- max(rolling_max_list,\
    \ number)\n    end\n    rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpc61dg7sn.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpc61dg7sn.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = Vector{Int64}()\n    \n    for n in numbers\n\
    \        rolling_max_list = push!(rolling_max_list, maximum(rolling_max_list,\
    \ n))\n    end\n    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzi86yddo.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzi86yddo.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list.append(numbers[1])\n\
    \    for n in numbers[2:end]\n        rolling_max_list.append(max(rolling_max_list[-1],\
    \ rolling_max_list[n-1]))\n    end\n    rolling_max_list\nend\n</cell>\n<code\
    \ language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp64dpms59.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp64dpms59.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpve9iwj6e.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpve9iwj6e.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphgsjeh0e.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphgsjeh0e.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6yiyjat7.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6yiyjat7.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n\
    \        rolling_max_list = rolling_max_list + [rolling_max(rolling_max_list)]\n\
    \    end\n    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpycj5cbaq.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpycj5cbaq.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list.append(numbers[1])\n\
    \    for n in numbers[2:end]\n        if n > rolling_max_list[1]\n           \
    \ rolling_max_list = Vector{Int64}([n, rolling_max_list[1]])\n        end\n  \
    \  end\n    rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl8pf1je2.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpl8pf1je2.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}(undef, 0)\n    rolling_max_list[1] =\
    \ numbers[1]\n    for i = 2:length(numbers)\n        if numbers[i] > rolling_max_list[i-1]\n\
    \            rolling_max_list[i] = numbers[i]\n        else\n            rolling_max_list[i]\
    \ = rolling_max_list[i-1]\n        end\n    end\n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8dflvl89.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8dflvl89.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_rolling_window(numbers, length(numbers), 1)\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphcoomym5.jl:9\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphcoomym5.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = Vector{Int64}()\n    \n    for number in numbers\n\
    \        rolling_max_list = rolling_max_list + [number]\n    end\n    \n    return\
    \ rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsuxm1pvz.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsuxm1pvz.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list = rolling_max_list\
    \ + numbers\n    rolling_max_list = rolling_max_list + rolling_max_list\n    rolling_max_list\
    \ = rolling_max_list + rolling_max_list\n    rolling_max_list = rolling_max_list\
    \ + rolling_max_list\n    rolling_max_list = rolling_max_list + rolling_max_list\n\
    \    rolling_max_list = rolling_max_list + rolling_max_list\n    rolling_max_list\
    \ = rolling_max_list + rolling_max_list\n    rolling_max_list = rolling_max_list\
    \ + rolling_max_list\n    rolling_max_list = rolling_max_list + rolling_max_list\n\
    \    rolling_max_list = rolling_max_list + rolling_max_list\n    rolling_max_list\
    \ = rolling_max_list + rolling_max_list\n    rolling_max_list = rolling_max_list\
    \ + rolling_max_list\n    rolling_max_list = rolling_max_list + rolling_max_list\n\
    \    rolling_max_list = rolling_max_list + rolling_max_list\n    rolling_max_list\
    \ = rolling_max_list + rolling_max_list\n    rolling_max_list = rolling_max_list\
    \ + rolling_max_list\n    rolling_max_list = rolling_max_list + rolling_max_list\n\
    \    rolling_max_list = rolling_max_list + rolling_max_list\n    rolling_max_list\
    \ = rolling_max_list + rolling_max_list\n    rolling_max_list = rolling_max_list\
    \ + rolling_max_list\n    rolling_max_list = rolling_max_list + rolling_max_list\n\
    \    rolling_max_list = rolling_max_list + rolling_max_list\n    rolling_max_list\
    \ = rolling_max_list + rolling_max_list\n    rolling_max_list = rolling_max_list\
    \ + rolling_max_list\n    rolling_max_list = rolling_max_list + rolling_max_list\n\
    \    rolling_max_list = rolling_max_list + rolling_max_list\n    rolling_max_list\
    \ = rolling_max_list + rolling_max_list\n    rolling_max_list = rolling_max_list\
    \ + rolling_max_list\n    rolling_max_list = rolling_max_list + rolling_max_list\n\
    \    rolling_max_list = rolling_max_list + rolling_max_list\n    rolling_max_list\
    \ = rolling_max_list + rolling_max_list\n    rolling_max_list = rolling_max_list\
    \ + rolling_max_list\n    rolling_max_list = rolling_max_list + rolling_max_list\n\
    \    rolling_max_list = rolling_max_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpefruw5an.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpefruw5an.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpefruw5an.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = Vector{Int64}()\n    \n    for i in numbers:\n\
    \        if rolling_max_list.length == 0 \n            rolling_max_list << i\n\
    \        elseif rolling_max_list.length > 0\n            if i > rolling_max_list[end]\n\
    \                rolling_max_list << i\n            else\n                rolling_max_list[end]\
    \ = i\n            end\n        end\n    end\n    \n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn2z409cw.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpn2z409cw.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_array = zeros(Int, length(numbers))\n    \n    for i\
    \ = 1:length(numbers)\n        rolling_max_array[i] = maximum(numbers[i:i+1])\n\
    \    end\n    \n    return rolling_max_array\nend\n</cell>\n<text>\nrolling_max\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpu8o2vixl.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpu8o2vixl.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n      \
    \  if n > rolling_max\n            rolling_max = n\n        end\n    end\n   \
    \ \n    return rolling_max\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfxpuwwou.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfxpuwwou.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list = rolling_max_list\
    \ + numbers\n    rolling_max_list = rolling_max_list[rolling_max_list!=numbers]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list!=numbers]\n    rolling_max_list\
    \ = rolling_max_list[rolling_max_list!=numbers]\n    rolling_max_list = rolling_max_list[rolling_max_list!=numbers]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list!=numbers]\n    rolling_max_list\
    \ = rolling_max_list[rolling_max_list!=numbers]\n    rolling_max_list = rolling_max_list[rolling_max_list!=numbers]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list!=numbers]\n    rolling_max_list\
    \ = rolling_max_list[rolling_max_list!=numbers]\n    rolling_max_list = rolling_max_list[rolling_max_list!=numbers]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list!=numbers]\n    rolling_max_list\
    \ = rolling_max_list[rolling_max_list!=numbers]\n    rolling_max_list = rolling_max_list[rolling_max_list!=numbers]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list!=numbers]\n    rolling_max_list\
    \ = rolling_max_list[rolling_max_list!=numbers]\n    rolling_max_list = rolling_max_list[rolling_max_list!=numbers]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list!=numbers]\n    rolling_max_list\
    \ = rolling_max_list[rolling_max_list!=numbers]\n    rolling_max_list = rolling_max_list[rolling_max_list!=numbers]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list!=numbers]\n    rolling_max_list\
    \ = rolling_max_list[rolling_max_list!=numbers]\n    rolling_max_list = rolling_max_list[rolling_max_list!=numbers]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list!=numbers]\n    rolling_max_list\
    \ = rolling_max_list[rolling_max_list!=numbers]\n    rolling_max_list = rolling_max_list[rolling_max_list!=numbers]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_list!=numbers]\n    rolling_max_list\
    \ = rolling_max_list[rolling_max_list!=numbers]\n    rolling_max_list = rolling_max_list[rolling_max_list!=numbers]\n\
    \    rolling_max_list = rolling_max_list[rolling_max_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpc_cn06be.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpc_cn06be.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list <- []\n    \n    for n in numbers\n        \n \
    \       if rolling_max_list.length == 0\n            rolling_max_list <- n\n \
    \       else\n            if n > rolling_max_list\n                rolling_max_list\
    \ <- n\n            end\n        end\n    end\n    \n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmuodh04t.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmuodh04t.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n\
    \        rolling_max = max(n, rolling_max)\n    end\n    \n    return rolling_max\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpep52hfq7.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpep52hfq7.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpim47bn2b.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpim47bn2b.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max = numbers[1]\n    for n in numbers[2:end]\n        if\
    \ n > rolling_max\n            rolling_max = n\n        end\n    end\n    \n \
    \   return rolling_max\nend\n</cell>\n<text>\nRolling average\nThe rolling average\
    \ is calculated using the following formula:\nusing Test\n\n@testset begin\n\n\
    candidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl5wxr_q_.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpl5wxr_q_.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list = rolling_max_list\
    \ + numbers\n    \n    rolling_max_list = rolling_max_list[2:end]\n    \n    return\
    \ rolling_max_list\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpf3ksy1w_.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(4),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape at ./indices.jl:178 [inlined]\n\
    \   [2] promote_shape at ./indices.jl:169 [inlined]\n   [3] +(::Array{Int64,1},\
    \ ::Array{Int64,1}) at ./arraymath.jl:45\n   [4] rolling_max(::Array{Int64,1})\
    \ at /tmp/tmpf3ksy1w_.jl:9\n   [5] top-level scope at /tmp/tmpf3ksy1w_.jl:21\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpf3ksy1w_.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpf3ksy1w_.jl:22\n  Test threw exception\n  Expression: candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n  DimensionMismatch(\"dimensions must match: a has\
    \ dims (Base.OneTo(0),), b has dims (Base.OneTo(4),), mismatch at 1\")\n  Stacktrace:\n\
    \   [1] promote_shape at ./indices.jl:178 [inlined]\n   [2] promote_shape at ./indices.jl:169\
    \ [inlined]\n   [3] +(::Array{Int64,1}, ::Array{Int64,1}) at ./arraymath.jl:45\n\
    \   [4] rolling_max(::Array{Int64,1}) at /tmp/tmpf3ksy1w_.jl:9\n   [5] top-level\
    \ scope at /tmp/tmpf3ksy1w_.jl:22\n   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpf3ksy1w_.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmpf3ksy1w_.jl:23\n  Test threw exception\n  Expression: candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  DimensionMismatch(\"dimensions must\
    \ match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(5),), mismatch at\
    \ 1\")\n  Stacktrace:\n   [1] promote_shape at ./indices.jl:178 [inlined]\n  \
    \ [2] promote_shape at ./indices.jl:169 [inlined]\n   [3] +(::Array{Int64,1},\
    \ ::Array{Int64,1}) at ./arraymath.jl:45\n   [4] rolling_max(::Array{Int64,1})\
    \ at /tmp/tmpf3ksy1w_.jl:9\n   [5] top-level scope at /tmp/tmpf3ksy1w_.jl:23\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpf3ksy1w_.jl:19\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf3ksy1w_.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1vbxc70i.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp1vbxc70i.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp1vbxc70i.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list[1] = numbers[1]\n\
    \    for i = 2:length(numbers)\n        rolling_max_list[i] = max(numbers[i],\
    \ rolling_max_list[i-1])\n    end\n    return rolling_max_list\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvnzaqiwe.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvnzaqiwe.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = Vector{Int64}()\n    \n    for number in numbers\n\
    \        rolling_max_list = append!(rolling_max_list, maximum(rolling_max_list,\
    \ number))\n    end\n    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwij_l8r0.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwij_l8r0.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgxd5wdep.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgxd5wdep.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list = copy(numbers)\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\nusing Test\n\n@testset begin\n\
    \ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp49r2u13c.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp49r2u13c.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp49r2u13c.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    maximum = numbers[1]\n    \n    for n in numbers[2:end]\n      \
    \  if n > maximum\n            maximum = n\n        end\n    end\n    \n    return\
    \ maximum\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp41u_laty.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp41u_laty.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n\
    \        if rolling_max == Vector{Int64}(undef, 0)\n            rolling_max =\
    \ n\n        else\n            if n > rolling_max\n                rolling_max\
    \ = n\n            end\n        end\n    end\n    \n    return rolling_max\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the first n elements of the vector.\n\
    For example, given [1,2,3,4,5], the function should return 25.\nusing Test\n\n\
    @testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp9cd7e7s.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpp9cd7e7s.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_idx = 1\n    rolling_max_value = numbers[1]\n    \n    for\
    \ number in numbers[2:end]\n        if number > rolling_max_value\n          \
    \  rolling_max_value = number\n            rolling_max_idx = 1\n        else\n\
    \            rolling_max_idx += 1\n        end\n    end\n    \n    rolling_max_idx\
    \ = rolling_max_idx + 1\n    \n    rolling_max_value = rolling_max_value + numbers[end]\n\
    \    \n    rolling_max_idx = rolling_max_idx + 1\n    \n    return numbers[rolling_max_idx:end]\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7llke2ek.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7llke2ek.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}(undef, 0)\n    rolling_max_list[1] =\
    \ numbers[1]\n    for i = 2:length(numbers)\n        if numbers[i] > rolling_max_list[i-1]\n\
    \            rolling_max_list[i] = numbers[i]\n        end\n    end\n    return\
    \ rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxc_q7s0u.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxc_q7s0u.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_array = zeros(length(numbers))\n    \n    for i = 1:length(numbers)\n\
    \        rolling_max_array[i] = maximum(numbers[i:i+length(numbers)])\n    end\n\
    \    \n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n\nusing Test\n\n@testset begin\n\
    \ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpa378fhym.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpa378fhym.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list.append(numbers[1])\n\
    \    for n in numbers[2:end]\n        if rolling_max_list[-1] < n\n          \
    \  rolling_max_list.append(n)\n        end\n    end\n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdaeoxpy6.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdaeoxpy6.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_array = zeros(Int, length(numbers))\n    rolling_max_array[1]\
    \ = numbers[1]\n    for i = 2:length(numbers)\n        rolling_max_array[i] =\
    \ max(rolling_max_array[i-1], numbers[i])\n    end\n    return rolling_max_array\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphza7421t.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphza7421t.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6fk5tzzg.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6fk5tzzg.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpg8wgp0xo.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpg8wgp0xo.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpg8wgp0xo.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list = rolling_max_list\
    \ + numbers\n    rolling_max_list = rolling_max_list[rolling_max_list!=numbers]\n\
    \    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprdcllhc0.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprdcllhc0.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    local max_element = 0\n    local max_index = 0\n    local max_count\
    \ = 0\n    local max_rolling_count = 0\n    local max_rolling_sum = 0\n    \n\
    \    for i = 1:length(numbers)\n        if numbers[i] > max_element\n        \
    \    then\n                max_element = numbers[i]\n                max_index\
    \ = i\n                max_count = 1\n                max_rolling_count = 0\n\
    \                max_rolling_sum = 0\n            else\n                max_count\
    \ = max_count + 1\n                max_rolling_count = max_rolling_count + 1\n\
    \                max_rolling_sum = max_rolling_sum + numbers[i]\n            end\n\
    \        end\n    end\n    \n    if max_count > max_rolling_count\n        then\n\
    \            max_rolling_count = max_count\n            max_rolling_sum = max_rolling_sum\n\
    \        end\n    \n    return max_rolling_sum\nend\n</cell>\n<text>\nrolling_sum\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: max_count not defined\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp75jc3u9e.jl:30\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp75jc3u9e.jl:30\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}(undef, 0)\n    rolling_max_list[1] =\
    \ numbers[1]\n    for i = 2:length(numbers)\n        rolling_max_list[i] = max(numbers[i-1],\
    \ rolling_max_list[i-1])\n    end\n    return rolling_max_list\nend\n</cell>\n\
    <text>\nrolling_max_index\nThe function rolling_max_index returns the index of\
    \ the rolling maximum element found until a given moment in the sequence.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg75nwzy5.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpg75nwzy5.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = Vector{Int64}(undef, 0)\n    \n    for number\
    \ in numbers\n        rolling_max_list = push!(rolling_max_list, maximum(rolling_max_list,\
    \ number))\n    end\n    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj9qiioap.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpj9qiioap.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_result = Vector{Int64}()\n    rolling_max_result[1] = numbers[1]\n\
    \    for i = 2:length(numbers)\n        if numbers[i] > rolling_max_result[i-1]\n\
    \            rolling_max_result[i] = numbers[i]\n        else\n            rolling_max_result[i]\
    \ = rolling_max_result[i-1]\n        end\n    end\n    return rolling_max_result\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd3l68ioc.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpd3l68ioc.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    local max_rolling = 0\n    local max_rolling_pos = 0\n    local\
    \ max_rolling_neg = 0\n    local max_rolling_neg_inc = 0\n    local max_rolling_neg_inc_pos\
    \ = 0\n    local max_rolling_neg_inc_neg = 0\n    local max_rolling_neg_inc_neg_inc\
    \ = 0\n    local max_rolling_neg_inc_neg_inc_pos = 0\n    local max_rolling_neg_inc_neg_inc_neg\
    \ = 0\n    local max_rolling_neg_inc_neg_inc_neg_inc = 0\n    local max_rolling_neg_inc_neg_inc_neg_inc_pos\
    \ = 0\n    local max_rolling_neg_inc_neg_inc_neg_inc_neg = 0\n    local max_rolling_neg_inc_neg_inc_neg_inc_neg_inc\
    \ = 0\n    local max_rolling_neg_inc_neg_inc_neg_inc_neg_inc_pos = 0\n    local\
    \ max_rolling_neg_inc_neg_inc_neg_inc_neg_inc_neg = 0\n    local max_rolling_neg_inc_neg_inc_neg_inc_neg_inc_neg_inc\
    \ = 0\n    local max_rolling_neg_inc_neg_inc_neg_inc_neg_inc_neg_inc_pos = 0\n\
    \    local max_rolling_neg_inc_neg_inc_neg_inc_neg_inc_neg_inc_neg = 0\n    local\
    \ max_rolling_neg_inc_neg_inc_neg_inc_neg_inc_neg_inc_neg_inc = 0\n    local max_rolling_neg_inc_neg_inc_neg_inc_neg_inc_neg_inc_neg_inc_pos\
    \ = 0\n    local max_rolling_neg_inc_neg_inc_neg_inc_neg_inc_neg_inc_neg_inc_neg\
    \ = 0\n    local max_rolling_neg_inc_neg_inc_neg_inc_neg_inc_neg_inc_neg_inc_neg_inc\
    \ = 0\n    local max_rolling_neg_inc_neg_inc_neg_inc_neg_inc_neg_inc_neg_inc_neg_inc_pos\
    \ = 0\n    local max_rolling_neg_inc_neg_inc_neg_inc_neg_inc_neg_inc_neg_inc_neg_inc_neg\
    \ = 0\n    local max_rolling_neg_inc_neg_inc_neg_inc_neg_inc_neg_inc_neg_inc_neg_inc_neg_inc\
    \ = 0\n    local max_rolling_neg_inc_neg_inc_neg_inc_neg_inc_neg_inc_neg_inc_neg_inc_neg_inc_pos\
    \ = 0\n    local max_rolling_neg_inc_neg_inc_\nusing Test\n\n@testset begin\n\n\
    candidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyulmxgit.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpyulmxgit.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpyulmxgit.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n\
    \        rolling_max_list = append!(rolling_max_list, rolling_max(n))\n    end\n\
    \    \n    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\n\
    rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that generates the cumulative sum of a given vector.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_bqtp0de.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_bqtp0de.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}(undef, 0)\n    rolling_max_list[1] =\
    \ numbers[1]\n    for i = 2:length(numbers)\n        if numbers[i] > rolling_max_list[i-1]\n\
    \            rolling_max_list[i] = numbers[i]\n        else\n            rolling_max_list[i]\
    \ = rolling_max_list[i-1]\n        end\n    end\n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpe342dmov.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpe342dmov.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n      \
    \  rolling_max = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjty6xi6v.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjty6xi6v.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}(undef, 0)\n    rolling_max_list = rolling_max_list\
    \ + numbers\n    rolling_max_list = rolling_max_list[length(rolling_max_list):end]\n\
    \    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_ua8utex.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_ua8utex.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list = copy(numbers)\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\n    rolling_max_list = rolling_max_list[2:end]\n\
    \    rolling_max_list = rolling_max_list[2:end]\nusing Test\n\n@testset begin\n\
    \ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqgfl9o4p.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpqgfl9o4p.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpqgfl9o4p.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list.append(numbers[1])\n\
    \    for i in 2:length(numbers)\n        if numbers[i] > rolling_max_list[i-1]\n\
    \            rolling_max_list.append(numbers[i])\n        end\n    end\n    return\
    \ rolling_max_list\nend\n</code>\n<|/ a tags=julia,arrays |>\n<| c |>\nI believe\
    \ this should be the accepted answer. Although it uses `@view`, it also uses `@view`\
    \ which should be avoided when possible. Also, `@view` should be avoided when\
    \ possible, since it can lead to unexpected behavior. For example, `@view a =\
    \ [1,2,3]; a[1] = 2; a` will result in `a = [1,2,3]`, but `a[1] = 2; a` will result\
    \ in `a = [1,2]`.\n<|/ c |>\n<| a tags=julia,arrays |>\nA simple and efficient\
    \ solution is to use an accumulator to keep track of the largest element seen\
    \ so far:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmph3q6h2p2.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmph3q6h2p2.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq_tp29pg.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpq_tp29pg.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpq_tp29pg.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxjrfnejq.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpxjrfnejq.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpxjrfnejq.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = Vector{Int64}(undef, 0)\n    rolling_max = numbers[end]\n\
    \    for n in numbers[2:end]\n        if n > rolling_max\n            rolling_max\
    \ = n\n        end\n    end\n    return rolling_max\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppmq2_1b2.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppmq2_1b2.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppwb7pqk2.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppwb7pqk2.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list = rolling_max_list\
    \ + numbers\n    rolling_max_list = rolling_max_list + rolling_max(numbers[2:end])\n\
    \    return rolling_max_list\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi73830rc.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpi73830rc.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_array = zeros(length(numbers))\n    rolling_max_array[1] =\
    \ numbers[1]\n    for i = 2:length(numbers)\n        rolling_max_array[i] = maximum(rolling_max_array[i-1:i+1],\
    \ numbers[i])\n    end\n    return rolling_max_array\nend\n</cell>\n<code language=julia-1.5>\n\
    @time rolling_max([1, 2, 3, 2, 3, 4, 2])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that generates a random permutation of integers from 1 to n (inclusive).\n\
    Hint: Use randperm()\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpw709sca0.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpw709sca0.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n      \
    \  if n > rolling_max\n            rolling_max = n\n        end\n    end\n   \
    \ \n    return rolling_max\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvfrag5ob.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvfrag5ob.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_array = zeros(Int, length(numbers))\n    for i = 1:length(numbers)\n\
    \        rolling_max_array[i] = maximum(rolling_max_array[i-1:i+1])\n    end\n\
    \    return rolling_max_array\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptpg39cyf.jl:19\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  BoundsError: attempt\
    \ to access 4-element Array{Int64,1} at index [0:2]\n  Stacktrace:\n   [1] throw_boundserror(::Array{Int64,1},\
    \ ::Tuple{UnitRange{Int64}}) at ./abstractarray.jl:537\n   [2] checkbounds at\
    \ ./abstractarray.jl:502 [inlined]\n   [3] getindex at ./array.jl:794 [inlined]\n\
    \   [4] rolling_max(::Array{Int64,1}) at /tmp/tmptpg39cyf.jl:9\n   [5] top-level\
    \ scope at /tmp/tmptpg39cyf.jl:19\n   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmptpg39cyf.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmptpg39cyf.jl:20\n  Test threw exception\n  Expression: candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n  BoundsError: attempt to access 4-element Array{Int64,1}\
    \ at index [0:2]\n  Stacktrace:\n   [1] throw_boundserror(::Array{Int64,1}, ::Tuple{UnitRange{Int64}})\
    \ at ./abstractarray.jl:537\n   [2] checkbounds at ./abstractarray.jl:502 [inlined]\n\
    \   [3] getindex at ./array.jl:794 [inlined]\n   [4] rolling_max(::Array{Int64,1})\
    \ at /tmp/tmptpg39cyf.jl:9\n   [5] top-level scope at /tmp/tmptpg39cyf.jl:20\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmptpg39cyf.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmptpg39cyf.jl:21\n  Test threw exception\n  Expression: candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  BoundsError: attempt to access 5-element\
    \ Array{Int64,1} at index [0:2]\n  Stacktrace:\n   [1] throw_boundserror(::Array{Int64,1},\
    \ ::Tuple{UnitRange{Int64}}) at ./abstractarray.jl:537\n   [2] checkbounds at\
    \ ./abstractarray.jl:502 [inlined]\n   [3] getindex at ./array.jl:794 [inlined]\n\
    \   [4] rolling_max(::Array{Int64,1}) at /tmp/tmptpg39cyf.jl:9\n   [5] top-level\
    \ scope at /tmp/tmptpg39cyf.jl:21\n   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmptpg39cyf.jl:17\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptpg39cyf.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    maximum = numbers[1]\n    \n    for n in numbers[2:end]\n      \
    \  if n > maximum\n            maximum = n\n        end\n    end\n    \n    return\
    \ maximum\nend\n</cell>\n<text>\nrolling_max\nusing Test\n\n@testset begin\n\n\
    candidate = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplzmwo62u.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplzmwo62u.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n\
    \        if n == rolling_max[1]\n            rolling_max[1] = n\n        else\n\
    \            if n > rolling_max[1]\n                rolling_max = Vector{Int64}(undef,\
    \ 0)\n                rolling_max[1] = n\n            end\n        end\n    end\n\
    \    \n    return rolling_max\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwuagqp4n.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwuagqp4n.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list = rolling_max_list\
    \ + numbers\n    rolling_max_list = rolling_max_list[length(rolling_max_list):end]\n\
    \    return rolling_max_list\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpw62pgxlc.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Array{Int64,1} at index [0:0]\n  Stacktrace:\n \
    \  [1] throw_boundserror(::Array{Int64,1}, ::Tuple{UnitRange{Int64}}) at ./abstractarray.jl:537\n\
    \   [2] checkbounds at ./abstractarray.jl:502 [inlined]\n   [3] getindex at ./array.jl:794\
    \ [inlined]\n   [4] rolling_max(::Array{Int64,1}) at /tmp/tmpw62pgxlc.jl:9\n \
    \  [5] top-level scope at /tmp/tmpw62pgxlc.jl:17\n   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpw62pgxlc.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmpw62pgxlc.jl:18\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n  DimensionMismatch(\"dimensions must match: a has\
    \ dims (Base.OneTo(0),), b has dims (Base.OneTo(4),), mismatch at 1\")\n  Stacktrace:\n\
    \   [1] promote_shape at ./indices.jl:178 [inlined]\n   [2] promote_shape at ./indices.jl:169\
    \ [inlined]\n   [3] +(::Array{Int64,1}, ::Array{Int64,1}) at ./arraymath.jl:45\n\
    \   [4] rolling_max(::Array{Int64,1}) at /tmp/tmpw62pgxlc.jl:8\n   [5] top-level\
    \ scope at /tmp/tmpw62pgxlc.jl:18\n   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpw62pgxlc.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmpw62pgxlc.jl:19\n  Test threw exception\n  Expression: candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n  DimensionMismatch(\"dimensions must match: a has\
    \ dims (Base.OneTo(0),), b has dims (Base.OneTo(4),), mismatch at 1\")\n  Stacktrace:\n\
    \   [1] promote_shape at ./indices.jl:178 [inlined]\n   [2] promote_shape at ./indices.jl:169\
    \ [inlined]\n   [3] +(::Array{Int64,1}, ::Array{Int64,1}) at ./arraymath.jl:45\n\
    \   [4] rolling_max(::Array{Int64,1}) at /tmp/tmpw62pgxlc.jl:8\n   [5] top-level\
    \ scope at /tmp/tmpw62pgxlc.jl:19\n   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpw62pgxlc.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmpw62pgxlc.jl:20\n  Test threw exception\n  Expression: candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  DimensionMismatch(\"dimensions must\
    \ match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(5),), mismatch at\
    \ 1\")\n  Stacktrace:\n   [1] promote_shape at ./indices.jl:178 [inlined]\n  \
    \ [2] promote_shape at ./indices.jl:169 [inlined]\n   [3] +(::Array{Int64,1},\
    \ ::Array{Int64,1}) at ./arraymath.jl:45\n   [4] rolling_max(::Array{Int64,1})\
    \ at /tmp/tmpw62pgxlc.jl:8\n   [5] top-level scope at /tmp/tmpw62pgxlc.jl:20\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpw62pgxlc.jl:16\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw62pgxlc.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7h39m7a9.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7h39m7a9.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n      \
    \  if n > rolling_max\n            rolling_max = n\n        end\n    end\n   \
    \ \n    return rolling_max\nend\n</cell>\n<text>\nrolling_max([1, 2, 3, 2, 3,\
    \ 4, 2])\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmnlgjw58.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmnlgjw58.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    rolling_max\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that generates a vector of rolling mean element found until\
    \ a given moment in the sequence.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1])\
    \ == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsntv1rd0.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsntv1rd0.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_iw3h8j9.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp_iw3h8j9.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp_iw3h8j9.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpccpabffm.jl:6\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpccpabffm.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpccpabffm.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyqfpjbx8.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyqfpjbx8.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = Vector{Int64}()\n    rolling_max_list = rolling_max_list\
    \ + numbers\n    \n    rolling_max_list = rolling_max_list[2:end]\n    \n    return\
    \ rolling_max_list\nend\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp68ua73dg.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(4),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape at ./indices.jl:178 [inlined]\n\
    \   [2] promote_shape at ./indices.jl:169 [inlined]\n   [3] +(::Array{Int64,1},\
    \ ::Array{Int64,1}) at ./arraymath.jl:45\n   [4] rolling_max(::Array{Int64,1})\
    \ at /tmp/tmp68ua73dg.jl:9\n   [5] top-level scope at /tmp/tmp68ua73dg.jl:21\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmp68ua73dg.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmp68ua73dg.jl:22\n  Test threw exception\n  Expression: candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n  DimensionMismatch(\"dimensions must match: a has\
    \ dims (Base.OneTo(0),), b has dims (Base.OneTo(4),), mismatch at 1\")\n  Stacktrace:\n\
    \   [1] promote_shape at ./indices.jl:178 [inlined]\n   [2] promote_shape at ./indices.jl:169\
    \ [inlined]\n   [3] +(::Array{Int64,1}, ::Array{Int64,1}) at ./arraymath.jl:45\n\
    \   [4] rolling_max(::Array{Int64,1}) at /tmp/tmp68ua73dg.jl:9\n   [5] top-level\
    \ scope at /tmp/tmp68ua73dg.jl:22\n   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmp68ua73dg.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmp68ua73dg.jl:23\n  Test threw exception\n  Expression: candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  DimensionMismatch(\"dimensions must\
    \ match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(5),), mismatch at\
    \ 1\")\n  Stacktrace:\n   [1] promote_shape at ./indices.jl:178 [inlined]\n  \
    \ [2] promote_shape at ./indices.jl:169 [inlined]\n   [3] +(::Array{Int64,1},\
    \ ::Array{Int64,1}) at ./arraymath.jl:45\n   [4] rolling_max(::Array{Int64,1})\
    \ at /tmp/tmp68ua73dg.jl:9\n   [5] top-level scope at /tmp/tmp68ua73dg.jl:23\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmp68ua73dg.jl:19\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp68ua73dg.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    rolling_max\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a list of integers and returns the sum of the\
    \ squares of the first $n$ elements.\n>>> sum_squares_first_n(numbers::Vector{Int64},\
    \ n::Int64)::Float64\nsum_squares_first_n(numbers, n) = sum((numbers[1:n]).^2)\n\
    end\nTest your function with $n = 2$ and $numbers = [1, 2, 3, 4, 5]$.\n>>> sum_squares_first_n(numbers,\
    \ 2)\n25.0\nTest your function with $n = 5$ and $numbers = [1, 2, 3, 4, 5]$.\n\
    >>> sum_squares_first_n(numbers, 5)\n1225.0\nTest your function with $n = 10$\
    \ and $numbers = [1, 2, 3, 4, 5]$.\n>>> sum_squares_first_n(numbers, 10)\n1225.0\n\
    Test your function with $n = 20$ and $numbers = [1, 2, 3, 4, 5]$.\n>>> sum_squares_first_n(numbers,\
    \ 20)\n1225.0\nTest your function with $n = 100$ and $numbers = [1, 2, 3, 4, 5]$.\n\
    >>> sum_squares_first_n(numbers, 100)\n1225.0\nTest your function with $n = 1000$\
    \ and $numbers = [1, 2, 3, 4, 5]$.\n>>> sum_squares_first_n(numbers, 1000)\n1225.0\n\
    Test your function with $n = 10000$ and $numbers = [1, 2, 3, 4, 5]$.\n>>> sum_squares_first_n(numbers,\
    \ 10000)\n1225.0\nTest your function with $n = 100000$ and $numbers = [1, 2, 3,\
    \ 4, 5]$.\n>>> sum_squares_first_n(numbers, 100000)\n1225.0\nTest your function\
    \ with $n = 1000000$ and $numbers = [1, 2, 3, 4, 5]$.\n>>> sum_squares_first_n(numbers,\
    \ 1000000)\n1225.0\nTest your function with $n = 10000000$ and $numbers = [1,\
    \ 2, 3, 4, 5]$.\n>>> sum_squares_first_n(numbers, 10000000)\n1225.0\nTest your\
    \ function with $n = 100000000$ and $numbers = [1, 2, 3, 4, 5]$.\n>>> sum_squares_first_n(numbers,\
    \ 100000000)\n1225.0\nTest your function with $n = 1000000000$ and $numbers =\
    \ [1, 2, 3, 4, 5]$.\n>>> sum_squares_first_n(numbers, 1000000000)\n1225.0\nTest\
    \ your function with $n = 10000000000$ and $numbers = [1, 2, 3, 4, 5]$.\n>>> sum_squares_first_n(numbers,\
    \ \nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpu91bxsl6.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpu91bxsl6.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max_list = []\n    \n    for number in numbers\n       \
    \ rolling_max_list.append(number)\n    end\n    \n    return rolling_max_list\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = rolling_max;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2,\
    \ 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100,\
    \ 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl_z4lab4.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpl_z4lab4.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9pq3kygb.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9pq3kygb.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    \n    rolling_max = Vector{Int64}(undef, 0)\n    \n    for n in numbers\n\
    \        if n > 0\n            push!(rolling_max, maximum(rolling_max[1:n]))\n\
    \        end\n    end\n    \n    return rolling_max\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that generates a random permutation of a given vector.\n\
    The function should take as input a vector of integers and output a vector of\
    \ integers containing the same elements but in a random order.\nThe function should\
    \ return nothing but a vector of integers containing the same elements but in\
    \ a random order.\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsefs0dlh.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsefs0dlh.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxtjlpwjc.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError:\
    \ attempt to access 0-element Array{Int64,1} at index [0]\n  Stacktrace:\n   [1]\
    \ getindex at ./array.jl:788 [inlined]\n   [2] rolling_max(::Array{Int64,1}) at\
    \ /tmp/tmpxtjlpwjc.jl:7\n   [3] top-level scope at /tmp/tmpxtjlpwjc.jl:18\n  \
    \ [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpxtjlpwjc.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpxtjlpwjc.jl:19\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4]\n  MethodError: Cannot `convert` an object of type\
    \ Int64 to an object of type Array{Int64,1}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::AbstractArray) where T<:Array at array.jl:533\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n    convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] rolling_max(::Array{Int64,1}) at /tmp/tmpxtjlpwjc.jl:11\n\
    \   [2] top-level scope at /tmp/tmpxtjlpwjc.jl:19\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpxtjlpwjc.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpxtjlpwjc.jl:20\n  Test threw exception\n  Expression: candidate([4,\
    \ 3, 2, 1]) == [4, 4, 4, 4]\n  MethodError: Cannot `convert` an object of type\
    \ Int64 to an object of type Array{Int64,1}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::AbstractArray) where T<:Array at array.jl:533\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n    convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] rolling_max(::Array{Int64,1}) at /tmp/tmpxtjlpwjc.jl:11\n\
    \   [2] top-level scope at /tmp/tmpxtjlpwjc.jl:20\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpxtjlpwjc.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpxtjlpwjc.jl:21\n  Test threw exception\n  Expression: candidate([3,\
    \ 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n  MethodError: Cannot `convert` an object\
    \ of type Int64 to an object of type Array{Int64,1}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] rolling_max(::Array{Int64,1}) at /tmp/tmpxtjlpwjc.jl:11\n\
    \   [2] top-level scope at /tmp/tmpxtjlpwjc.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpxtjlpwjc.jl:17\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxtjlpwjc.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[1]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    rolling_max\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprr8a41uk.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprr8a41uk.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    return rolling_max\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = rolling_max;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
    \ 2, 3, 4]) == [1, 2, 3, 4])\n\t@test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\
    \t@test(candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpw4i35c8a.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpw4i35c8a.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" From a given list of integers, generate a list of rolling maximum\
    \ element found until given moment\n    in the sequence.\n    >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64}\
    \ \n    rolling_max = numbers[end]\n    for n in numbers[2:end]\n        rolling_max\
    \ = max(rolling_max, n)\n    end\n    rolling_max\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = rolling_max;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([1, 2, 3, 4]) == [1, 2, 3, 4])\n\t\
    @test(candidate([4, 3, 2, 1]) == [4, 4, 4, 4])\n\t@test(candidate([3, 2, 3, 100,\
    \ 3]) == [3, 3, 3, 100, 100])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpku6njia0.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpku6njia0.jl:13\n"
  exit_code: 1
  status: Exception
